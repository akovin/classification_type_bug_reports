1235526932,Snapshot's in xhr requests for absolute URLs take a snapshot of the primary instead of the current domain,,bug
1235525235,cy.pause in cy.origin,,bug
1234298800,cy.origin test hangs when visiting inside a cy.origin block,"### Current behavior

A simple test to visit cypress.io in a cypress.io `cy.origin` block hangs.

### Desired behavior

The test should not hang.

### Test code to reproduce

```javascript
it('navigates', () => {
  cy.origin('https://www.cypress.io/', () => {
    cy.visit('https://www.cypress.io/')
    cy.url().should('eq', 'https://www.cypress.io/')
  })
})
```

### Cypress Version

9.6.1

### Other

_No response_",bug
1233200231,Multiple zombie processes when running Cypress inside the Docker with Node,"### Current behavior

When running Cypress tests in an infinite loop inside a docker container and starting the test script with `node cypress.js`, we can see a huge amount of zombie (`<defunct>`) processes. 
When starting the same cypress-test.js file inside the docker container by using a shell script - all child processes are killed correctly, so no zombies are left.
Due to this bug, it is impossible to run cypress tests using 'pm2' or 'node' inside a docker container. At one point all processes just stop, because no free PID is left, so no new process can be started.

Tested with Cypress Version: 7.7.0, 9.6.1

### Desired behavior

No <defunct> zombie processes should appear, when running cypress tests synchronously inside a docker container by using `ENTRYPOINT [ ""node"", ""./cypress-test.js"" ]`

### Test code to reproduce

**Dockerfile:**

```
FROM cypress/browsers:node14.16.0-chrome90-ff88

RUN mkdir /opt/prj/
WORKDIR /opt/prj/
COPY package.json package-lock.json *node_modules /opt/prj/

RUN npm install
RUN $(npm bin)/cypress verify

COPY . /opt/prj/
ENTRYPOINT [ ""node"", ""./cypress-test.js"" ]
```


**cypress-test.js:**
```
const cypress = require('cypress');
const TEST_FOLDER_PATH = process.cwd() + '/cypress/integration/test/';

(async () => {
    while (true) {
        const result = await cypress.run({
            spec: TEST_FOLDER_PATH + 'test.spec.js',
            video: false
        });
    }
})();
```

**/cypress/integration/test/test.spec.js**
```
describe('Test', () => {
    it('should be true', () => {
        expect(1).to.equal(1);
    });
});

```
**cypress.json**
```
{
  ""pluginsFile"": ""cypress/plugins/index.js"",
  ""retries"": {
    ""runMode"": 1,
    ""openMode"": 0
  },
  ""defaultCommandTimeout"": 15000,
  ""video"": false,
  ""videoCompression"": false,
  ""videoUploadOnPasses"": false,
  ""viewportWidth"": 1280,
  ""viewportHeight"": 720
}

```
Start docker:
```
> docker build . -t cypress
> docker run cypress
```
Look up the name of the running docker container and execute:
```
> docker exec -it <container_name> bash
> ps aux
```

<img width=""948"" alt=""Bildschirmfoto 2022-05-11 um 23 18 57"" src=""https://user-images.githubusercontent.com/11724048/167949489-817dd765-2236-4343-9d2a-6abc6d001349.png"">

_______________________________________________________________________________________________
___________________ EXAMPLE WITH NO ZOMBIES____________________________________________
When replacing the ENTRYPOINT in the Dockerfile with:
```
RUN [""chmod"", ""+x"", ""/opt/prj/commands.sh""]
ENTRYPOINT [ ""./commands.sh"" ]
```

**commands.sh**
```
#!/bin/bash
node cypress-tests.js
```

NO Zombies

<img width=""1747"" alt=""Bildschirmfoto 2022-05-11 um 23 26 43"" src=""https://user-images.githubusercontent.com/11724048/167950541-417002d3-55b9-42d2-a054-1478b95a49f7.png"">

### Cypress Version

7.7.0, 9.6.1

### Other

_No response_",bug
1231537453,Tests finish without running all commands if Error is not a constructor,"### Current behavior

I have noticed this rare but unfortunate behavior, same was noticed by other people on my team.
Sometimes a test passes, but when you look at it, it is missing lots of commands, as if it exited early. 
For example the test below should have a lot more commands, yet it has finished already somehow

<img width=""845"" alt=""err1"" src=""https://user-images.githubusercontent.com/2212006/167695885-90111c2c-f905-47dc-a745-50cc0b060b1c.png"">

When poking around, I noticed the Devtools is showing an error that is NOT reflected in the Command Log ""ErrorConstructor is not a constructor"" Seems somehow the `specWidow.Error` can be undefined, which causes a problem when we grab the user stack

<img width=""602"" alt=""err2"" src=""https://user-images.githubusercontent.com/2212006/167696220-8df54c74-3cf1-4e2b-a579-6888b40b536f.png"">

The error can be thrown only inside

```js
const captureUserInvocationStack = (ErrorConstructor, userInvocationStack) => {
  if (!userInvocationStack) {
    const newErr = new ErrorConstructor('userInvocationStack');
    userInvocationStack = newErr.stack; // if browser natively supports Error.captureStackTrace, use it (chrome) (must be bound)
    // otherwise use our polyfill on top.Error

    const captureStackTrace = ErrorConstructor.captureStackTrace ? ErrorConstructor.captureStackTrace.bind(ErrorConstructor) : Error.captureStackTrace;
    captureStackTrace(newErr, captureUserInvocationStack); // On Chrome 99+, captureStackTrace strips away the whole stack,
    // leaving nothing beyond the error message. If we get back a single line
    // (just the error message with no stack trace), then use the original value
    // instead of the trimmed one.

    if (newErr.stack.match('\n')) {
      userInvocationStack = newErr.stack;
    }
  }

  userInvocationStack = normalizedUserInvocationStack(userInvocationStack);
  return userInvocationStack;
};
```

Which receives the `ErrorConstructor` from its callers, but does not check if it is defined or a function before calling `new ...`

A few more places from the stack that call this function
<img width=""1070"" alt=""err3"" src=""https://user-images.githubusercontent.com/2212006/167696488-1b69d3a5-c862-4a23-b68a-d37dc17de6c3.png"">
<img width=""1790"" alt=""err4"" src=""https://user-images.githubusercontent.com/2212006/167696492-619038a5-40a3-4ff8-a310-3d44d5d5486a.png"">

A conditional breakpoint worked to stop there on undefined `Error` argument
<img width=""756"" alt=""err5"" src=""https://user-images.githubusercontent.com/2212006/167696596-5a6dce05-b9ee-4a19-a7c0-27e5d1754375.png"">

<img width=""1536"" alt=""err7"" src=""https://user-images.githubusercontent.com/2212006/167696620-866f386f-e0d7-47bb-b866-8ad4ee4d99c4.png"">


### Desired behavior

This is very rare but happens and is very concerning. Especially since it lowers the confidence in the passing tests. 
What I would like to do is a simple guard: if there is no `ErrorConstructor`, do not try to use it. Having no stack is preferred to skipping the rest of the test with PASS status.

### Test code to reproduce

Really don't know, since this function is called a lot at the start of the test. 
I will try to trace it better, but a little defensive programming would not hurt still

### Cypress Version

I have seen it in v8 and v9

### Other

_No response_",bug
1230835001,Request body sometimes not displayed in console props for xhr request,"### Current behavior

#21361 being fixed is a step forward, but the _request_ body still isn't displayed in the console props for certain xhr requests:
![image](https://user-images.githubusercontent.com/36038882/167589090-f0eefb25-bb95-4a1d-b287-f6037fb0fd3b.png)


### Desired behavior

When an xhr request has a body, it should always be displayed in the console props

### Test code to reproduce

```js
it('', () => {
  cy.visit('http://automationpractice.com/index.php?controller=authentication&back=my-account')
  cy.get('#email_create').type('a@b{enter}')
})
```
When the test has finished, open the console and click the `POST 200 /index.php` request at the bottom of the runner log. Note that I do not own or control this website. It appears to be flaky sometimes; if that happens, please try again after a few minutes.

### Cypress Version

9.6.1

### Other

_No response_",bug
1228736626,Some elements are not loaded while running page in chrome via cypress,"### Current behavior

Hi, after running ""npx cypress open"" the image and ""bag"" icon(web element) cannot be loaded when page is opened in Chrome. Actually, it seems that the website behaves differently, like that some actions doesn't work. For example adding to bag functionality behaves very strange on my web shop site. However, if I visit the same page on Chrome manually without Cypress everything loads very fast.

![image](https://user-images.githubusercontent.com/105131708/167273244-f2d658b4-f046-4331-b802-c6ebd821fa74.png)

![image](https://user-images.githubusercontent.com/105131708/167273292-ff185aae-6719-4eb6-aed9-6fee4b4a85e6.png)


These are the errors I see in the console. Maybe it is something that has to do with this:

Failed to load resource: net::ERR_SSL_SERVER_CERT_BAD_FORMAT

Uncaught TypeError: Cannot read properties of undefined (reading 'filter')

Uncaught TypeError: Cannot read properties of undefined (reading 'filter')
    at HTMLDocument.<anonymous> (search.js:570:1)
    at i (jquery.js:1037:1)
    at Object.fireWith [as resolveWith] (jquery.js:1148:1)
    at Function.ready (jquery.js:433:1)
    at HTMLDocument.t (jquery.js:103:1)

All these errors doesn't exist if I visit the same page manually in Chrome. 

### Desired behavior

![image](https://user-images.githubusercontent.com/105131708/167273338-ce42c173-2777-4d95-b02e-172719d107e2.png)


This is the behavior when I run the website manually in Chrome. Everything works as expected in that case.

### Test code to reproduce

describe('Shopping bag tests', () => {

    beforeEach(() =>{
        cy.visit('https://www.localhost:443/')
    })

    it('Add product in a bag', () => {

        cy.get('input[type=""search""]').type('adidas shoes').type('{enter}')
        cy.xpath('//ul[@id=""navlist""]/li[1]').click()
        cy.get('#lblProductBrand').should('contain.text', 'adidas')
        const price = cy.get('#lblSellingPrice')
        price.contains('£')

        cy.get('#ProductQty').clear().type('2')
        cy.get('#aAddToBag').click()
        cy.get('#divBagItems').should('be.visible')
        cy.wait(8000)
        cy.get('#divBagItems').should('not.be.visible')
    })




Test failed at step  cy.get('#divBagItems').should('be.visible')  because bag popup should appear but it seems that nothing happened after clicking to ""add to bag"" button. Actually, the application behaves differently when I run it via Cypress.


### Cypress Version

9.5.2

### Other

_No response_",bug
1228225945,Styles dont render in pinned DOM snapshots when running in GUI mode with CSP enabled,"### Current behavior

When running cypress tests in GUI mode against a page with a content-security-policy (csp) such as
```
<meta http-equiv=""Content-Security-Policy"" content=""default-src 'self';"">
```

The tests appear to run fine, and the html page loads correctly with all the correct styling. However, you do see csp violations if you have the console open, and if you try to hover/pin a DOM snapshot from the cypress GUI test panel, those snapshots fail to load styles due to a csp violation ""trying to apply inline style"" for `cypress_runner.js`. See repro https://github.com/darrinmn9/cypress-example-recipes/pull/1 for screenshots of issue.


### Desired behavior

From my understanding of reading related csp issues, I believe cypress strips the csp meta tag before running tests since currently there is no support for running them with csp enabled. but I do still see this csp `<meta>` tag inside the `iframe` of my mounted html page in the cypress GUI. (correct me if im wrong here)

The desired behavior is that pinned DOM screenshots would work and render styles correctly, just like the main page in the test GUI does. Ideally you shouldnt see any csp errors in the console output.

### Test code to reproduce

https://github.com/darrinmn9/cypress-example-recipes/pull/1

### Cypress Version

9.6.0

### Other

_No response_",bug
1227422293,Cypress 9.6.0- Unable to login to applications via Github using cy.origin,"### Current behavior

I am trying to use cy.origin to login to CircleCi(https://circleci.com/vcs-authorize/). Also, have 2Factor disabled on my GitHub Id. **My login is successful and authorized via GitHub but after then it is failing to redirect me to the CircleCi dashboard**(https://app.circleci.com/).

A similar issue is happening on Netlify. I am able to login to github from cy.origin but then it is not redirecting me to the netlify home page(https://app.netlify.com/).

I am trying to replicate what is mentioned in the cypress blog. It is mentioned that cy.origin can be used for third part login such as Auth0 and Github. I need your investigation.

https://cypress.io/blog/2022/04/25/cypress-9-6-0-easily-test-multi-domain-workflows-with-cy-origin/
<img width=""1792"" alt=""Screenshot 2022-05-05 at 6 12 14 PM"" src=""https://user-images.githubusercontent.com/5313625/167069206-1adde94d-9b30-4ca9-8d86-bb4266eb2fa2.png"">

<img width=""1792"" alt=""Screenshot 2022-05-05 at 6 18 33 PM"" src=""https://user-images.githubusercontent.com/5313625/167069236-f063569f-6502-47e2-b428-d436d7f885a5.png"">


### Desired behavior

After successful login from Github, user should be redirected to the application under test. 


### Test code to reproduce

```javascript
describe(""Test visiting multiple domains in single test"", () => 

  it(""should login to circle ci with github"", () => {
    //visit circleci login page
    cy.visit(""https://circleci.com/vcs-authorize/"");

    //click on sign in link
    cy.contains(""Log In with GitHub"").click({ force: true });

    //click on 'login with Github' button
    cy.origin(""https://github.com"", () => {
      cy.get(""#login_field"").type(""************"");
      cy.get(""#password"").type(""********"");
      cy.get(""input"").contains(""Sign in"").click();
    });

    // should load circleci app with logged in user
    cy.url().should(""contain"", ""https://app.circleci.com/"");
  });

  it(""should login to netlify with github"", () => {
    //visit netlify
    cy.visit(""https://www.netlify.com/"");
    
    // click on menu option
    cy.get("".icon-hamburger"").click({ force: true });

    //click on login 
    cy.contains(""Log in"").click({ force: true });
   
    //click on 'login with Github' button
    cy.contains(""GitHub"").click({ force: true });

    //enter login credentials for github
    cy.origin(""https://github.com"", () => {
      cy.get(""#login_field"").type(""************"");
      cy.get(""#password"").type(""********"");
      cy.get(""input"").contains(""Sign in"").click();
      cy.wait(10000);
    });

    // should load netlify app with logged in user
    cy.url().should(""contain"", ""https://app.netlify.com/"");
  });
});

```

### Cypress Version

9.6.0

### Other

_No response_",bug
1227269529,Response body sometimes not displayed in console props for xhr request,"### Current behavior

The response body is not always displayed in the console props for xhr requests. There appears to be a race condition between the xhr request finishing and the proxy sending the `response:received` event.

Proxy sends the `response:received` event:
https://github.com/cypress-io/cypress/blob/aa6f3b8039495ac37ced4ac581129a020ba66fa4/packages/proxy/lib/http/request-middleware.ts#L51-L57
Call made to update the console props after receiving the event:
https://github.com/cypress-io/cypress/blob/aa6f3b8039495ac37ced4ac581129a020ba66fa4/packages/driver/src/cypress/proxy-logging.ts#L336
Console props are updated with the xhr values. However, if the xhr isn't fully complete (i.e. readystate === DONE), then these values are not valid.
https://github.com/cypress-io/cypress/blob/aa6f3b8039495ac37ced4ac581129a020ba66fa4/packages/driver/src/cypress/proxy-logging.ts#L226-L231

This is causing flake in the following test:
<img width=""811"" alt=""Screen Shot 2022-05-05 at 4 50 41 PM"" src=""https://user-images.githubusercontent.com/2002044/167038039-1b4b9cb2-fce7-412a-85d5-fa93715660fa.png"">

### Correct console props:
<img width=""1655"" alt=""Screen Shot 2022-05-05 at 4 22 27 PM"" src=""https://user-images.githubusercontent.com/2002044/167034875-b0735a6b-1ace-4141-9e5c-fe194585091d.png"">

### Incorrect console props:
<img width=""1655"" alt=""Screen Shot 2022-05-05 at 4 21 02 PM"" src=""https://user-images.githubusercontent.com/2002044/167034783-34ec1824-8437-4047-a0b0-d48808fc4299.png"">

### Desired behavior

Console props always contains the xhr response body.

### Test code to reproduce

Run the following test multiple times until it fails:

https://github.com/cypress-io/cypress/blob/aa6f3b8039495ac37ced4ac581129a020ba66fa4/packages/driver/cypress/integration/cypress/proxy-logging_spec.ts#L153

### Cypress Version

develop

### Other

_No response_",bug
1227080861,Setting `port` in configuration to a port that is in use causes the AUT to not display,"### Current behavior

I'm not even sure what we could do about this, but logging here since someone mentioned it. 

<img width=""1386"" alt=""Screen Shot 2022-05-05 at 1 48 30 PM"" src=""https://user-images.githubusercontent.com/1271364/167009393-e72955ce-cee5-422d-8432-fea2e5c95b08.png"">


### Desired behavior

_No response_

### Test code to reproduce

```json
{
  ""port"": 8080
}
```

Also have an app running in 8080. 

### Cypress Version

9.6.0

### Other

_No response_",bug
1225675386,"{downArrow} on input type ""number"" inconsistent across browsers","### Current behavior

I have a form field of `type=number` that should only allow positive numbers. I set the `min-tag` to `1` so that when you click the little down-arrow in the field, or fill in the field with the down-arrow-key, it won't change the field value to less than `1`.

The test I wrote passes on firefox, but not on electron. On electron nothing gets typed in the field

![Screenshot from 2022-05-04 19-18-01](https://user-images.githubusercontent.com/14757801/166744324-5f4165ef-c843-4e18-8e09-a096efa24b32.png)
![Screenshot from 2022-05-04 19-21-20](https://user-images.githubusercontent.com/14757801/166744232-7c104b59-3a82-4690-9cdb-afbf9c35f394.png)



### Desired behavior

The test should either pass in electron, or, if I am misusing the `{downArrow}` syntax, it should fail in firefox. 

### Test code to reproduce

To test the behavior I wrote:

```
 cy.get(sel(""input-working_hours""))
   .type(""{downArrow}{downArrow}"")
   .should(""have.value"", 1);
```
where the first `{downArrow}` changes the empty value to `1` and the second `{downArrow}` does nothing, as intended. (in firefox)

The input field is a  simple `<input name=""working_hours"" type=""number"" min=""1"" data-testid=""input-working_hours"">`

### Cypress Version

^8.7.0

### Other

electron 93
firefox 98",bug
1225170212,@cypress/schematic: can't `run` in headed mode,"### Current behavior

Even when passing `headless: false` in `angular.json`, I can't find a way to set the `headed` flag on the actual runner.

### Desired behavior

Not setting `headless` or setting it explicitly to `false` through the builder should open cypress in headed mode

### Test code to reproduce

```sh
ng e2e --headless=false # Note that this is the default
```

### Cypress Version

9.6.0, but also affects ~9.5.x

### Other

https://github.com/cypress-io/cypress/blob/cb14ae62e7c4362d759ceb450f4af518ee486f90/npm/cypress-schematic/src/builders/cypress/index.ts#L70-L75

It seems that there is no way to actually set the `headed` flag explicitly. I kind-of fixed it by patching the schematic with this: 

```patch

--- a/node_modules/@cypress/schematic/src/builders/cypress/index.js
+++ b/node_modules/@cypress/schematic/src/builders/cypress/index.js
@@ -36,7 +36,8 @@ function initCypress(userOptions) {
     };
     const options = Object.assign(Object.assign(Object.assign({}, defaultOptions), userOptions), { 
         //@ts-ignore
-        dev: process.env.CYPRESS_ENV === 'test' });
+        dev: process.env.CYPRESS_ENV === 'test', headed: !userOptions.headless });
+        console.log(options)
     if (userOptions.configFile === undefined) {
         options.config = {};
     }
```",bug
1225022944,Cypress env is undefined after visiting page,"### Current behavior

I am creating some ENVs in my test. These are also known and set correctly. However, when I visit a page or something similar, the ENVs are suddenly ""undefined"".

![image](https://user-images.githubusercontent.com/65551807/166639461-fc23ab6c-ca0f-48eb-a195-b1fb8b5b655f.png)

As you can see first the ENV is set and in the next step it's value is recognized correctly.
After the second test file visits a page, the ENVs are all undefined.

Also, I found out that the ENVs are known when I don't visit a page in the second file and they are also known when I restart the test via the restart button after I started the test. If I close the browser and then run the test again, Cypress does not know the ENVs again on the first run.


### Desired behavior

I want Cypress to know the values of the ENVs throughout the test.

### Test code to reproduce

Test file 2:
```js
describe('00_einrichten',() => {

    it('Create ENVs', () => {
        const date1 = new Date()    
        const registerDate = date1.getTime()  
        Cypress.env('registerUsername', String(registerDate) + ""@example.com"")
        cy.log(Cypress.env('registerUsername'))
    })

    it('Registrieren', () => {
		expect(Cypress.env('registerUsername')).to.be.a('string').not.empty;
    })

})
```
Test file 2:
```js
describe('00_einrichten',() => {

    it('Google', () => {
		cy.visit('https://google.com')
	})

    it('Registrieren', () => {
		expect(Cypress.env('registerUsername')).to.be.a('string').not.empty;
    })

})
```

All other files were not changed by me.

### Cypress Version

9.6.0

### Other

_No response_",bug
1224359350,Launching Cypress with the --dev flag throws an error,"### Current behavior

`--dev` is shown as a flag that can be used in the `--help` menu, but it errors when you try to use it on a released version.

<img width=""1047"" alt=""Screen Shot 2022-05-03 at 11 59 39 AM"" src=""https://user-images.githubusercontent.com/1271364/166802240-b3cdc235-d120-4696-9028-2cfab5de4242.png"">


### Desired behavior

_No response_

### Test code to reproduce

Run `cypress open --dev`

### Cypress Version

9.6.0

### Other

_No response_",bug
1224333069,[Spike] Investigate increased memory usage with recent Firefox versions (98+),"### Current behavior

When updating our internal CI image to run with Firefox 98, one of our existing builds started timing out/crashing due to a lack of resources. [Example](https://app.circleci.com/pipelines/github/cypress-io/cypress/36853/workflows/0372af92-795e-47b2-9579-d93749d37827/jobs/1478739)

I was able to trace this increase back to a commit and gather some metrics before/after it was merged:

Spec ran: [runner/cypress/integration/reporter.errors.spec.js](https://github.com/cypress-io/cypress/blob/develop/packages/runner/cypress/integration/reporter.errors.spec.js)
OS: macOS Monterey
System: i9 / 16GB total RAM

Commit: 0bb655e379 |   |   | RAM (GB) |   |   |  
-- | -- | -- | -- | -- | -- | --
  | Run 1 | Run 2 | Run 3 | Run 4 | Run 5 | Avg
Firefox 99 | 2.55 | 2.53 | 2.59 | 2.68 | 2.43 | 2.556
Firefox 99 (numTestsKeptInMemory=0) | 1.39 | 1.18 | 0.953 | 1.32 | 1.29 | 1.2266
Chrome 101 | 1.55 | 1.69 | 1.74 | 1.59 | 1.6 | 1.634
Chrome 101 (numTestsKeptInMemory=0) | 1.13 | 1.12 | 1.14 | 1.15 | 1.12 | 1.132

Commit: 676fc97f46 |   |   | RAM (GB) |   |   |   |  
-- | -- | -- | -- | -- | -- | -- | --
  | Run 1 | Run 2 | Run 3 | Run 4 | Run 5 | Avg | % Increase
Firefox 99 | 3.52 | 3.5 | 3.53 | 3.51 | 3.52 | 3.516 | 37.56
Firefox 99 (numTestsKeptInMemory=0) | 3.19 | 3.28 | 3.21 | 3.25 | 3.23 | 3.232 | 163 (❗)
Chrome 101 | 1.63 | 1.58 | 1.66 | 1.59 | 1.59 | 1.61 | -1.5
Chrome 101 (numTestsKeptInMemory=0) | 1.27 | 1.28 | 1.26 | 1.27 | 1.26 | 1.268 | 12.01

To summarize, with 676fc97f46 (the origin feature branch merge) we start using a lot more memory with FF99. Chrome 101 stays relatively stable. 

That spec file has 83 individual tests in it, and its snapshots can be quite large. So I also recorded runs with the `numTestsKeptInMemory` config value set to 0 to see what impact it had on memory usage. You can see that with 0bb655e379, setting that config property had a significant impact on FF99 and cut its usage in half; however, it had a minimal effect on 676fc97f46. It also had a decreased effect with Chrome 101 on 676fc97f46, with usage up 12% from the previous commit.

We should track down where/why this memory is being held.

### Desired behavior

We don't consume more memory than we have to when running with Firefox.

### Test code to reproduce

1. Checkout cypress
2. Run `yarn cypress:open`
3. Run  [runner/cypress/integration/reporter.errors.spec.js](https://github.com/cypress-io/cypress/blob/develop/packages/runner/cypress/integration/reporter.errors.spec.js) in various browsers
4. Look at held memory after run completes

### Cypress Version

9.6.0

### Other

_No response_",bug
1224179227,Escape input event is ignored when using `cy.type('{esc}')`,"### Current behavior

If the escape key has been implemented with functionality that changes the text of an input field (i.e. hitting escape when focused on an input field clears the text in the input), this behavior is not replicated correctly when using cy.type('{esc}').

The Escape input event is being ignored at this line: https://github.com/cypress-io/cypress/blob/6e03e020682e73e0e5480fe010fe818fce488205/packages/driver/src/cy/keyboard.ts#L1315-L1316

because input is getting set to `false` here: https://github.com/cypress-io/cypress/blob/6e03e020682e73e0e5480fe010fe818fce488205/packages/driver/src/cy/keyboard.ts#L1264-L1269

because the Escape event doesn't have a `text` field associaed with it so `shouldUpdateValue` is returning false (even though in this specific case, we want Escape to be able to update the value).



### Desired behavior

`cy.type('{esc}')` should simulate the same behavior experienced by the user when hitting Escape manually.

### Test code to reproduce

Replace `realType()` with `type()` and the test will fail.

https://github.com/cypress-io/cypress/blob/6750d33b46dbb2ca40c6af6bcf67ca6d09c6b868/packages/app/cypress/e2e/specs_list_e2e.cy.ts#L168-L178

### Cypress Version

10.0.0

### Other

_No response_",bug
1223407495,Visiting a cross origin page with a `cy.origin` command with no cy commands may cause subsequent tests to hang.,"### Current behavior

Since we no longer wait for stability before ending a test test we may now end up in a race condition where an unload event initiated in a previous test will occur in a subsequent test, setting stability to false. If that load event happens for a cross origin page the test will hang, forever since stability won't be set back to true.

It was assumed that setting the iframes src to the `about:blank` page would cancel any current load events happening within the iframe, but the opposite appears to be true, if the iframe is currently loading

### Desired behavior

The second test should not hang based on commands run in the first test.

I believe we have to options to fix this, one more extreme than the other.

1. Wait for stability prior to loading the about blank page in [sessions/index](https://github.com/cypress-io/cypress/blob/develop/packages/driver/src/cy/commands/sessions/index.ts#L321). To achieve stability here, we will have know which spec bridge to continue to listen too and persist that state between tests. Currently this is handled within tests by the `latestActiveOriginPolicy` state, but that is cleared between tests. See relevant [event-manager lines](https://github.com/cypress-io/cypress/blob/develop/packages/runner-shared/src/event-manager.js#L538)

2. Revert the change that allows us to proceed in the event manager regardless of stability and instead allow `cy.visit` to successfully load cross-origin pages. This requires more investigation, but would have the dual effects of making it less confusing to visit pages (you could visit a cross origin page prior to entering a cy.origin block and allow us to remove code around syncing stability as you could not exit the command queue without being stable. Any any commands run after a visit would have to run against the correct origin. The downside of this approach would be that again, we'd be waiting on stability before exiting mocha blocks (but we've seen what not waiting can do) and we'd have to error in `cy.visit`s on load functions if someone attempts to run them against a cross origin url. On loads would also have to be setup prior to visiting.

### Test code to reproduce

The following test can be used to reproduce this issue in the 'driver' package of the cypress repo. This is most easily reproduced on firefox, but has also been observed on chrome.

```javascript
// The first test executes fast enough that the onunload event occurs at the beginning of the second test.
it.only('runs', () => {
  cy.visit('/fixtures/primary-origin.html')
  cy.get('a[data-cy=""cross-origin-secondary-link""]').click()
  cy.origin('http://foobar.com:3500', () => {
    expect(true).to.equal(true)
  })
})

it.only('it hangs', () => {
  cy.log('you will not see me')
})
```

### Cypress Version

9.6.0

### Other

_No response_",bug
1221476445,cy.screenshot() return Type is always Chainable<null> even though yields previous element when chained,"### Current behavior

Incorrect typing: `cy.screenshot()` indicates that the return type is always `Chainable<null>` even though when chained from an element (i.e. `cy.get('input').screenshot('the input')`) it yields the chained subject. This is inconsistent with functionality, and inconsistent with the `cy.screenshot()` documentation that claims it yields the passed subject.

### Desired behavior

Have correct type for cy.screenshot() when chained

### Test code to reproduce

cy.get('input').screenshot('the input').then((inputElement)=>{
    cy.wrap(inputElement)  // typescript indicates inputElement is null even though it is not.
})

### Cypress Version

9.6.0

### Other

_No response_",bug
1221396428,STOP button in Test runner doesn't stop multiple test retries,"### Current behavior

I have set up **retries :1**, so when any test fails, it will retry the same test again. This is normally working fine, but: In Cypress test runner when some step fails and I immediately press STOP, then the second attempt is still starting, even I have stopped the test execution. This is quite annoying, because after failure I press stop and I am analyzing the cause of failure, but as the second attempt is starting and ignoring that I pressed stop, it will close the Attempt1 section and shows the same failure in second Attempt section.

### Desired behavior

In Test runner, after I click the STOP button, the test execution should immediately STOP, and no other retries should start.

### Test code to reproduce

This is a general issue with the Test runner, not related to any specific code.

### Cypress Version

9.6.0

### Other

_No response_",bug
1221145875,PDF inside iframe not showing in chrome,"### Current behavior

According to the comments made by @jennifer-shehane in #2835 , PDFs loaded within iframes used to work in chrome in the past, but they don't now.

<img width=""1144"" alt=""Screen Shot 2022-04-29 at 12 50 40 PM"" src=""https://user-images.githubusercontent.com/4582440/165979684-06aa8072-7ae7-4501-8f97-d309578107d4.png"">

I'm using cypress 9.6 with chrome 100. This works fine if I instead choose edge (101) or firefox (98).

### Desired behavior

_No response_

### Test code to reproduce

Clone [this example repo](https://github.com/jennifer-shehane/cypress-pdf-problem) by @jennifer-shehane and do:

```bash
$ npm install
$ npm install cypress@9.6
$ npm run cypress:open
```

Select Chrome (I'm using v100) and run the test. You'll see something like my screenshot above instead of seeing the PDF inside the `iframe`.

### Cypress Version

9.6

### Other

_No response_",bug
1221015878,CYPRESS_NO_COMMAND_LOG=1 leaves faulty empty space,"### Current behavior

Hello, currently when running `CYPRESS_NO_COMMAND_LOG=1 npm run cy:open` and opening any test - there is some space left where Test Runner Command Log should be. Probably because of reporter

![Screenshot 2022-04-28 at 17 33 43](https://user-images.githubusercontent.com/77224571/165777677-0ea3577c-a132-4f65-82c1-480339efb369.png)

Probably empty space is left there because `<div class=""reporter-wrap"" style=""left: 0px;""></div>` is not deleted. If to delete it and resize the Test Runner window - empty space will disappear.

https://user-images.githubusercontent.com/77224571/165968558-71fa981b-70ca-44a5-aec1-bf55b118b6fe.mov




### Desired behavior

There is no space left where Test Runner Command Log should be when using `CYPRESS_NO_COMMAND_LOG=1` environment variable:
![Screenshot 2022-04-28 at 17 40 19](https://user-images.githubusercontent.com/77224571/165778113-d7e6b449-10cc-48b3-9c4c-e98289f38837.png)
 

### Test code to reproduce

Should be reproducible anywhere, I tested it on the fresh 9.6.0 Cypress project with getting started examples.

### Cypress Version

8.7.0, 9.6.0",bug
1220819892,Cypress no longer auto reloading when updating cypress.json,"### Current behavior

Previously when the Cypress.json file was updated Cypress would refresh and update the new settings.  This is no longer happening since approximately Cypress 9.3/9.4 (possibly earlier) and I can't see anything in the release notes to indicate that it is an intentional change.

The work around is to manually close and reopen cypress every time you update environment variables.  Which is much more time consuming

### Desired behavior

Previous functionality returned so when updating Cypress.json cypress refreshes and utilises the updated environment variables / settings

### Test code to reproduce

update the base url or a setting such as the experimentalSessionAndOrigin flag and save cypress.json

### Cypress Version

9.6.0

### Other

_No response_",bug
1210952852,Element (position: fixed) should not be considered hidden if covered up by a non-hidden element,"### Current behavior

Given that we have an element, identified by `menu`, that is `position: fixed`
And there is a modal container element, identified by `modal`, covering entire screen (`position: absolute; width: 100vw; height: 100vh`) but currently closed (or hidden, either `opacity: 0` or `visibility: hidden` or `display: none`)
Then running test `cy.get('menu').should('be.visible')` throws an error
```
This element <div#menu> is not visible because it has CSS property: position: fixed and it's being covered by another element:

<div id=""modal"" style=""opacity: 0"">
```

This is ok according to the cypress spec and doc saying : 

An element is considered hidden if its CSS property is position: fixed and it's offscreen or covered up


### Desired behavior

I find this spec misses an important check, that should be : 

An element is considered hidden if its CSS property is position: fixed and it's offscreen or covered up **_by a non-hidden element_**

In my case the modal is not opened (hidden). The browser itself let me interact with the menu, so cypress should ""see"" the same and say that this menu is visible.

### Test code to reproduce

Here is a codesandbox link to small react app showing this case : https://codesandbox.io/s/bold-darwin-5rgt6f
I was not able to make cypress run on it, but the idea is there.

### Cypress Version

9.5.0

### Other

Actually, in production we use Material UI with a Modal component having `keepMounted: true` for custom animation reason: https://mui.com/material-ui/api/modal/

We have this left side menu with `position: fixed` in the main content of the page, and a right side content scrolling, as shown in codesandbox.

So, the modal is always in DOM, even when it's closed (due to keepMounted: true), on top of anything and detached from the main content (position: absolute, z-index: 1000, fullscreen etc...). The only thing that makes it hidden is opacity: 0 and/or visibility: hidden

Due to this current cypress specification, we are unable to write a test to assert that the side menu is visible. Cypress believes that the modal covers everything. No matter if it's open or closed (visible or hidden).


Related : https://github.com/cypress-io/cypress/issues/19204",bug
1209865803,`blockHosts` test configuration override failing to apply,"### Current behavior

Hello, I've been troubleshooting some strange behavior when leveraging the [`blockHosts`](https://docs.cypress.io/guides/references/configuration#blockHosts) configuration value and overriding the value with the [Test Specific Configuration](https://docs.cypress.io/guides/references/configuration#Test-specific-Configuration) options.

Steps/setup:
1. `blockHosts` entry is added to the `cypress.json` configuration file as a string value (also tried an array with single string)
2. added an override for a test suite to set the `blockHosts` entry to `null` (the default) `describe('my suite', {blockHosts: null}, () => {});`

Current setup:
```js
// cypress.json
{ ""blockHosts"": ""*.pendo.io"" }

// integration/my-suite.test.js
describe('my suite', {blockHosts: ''}, () => {});
```
The specific `my suite` test suite continues to block requests to `pendo.io`.

What I've identified thus far:
1. config is set properly (confirmed the settings GUI)
2. logged the `Cypress.config()` value and confirmed that `blockHosts` is mutated to be an empty string
4. The `x-cypress-matched-blocked-host` gets set with the original `blockHosts` value

<img width=""760"" alt=""Screen Shot 2022-04-20 at 9 50 45 AM"" src=""https://user-images.githubusercontent.com/477653/164261646-b47a5281-38bf-4814-9917-8aca3d343745.png"">

I have tried with various different values for the `blockHosts` and also tried using the `Cypress.config` API directly but experienced the same behavior. From my understanding the `blockHosts` [configuration value](https://docs.cypress.io/guides/references/configuration#Test-Configuration) is **not** one of the read only configuration options.

### Desired behavior

When providing `blockHosts` as a configuration value for a test suite, it **should** override the current `blockHosts` value and the cypress test **should** respect the new `blockHosts` value. This same override should be applicable using `Cypress.config('blockHosts', '')`

### Test code to reproduce

https://github.com/cbourdage/cypress-test-tiny/pull/1

<img width=""1081"" alt=""Screen Shot 2022-04-20 at 10 34 12 AM"" src=""https://user-images.githubusercontent.com/477653/164268872-e38ce1c8-076f-4002-90e4-c30cdc0890be.png"">

I have been able to replicate this in 2 repos now so you should be able to use any existing tests to try to override the `blockHosts` configuration option.

### Cypress Version

9.3.1

### Other

_No response_",bug
1208419785,Changing the visited page's location before onload event will make Cypress timeout,"### Current behavior

It seems that when the page being visited by Cypress attempts to change the location before the load event is triggered, Cypress will then wait forever for the load event, even after the new page has been fully loaded (maybe it waits for the first page to fire the load event ?).

### Desired behavior

Cypress shouldn't timeout when being redirected to a new page.

### Test code to reproduce


Page that's being visited:

```html
<!DOCTYPE html>
<html>
    <script type=""text/javascript"">
        // changing the page's location before the page has been loaded will make Cypress timeout
        // visiting the next page
        window.location.replace('https://warpdesign.fr/tests/another/')
    </script>
    <body>
        Redirect Test
    </body>
</html>
```

This simple test will trigger a timeout error when visiting the above page:


```js
/// <reference types=""cypress"" />
describe('page', () => {
  it('triggers a timeout error', () => {
    cy.visit('/index2.html')
  })
})
```

I made a repo to reproduce the problem: https://github.com/warpdesign/cypress-test-redirect-before-onload

- `timesout.spec.js`: the visited page updates `document.location` before the page has been loaded -> cypress times out
- `works.spec.js`: the visited page updates `document.location` after the page has been loaded -> no timeout

### Cypress Version

9.5.4

### Other

Also happens in 9.5.1",bug
1206303290,Unrecognized expression for regex that ends with `/=\s+[0-6]/` ,"### Current behavior

I have a `cy.contains()` call with the following:

```javascript
cy.contains(/[56]\s+-\s+[0-6]\s+=\s+[0-6]/);
```
And it fails with:

```
Error: Syntax error, unrecognized expression: :cy-contains('/[56]\s+-\s+[0-6]\s+='\s+[0-6']/'), [type='submit'][value~='/[56]\s+-\s+[0-6]\s+='\s+[0-6']/']
```

It looks like there are extra single quotes? I'm not sure. The minimal code that throws the same error is:

```javascript
cy.contains(/=\s+[0-6]/);
```

### Desired behavior

Should not throw Error ""Syntax error, unrecognized expression"".

### Test code to reproduce

https://github.com/asartalo/cypress-test-cy-contains-fail

### Cypress Version

9.5.4

### Other

_No response_",bug
1203543217,Cypress scrolls to element when page hides overflow and user would not be able to scroll,"### Current behavior

Currently Cypress scrolls to element when it is out of viewport and page hides overflow. In the below screenshots we have three elements. User can see and reach the yellow button when the screen is big enough. But when it is smaller they can't reach it. In the second case Cypress scrolls to the yellow button and finds it and interacts with it even though the user would not be able to do that.

Yellow button can be seen and interacted with here:
![yellow_button_shown](https://user-images.githubusercontent.com/27669053/163226335-7056cb7e-7e43-433d-a2f1-6d31df8299df.png)

User can't see or interact with the yellow button:
![yellow_button_unreachable_by_user](https://user-images.githubusercontent.com/27669053/163226330-9d140118-e8c6-4cc2-96cd-cc5e2b5e1c5c.png)
 

### Desired behavior

In this situation Cypress should not be able to find and interact with the yellow button when the screen is small because a real user wouldn't be able to do that either. They have no means to scroll to it. This is a problem, because there could be a bug in the page that could put elements outside of reach of user, but Cypress would still find them and be able to interact with them thus we would not be able to find the bug with Cypress.

### Test code to reproduce

HTML:

```
<!DOCTYPE html>
<html>
<style>
.elementBase {
    position: absolute;
    top: 70px;
    width: 60px;
    height: 30px;
}
.button1 {
    background: red;
    left: 20px;
}
.button2 {
    background: green;
    left: 100px;
}
.overlay2 {
    background: blue;
    left: 100px;
}
.button3 {
    background: purple;
    left: 200px;
    visibility: hidden;
}
.button4 {
    background: yellow;
    left: 1000px;
}
.eventDiv {
    top: 110px;
    left: 20px;
    width: 200px;
    
}
body {
    overflow: hidden;
}
</style>
<script>
function changeTextToElement(mytext) {
    document.getElementById('eventDiv').innerHTML = mytext.innerHTML;
}
</script>
<body>
<h1>Validation of test automation</h1>
<div class=""elementBase button1"" onclick=""changeTextToElement(this)"">Button1</div>
<div class=""elementBase button2"" onclick=""changeTextToElement(this)"">Button2</div>
<div class=""elementBase overlay2"" onclick=""changeTextToElement(this)"">Overlay2</div>
<div class=""elementBase button3"" onclick=""changeTextToElement(this)"">Button3</div>
<div class=""elementBase button4"" onclick=""changeTextToElement(this)"">Button4</div>
<div id=""eventDiv"" class=""elementBase eventDiv"">None clicked</div>
</body>
</html>
```

Test cases:
```

describe('Button test', () => {
    it('button1', () => {
      cy.visit('http://localhost:80')
      cy.get('div.elementBase.button1').click();
    });
    it('button2', () => {
      cy.visit('http://localhost:80')
      cy.get('div.elementBase.button2').click();
    });
    it('overlay2', () => {
      cy.visit('http://localhost:80')
      cy.get('div.elementBase.overlay2').click();
    });
    it('button3', () => {
      cy.visit('http://localhost:80')
      cy.get('div.elementBase.button3').debug().click();
    });
    it('button4', () => {
      cy.visit('http://localhost:80')
      //cy.viewport(600, 100)
      cy.get('div.elementBase.button4').click();
      cy.end()
    })
  })
```

### Cypress Version

9.5.4

### Other

This is discussed in documentation: https://docs.cypress.io/guides/core-concepts/interacting-with-elements#Visibility

""Any of its ancestors hides overflow*

    AND that ancestor has a width or height of 0 <-- Why should it have this? If we didn't have this, then it would work properly in this case.
    AND an element between that ancestor and the element is position: absolute
""",bug
1203531744,Error only when spec file is exactly named [id].js,"### Current behavior

```
touch 'cypress/integration/[id].js'
npx cypress run --spec 'cypress/integration/\[id\].js'
```

```
Oops...we found an error preparing this test file:

  > cypress/integration/[id].js

The error was:

Error: ENOENT: no such file or directory, stat '/Users/.../Library/Application Support/Cypress/cy/production/projects/.../bundles/cypress/integration/[id].js'



This occurred while Cypress was compiling and bundling your test code. This is usually caused by:

- A missing file or dependency
- A syntax error in the file or one of its dependencies
```

### Desired behavior

_No response_

### Test code to reproduce

(Wrote in current behavior)

### Cypress Version

9.5.4

### Other

It is very corner case, but if someone names spec files to match Next.js dynamic route files, it can cause this error.
(I'm using macOS 12.3.1 .)",bug
1200545198,`{enter}` not working in Firefox 99 and 100,"### Current behavior

When sending `{enter}`, this has no effect in Cypress 9.5.4 in Firefox 100, while it did work in Firefox 97.

This had been already reported in #20562 and has been claimed to be fixed in v9.5.4, but it seems that is not the case.

Tested with Firefox Dev 99.0b8 and 100.0b4 (probably same problem with Firefox 98 as well).

### Desired behavior

Sending `{enter}` should work as it did in Firefox 97 and older.

### Test code to reproduce

```js
describe('Hitting enter', () => {
  it('works', () => {
    cy.visit('https://www.duckduckgo.com/');
    cy.get('input#search_form_input_homepage').type('hello{enter}');
    cy.get('div#links_wrapper').should('exist');
  });
});
```

### Cypress Version

9.5.4

### Other

_No response_",bug
1200457903,Headless Cypress gets stuck after tests run if screenshot is taken with no video,"### Current behavior

Currently if Cypress is run in headless mode with no video being recorded and the test attempts to take a screenshot (either because the test failed or using the `cy.screenshot()` function), Cypress will fail to take the screenshot and when it gets to the end of the run it will get stuck here:

```
================================================================================

  (Run Finished)


       Spec                                              Tests  Passing  Failing  Pending  Skipped  
  ┌────────────────────────────────────────────────────────────────────────────────────────────────┐
  │ ✖  test.spec.js                             00:37        1        -        1        -        - │
  └────────────────────────────────────────────────────────────────────────────────────────────────┘
    ✖  1 of 1 failed (100%)                     00:37        1        -        1        -        -  

```

It stays stuck there for hours - I ran it overnight and it never terminated. This doesn't seem to happen when running with `cypress open`. This issue happens at least going back to Cypress 8.7.0.

What follows is the full output (including the `^C` I used to send a SIGINT) from a run I did of my reproducing repo:
```
[STARTED] Task without title.
[TITLE]  Verified Cypress!       /root/.cache/Cypress/9.5.4/Cypress
[SUCCESS]  Verified Cypress!       /root/.cache/Cypress/9.5.4/Cypress
[399:0411/193342.575235:ERROR:gpu_init.cc(453)] Passthrough is not supported, GL is swiftshader, ANGLE is 

================================================================================

  (Run Starting)

  ┌────────────────────────────────────────────────────────────────────────────────────────────────┐
  │ Cypress:        9.5.4                                                                          │
  │ Browser:        Electron 94 (headless)                                                         │
  │ Node Version:   v16.14.2 (/usr/local/bin/node)                                                 │
  │ Specs:          1 found (test.spec.js)                                                         │
  └────────────────────────────────────────────────────────────────────────────────────────────────┘


────────────────────────────────────────────────────────────────────────────────────────────────────

  Running:  test.spec.js                                                                    (1 of 1)
Browserslist: caniuse-lite is outdated. Please run:
npx browserslist@latest --update-db

Why you should do it regularly:
https://github.com/browserslist/browserslist#browsers-data-updating


  1) fails and takes a screenshot

  0 passing (38s)
  1 failing

  1) fails and takes a screenshot:
     CypressError: `cy.screenshot()` timed out waiting `30000ms` to complete.
      at https://www.google.com/__cypress/runner/cypress_runner.js:160811:81
      at tryCatcher (https://www.google.com/__cypress/runner/cypress_runner.js:13022:23)
      at https://www.google.com/__cypress/runner/cypress_runner.js:8144:41
      at tryCatcher (https://www.google.com/__cypress/runner/cypress_runner.js:13022:23)
      at Promise._settlePromiseFromHandler (https://www.google.com/__cypress/runner/cypress_runner.js:10957:31)
      at Promise._settlePromise (https://www.google.com/__cypress/runner/cypress_runner.js:11014:18)
      at Promise._settlePromise0 (https://www.google.com/__cypress/runner/cypress_runner.js:11059:10)
      at Promise._settlePromises (https://www.google.com/__cypress/runner/cypress_runner.js:11135:18)
      at _drainQueueStep (https://www.google.com/__cypress/runner/cypress_runner.js:7729:12)
      at _drainQueue (https://www.google.com/__cypress/runner/cypress_runner.js:7722:9)
      at Async.../../node_modules/bluebird/js/release/async.js.Async._drainQueues (https://www.google.com/__cypress/runner/cypress_runner.js:7738:5)
      at Async.drainQueues (https://www.google.com/__cypress/runner/cypress_runner.js:7608:14)




  (Results)

  ┌────────────────────────────────────────────────────────────────────────────────────────────────┐
  │ Tests:        1                                                                                │
  │ Passing:      0                                                                                │
  │ Failing:      1                                                                                │
  │ Pending:      0                                                                                │
  │ Skipped:      0                                                                                │
  │ Screenshots:  0                                                                                │
  │ Video:        false                                                                            │
  │ Duration:     37 seconds                                                                       │
  │ Spec Ran:     test.spec.js                                                                     │
  └────────────────────────────────────────────────────────────────────────────────────────────────┘


================================================================================

  (Run Finished)


       Spec                                              Tests  Passing  Failing  Pending  Skipped  
  ┌────────────────────────────────────────────────────────────────────────────────────────────────┐
  │ ✖  test.spec.js                             00:37        1        -        1        -        - │
  └────────────────────────────────────────────────────────────────────────────────────────────────┘
    ✖  1 of 1 failed (100%)                     00:37        1        -        1        -        -  

[412:0411/193423.737113:ERROR:ssl_client_socket_impl.cc(981)] handshake failed; returned -1, SSL error code 1, net_error -100
^C
```

### Desired behavior

Cypress should not get stuck and should successfully take the screenshot just like when it does record video.

### Test code to reproduce

I made a reproducible example at https://github.com/lkelley-bec/cypress-stuck-screenshot using one of Cypress's provided Docker containers.

### Cypress Version

9.5.4

### Other

_No response_",bug
1194438420,change viewport of Firefox browser unsuccessful,"### Current behavior

The solution proposed to change the viewport of the Firefox browser, on the below documentation page, does not update the width and height of the Firefox screen
https://docs.cypress.io/api/plugins/browser-launch-api#Set-screen-size-when-running-headless

As per the below issue raised with Mozilla, it seems that it'd be required to set environment variables to enable this correctly when running Firefox in headless mode
https://github.com/mozilla/geckodriver/issues/1354#issuecomment-479456411

Could you please let us know if there is any elegant way of doing so, without duplicating the viewportWidth and viewportHeight vars that are already set in a Cy project's config?

### Test code to reproduce

Identical to https://docs.cypress.io/api/plugins/browser-launch-api#Set-screen-size-when-running-headless

### Cypress Version

8.5.0",bug
1193277849,"Cypress Chrome browser theme showing white text on white tab, making it unreadable","### Current behavior

<img width=""432"" alt=""Screen Shot 2022-04-05 at 9 52 24 AM"" src=""https://user-images.githubusercontent.com/1271364/161782541-6f095c73-8444-4d9a-9810-a9af9320bc61.png"">

Maybe this only happens on dark mode OS's?

### Desired behavior

It should show the text of the name of the project. 

<img width=""626"" alt=""Screen Shot 2022-04-05 at 9 55 06 AM"" src=""https://user-images.githubusercontent.com/1271364/161782726-b8a8d693-db02-41bf-9342-a475d4df9031.png"">


### Test code to reproduce

`cypress open` and click into Chrome to run a spec

### Cypress Version

9.5.3

### Other

_No response_",bug
1191519931,"Intermittent requests hanging, eventually crashing the tab/browser","### Current behavior

This is an issue we've been seeing for some time intermittently in our CI pipeline, but we had a particularly clean / minimal example on Friday so this issue will specifically reference what we saw on that occasion.

We observed that one of our parallel runners had stopped emitting any output, suggesting that Cypress was stuck somewhere. Using VNC, we remoted into the display that Cypress uses to see what was going on, and what we saw was the browser spinning trying to load our tests. The browser was fully responsive, and refreshing the tab saw it getting stuck in the same place every time:

![Selection_999(021)](https://user-images.githubusercontent.com/57534485/161517075-ffb2595c-eb3d-4e86-b886-11a70a3862c4.png)

In the network tab, we could see that it was the XHR request to `$BASE_URL/__cypress/tests?p=integration/ci/glean/tasks.spec.ts` which was getting stuck. Chrome listed it as 'Pending' - I've attached some screenshots of what we could see in the network tab itself.

![Selection_999(022)](https://user-images.githubusercontent.com/57534485/161517081-a7b3fb59-f485-48df-8d20-87566c84b438.png)
![Selection_999(023)](https://user-images.githubusercontent.com/57534485/161517082-3530ee8f-8249-440c-b10d-5280b4c531f8.png)
![Selection_999(024)](https://user-images.githubusercontent.com/57534485/161517084-03111392-3bd1-4513-9e83-c07e35c86675.png)

We were also able to reproduce in the Chrome console by firing off a manual `fetch('$BASE_URL/__cypress/tests?p=integration/ci/glean/tasks.spec.ts')` - the promise that was returned never completed. We did this about three times, before firing off one for a different spec file to see what would happen. Immediately as we did this, the browser completely crashed and we got a Javascript heap out of memory in the runner logs - see [crashed output.txt](https://github.com/cypress-io/cypress/files/8408534/crashed.output.txt).

We've been trying to narrow down this issue for some time now, and have held off raising a Cypress issue as we were concerned that it might be a regression in our own app. However, in this instance the problem was occurring before our site was even loaded, leading us to believe it's a Cypress issue (specifically around the way that requests are proxied).

### Desired behavior

_No response_

### Test code to reproduce

Our `cypress.json` looks as follows, if it's of any interest:

```
{
  ""integrationFolder"": ""integration"",
  ""pluginsFile"": ""plugins/index.js"",
  ""screenshotsFolder"": ""screenshots"",
  ""videosFolder"": ""videos"",
  ""fixturesFolder"": ""fixtures"",
  ""supportFile"": ""support/index.ts"",
  ""chromeWebSecurity"": false,
  ""defaultCommandTimeout"": 20000,
  ""numTestsKeptInMemory"": 0,
  ""videoUploadOnPasses"": false,
}
```

We are running Cypress in headed mode. 

### Cypress Version

9.5.1

### Other

The browser in this case was Edge 100, but we're seeing the same issues in Chrome as well.",bug
1186037678,Hover over Command Log  and switching back breaks App UI layout,"### Current behavior

When I Hover over command log to debug my app, and then move my mouse back to App view port, App UI layout is broken

https://user-images.githubusercontent.com/57874507/160780170-f8f1354b-9447-4e42-95f6-cb238a080e3a.mp4



### Desired behavior

App UI  layout should not break and displays as it is

### Test code to reproduce

none

### Cypress Version

9.5.0

### Other

_No response_",bug
1183719273,Bug: TypeError fn.apply is not a function,"### Current behavior

After executing a cypress file, the error occurs.

![image](https://user-images.githubusercontent.com/86800157/160448204-649e2b08-8763-4b93-8211-2796c0157676.png)


### Desired behavior


Have cypress run the tests normally.

### Test code to reproduce

```js
/// <reference types = ""cypress"" />

describe('TESTAR: Termo de Adesão e Contratação de Serviços', () => {
  // Repete essa linha em todos os ""it"" em todos os grupos
  before(() => {
    cy.visit('http://localhost:8080/');
  });

  /*beforeEach(() => {
    cy.reload(); 
  });*/

  it.only(
    'CENÁRIO DE TESTE 01: Tipo de Venda.',
    'Caso de Teste 01: Validar se os Radios existe.',
    'Caso de Teste 02: Validar se o Rádio esta selecionado.',
    'Caso de Teste 03: Validar quantos Rádios tem na Tela ',
    function() {
      Cypress.on('uncaught:exception', (err, runnable) => {
        // Ignorar erro 500  da API
        // Ignora Erros e continua os testes
        // returning false here prevents Cypress from
        return false;
      });

      //Tela Login
      cy.get('#ndamatrcula-1').type('9999999', { delay: 35 });
      cy.get('#senha-1').type('Trade@2020');
      cy.get('#button-35').click({ delay: 35 });

      //Tela Módulo
      cy.get('#TermoContingencial').should('exist');
      cy.get('#TermoContingencial').click();
      cy.get('[label=""label""] > .smart-card__wrapper').click();

      //Tipo de Venda
      cy.get('[name=""v-radio-99""][value=""venda""]').should('exist');
      cy.get('[name=""v-radio-99""][value=""venda""]').should('be.checked');

      cy.get('[name=""v-radio-99""][value=""posVenda""]').should('exist');
      cy.get('[name=""v-radio-99""][value=""posVenda""]').should('not.be.checked');

      //Contar Qauntos Radio Buton existe
      cy.get('#tipoVendaRadio [name=""v-radio-99""]').should('have.length', 2);

      //Mensagem
      cy.log('Mensagem: Existem 2 radios Button / Tipo de venda');
    }
  );

  it(
    'CENÁRIO DE TESTE 02: Pessoa.',
    'Caso de Teste 01: Validar se os Radios existe.',
    'Caso de Teste 02: Validar se o Rádio esta selecionado.',
    'Caso de Teste 03: Validar quantos Rádios tem na Tela ',
    function() {
      //Física
      cy.get('[name=""v-radio-115""][value=""fisica""]').should('exist');
      cy.get('[name=""v-radio-115""][value=""fisica""]').should('be.checked');

      //Jurídico
      cy.get('[name=""v-radio-115""][value=""juridica""]').should('exist');
      cy.get('[name=""v-radio-115""][value=""juridica""]').should('not.be.checked');

      //Contar Qauntos Radio Buton existe
      cy.get('#pessoaRadio [name=v-radio-115]').should('have.length', 2);

      //Mensagem
      cy.log('Mensagem: Existem 2 radios Button / Pessoa');
    }
  );

  it(
    'CENÁRIO DE TESTE 03: Tipo de Serviço.',
    'Caso de Teste 01: Validar se o Radio existe.',
    'Caso de Teste 02: Validar se o Rádio esta selecionado.',
    'Caso de Teste 03: Validar quantos Rádios tem na Tela ',
    function() {
      //SMP
      cy.get('[name=""v-radio-123""][value=""smp""]').should('exist');
      cy.get('[name=""v-radio-123""][value=""smp""]').should('be.checked');

      //STFC
      cy.get('[name=""v-radio-123""][value=""stfc""]').should('exist');
      cy.get('[name=""v-radio-123""][value=""stfc""]').should('not.be.checked');

      //SMC
      cy.get('[name=""v-radio-123""][value=""scm""]').should('exist');
      cy.get('[name=""v-radio-123""][value=""scm""]').should('not.be.checked');

      //Convergência
      cy.get('[name=""v-radio-123""][value=""convergencia""]').should('not.exist');

      //Contar Qauntos Radio Buton existe
      cy.get('#tipoServicoRadio [name=""v-radio-123""]').should('have.length', 3);

      //Mensagem
      cy.log('Mensagem: Existem 3 radios Button / Tipo de Serviço');

      //Botão Avançar para proxima tela
      cy.get('#btnNext')
        .click()
        .should('be.true');
    }
  );

  it(
    'CENÁRIO DE TESTE 04: Planos.',
    'Caso de Teste 01: Validar se o Radio existe.',
    'Caso de Teste 02: Validar se o Rádio esta selecionado.',
    'Caso de Teste 03: Validar quantos Rádios tem na Tela ',
    function() {
      //Pós Pago Fatura
      cy.get('[name=""v-radio-140""][value=""fatura""]').should('exist');
      cy.get('[name=""v-radio-140""][value=""fatura""]').should('be.checked');

      //Controle Fatura
      cy.get('[name=""v-radio-140""][value=""controleFatura""]').should('exist');
      cy.get('[name=""v-radio-140""][value=""controleFatura""]').should('not.be.checked');

      //Pós Pago Express
      cy.get('[name=""v-radio-140""][value=""express""]').should('exist');
      cy.get('[name=""v-radio-140""][value=""express""]').should('not.be.checked');

      //WTTX
      cy.get('[name=""v-radio-140""][value=""wttx""]').should('exist');
      cy.get('[name=""v-radio-140""][value=""wttx""]').should('not.be.checked');

      //Pós Pago Familía
      cy.get('[name=""v-radio-140""][value=""family""]').should('exist');
      cy.get('[name=""v-radio-140""][value=""family""]').should('not.be.checked');

      //Controle Express
      cy.get('[name=""v-radio-140""][value=""controleExpress""]').should('not.exist');

      //Corporativo
      cy.get('[name=""v-radio-140""][value=""corporativo""]').should('not.exist');

      //Contar Qauntos Radio Buton existe
      cy.get('#tipoPlanoRadio [name=""v-radio-140""]').should('have.lenght', 5);

      //Mensagem
      cy.log('Mensagem: Existem 5 radios Button / Planos');

      //Botão Avançar para proxima tela
      cy.get('#btnNext')
        .click()
        .should('be.true');
    }
  );
});
```

### Cypress Version

8.7.0

### Other


I only tested a few radio buttons.",bug
1183107055,--spec with glob splits filename at weird position,"### Current behavior

When --spec option has glob `[...]` (even if escaped), cypress splits the argument at weird position, while it should be split by comma.

It is not only output text issue: specified spec files are actually not found by cypress even they are exists.

### Desired behavior

_No response_

### Test code to reproduce

Case 1: Split at middle of the filename

```sh
$ npx cypress run --spec 'cypress/integration/foo/bar/[baz]/test.ts,cypress/integration/foo/bar/[baz2]/test.ts,cypress/integration/foo3/bar/baz/test.ts,cypress/integration/foo4/bar/baz/foooooooooooooooo.ts'
Can't run because no spec files were found.

We searched for specs matching these glob patterns:

  > /path/to/project/e2e/cypress/integration/foo/bar/[baz]/test.ts
  > /path/to/project/e2e/cypress/integration/foo/bar/[baz2]/test.ts
  > /path/to/project/e2e/cypress/integration/foo3/bar/baz/test.ts,cypress/integration/foo4/bar/baz/foooooo
  > /path/to/project/e2e/oooooooooo.ts
```

Case 2: Does not split at comma

```sh
$ npx cypress run --spec 'cypress/integration/foo/bar/baz/test.ts,cypress/integration/foo/bar/[baz2]/test.ts,cypress/integration/foo3/bar/baz/test.ts,cypress/integration/foo4/bar/baz/foooooooooooooooo.ts'
Can't run because no spec files were found.

We searched for specs matching these glob patterns:

  > /path/to/project/e2e/cypress/integration/foo/bar/baz/test.ts,cypress/integration/foo/bar/[baz2]/test.ts
  > /path/to/project/e2e/cypress/integration/foo3/bar/baz/test.ts
  > /path/to/project/e2e/cypress/integration/foo4/bar/baz/foooooooooooooooo.ts
```

Case 3: Even when globs are escaped

```sh
$ npx cypress run --spec 'cypress/integration/foo/bar/\[baz\]/test.ts,cypress/integration/foo/bar/\[baz2\]/test.ts,cypress/integration/foo3/bar/baz/test.ts,cypress/integration/foo4/bar/baz/foooooooooooooooo.ts'
Can't run because no spec files were found.

We searched for specs matching these glob patterns:

  > /path/to/project/e2e/cypress/integration/foo/bar/\[baz\]/test.ts
  > /path/to/project/e2e/cypress/integration/foo/bar/\[baz2\]/test.ts
  > /path/to/project/e2e/cypress/integration/foo3/bar/baz/test.ts,cypress/integration/foo4/bar/baz/foooooooo
  > /path/to/project/e2e/oooooooo.ts
```

Working as expected when no glob patterns are specified:

```sh
$ npx cypress run --spec 'cypress/integration/foo/bar/baz/test.ts,cypress/integration/foo/bar/baz2/test.ts,cypress/integration/foo3/bar/baz/test.ts,cypress/integration/foo4/bar/baz/foooooooooooooooo.ts'
Can't run because no spec files were found.

We searched for specs matching these glob patterns:

  > /path/to/project/e2e/cypress/integration/foo/bar/baz/test.ts
  > /path/to/project/e2e/cypress/integration/foo/bar/baz2/test.ts
  > /path/to/project/e2e/cypress/integration/foo3/bar/baz/test.ts
  > /path/to/project/e2e/cypress/integration/foo4/bar/baz/foooooooooooooooo.ts
```

### Cypress Version

9.5.2

### Other

_No response_",bug
1182080424,Property `isInteractive` is missing on the `Cypress.PluginConfigOptions` type,"### Current behavior

SSIA.

### Desired behavior

_No response_

### Test code to reproduce

```ts
export default (
  on: Cypress.PluginEvents,
  config: Cypress.PluginConfigOptions
): Cypress.PluginConfigOptions
  config.isInteractive // Property 'isInteractive' does not exist on type 'PluginConfigOptions'.
}
```

### Cypress Version

9.5.2

### Other

_No response_",bug
1180007776,"Clicking ""View App Data"" on Linux crashes Cypress","To reproduce:

1.  Open Cypress.
2. Click “View App Data” via the context menu.
3. App crashes.

Desired behavior: View App Data works, and errors with View App Data are gracefully handled.

![image](https://user-images.githubusercontent.com/1151760/160002283-544d33c8-6480-4f71-9b89-0573d3bc2ffa.png)",bug
1175921153,"Types issue when using `.then(cy.wrap, { log: false })` (when specifying options)","### Current behavior

Throws a type error:

![image](https://user-images.githubusercontent.com/595446/159359290-be6c4b53-4bdf-4775-bea8-657f56203d7a.png)

```
TS2769: No overload matches this call.   The last overload gave the following error.     Type '{ <E extends Node = HTMLElement>(element: E | JQuery<E>, options?: Partial<Loggable & Timeoutable> | undefined): Chainable<...>; <F extends Promise<...>, S>(promise: F, options?: Partial<...> | undefined): Chainable<...>; <S>(object: S, options?: Partial<...> | undefined): Chainable<...>; }' has no properties in common with type 'Partial<Timeoutable>'.
```


### Desired behavior

No type error

### Test code to reproduce

The same code from here: https://www.cypress.io/blog/2020/02/12/working-with-iframes-in-cypress/

But with `{ log: false }` added to `.then(cy.wrap)`

E.g.:

```
Cypress.Commands.add('getIframeBody', (iframeSelector) => {
  if (Cypress.config('chromeWebSecurity')) {
    throw new Error('To get iframe element, `chromeWebSecurity` must be disabled');
  }

  return cy
    .get(iframeSelector)
    .its('0.contentDocument.body', { log: false }).should('not.be.empty')
    .then(cy.wrap, { log: false })
})
```

### Cypress Version

9.5.2

### Other

The types end up mapping correctly when options like `{ log: false }` aren't specified, so there must be something missing? I tinkered quite a bit but I'm not familiar enough to get it parsing correctly

Definitions for `then()` are here: https://github.com/cypress-io/cypress/blob/b16553ec705458c6953293abdc5fdde98723230d/cli/types/cypress.d.ts#L1912


Definitions for `wrap()` are here: https://github.com/cypress-io/cypress/blob/b16553ec705458c6953293abdc5fdde98723230d/cli/types/cypress.d.ts#L2226",bug
1175131358,visibility assertions not working with <summary> tag,"### Current behavior

given some markup like this:

```html
<details>
      <summary class=""question"">this is a question</summary>
      <div class=""answer"">this is the answer</div>
</details>
```

the following assertion fails
```js
cy.get('.answer').should('not.be.visible')
```

### Desired behavior

_No response_

### Test code to reproduce

```html
<details>
      <summary class=""question"">this is a question</summary>
      <div class=""answer"">this is the answer</div>
</details>
```

```js
cy.get('.answer').should('not.be.visible')
cy.get('.question').should('be.visible').click()
cy.get('.answer').should('be.visible')
```

### Cypress Version

9.5.2

### Other

_No response_",bug
1173548033,Adding null as an encoding argument to cy.readFile command results in TypeError,"### Current behavior

Adding null as an encoding argument to `cy.readFile` command results in `TypeError: First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object`.

It seems that `null` option somehow bypasses the timeout and waiting for file to be downloaded, because as soon as I add 1 sec wait, the command works as expected, and file is read.

### Desired behavior

`cy.readFile` command (with null as encoding argument) should fall back to default timeout of 4 seconds and retry until file is found.

### Test code to reproduce

... trigger a download of a file
```js
cy.readFile(pathToFile, null);
```

### Cypress Version

9.5.1

### Other

_No response_",bug
1169697717,Leaving Cypress open for a long time or putting computer to sleep results in missing command logs,"Leaving Cypress open for a long time or putting one's computer to sleep will result in command logs missing when using a Chromium-based browser.

Certain command logs like download and network events will no longer appear after running tests without closing and re-opening the browser

In production Cypress, this is only a visual/informational loss, but in the multi-domain feature work, this results in tests failing (after a page load timeout, which is 60s by default, so it seems like the test is hanging).",bug
1162003931,"Cypress defaults (Screenshot, Keyboard etc..) are not reset after test.","### Current behavior

If a user changes the default values of a command in a test, runs the test and then reverts the change, the values for the defaults will be preserved. For example, if a user has this test code:

```javascript
it('should display welcome message', () => {
  cy.visit('/').contains('Welcome my-app');
  Cypress.Screenshot.defaults({ capture: 'runner' });
  cy.screenshot();
});
```

If the user runs the test, the screenshot will capture the runner. If the user then removes the change to defaults:

```javascript
it('should display welcome message', () => {
  cy.visit('/').contains('Welcome my-app');
  // Cypress.Screenshot.defaults({ capture: 'runner' });
  cy.screenshot();
});
```

the test will rerun and the screenshot taken will capture the runner. A refresh of the window is required to reset the state back to the defaults.

This scenario is applicable to all Cypress commands in which the user can override the defaults (Screenshot, Keyboard, SelectorPlayground, Cookies).

### Desired behavior

The state of the Command options should be reset back to defaults before each test, or users should be restricted from setting defaults in such a way that they would run into having stale Command options.

### Test code to reproduce

Here is a fork of [cypress-example-kitchensink](https://github.com/zachjw34/cypress-example-kitchensink). You can test this by cloning, installing deps, starting the app server and then opening cypress. The `todo.spec.js` is setup for an easy reproduction of the issue.

### Cypress Version

9.5.1

### Other

_No response_",bug
1143451795,Multi part screenshots will retry if the page is completely uniform,"### Current behavior

Today, large screenshots will be split into multi parts and each part is compared to the previous part to ensure that we are not just getting the same data over and over again. If the page is uniform (e.g. just one color) this will cause needless (potentially resource intensive) processing. In extreme cases with minimal resources, this can cause browser crashes (see #20268 for an example of a test where this used to happen). 

### Desired behavior

While this scenario is not common, it exposes a problem of resource management in handling multi-part screenshots that we should investigate to see if there's an alternative less resource intensive solution that will still solve the problem of duplicated multi part screenshots.

### Test code to reproduce

The tests before this PR (#20268) will cause the issue

### Cypress Version

9

### Other

_No response_",bug
1129961762,Form-Data not treated as binary when request is intercepted,"### Current behavior

Currently, when you intercept a request with a body of type `multipart/form-data` which includes a binary file, as well as a considerable amount of text, it is possible that the body will not be detected as type `binary`. Therefore the `toString()` method is called on the body which breaks the binary file for server-side processing.

See [`request.ts`](https://github.com/cypress-io/cypress/blob/e218960f4e7a4cb2e61fbcaef60b3e1232851f2d/packages/net-stubbing/lib/server/middleware/request.ts#L131-L133)

I think this issue was first introduced with cypress 7.0.0, at least the issue occured for us after upgrading from 6.7.1 to 7.0.0. It does not matter if you do anything with the interceptor or not. In our case we just wanted to wait for the response before continuing the test.

### Desired behavior

Form-Data bodies should be treated as binary.

### Test code to reproduce

Send a form-data request with two fields, one small binary file (e.g. an empty PDF) and one field containing around 1000 words from Lorem Ipsum.

Run the test with DEBUG=cypress:net-stubbing* and you wont see the debug line `eq.body contained non-utf8 characters, treating as binary content`

Reduce the text fields content to like 100 words and you will see the debug message.

### Cypress Version

7.0.0+

### Other

_No response_",bug
1122387157,req.reply returning null in console when used in cy.intercept,"### Current behavior

Using `req.reply` in `cy.intercept` returns null to the browser. Clicking on the network step in the UI console.logs

```
Request body:              {id: 1}
cypress_runner.js:194616 Response status code:      200
cypress_runner.js:194616 Response headers:          {Date: 'Wed, 02 Feb 2022 20:51:54 GMT', Content-Encoding: 'gzip', Vary: 'Accept-Encoding', Transfer-Encoding: 'chunked', content-type: 'application/json', …}
cypress_runner.js:194616 Response body:             null
```

### Desired behavior

Using `req.reply` in `cy.intercept` returns the value passed to `req.reply` to the browser. Clicking on the network step in the UI console.logs

```
Request body:              {id: 1}
cypress_runner.js:194616 Response status code:      200
cypress_runner.js:194616 Response headers:          {Date: 'Wed, 02 Feb 2022 20:51:54 GMT', Content-Encoding: 'gzip', Vary: 'Accept-Encoding', Transfer-Encoding: 'chunked', content-type: 'application/json', …}
cypress_runner.js:194616 Response body:             {id: 1}
```

### Test code to reproduce

```js
cy.intercept('PATCH', '**/v1/tasks/1', (req) => {
  // console.logging/debugger works here, so this is hit
  req.reply({ id: 1 });
}).as('updateTask');

cy.wait('@updateTask').its('request.body').should('deep.equal', {
  id: 1
});
```

### Cypress Version

9.4.1

### Other

Cypress package version: 9.4.1
Cypress binary version: 9.4.1
Electron version: 15.3.4
Bundled Node version: 16.5.0",bug
1121715251,Firefox/docker: cy.setCookie() does not work,"### Current behavior

(see #17539 for details)

We are running our CI using
- one ""service"" docker container containing our app
- the cypress ""included"" container, which accesses our app via a docker alias

With chrome and electron, this setup works perfectly fine. Firefox fails on every `cy.setCookie()` call, however.

Please prioritize as this completely prevents us from running Firefox tests. Thanks!

### Desired behavior

`cy.setCookie` should work in Firefox if the domain is not ""localhost"".

### Test code to reproduce

simply call `cy.setCookie(""foo"", ""bar"")` in combination with `cypress run -b firefox -c baseUrl=https://${SERVICE_ALIAS}`

### Cypress Version

9.3.1

### Other

_No response_",bug
1119862667,`cy.root` ignores `timeout` option,"### Current behavior

Passing a `timeout` option to `cy.root` has no effect.

### Desired behavior

Like `get` and al., it should retry for the given timeout duration.

Note: there's a separate bug with `root` [not retrying *at all* when called from `within`](https://github.com/cypress-io/cypress/issues/19404). This seems different but may be related.

### Test code to reproduce

From [this demo](https://github.com/cypress-io/cypress-test-tiny/pull/72):

```js
describe(""page"", () => {
  beforeEach(() => {
    cy.visit(""https://example.cypress.io"");
    delayedHelloAfter(7);
  });

  it(""`root` retries using the default so this test fails (good)"", () => {
    cy.root().should(""contain"", ""Hello"");
  });

  it(""`root` does not respect the `timeout` options so this test fails too (bad)"", () => {
    cy.root({ timeout: 10000 }).should(""contain"", ""Hello"");
  });
  it(""get('html') does respect the `timeout` options so this test passes (good)"", () => {
    cy.get(""html"", { timeout: 10000 }).should(""contain"", ""Hello"");
  });
});

function delayedHelloAfter(seconds) {
  cy.window().then((w) => {
    w.eval(`setTimeout(() => {
        document.querySelector('.banner .container').innerHTML = '<p> Hello, world!</p>'
      }, ${seconds} * 1000)
      console.log(""ok"")
      `);
  });
}
```

### Cypress Version

9.3.1 & 9.4.0

### Other

_No response_",bug
1116588675,Override of XHRs send function only applies once,"### Current behavior

A header set in `XMLHttpRequest.prototype.send` is only applied in first testcase.



### Desired behavior

The header added by the app applies in all testcases.

### Test code to reproduce

Example app:
```
<!doctype html>
<html lang=""en"">
<head>
  <meta charset=""utf-8"">
  <title>Test App</title>
  <script
  src=""https://code.jquery.com/jquery-3.6.0.min.js""
  integrity=""sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=""
  crossorigin=""anonymous""></script>
</head>
<body>
  <script>
    const xhrSend = XMLHttpRequest.prototype.send;
    XMLHttpRequest.prototype.send = function(tmp) {
      if (!this.headers || !this.headers.test) {
        this.setRequestHeader('test', 'IS_SET');
      }
      xhrSend.apply(this, tmp);
    }
      </script>
      <button class=""doAJAX"" onclick=""jQuery.ajax('/data/test')"">Load next row</button>
</body>
</html>

```

Example Test :

```
describe('Run landingpage tests', () => {

    before(function () {
        cy.visit('http://localhost:4200');
    });
    context('Spam-click', () => {
        it('Click button once', () => {
            cy.intercept('/data/test').as(""request1"");
            cy.get('.doAJAX').should('exist');
            cy.get('.doAJAX').click();
            cy.wait('@request1')
                .its('request.headers')
                .should('have.property', 'test', 'IS_SET');
        });
        it('Click button again', () => {
            cy.intercept('/data/test').as('request2');
            cy.get('.doAJAX').should('exist');
            cy.get('.doAJAX').click();
            cy.wait('@request2')
                .its('request.headers')
                .should('have.property', 'test', 'IS_SET');
        });
    });
});
```

### Cypress Version

9.3.1

### Other

_No response_",bug
1115088001,Inconsistencies in CYPRESS_DOWNLOAD_PATH_TEMPLATE handling,"### Current behavior

There seem to be some inconsistencies in how CYPRESS_DOWNLOAD_PATH_TEMPLATE is handled from the .npmrc file depending on package manager and version.

Given
`CYPRESS_DOWNLOAD_PATH_TEMPLATE=${endpoint}/${platform}-${arch}/cypress.zip`

npm 7 works, though locally i've seen the env fail to get picked up because of casing.
npm 6 attempts to replay endpoint etc with other ENVs (this is unfortunate, but you can escape them but that doesn't work either)
Yarn 1 doesn't remove double quotes.

I haven't tested yarn 3 or npm 8 but they should be looked at, as well as windows useage.

### Desired behavior

Ideally you could set the CYPRESS_DOWNLOAD_PATH_TEMPLATE variable with any package manager

### Test code to reproduce

Try out setting variations of

```sh
CYPRESS_DOWNLOAD_PATH_TEMPLATE=${endpoint}/${platform}-${arch}/cypress.zip
CYPRESS_DOWNLOAD_PATH_TEMPLATE=\${endpoint}/\${platform}-\${arch}/cypress.zip
CYPRESS_DOWNLOAD_PATH_TEMPLATE=""${endpoint}/${platform}-${arch}/cypress.zip""
CYPRESS_DOWNLOAD_PATH_TEMPLATE=""\${endpoint}/\${platform}-\${arch}/cypress.zip""
```

### Cypress Version

9.3.1

### Other


Where CYPRESS_DOWNLOAD_PATH_TEMPLATE is used
https://github.com/cypress-io/cypress/blob/develop/cli/lib/tasks/download.js#L67

getEnv implementation
https://github.com/cypress-io/cypress/blob/develop/cli/lib/util.js#L459

We should probably be setting trim on getENV, that should resolve any double quotes problems.",bug
1114702001,[cy.session] cy.then() timed out after waiting 30000ms,"### Current behavior

cy.session fails in very long tests (over 15 minutes in my case)

![image](https://user-images.githubusercontent.com/35769594/150997086-2cc81726-379a-4c88-8e54-72dda1a6639a.png)
![image](https://user-images.githubusercontent.com/35769594/150997477-db3dc3a5-583e-480f-9599-301c2f413c8a.png)

```
CypressError: `cy.then()` timed out after waiting `30000ms`.

Your callback function returned a promise that never resolved.

The callback function was:

async () => {
        if (!existingSession.hydrated) {
          const serverStoredSession = await sessions.getSession(existingSession.id).catch(lodash__WEBPACK_IMPORTED_MODULE_0___default.a.noop); // we have a saved session on the server AND setup matches

          if (serverStoredSession && serverStoredSession.setup === existingSession.setup.toString()) {
            lodash__WEBPACK_IMPORTED_MODULE_0___default.a.extend(existingSession, serverStoredSession);

            existingSession.hydrated = true;
          } else {
            onValidationError = throwValidationError;
            return runSetup(existingSession);
          }
        }

        Cypress.log({
          name: 'Restore Saved Session',
          event: true,
          state: 'passed',
          type: 'system',
          message: ``,
          groupStart: true
        });
        await navigateAboutBlank();

        _log.set({
          renderProps: () => {
            return {
              indicator: 'pending',
              message: `(saved) ${_log.get().message}`
            };
          }
        });

        dataLog.set({
          consoleProps: () => getConsoleProps(existingSession)
        });
        await sessions.setSessionData(existingSession);
      }
    at https://localhost:44301/__cypress/runner/cypress_runner.js:156066:83
From previous event:
    at Context.thenFn (https://localhost:44301/__cypress/runner/cypress_runner.js:156065:13)
    at Context.then (https://localhost:44301/__cypress/runner/cypress_runner.js:156509:21)
    at Context.<anonymous> (https://localhost:44301/__cypress/runner/cypress_runner.js:172859:19)
    at https://localhost:44301/__cypress/runner/cypress_runner.js:171717:15
From previous event:
    at CommandQueue.runCommand (https://localhost:44301/__cypress/runner/cypress_runner.js:171696:8)
    at next (https://localhost:44301/__cypress/runner/cypress_runner.js:171839:19)
From previous event:
    at next (https://localhost:44301/__cypress/runner/cypress_runner.js:171839:39)
    at https://localhost:44301/__cypress/runner/cypress_runner.js:171868:16
```

### Desired behavior

Would be best if it did not fail

### Test code to reproduce

I've managed to reproduce it with this tests after 2000 seconds

```
describe('sessions', () => {
    it('long', () => {
        cy.wrap(Cypress._.range(1, 200)).each((i: number) => {
            cy.session(`${i % 10}`, () => {
                cy.visit('https://www.tradingview.com/features/');
            });
            cy.visit('https://www.tradingview.com/news/');
            cy.wrap(Cypress._.range(1, 20)).each(() => {
                cy.get('[data-id=""react-root""]').should('exist').should('be.visible');
            });
        });
    });
});

```

cypress.json

`    ""redirectionLimit"": 1000,
`

### Cypress Version

9.3.1

### Other

_No response_",bug
1109588605,Can’t use default Firefox on latest Ubuntu,"### Current behavior

When trying to use Firefox from Cypress on a fresh install of Ubuntu 21.10, it just hangs with
“Firefox is already running, but is not responding.”

![Screenshot](https://user-images.githubusercontent.com/178162/150390942-48c51e5c-0d0a-4b4c-b9d8-491301d14b67.png)


### Desired behavior

Cypress should open Firefox.

### Test code to reproduce

`cypress open`

### Cypress Version

9.3.1

### Other

Ubuntu 21.10 has [moved Firefox](https://discourse.ubuntu.com/t/impish-indri-release-notes/21951) to a [snap](https://snapcraft.io/about).

The snap is configured to confine Firefox using the [home interface](https://snapcraft.io/docs/home-interface), which allows “access to non-hidden files.” The firefox profile Cypress creates at `~/.config/Cypress/cy/production/browsers/firefox-stable/interactive` is considered hidden because of the `.` in `.config`. Firefox can’t access the profile folder and gets confused and says it is already running.

A similar issue was already fixed for Chromium in #7039.

As a temporary workaround, if I run, `XDG_CONFIG_HOME=$HOME/cypress cypress open` so that Cypress creates and uses a firefox profile in a non-hidden directory, then Firefox opens and cypress tests run successfully.",bug
1109383159,CVE-2021-42740 in shell-quote,"### Current behavior

CVE-2021-42740 is a critical CVE in shell-quote version 1.7.2 that is resolved in 1.7.3

> The shell-quote package before 1.7.3 for Node.js allows command injection. An attacker can inject unescaped shell metacharacters through a regex designed to support Windows drive letters. If the output of this package is passed to a real shell as a quoted argument to a command with exec(), an attacker can inject arbitrary commands. This is because the Windows drive letter regex character class is {A-z] instead of the correct {A-Za-z]. Several shell metacharacters exist in the space between capital letter Z and lower case letter a, such as the backtick character.

### Desired behavior

cypress uses shell-quote 1.7.3

### Test code to reproduce

It's a publicly visible CVE

### Cypress Version

9.3.1

### Other

_No response_",bug
1109255863,Spec glob seems to have broken in 9.3.1,"### Current behavior

We use Bitbucket Pipelines for tests, and in order to run in parallel we split up the specs using simple globs. 
e.g:

`cypress run -s 'cypress/integration/[a-c]*/**`

This worked fine up till 9.3.0, but broke in 9.3.1 with the following error:

`Cypress encountered an error while parsing the argument spec

You passed: cypress/integration/[a-c]*/**

The error was: spec must be a string or comma-separated list`

### Desired behavior

It should pull in all the specs referenced by the glob i.e all specs beginning with a, b or c

### Test code to reproduce

cypress run -s 'cypress/integration/[a-c]*/**


### Cypress Version

9.3.1

### Other

You fixed a glob-related bug in 9.3.1: regression due to that?",bug
1108395976,The cypress release process has the possibility to generate a package with a bin file with windows line endings.,"### Current behavior

The windows build of the cypress package will produce a binary with windows line endings. If this package is released it will cause issues like #19747.


### Desired behavior

Produce a binary without windows line endings.

### Test code to reproduce

In CI cause the windows build to run last and check out the generated package.

### Cypress Version

n/a

### Other

We have been lucky previously to not have seen this with either the darwin or linux build finishing last.

I believe issue was introduced with #8483, so it has been a possibility for some time.

Options for correction include:
Prevent windows from setting windows line endings when building.
Prevent windows from pushing the generated package to s3
Use linux to build the package and push it to s3 prior to generating the binary build jobs for each os.",bug
1107722303,`undefined (reading 'undefined')` on cypress_runner.js,"### Current behavior

When running on `cypress@9.3.1`, there is an issue on `cypress_runner.js` - `Cannot read properties of undefined (reading 'undefined')`. It happens on https://github.com/cypress-io/cypress/blob/8355e5d8ec35411a6935687c9c91540dd32cf7f4/packages/driver/src/cy/navigation.ts#L29

![image](https://user-images.githubusercontent.com/25013382/150078043-d8a8a72c-72d6-4a4a-b6ca-42aef2b4f5cb.png)

This error usually happens on `cy.go('back')`. Failing tests on Cypress dashboard - https://dashboard.cypress.io/projects/oqk3fk/runs/4680/overview

### Desired behavior

No undefined error messages

### Test code to reproduce

 it('should return to previous page', function () {
    cy.go('back')
 })

### Cypress Version

9.3.1

### Other

_No response_",bug
1107543559,"Run into an error of ""‘node\r’: No such file or directory"" with Cypress 9.3.0","### Current behavior

With the latest version of Cypress 9.3.0, an error of `‘node\r’: No such file or directory` will occur when running cypress, while no errors for previous versions.

### Desired behavior

_No response_

### Test code to reproduce

See the failed GitHub Action: https://github.com/easyops-cn/next-core/runs/4861762531?check_suite_focus=true

### Cypress Version

9.3.0

### Other

_No response_",bug
1105082953,cy.next with selector seems to not work,"### Current behavior

```html
<ul id=""next-selector"">
  <li>apples</li>
  <li>oranges</li>
  <li>bananas</li>
  <li class=""selected"">pineapples</li>
</ul>
```

```js
cy.get('#next-selector li')
  .first()
  .next('.selected')
  .should('have.text', 'pineapples')
```

Fails with this error

<img width=""892"" alt=""Screen Shot 2022-01-16 at 10 27 22"" src=""https://user-images.githubusercontent.com/2212006/149666402-604a3234-9cee-47bb-93dd-74fd0eef2e06.png"">




### Desired behavior

Should find the sibling with class ""selected""


### Test code to reproduce

Repo with reproduction https://github.com/bahmutov/cypress-test-tiny/tree/next-problem



### Cypress Version

9.2.1

### Other

_No response_",bug
1103502023,TypeError: Cannot read properties of undefined (reading 'uid'). Cypress 9.2.1 along with cucumber bdd.,"### Current behavior

<img width=""1440"" alt=""Screenshot 2022-01-14 at 1 22 07 PM"" src=""https://user-images.githubusercontent.com/62888395/149507428-a51a7c69-df0a-43e6-a24f-b4c17699acdc.png"">

==============================================================

**Package.json file:**

{
  ""name"": ""package.json"",
  ""version"": ""1.0.0"",
  ""main"": ""index.js"",
  ""license"": ""MIT"",
  ""scripts"": {
    ""lint"": ""eslint 'cypress/**/*.{js,ts,tsx}'"",
    ""pretty"": ""prettier --write \""cypress/**/*.{ts,js,jsx,json}\""""
  },
  ""devDependencies"": {
    ""@typescript-eslint/eslint-plugin"": ""^5.9.1"",
    ""@typescript-eslint/parser"": ""^5.9.1"",
    ""eslint"": ""^8.6.0"",
    ""eslint-config-airbnb-typescript"": ""^16.1.0"",
    ""eslint-config-prettier"": ""^8.3.0"",
    ""eslint-plugin-cypress"": ""^2.12.1"",
    ""eslint-plugin-import"": ""^2.25.4"",
    ""eslint-plugin-prettier"": ""^4.0.0"",
    ""prettier"": ""^2.5.1""
  },
  ""cypress:open"": ""cypress open"",
  ""dependencies"": {
    ""@cypress/browserify-preprocessor"": ""^3.0.2"",
    ""@types/chai-string"": ""^1.4.2"",
    ""@types/chai-subset"": ""^1.3.3"",
    ""@types/cypress-cucumber-preprocessor"": ""^4.0.1"",
    ""chai"": ""^4.3.4"",
    ""chai-string"": ""^1.5.0"",
    ""chai-subset"": ""^1.6.0"",
    ""cypress"": ""^9.2"",
    ""cypress-cucumber-preprocessor"": ""^4.3.1"",
    ""cypress-file-upload"": ""^5.0.8"",
    ""cypress-promise"": ""^1.1.0"",
    ""husky"": ""^7.0.4"",
    ""lint-staged"": ""^12.1.7"",
    ""tsify"": ""^5.0.4"",
    ""typescript"": ""^4.5.4"",
    ""uuidv4"": ""^6.2.12"",
    ""@testing-library/cypress"": ""^8.0.2"",
    ""@types/uuid"": ""^8.3.4"",
    ""cypress-tags"": ""^0.3.0""
  },
  ""husky"": {
    ""hooks"": {
      ""pre-commit"": ""lint-staged""
    }
  },
  ""lint-staged"": {
    ""./cypress/**/*.{js,ts}"": [
      ""eslint --fix --max-warnings 0""
    ],
    ""./**/*.{json,md,yml}"": [
      ""prettier --write""
    ]
  },
  ""cypress-cucumber-preprocessor"": {
    ""nonGlobalStepDefinitions"": true
  },
  ""resolutions"": {
    ""graceful-fs"": ""4.2.9""
}

  
}




### Desired behavior

There should not be any error. Code must run.

### Test code to reproduce

will provide privately

### Cypress Version

cypress 9.2.1

### Other

_No response_",bug
1102424770,tests with just a name and the test config object but without a callback throws an error,"### Current behavior

a test is marked pending if it has just a title and no callback function
```js
// will be pending
it('works')
```

But if you have a test config object there it causes a crash
```js
it('works', {viewportWidth: 100})
```

```
TypeError: fn.apply is not a function
  at Context.runnable.fn (http://localhost:53035/__cypress/runner/cypress_runner.js:172338:19)
  at callFn (http://localhost:53035/__cypress/runner/cypress_runner.js:125099:21)
  at Test.../driver/node_modules/mocha/lib/runnable.js.Runnable.run (http://localhost:53035/__cypress/runner/cypress_runner.js:125086:7)
```

### Desired behavior

No crash, mark the test pending

### Test code to reproduce

https://github.com/cypress-io/cypress-test-tiny/tree/pending-with-config

### Cypress Version

9.2.1

### Other

_No response_",bug
1099069905,Missing path separator in log when name of downloaded file starts with special character,"### Current behavior

On Windows, when the name of a downloaded file starts with a special character, the log entry of the file being downloaded omits the path separator that should come before the file name:

![image](https://user-images.githubusercontent.com/36038882/148930571-df5ce0bc-a20e-4dc7-92df-a7d7e65c63f7.png)

### Desired behavior

There should be a `\` between `download` and `(foo).bin`

### Test code to reproduce

https://github.com/JessefSpecialisterren/cypress-test-tiny/tree/missing-path-separator

### Cypress Version

9.2.1

### Other

_No response_",bug
1098911577,cy.request does not include body on redirect,"### Current behavior

The redirected url contains a null body

### Desired behavior

body of the redirected url should not be null if given as parameter of the cy.request function

### Test code to reproduce

      const options = {
        method: ""POST"",
        url: ""http://host.docker.internal:3050/auth/openid/return"",
        form: true,
        body: {
          code: code,
          id_token: id_token,
          state: state,
          session_state: session_state,
        },
      };
      cy.request(options);
![image](https://user-images.githubusercontent.com/3071375/148917432-c246d8b4-0b5c-42c3-8439-c5148e6d3a3f.png)


### Cypress Version

8.5

### Other

_No response_",bug
1097516303,The project relies on colors.js with malicious code,"### Current behavior

- Bugs when run cypress cli

It's a known bug of [`colors`](https://github.com/Marak/colors.js/issues/290)

![image](https://user-images.githubusercontent.com/26477537/148726391-52edaf86-dfe4-4a3f-9e2e-7676b44d10a3.png)


![image](https://user-images.githubusercontent.com/26477537/148726241-82b5a0d7-9e80-4640-ae9a-81278c11b974.png)

[bugs here](https://github.com/DouyinFE/semi-design/runs/4756809788?check_suite_focus=true)

- cypress dependency

![image](https://user-images.githubusercontent.com/26477537/148727738-92f9fd14-4a0a-4434-8e15-c259050cc064.png)

### Desired behavior

everything is ok when run cypress

### Test code to reproduce


run it **_MAY BE DANGER_** on local machine: `npx cypress run`

### Cypress Version

9.2.0

### Other

_No response_",bug
1095087168,Failure to use NO_PROXY appropriately,"### Current behavior

In our setup, both environment variables: `https_proxy`, `NO_PROXY` and the `.npmrc` configuration of `https_proxy` / `noproxy` are configured.

The particular Cypress download URL is being redirected Nexus via `CYPRESS_DOWNLOAD_MIRROR` and _should not_ go via the proxy.
All of this would work perfectly except:
During postinstall the `cypress:lib/tasks/download.js` task has the following function:
```
const getProxyForUrlWithNpmConfig = url => {
  return getProxyForUrl(url) || process.env.npm_config_https_proxy || process.env.npm_config_proxy || null;
};
```
Now `getProxyForUrl(url)` returns an _empty string_ if it matches `NO_PROXY` *or* if there are no variables defined - these are not the same states and should be treated separately.
The `||` treats _empty string_ as falsey and therefore picks up the `process.env.npm_config_https_proxy` but *doesn't* handle the corresponding `process.env.npm_config_noproxy` setting so it incorrectly selects the proxy.

Could you please adjust the function `getProxyForUrlWithNpmConfig` to correctly handle `process.env.npm_config_noproxy` and/or treat ""nothing defined"" differently from proxy explicitly disabled for this domain?


### Debug logs
URLs changed!

Environment variables:
```
    http_proxy = 'http://outbound-proxy.example:3128/'
    https_proxy = 'http://outbound-proxy.example:3128/'
    no_proxy = 'nexus.example,*.example'
    NO_PROXY = 'nexus.example,.example,*.example'
    CYPRESS_DOWNLOAD_MIRROR = 'https://nexus.example/repository/cypress-dist/'
```
npmrc settings:
```
proxy=http://outbound-proxy.example:3128/
https_proxy=http://outbound-proxy.example:3128/
noproxy=*.example
```

Debug logs:
```
.../cypress@8.7.0/node_modules/cypress postinstall: [STARTED] Task without title.
.../cypress@8.7.0/node_modules/cypress postinstall: 2022-01-06T09:52:36.892Z cypress:cli Using CYPRESS_DOWNLOAD_MIRROR from environment variable
.../cypress@8.7.0/node_modules/cypress postinstall: 2022-01-06T09:52:36.892Z cypress:cli Using CYPRESS_DOWNLOAD_MIRROR from environment variable
.../cypress@8.7.0/node_modules/cypress postinstall: 2022-01-06T09:52:36.896Z cypress:cli needed Cypress version: 8.7.0
.../cypress@8.7.0/node_modules/cypress postinstall: 2022-01-06T09:52:36.896Z cypress:cli source url https://nexus.example/repository/cypress-dist/desktop/8.7.0?platform=linux&arch=x64
.../cypress@8.7.0/node_modules/cypress postinstall: 2022-01-06T09:52:36.896Z cypress:cli downloading cypress.zip to ""/tmp/cypress-18030.zip""
.../cypress@8.7.0/node_modules/cypress postinstall: 2022-01-06T09:52:36.901Z cypress:cli Downloading package {
.../cypress@8.7.0/node_modules/cypress postinstall:   url: 'https://nexus.example/repository/cypress-dist/desktop/8.7.0?platform=linux&arch=x64',
.../cypress@8.7.0/node_modules/cypress postinstall:   proxy: 'http://outbound-proxy.example:3128/',
.../cypress@8.7.0/node_modules/cypress postinstall:   downloadDestination: '/tmp/cypress-18030.zip'
.../cypress@8.7.0/node_modules/cypress postinstall: }
.../cypress@8.7.0/node_modules/cypress postinstall: 2022-01-06T09:52:36.945Z cypress:cli Using CYPRESS_DOWNLOAD_MIRROR from environment variable
.../cypress@8.7.0/node_modules/cypress postinstall: 2022-01-06T09:52:36.945Z cypress:cli Using CYPRESS_DOWNLOAD_MIRROR from environment variable
.../cypress@8.7.0/node_modules/cypress postinstall: 2022-01-06T09:52:36.946Z cypress:cli URL: https://nexus.example/repository/cypress-dist/desktop/8.7.0?platform=linux&arch=x64
.../cypress@8.7.0/node_modules/cypress postinstall: Error: tunneling socket could not be established, statusCode=403
```

### Cypress Version

8.7.0

### Package Manager

pnpm

### Operating system

Linux

### Other

_No response_",bug
1094596851,API requests are not always ordered in the order they were made,"### Current behavior

When expecting multiple API calls to the same intercepted route, they are sometimes not ordered in the order they were made by the application.

In the image below we make 3 api requests, all to `/api`. The first has a payload of `{ body: ""first"" }`, the second `{ body: ""second"" }` and third is `{ body: ""third"" }`.

![image](https://user-images.githubusercontent.com/1711610/148261903-8aa89f95-2e31-4e8c-9a5c-15164b82dafd.png)

In the reproducable example I `console.log` out the result of the calls in the order that `spread` gives to the callback: 

![image](https://user-images.githubusercontent.com/1711610/148262508-22788269-d5d9-4b9d-8f5a-2d2bb14ee0ab.png)

As you can see they come through in the incorrect order, with the second & third api call being the wrong way around.

Here's a video that demonstrates this behaviour (this time the first and second calls are the wrong way around).

https://user-images.githubusercontent.com/1711610/148263731-9bcff15b-0376-48f8-903f-bf37ae23e720.mp4




### Desired behavior

I believe that `wait` should preserve the order in which the API calls were made by the application.

### Test code to reproduce

https://github.com/ldabiralai/cypress-wait-spread-bug

### Cypress Version

9.2.0

### Other

_No response_",bug
1094318029,Resolving an alias obtained with a .contains() chained of cy will fail if the element needs to be requeried,"### Current behavior

Hey folks,

i think i found a bug when aliasing elements straight up with **cy.contains().as()**. When the DOM refreshes and the querying for the alias happens, the type of the **.contains()** command is **child** which will try to find a **parent** type command. In the following example the previous command is an assertion, which will make cypress fail with an error. Simply inserting a line with **cy.get('body');** prior to the use of the alias is a work around one could use.

### Desired behavior

The requerying of the alias should stop at the definition of the alias in the **cy.contains()**. The previous command, whatever it might be, shall not blindly be executed in the case of assertions (i do not know which is the correct ruling here).

### Test code to reproduce

```js
  it('test requerying alias', () => {
    // use an accessable domain to reproduce
    cy.visit('https://www.cypress.io/');
    // accept cookies to prevent 403s
    cy.get('#onetrust-accept-btn-handler').click();
    // this command will be tested for prev command since the **.contains()** is treated as a **child** type and **getCommandsUntilFirstParentOrValidSubject(current)** tries to find a **parent** command
    cy.url().should('equal', 'https://www.cypress.io/features');
    // get an alias using **.contains()**
    cy.contains('Cypress is the new standard in front-end testing that every developer and QA engineer needs.').as('foo');
    // trigger reload for new element
    cy.get('header a[href=""/features""]').click();
    // this will try to resolve the alias and crash the party
    cy.get('@foo').should('not.exist');
  });
```

### Cypress Version

8.7.0

### Other

Please feel free to contact/reach out for more information, tho i hope this is enough to reproduce.
Thanks,
Marcel",bug
1094242557,Tests fail on [Cannot create property 'Symbol(ERR_PREPARED_FOR_SERIALIZATION)' on boolean 'true'],"### Current behavior

Currently some of our tests sometimes fail on 
`Cannot create property 'Symbol(ERR_PREPARED_FOR_SERIALIZATION)' on boolean 'true'`

It seems like the error itself is swallowed somehow? or there is no error to begin with and there is something wrong with the error parsing?

### Desired behavior

No to fail the tests, and log a helpful error message

### Test code to reproduce

No idea how to reproduce this. We have cypress dashboard; those are the tests that are flaky right now.

### Cypress Version

9.2.0

### Other

_No response_",bug
1093549260,"Cypress 9.2.0 crash with error ""EINVAL: invalid argument, mkdir 'C:\Users..."" when project's path contains ""%"" on windows","### Current behavior

Currently, when doing these steps:

1. Create a folder named ""Test%20Project"" 
2. Copy one of your own test project, then paste it inside the folder.
3. Install Cypress 9.2.0 using npm
4. Run ""npm run cypress:open""
5. Select a spec file to run it

This error appears in the Test Runner:
![spacePathBugWindows](https://user-images.githubusercontent.com/26069260/148092885-98bfe7c4-41a4-44bb-944b-ae3988cc490a.png)

### Desired behavior

Cypress should be able to run the tests correctly on windows, regardless of the special characters contained in the path. 

### Test code to reproduce

(see current behavior)

### Cypress Version

9.2.0 (possibly happens for 9.0.0 and above)

### Other

Cypress versions 8.7.0< do not have this issue.

This issue wasn't tested on linux/unix OS.

Possible workaround: rename your path to not contains any special characters (may be problematic for non-admin users)",bug
1093514075,Multi-domain: Secondary domain command state sometimes incorrect in UI,"### Current behavior

Currently within the [feature-multidomain](https://github.com/cypress-io/cypress/tree/feature-multidomain) branch, there is an issue that is persisting between commands executed within the secondary domain context. These commands always finish, but are not updated correctly in the UI sometimes and may shown as 'pending'. Here is the same test executed 3 consecutive times, each producing a different UI output.

![Screen Shot 2022-01-04 at 10 30 42 AM](https://user-images.githubusercontent.com/3980464/148087880-cb7f6ef3-1c2e-46df-8355-8d4d96bf53a5.png)

![Screen Shot 2022-01-04 at 10 30 52 AM](https://user-images.githubusercontent.com/3980464/148087905-0cf0a9e1-a36d-4fe5-b1e2-30d055b01195.png)

![Screen Shot 2022-01-04 at 10 31 04 AM](https://user-images.githubusercontent.com/3980464/148087924-8037d382-9a18-44c6-9af6-e2caf418d148.png)


### Desired behavior

The expectation is that the multi-domain tests should not having any pending commands after test execution and should be readily reproducible after consecutive runs.

 ![Screen Shot 2022-01-04 at 10 31 04 AM](https://user-images.githubusercontent.com/3980464/148087924-8037d382-9a18-44c6-9af6-e2caf418d148.png)

### Test code to reproduce

[Example test in question](https://github.com/cypress-io/cypress/blob/feature-multidomain/packages/driver/cypress/integration/e2e/multidomain_spec.ts#L36). Running this test multiple times consecutively by itself should yield the current behavior to reproduce the issue.

### Cypress Version

feature-multidomain (version TBD)

### Other

_No response_",bug
1093328851,type('{enter}') does not fire click event,"### Current behavior

When the target element is a button `type('{enter}')` fires the events

- keydown
- keypress
- keyup

![image](https://user-images.githubusercontent.com/2328042/148062294-69cd75f1-df54-4cc6-bbba-ebe290560bad.png)
Note the first ""click"" is from activating the button.


### Desired behavior

When the target element is a button `type('{enter}')` should fire the events

- keydown
- keypress
- **click**
- keyup

![image](https://user-images.githubusercontent.com/2328042/148062390-ac8782fc-91c4-4a62-a4f0-1cd0c534944c.png)

Note the first ""click"" is from activating the button.

### Test code to reproduce

https://github.com/jamime/cypress-test-tiny

### Cypress Version

9.2.0

### Other

> If the key is the Enter or   key and the current focus is on a state-changing element, the default action MUST be to dispatch a click event, and a DOMActivate event if that event type is supported by the user agent (refer to § 3.5 Activation triggers and behavior for more details)

https://w3c.github.io/uievents/#event-type-keydown

Once the cypress test has failed, if you click ""reset"", then click the second button and press ""Enter"" you will see the correct output.",bug
1088429850,"CYPRESS_VERIFY_TIMEOUT TypeError: Expected the `timeout` option to be a non-negative integer, got `100000` (string)","### Current behavior

New CYPRESS_VERIFY_TIMEOUT environment variable errors out.

Windows:
```
>set CYPRESS_VERIFY_TIMEOUT=100000

>npx cypress verify


An unexpected error occurred while verifying the Cypress executable.

Please search Cypress documentation for possible solutions:

https://on.cypress.io

Check if there is a GitHub issue describing this crash:

https://github.com/cypress-io/cypress/issues

Consider opening a new issue.

----------

TypeError: Expected the `timeout` option to be a non-negative integer, got `100000` (string)

...

```

Linux:

```
$ export CYPRESS_VERIFY_TIMEOUT=100000
$ npx cypress verify
Cypress failed to start.
This may be due to a missing library or dependency. https://on.cypress.io/required-dependencies
Please refer to the error below for more details.
----------
Command failed with ERR_OUT_OF_RANGE: <dir>/.cache/Cypress/9.2.0/Cypress/Cypress --no-sandbox --smoke-test --ping=470
The value of ""timeout"" is out of range. It must be an unsigned integer. Received '100000'
----------
Platform: linux-x64 (Ubuntu - )
Cypress Version: 9.2.0
```

### Desired behavior

New CYPRESS_VERIFY_TIMEOUT environment variable works so I don't have to tinker with my CI every time I update cypress ;)

### Test code to reproduce

Windows:
```
set CYPRESS_VERIFY_TIMEOUT=100000
npx cypress verify
```

Linux:

```
export CYPRESS_VERIFY_TIMEOUT=100000
npx cypress verify
```

### Cypress Version

9.2.0

### Other

Delighted to see this variable introduced!

So many of the small issues our team has had with Cypress have been resolved in the past year :) ",bug
1085607391,cy.screenshot scrolls background when modal displayed  ,"### Current behavior

main page has ""overflow-y: hidden;"" which stops the background page scrolling when a modal is displayed which seems to be ignored when cy.screenshot is called resulting in the below screenshot where the top of the modal is captured multiple times.

![image](https://user-images.githubusercontent.com/76097494/146902544-94b9ee62-117e-4358-97e2-6a9b8e254f30.png)


### Desired behavior

When cy.screenshot is called the ""overflow-y: hidden;"" setting should be recognised and only the modal scrolled as per functionality when manually navigating the page allowing the full modal to captured in a screenshot.

![image](https://user-images.githubusercontent.com/76097494/146903965-e31ca222-2500-421c-81ef-b25371b059d3.png)


### Test code to reproduce

customer data required to get to the page which can not be shared 

### Cypress Version

9.1.1

### Other

currently testing on latest chrome",bug
1082525269,`cy.root().should` in a `within` should retry failed assertions,"### Current behavior

My [test example](https://github.com/cypress-io/cypress-test-tiny/pull/71/commits/fddb7a3e35e40ba24a466610327b294d3490e056) shows how `cy.root()` does not retry failed tests when called inside a `within`. It also shows quite similar tests that work as they are intended.

### Desired behavior

_No response_

### Test code to reproduce

[PR showing issue](https://github.com/cypress-io/cypress-test-tiny/pull/71)

### Cypress Version

9.1.1

### Other

_No response_",bug
1079323266,Cypress broken by URL with special characters,"### Current behavior

Our Phoenix app will redirect `/vida` to `/vida/información-basica/empleo` (notice the special character ""ó""). That page then opens a websocket (same URL).

A test with `cy.visit(""/vida"")` in Cypress breaks. Same test after the route is changed to remove the accent on the ""o"" works.

With the accent ""ó"", our server logs:
```
23:50:27.501 request_id=FsCF2BaXBlhl5zcAAAgJ [info] POST /end-to-end/login
%{account_id: 121}
23:50:27.513 request_id=FsCF2BaXBlhl5zcAAAgJ [info] Sent 200 in 11ms
23:50:27.765 request_id=FsCF2CZaEwCBqVMAAAhJ [info] GET /vida
23:50:27.776 request_id=FsCF2CZaEwCBqVMAAAhJ [info] Sent 302 in 10ms
23:50:27.994 request_id=FsCF2DQBvaBrqm8AABTF [info] GET /vida/información-basica/empleo
23:50:28.017 request_id=FsCF2DQBvaBrqm8AABTF [info] Sent 200 in 22ms
23:50:28.254 request_id=FsCF2EN3Zch76RgAABIH [info] GET /vida/informaci%C3%83%C2%B3n-basica/empleo
```

Without the accent, our server logs:
```
23:54:47.872 request_id=FsCGFLXrmkhSgwkAAH8C [info] POST /end-to-end/login
%{account_id: 123}
23:54:47.888 request_id=FsCGFLXrmkhSgwkAAH8C [info] Sent 200 in 16ms
23:54:48.434 request_id=FsCGFNdtukhKR34AAH9C [info] GET /vida
23:54:48.459 request_id=FsCGFNdtukhKR34AAH9C [info] Sent 302 in 24ms
23:54:49.175 request_id=FsCGFQOaTmBzlmsAAJzB [info] GET /vida/informacion-basica/empleo
23:54:49.228 request_id=FsCGFQOaTmBzlmsAAJzB [info] Sent 200 in 52ms
23:54:51.093 [info] CONNECTED TO Phoenix.LiveView.Socket in 59µs
  Transport: :websocket
  Serializer: Phoenix.Socket.V2.JSONSerializer
  Parameters: %{""_csrf_token"" => ""..., ""_mounts"" => ""0"", ""vsn"" => ""2.0.0""}
```

On the Cypress side, only a single line appears:

```
# With the accent:
GET /vida/informaci%C3%83%C2%B3n-basica/empleo 404 300.388 ms - -
# Without the accent:
GET /vida/informacion-basica/empleo 200 5.114 ms - -
```

Screenshots of the requests from Chrome:
![Screen Shot 2021-12-13 at 11 51 52 PM](https://user-images.githubusercontent.com/33770/145937170-db71ee49-c591-4f1e-bf37-1eacea445fa2.png)
![Screen Shot 2021-12-13 at 11 57 11 PM](https://user-images.githubusercontent.com/33770/145937191-90311c57-8383-49e6-8bb5-dd9077661cc4.png)



### Desired behavior

Cypress should respect the encodings. Note that our app currently runs in production, with users having the usual browsers on desktop and mobile.

### Test code to reproduce

```
cy.visit(""/url-that-redirects-to-url-with-non-latin-characters""
```


### Cypress Version

2.88.10

### Other

_No response_",bug
1078474986,Reading a binary fixture get it's content changed,"### Current behavior

In the process of updating from `cypress@8` to `cypress@9`, It was noticed that intercepting a binary file had changed, making the intercepted file to be corrupted (not in the expected format).

Here's a screenshot of the update and the files diffing
![Screenshot 2021-12-13 at 11 19 09](https://user-images.githubusercontent.com/4404448/145812445-da6e3bd2-984a-45a7-8e7d-442808f161fc.png)


### Desired behavior

When reading a binary fixture the content of it shouldn't be changed when serving it (via `cy.intercept`)

### Test code to reproduce

https://github.com/andrealmieda/react-cypress-boilerplate

I created a small test to download the intercepted binary file and then manually check it on the terminal 

### Cypress Version

9.1.1

### Other

_No response_",bug
1078287929,Endless loading in Cypress Test Runer when you click on a button that leads to the internal structure of the site.,"### Current behavior

the page https://www.chartjs.org/docs/latest/ loads endlessly and won't open

the page loads endlessly and then nothing happens

### Desired behavior

page opened

### Test code to reproduce

Steps to reproduce:
1. cy.visit('https://www.chartjs.org/')
2. cy.get('.button__red').click()
note that the href of this button is ""/.docs""


### Cypress Version

9.1.1

### Other

_No response_",bug
1077009326,Issue with MP4 fixtures when intercepting with Cypress 9.1.1,"### Current behavior

Cypress 9 does not intercept with mp4 fixtures correctly. The MP4 does not load when loaded via either the `<video>` tag or directly in the browser.

### Desired behavior

The MP4 should be mocked correctly by cypress and the video should autoplay. The test should pass.

### Test code to reproduce

This repo demonstrates the issue, it's setup with cypress 9.1.1 by default in which the test will fail.

https://github.com/ldabiralai/cypress-mp4-bug

### Cypress Version

9.1.1

### Other

_No response_",bug
1075393194,"cy.wait using array with one alias returns a single interception, not an array of iterceptions","### Current behavior

According to the docs, https://docs.cypress.io/api/commands/wait#Aliases

and also the type definition for `wait()` - 

```
wait(alias: string[], options?: Partial<WaitOptions>): Chainable<Interception[]>
```

a `wait` that accepts an array of aliases, should return an array of `Interception`

This doesnt seem to be the case when the array has one interception.  The `then` callback receives a response with a single interception, so either this is incorrect, or the type definition is incorrect

e.g. having `cy.wait([@myIterception]).then((res) => ...)` currently yields `res` as a single interception object

### Desired behavior

`cy.wait([@myIterception]).then((res) => ...)` should yield `res` as a an array of `Interception` objects, granted it would be an array of one `Interception`

### Test code to reproduce

.

### Cypress Version

8.4.1

### Other

_No response_",bug
1070700095,Intercepted request never happens when using cy.session,"### Current behavior

I’m having an issue that only happens when using the experimental `cy.session` command.
Let me explain it.
I’m testing an app that has the following stack: Angular JS in the frontend, express for the server, and MongoDB as a database.
When using `cy.session` with the server pointing to a local MongoDB, everything works fine. However, when pointing the server to a remote MongoDB, after the user logs in (with or without the session cached), a request that I expect doesn’t happen after a visit to a page, and so the tests fail when I try to wait for the alias I gave to the intercept.
The only way to make it work when pointing to the remote MongoDB is not to use `cy.session`, but then, tests get slower (because they always have to login via the GUI).
Here’s a comment from the repo where I’m facing the issue so that you can try to reproduce it (if you want it) https://github.com/brmodeloweb/brmodelo-app/pull/254#issuecomment-985583472.
Has anyone faced an issue like this? Could this be an issue with `cy.session`?
Any help is appreciated.

### Desired behavior

I expect that `cy.session` should work when the server points to a remote MongoDB, as it does when pointing to a local one.

### Test code to reproduce

For details, see this comment from the project where the issue is happening https://github.com/brmodeloweb/brmodelo-app/pull/254#issuecomment-985583472.

To setup the local MongoDB, I had to use the second answer from this StackOverflow question https://stackoverflow.com/questions/58034955/read-only-file-system-when-attempting-mkdir-data-db-on-mac.

### Cypress Version

9.1.0

### Other

_No response_",bug
1070688820,Extra load events when AUT navigates on hashchange in latest Chrome Beta,"### Current behavior

Since Chrome Beta 97.0.4692.20, Chrome [fires the load event to the parent frame when an iframe navigates via hashchange](https://github.com/cypress-io/cypress/pull/18996#issuecomment-984944344) for security reasons.

This causes Cypress to unnecessarily re-set window props, re-bind listeners, and fire the `navigation:changed` event, even though the AUT has not actually reloaded and the `load` event is not fired in the user's app.

Below is the log output using the reproduction steps below and the latest Chrome Beta. Note the lines marked with `<= Extra event`:

```
iframe load
navigation:changed: page navigation event (load)
navigation:changed: page navigation event (before:load)
app run
app load
iframe load
navigation:changed: page navigation event (load)
navigation:changed: hashchange
iframe load <= Extra event
navigation:changed: page navigation event (load) <= Extra event
navigation:changed: hashchange
```

This causes failures [in our own tests](https://github.com/cypress-io/cypress/pull/18996) somewhat coincidentally.

### Desired behavior

Hash changes should not cause extra work by Cypress or extra `navigation:changed` events to be sent to user's event listeners.

This should be the log output for the repro (as seen in Chrome (stable) 96):

```
iframe load
navigation:changed: page navigation event (load)
navigation:changed: page navigation event (before:load)
app run
app load
iframe load
navigation:changed: page navigation event (load)
navigation:changed: hashchange
navigation:changed: hashchange
```




### Test code to reproduce

For the sake of demonstrating Cypress re-running code on false load events, also put `console.log('iframe load')` on [this line](https://github.com/cypress-io/cypress/blob/4d35779c8ada80c999537bf9c6d7649c01ff5bad/packages/driver/src/cypress/cy.ts#L746).

index.html

```html
<script>
  console.log('app run')

  window.addEventListener('load', () => {
    console.log('app load')
  })
</script>

<a id=""hashchange"" href=""#hashchange"">hashchange</a>
```

spec.js

```js
it('extra load events on hashchange', () => {
  const navEvents = []

  cy.on('navigation:changed', (e) => {
    console.log('navigation:changed:', e)

    navEvents.push(e)
  })

  cy.visit('/index.html')

  cy.get('#hashchange').click()
  .window()
  .then((win) => {
    win.history.back()
    win.history.forward()
  })
  .wrap(navEvents)
  .should('deep.equal', [
    'page navigation event (load)',
    'page navigation event (before:load)',
    'page navigation event (load)',
    'hashchange',
    'hashchange',
  ])
})

```

### Cypress Version

N/A

### Other

_No response_",bug
1070620207,"""Most NODE_OPTIONs are not supported in packaged apps"" when running cypress component testing","### Current behavior

When I run `npm run cypress:open-ct` (or `run-ct`), I get an error `[43901:1203/085557.424470:ERROR:node_bindings.cc(276)] Most NODE_OPTIONs are not supported in packaged apps. See documentation for more details.`

This might be an Electron issue and it doesn't seem to affect behaviour for us.

### Desired behavior

No error to be thrown

### Test code to reproduce

Run the Cypress component tester

### Cypress Version

9.1.0

### Other

MacOS 11.6
Node v16.0.0",bug
1069977784,failed assert doesn't trigger failed test,"### Current behavior

If I use async/await to handle a promise and there is a failed assertion after, the test is not considered as failed
```
it.only('should start', async () => {
   // I have my await code here
   .
   .
   .
    cy.contains('some content').should('exist')
})
```
![image](https://user-images.githubusercontent.com/1144196/144501703-a0f14369-b88d-445c-a4d4-9cda73c6e9b2.png)


### Desired behavior

The test should fail

### Test code to reproduce

```
var helloResult = () => {
  return new Promise(resolve => {
    setTimeout(() => resolve('world'), 1000);
  });
};

it.only('should start', async () => {
    const response = await helloResult();
    console.log(response)
    cy.contains('some content').should('exist')
})
```

### Cypress Version

9.1.0

### Other

_No response_",bug
1068792880,cy.intercept fails to respond with JSON containing tilde (~) in string property,"### Current behavior

When intercepting a request and responding with a JSON that contains a tilde an error is thrown.
```
cy.intercept(""GET"", ""localhost/123"", (res) => {
      res.reply({
        bla: ""~"",
      });
    });
```

`VM263:1 Uncaught (in promise) SyntaxError: Unexpected token x in JSON at position 9`

This seems to be a regression in 9.1.0, in 9.0.0 this executes just fine.


### Desired behavior

No error, the response contains the correct object with a tilde.

### Test code to reproduce

Repro repo: https://github.com/LoaderB0T/cypress-tilde-regression

### Cypress Version

9.1.0

### Other

_No response_",bug
1063800308,Bad body encoding in `cy.request`,"### Current behavior

Body is encoding chars like  '~' into hex chars (` \x7e`)

### Desired behavior

Body sent should be ` { key: '~'}` without encoding

### Test code to reproduce

```js
    cy.request({ method: 'POST', body: { key: '~'}, 'url': 'https://www.google.com'})

```

### Cypress Version

9.1.0

### Other

I thank you for what you do at Cypress ! I'm facing the issue described here since the v9.1, is it a bug or is it what you wanted? 😬 

Thanks for your time !
",bug
1062840880,setCookies is broken since 9.0.0. `~` is converted to `\x7e` ,"### Current behavior

After calling setCookie with a valid cookie and then loading the desired page the cookies are somehow not accepted or read. The page we load should show the user is logged in, but he appears as if the cookies are not there. The Network Application Cookies show that they are set, but the page that is loaded doesn't seem to either see them or read them. Note in this example baseUrl is not set, but I tried it with it being set and not. Same behavior.


I ran 8.7.0 and 9.0.0 and 9.0.1. Its broken since 9.0.0. Tested on Chrome, Firefox and Electron. Broken in all 3. 
In 8.7.0 the user appears to be logged in, in 9.* the user is not.

### Desired behavior

User should be logged in after calling setCookies and then visiting the destination url. In this example when I run the provided code and www.yahoo.com is loaded and I move the mouse over the top right `mail` icon I see the user as logged in.  

See screen shot for Cypress 8.7.0
<img width=""437"" alt=""Screen Shot 2021-11-24 at 11 34 07 AM"" src=""https://user-images.githubusercontent.com/2966099/143302553-c57082d3-adca-4f03-b0bf-39f9b9eeb1c0.png"">

Now when running with 9.0.0 you will see this. As if the user is not signed in.
<img width=""401"" alt=""Screen Shot 2021-11-24 at 11 31 42 AM"" src=""https://user-images.githubusercontent.com/2966099/143302646-73f46718-ea5c-4e61-8686-e70c48b85f38.png"">



### Test code to reproduce

I can't give you fully reproducible code, because I can't provide you with the way we get our cookies. Here is the basic script with a hardcoded sample cookie value. 

```
describe('Main Dashoard login load test', function() {
  context('Login', function() {
    it('When moving the mouse over the mail icon at the top right corner the user should show logged in', function() {
      cy.clearCookie('Y');
      cy.clearCookie('T');
      cy.getCookie('Y').should('not.exist');
      cy.getCookie('T').should('not.exist');

      cy.setCookie('Y', ""v=1&np=1&n=23eno0bmig3ub&l=8a2dn1nck044hib2atdgsc5adwppb5ii12lf2i04/o&p=n33vvvv00000000&r=11p&intl=us"");
      cy.setCookie('T', ""af=JnRzPTE2Mzc3Nzg4NTYmcHM9SDR2cHdfbnZXdd=bnMBeWFob28BZwFDTU5NWlhOUURBNkI3SFoyTFlTTUpLQUY3RQFhYwFBSTJLRmlHNQFhbAFkc3BfYXV0bwFzYwF5cWEBZnMBa1VGSTV3Qmhub1dvAXp6AW9Xb25oQjhBQQFhAVFBRQFsYXQBb1dvbmhCAW51ATA-&kt=asdffadfaf--~I&ku=FAATcU6Cc1YDmlpoXPv7S4BTWHg5Uz58mDuWHcxOtOQKf6gvdQ10fhJAnSJ9k_HlToJ4.YDa4kNdee2LAEpqg.KtqhyHvvi2o5MRjmhOesmE7p4fxxHAwiK1gYjNXygVm_AHV95GryLqDPnfuEFaHFQy_vfOKU1YtxEi3W2AdQM3j8-~E"");
      cy.visit('https://www.yahoo.com');
    });
  });
});
```


### Cypress Version

9.*

### Other

_No response_",bug
1062372438,Cypress 9.1 appears to mishandle POST content with special characters,"### Current behavior

Upgraded from 9.0 to 9.1

Multiple Tests that send a POST including random generated password content with blackslashes:

e.g.  ""oldPassword"":""S.]\\x7e}gZ3=kFJ""  (Note the double backslash - GH editor might hide this!).

Fails at when received at the server as oldPassword is wrong. 

### Desired behavior

Tests execute POST commands as before.

### Test code to reproduce
-UPDATED-
Analysis as in comment below from slavab89 appears to be what I am observing.

### Cypress Version

9.1.0

### Other

Thank you. 😄 ",bug
1062052295,Cypress 9.1 open wrong URL when there is a ~ (tilde) in the link,"### Current behavior

In Cypress 9.1, some of our tests failed due to Cypress process the URL in `visit()` calls incorrectly.

This code:

```
cy.visit('/?q=~%28match_status~%28~%27invoiced%29%29')
```

causes Cypress to visit this link:

```
/?q=%5Cx7e%28match_status~%28~%27invoiced%29%29
```

Note the strange `%5Cx7e` right after the `q=`.

### Desired behavior

Cypress should not alter the visit URL in anyway.

### Test code to reproduce

https://github.com/lephuongbg/cypress-test-tiny/tree/cypress-9.1-url-bug

Quick link to diff:

https://github.com/cypress-io/cypress-test-tiny/compare/master...lephuongbg:cypress-9.1-url-bug

### Cypress Version

9.1.0

### Other

_No response_",bug
1061561206,@cypress/react throws in Node v12,"### Current behavior

Similar to https://github.com/cypress-io/cypress/issues/18973, @cypress/react is throwing an error when using Node 12, cypress v9.0 & @cypress/react v5.10.3.

Found when updating the cypres-example-todomvc-reduc repo to use cypress 9.1.0 & @cypress/react.

```js
yarn component
yarn run v1.22.17
$ cypress open-ct

The function exported by the plugins file threw an error.

We invoked the function exported by `/Users/emily/dev/cypress-example-todomvc-redux/cypress/plugins/index.js`, but it threw an error.

 /Users/emily/dev/cypress-example-todomvc-redux/node_modules/@cypress/react/plugins/utils/get-transpile-folders.js:5
  const rawFolders = config.addTranspiledFolders ?? []
                                                  ^

SyntaxError: Unexpected token '?'
    at Module._compile (internal/modules/cjs/loader.js:891:18)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:991:10)
    at Module.load (internal/modules/cjs/loader.js:811:32)
    at Function.Module._load (internal/modules/cjs/loader.js:723:14)
    at Module.require (internal/modules/cjs/loader.js:848:19)
    at require (internal/modules/cjs/helpers.js:74:18)
    at Object.<anonymous> (/Users/emily/dev/cypress-example-todomvc-redux/node_modules/@cypress/react/plugins/react-scripts/findReactScriptsWebpackConfig.js:6:33)
    at Module._compile (internal/modules/cjs/loader.js:955:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:991:10)
    at Module.load (internal/modules/cjs/loader.js:811:32)
    at Function.Module._load (internal/modules/cjs/loader.js:723:14)
    at Module.require (internal/modules/cjs/loader.js:848:19)
    at require (internal/modules/cjs/helpers.js:74:18)
    at Object.<anonymous> (/Users/emily/dev/cypress-example-todomvc-redux/node_modules/@cypress/react/plugins/react-scripts/index.js:2:39)
    at Module._compile (internal/modules/cjs/loader.js:955:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:991:10)
✨  Done in 8.51s.
```

### Desired behavior

@cypress/react is compatible with Node 12. It wouldd also be nice if the package.json defined the node version as `>=12.0.0`.

### Test code to reproduce

https://github.com/cypress-io/cypress-example-todomvc-redux/compare/use-9.1.0

```
nvm use $(cat .node_version)
yarn install
yarn component
```

### Cypress Version

9.1.0

### Other

_No response_",bug
1061405261,Importing anything from @angular/cdk breaks E2E test build (Angular 13),"### Current behavior

When I try to import anything from `@angular/cdk` (Angular 13), Cypress fails to build the test. 
This used to work in Angular 12, so I am not exactly sure where is the problem.

The error I am getting:
```
Error: Webpack Compilation Error
./node_modules/@angular/cdk/fesm2015/platform.mjs
Module not found: Error: Can't resolve '@angular/common' in 'C:\dev\workspace\exp\cypress-test\node_modules\@angular\cdk\fesm2015'
resolve '@angular/common' in 'C:\dev\workspace\exp\cypress-test\node_modules\@angular\cdk\fesm2015'
  Parsed request is a module
  using description file: C:\dev\workspace\exp\cypress-test\node_modules\@angular\cdk\package.json (relative path: ./fesm2015)
    Field 'browser' doesn't contain a valid alias configuration
    resolve as module
      C:\dev\workspace\exp\cypress-test\node_modules\@angular\cdk\fesm2015\node_modules doesn't exist or is not a directory
      C:\dev\workspace\exp\cypress-test\node_modules\@angular\node_modules doesn't exist or is not a directory
      C:\dev\workspace\exp\cypress-test\node_modules\node_modules doesn't exist or is not a directory
      C:\dev\workspace\exp\node_modules doesn't exist or is not a directory
      C:\node_modules doesn't exist or is not a directory
      looking for modules in C:\dev\workspace\exp\cypress-test\node_modules\@angular\cdk\node_modules
        using description file: C:\dev\workspace\exp\cypress-test\node_modules\@angular\cdk\package.json (relative path: ./node_modules)
          Field 'browser' doesn't contain a valid alias configuration
      looking for modules in C:\dev\workspace\exp\cypress-test\node_modules
        using description file: C:\dev\workspace\exp\cypress-test\package.json (relative path: ./node_modules)
          Field 'browser' doesn't contain a valid alias configuration
          using description file: C:\dev\workspace\exp\cypress-test\node_modules\@angular\common\package.json (relative path: .)
            no extension
              Field 'browser' doesn't contain a valid alias configuration
      looking for modules in C:\dev\node_modules
        No description file found
        Field 'browser' doesn't contain a valid alias configuration
      looking for modules in C:\dev\workspace\node_modules
        No description file found
        Field 'browser' doesn't contain a valid alias configuration
              C:\dev\workspace\exp\cypress-test\node_modules\@angular\common is not a file
            .js
              Field 'browser' doesn't contain a valid alias configuration
          using description file: C:\dev\workspace\exp\cypress-test\node_modules\@angular\cdk\package.json (relative path: ./node_modules/@angular/common)
            no extension
              Field 'browser' doesn't contain a valid alias configuration
              C:\dev\workspace\exp\cypress-test\node_modules\@angular\common.js doesn't exist
            .json
              Field 'browser' doesn't contain a valid alias configuration
              C:\dev\workspace\exp\cypress-test\node_modules\@angular\cdk\node_modules\@angular\common doesn't exist
            .js
              Field 'browser' doesn't contain a valid alias configuration
        No description file found
        no extension
          Field 'browser' doesn't contain a valid alias configuration
              C:\dev\workspace\exp\cypress-test\node_modules\@angular\common.json doesn't exist
            .jsx
              Field 'browser' doesn't contain a valid alias configuration
              C:\dev\workspace\exp\cypress-test\node_modules\@angular\cdk\node_modules\@angular\common.js doesn't exist
            .json
              Field 'browser' doesn't contain a valid alias configuration
        No description file found
        no extension
          Field 'browser' doesn't contain a valid alias configuration
          C:\dev\node_modules\@angular\common doesn't exist
        .js
          Field 'browser' doesn't contain a valid alias configuration
              C:\dev\workspace\exp\cypress-test\node_modules\@angular\common.jsx doesn't exist
            .mjs
              Field 'browser' doesn't contain a valid alias configuration
              C:\dev\workspace\exp\cypress-test\node_modules\@angular\cdk\node_modules\@angular\common.json doesn't exist
            .jsx
              Field 'browser' doesn't contain a valid alias configuration
          C:\dev\workspace\node_modules\@angular\common doesn't exist
        .js
          Field 'browser' doesn't contain a valid alias configuration
          C:\dev\node_modules\@angular\common.js doesn't exist
        .json
          Field 'browser' doesn't contain a valid alias configuration
              C:\dev\workspace\exp\cypress-test\node_modules\@angular\common.mjs doesn't exist
            .coffee
              Field 'browser' doesn't contain a valid alias configuration
              C:\dev\workspace\exp\cypress-test\node_modules\@angular\cdk\node_modules\@angular\common.jsx doesn't exist
            .mjs
              Field 'browser' doesn't contain a valid alias configuration
          C:\dev\workspace\node_modules\@angular\common.js doesn't exist
        .json
          Field 'browser' doesn't contain a valid alias configuration
          C:\dev\node_modules\@angular\common.json doesn't exist
        .jsx
          Field 'browser' doesn't contain a valid alias configuration
              C:\dev\workspace\exp\cypress-test\node_modules\@angular\common.coffee doesn't exist
            .ts
              Field 'browser' doesn't contain a valid alias configuration
              C:\dev\workspace\exp\cypress-test\node_modules\@angular\cdk\node_modules\@angular\common.mjs doesn't exist
            .coffee
              Field 'browser' doesn't contain a valid alias configuration
          C:\dev\workspace\node_modules\@angular\common.json doesn't exist
        .jsx
          Field 'browser' doesn't contain a valid alias configuration
          C:\dev\node_modules\@angular\common.jsx doesn't exist
        .mjs
          Field 'browser' doesn't contain a valid alias configuration
              C:\dev\workspace\exp\cypress-test\node_modules\@angular\common.ts doesn't exist
            .tsx
              Field 'browser' doesn't contain a valid alias configuration
              C:\dev\workspace\exp\cypress-test\node_modules\@angular\cdk\node_modules\@angular\common.coffee doesn't exist
            .ts
              Field 'browser' doesn't contain a valid alias configuration
          C:\dev\workspace\node_modules\@angular\common.jsx doesn't exist
        .mjs
          Field 'browser' doesn't contain a valid alias configuration
          C:\dev\node_modules\@angular\common.mjs doesn't exist
        .coffee
          Field 'browser' doesn't contain a valid alias configuration
              C:\dev\workspace\exp\cypress-test\node_modules\@angular\common.tsx doesn't exist
              C:\dev\workspace\exp\cypress-test\node_modules\@angular\cdk\node_modules\@angular\common.ts doesn't exist
            .tsx
              Field 'browser' doesn't contain a valid alias configuration
          C:\dev\workspace\node_modules\@angular\common.mjs doesn't exist
        .coffee
          Field 'browser' doesn't contain a valid alias configuration
          C:\dev\node_modules\@angular\common.coffee doesn't exist
        .ts
          Field 'browser' doesn't contain a valid alias configuration
              C:\dev\workspace\exp\cypress-test\node_modules\@angular\cdk\node_modules\@angular\common.tsx doesn't exist
            as directory
              existing directory
                using path: C:\dev\workspace\exp\cypress-test\node_modules\@angular\common\index
                  using description file: C:\dev\workspace\exp\cypress-test\node_modules\@angular\common\package.json (relative path: ./index)
                    no extension
                      Field 'browser' doesn't contain a valid alias configuration
          C:\dev\workspace\node_modules\@angular\common.coffee doesn't exist
        .ts
          Field 'browser' doesn't contain a valid alias configuration
          C:\dev\node_modules\@angular\common.ts doesn't exist
        .tsx
          Field 'browser' doesn't contain a valid alias configuration
            as directory
              C:\dev\workspace\exp\cypress-test\node_modules\@angular\cdk\node_modules\@angular\common doesn't exist
                      C:\dev\workspace\exp\cypress-test\node_modules\@angular\common\index doesn't exist
                    .js
                      Field 'browser' doesn't contain a valid alias configuration
          C:\dev\workspace\node_modules\@angular\common.ts doesn't exist
        .tsx
          Field 'browser' doesn't contain a valid alias configuration
          C:\dev\node_modules\@angular\common.tsx doesn't exist
        as directory
          C:\dev\node_modules\@angular\common doesn't exist
                      C:\dev\workspace\exp\cypress-test\node_modules\@angular\common\index.js doesn't exist
                    .json
                      Field 'browser' doesn't contain a valid alias configuration
          C:\dev\workspace\node_modules\@angular\common.tsx doesn't exist
        as directory
          C:\dev\workspace\node_modules\@angular\common doesn't exist
                      C:\dev\workspace\exp\cypress-test\node_modules\@angular\common\index.json doesn't exist
                    .jsx
                      Field 'browser' doesn't contain a valid alias configuration
                      C:\dev\workspace\exp\cypress-test\node_modules\@angular\common\index.jsx doesn't exist
                    .mjs
                      Field 'browser' doesn't contain a valid alias configuration
                      C:\dev\workspace\exp\cypress-test\node_modules\@angular\common\index.mjs doesn't exist
                    .coffee
                      Field 'browser' doesn't contain a valid alias configuration
                      C:\dev\workspace\exp\cypress-test\node_modules\@angular\common\index.coffee doesn't exist
                    .ts
                      Field 'browser' doesn't contain a valid alias configuration
                      C:\dev\workspace\exp\cypress-test\node_modules\@angular\common\index.ts doesn't exist
                    .tsx
                      Field 'browser' doesn't contain a valid alias configuration
                      C:\dev\workspace\exp\cypress-test\node_modules\@angular\common\index.tsx doesn't exist
[C:\dev\workspace\exp\cypress-test\node_modules\@angular\cdk\fesm2015\node_modules]
[C:\dev\workspace\exp\cypress-test\node_modules\@angular\node_modules]
[C:\dev\workspace\exp\cypress-test\node_modules\node_modules]
[C:\dev\workspace\exp\node_modules]
[C:\node_modules]
[C:\dev\node_modules\package.json]
[C:\dev\workspace\node_modules\package.json]
[C:\dev\workspace\exp\cypress-test\node_modules\@angular\common]
[C:\dev\workspace\exp\cypress-test\node_modules\@angular\common.js]
[C:\dev\workspace\exp\cypress-test\node_modules\@angular\cdk\node_modules\@angular\common]
[C:\dev\node_modules\@angular\common\package.json]
[C:\dev\workspace\exp\cypress-test\node_modules\@angular\common.json]
[C:\dev\workspace\exp\cypress-test\node_modules\@angular\cdk\node_modules\@angular\common.js]
[C:\dev\workspace\node_modules\@angular\common\package.json]
[C:\dev\node_modules\@angular\common]
[C:\dev\workspace\exp\cypress-test\node_modules\@angular\common.jsx]
[C:\dev\workspace\exp\cypress-test\node_modules\@angular\cdk\node_modules\@angular\common.json]
[C:\dev\workspace\node_modules\@angular\common]
[C:\dev\node_modules\@angular\common.js]
[C:\dev\workspace\exp\cypress-test\node_modules\@angular\common.mjs]
[C:\dev\workspace\exp\cypress-test\node_modules\@angular\cdk\node_modules\@angular\common.jsx]
[C:\dev\workspace\node_modules\@angular\common.js]
[C:\dev\node_modules\@angular\common.json]
[C:\dev\workspace\exp\cypress-test\node_modules\@angular\common.coffee]
[C:\dev\workspace\exp\cypress-test\node_modules\@angular\cdk\node_modules\@angular\common.mjs]
[C:\dev\workspace\node_modules\@angular\common.json]
[C:\dev\node_modules\@angular\common.jsx]
[C:\dev\workspace\exp\cypress-test\node_modules\@angular\common.ts]
[C:\dev\workspace\exp\cypress-test\node_modules\@angular\cdk\node_modules\@angular\common.coffee]
[C:\dev\workspace\node_modules\@angular\common.jsx]
[C:\dev\node_modules\@angular\common.mjs]
[C:\dev\workspace\exp\cypress-test\node_modules\@angular\common.tsx]
[C:\dev\workspace\exp\cypress-test\node_modules\@angular\cdk\node_modules\@angular\common.ts]
[C:\dev\workspace\node_modules\@angular\common.mjs]
[C:\dev\node_modules\@angular\common.coffee]
[C:\dev\workspace\exp\cypress-test\node_modules\@angular\cdk\node_modules\@angular\common.tsx]
[C:\dev\workspace\node_modules\@angular\common.coffee]
[C:\dev\node_modules\@angular\common.ts]
[C:\dev\workspace\exp\cypress-test\node_modules\@angular\common\index]
[C:\dev\workspace\node_modules\@angular\common.ts]
[C:\dev\node_modules\@angular\common.tsx]
[C:\dev\workspace\exp\cypress-test\node_modules\@angular\common\index.js]
[C:\dev\workspace\node_modules\@angular\common.tsx]
[C:\dev\workspace\exp\cypress-test\node_modules\@angular\common\index.json]
[C:\dev\workspace\exp\cypress-test\node_modules\@angular\common\index.jsx]
[C:\dev\workspace\exp\cypress-test\node_modules\@angular\common\index.mjs]
[C:\dev\workspace\exp\cypress-test\node_modules\@angular\common\index.coffee]
[C:\dev\workspace\exp\cypress-test\node_modules\@angular\common\index.ts]
[C:\dev\workspace\exp\cypress-test\node_modules\@angular\common\index.tsx]
 @ ./node_modules/@angular/cdk/fesm2015/platform.mjs 3:0-52 38:14-31
 @ ./cypress/integration/spec.ts
```

### Desired behavior

I should be able to import from `@angular/cdk`

### Test code to reproduce

```js
import {
  getSupportedInputTypes,
} from '@angular/cdk/platform';

describe('My First Test', () => {
  // just a test 
  const types = getSupportedInputTypes();

  it('Visits the initial project page', () => {
    cy.visit('/')
    cy.contains('Welcome')
  })
})

```

### Cypress Version

9.1.0

### Other

_No response_",bug
1059403740,Check select (multiple) has no values?,"### Current behavior

`cy.get('select').should('have.value', []);` => `expected to have value [], but the value was []`

### Desired behavior

`cy.get('select').should('have.value', []);` => OK

### Test code to reproduce

have an empty multiple select

### Cypress Version

9.0.0

### Other

_No response_",bug
1051740664,Cypress still has issues with copying fails from a read-only location,"### Current behavior

I use NixOS and as such Cypress is originally installed into a read-only location. It seems to me that https://github.com/cypress-io/cypress/pull/17800/files for some reason only fixed this for `background.js`. But, please see the output below, from my NixOS machine, with Cypress 9.0.0:

```shell
~/private/nixpkgs on update-cypress •
$ ls -lah ~/.config/Cypress/cy/production/browsers/chrome-stable/interactive/CypressExtension/
total 1.5M
dr-xr-xr-x 4 tifa users 4.0K Nov 12 09:59 .
drwxr-xr-x 8 tifa users 4.0K Nov 12 10:01 ..
-rw-r--r-- 1 tifa users 1.5M Nov 12 09:59 background.js
dr-xr-xr-x 2 tifa users 4.0K Nov 12 09:59 icons
dr-xr-xr-x 2 tifa users 4.0K Nov 12 09:59 logos
-r--r--r-- 1 tifa users 1.2K Nov 12 09:59 manifest.json
-r--r--r-- 1 tifa users  333 Nov 12 09:59 newtab.css
-r--r--r-- 1 tifa users  771 Nov 12 09:59 newtab.html
-r--r--r-- 1 tifa users  571 Nov 12 09:59 popup.css
-r--r--r-- 1 tifa users  527 Nov 12 09:59 popup.html
```

As you can guess, this results in the following error:

```
**Title:** Error launching browser

**Message:** EACCES: permission denied, unlink '/home/tifa/.config/Cypress/cy/production/browsers/chrome-stable/interactive/CypressExtension/popup.html'

**Stack trace:**
Error: EACCES: permission denied, unlink '/home/tifa/.config/Cypress/cy/production/browsers/chrome-stable/interactive/CypressExtension/popup.html'
```

### Desired behavior

_No response_

### Test code to reproduce

I can't currently provide test code since the official Nixpkgs repository has Cypress 8.3.1 and I am reporting this specifically for 9.0.0, which already includes the PR I mentioned above. The issue would pop up in older versions as well though. If it's required to verify this issue with an actual Nix Cypress I can provide an overlay that would you have to use to get version 9.0.0.


### Cypress Version

9.0.0

### Other

_No response_",bug
1045757630,URLs are parsed with formatting rules before display,"### Current behavior

I have an API endpoint for my app to load Cypress fixtures located at `/__cypress__/fixtures`

When an error occurs, instead of displaying `http://localhost/__cypress__/fixtures` as the request, Cypress perform text formatting on the URL and uses the double-underscores to convert 'cypress' into bold, now presenting `http://localhost/cypress/fixtures` with 'cypress' in bold

![image](https://user-images.githubusercontent.com/167395/140506297-80f888ee-abb0-40c0-bb05-2339d01f44a2.png)


### Desired behavior

Cypress should not be parsing the URL and should display it literally/correctly as `http://localhost/__cypress__/fixtures`

### Test code to reproduce

`cy.request({ url: '/__cypress__/fixtures' })`

### Cypress Version

8.7

### Other

_No response_",bug
1042875392,.intercept() does not provide statusCode and response body in GUI,"### Current behavior

I’m having trouble with intercepting a request in my application. I should be able to look into the response body, but it is not visible. Status code is 0. I can see the proper response and status code about once in 100 times, not sure what exactly causes it to appear. But I can see that the dot is grey instead of being blue in the GUI.
![Screenshot 2021-11-02 at 22 35 08](https://user-images.githubusercontent.com/23213553/139955514-4a4e64f1-fd01-4be2-beef-3db03e2cbfd8.png)




### Desired behavior

_No response_

### Test code to reproduce

https://github.com/filiphric/trelloapp-vue-vite-ts/blob/failing-to-load-response-body/cypress/integration/example.spec.ts

### Cypress Version

8.7.0

### Other

_No response_",bug
1026887891,Infinite runtime with afterEach and retries enabled,"### Current behavior

[My ticket on cypress-cucumber-preprocessor](https://github.com/TheBrainFamily/cypress-cucumber-preprocessor/issues/628#issuecomment-943656687)

Semi-reproducible behavior: With retries enabled and anything in afterEach on a test, if that test fails, then the test will run infinitely on the retry attempt whether the second attempt fails or succeeds.

The behavior on my project: I've got timeouts set to 60 seconds and if I have a bad network request hanging longer than that, then it will produce this infinite run on the retry. I'm only able to reproduce it consistently on a handful of websites with `""pageLoadTimeout"": 1000`. The behavior is the same though.

<img width=""996"" alt=""Screen Shot 2021-10-14 at 4 26 52 PM"" src=""https://user-images.githubusercontent.com/81179661/137405366-0be04b8f-23bf-44ae-a127-9a280a86b931.png"">

### Desired behavior

I am trying to use `cypress-cucumber-preprocessor` which runs with logic in afterEach. I currently can't put these cucumber tests into CI because of the risk of running jobs infinitely. Desired behavior is that the tests fail or succeed on retry attempts and the test concludes, which is what happens if I remove the afterEach block from the test code below.

Any suggestions for workarounds?

### Test code to reproduce

Infinite.js
```js
describe('Infinite', function () {
    afterEach(() => {
        cy.then(() => {});
    });
    it('Infinite', function () {
        cy.visit('https://www.starwars.com/');
    });
});
```

cypress.json
```json
{
	""retries"": 2,
    ""pageLoadTimeout"": 1000
}
```

### Cypress Version

8.6.0",bug
1021644441,Cypress crashed when runing demo case with Chrome94,"### Current behavior

![image](https://user-images.githubusercontent.com/15189659/136649977-e51be416-7e46-44da-81a0-98f430fc2be9.png)
```  cypress:server:browsers:cri-client registering CDP on event { eventName: 'Network.requestWillBeSent' } +85ms
  cypress:server:browsers:cri-client registering CDP on event { eventName: 'Network.responseReceived' } +2ms
  cypress:server:browsers:chrome options.onScreencastFrame is false +95ms
  cypress:server:browsers:chrome received CRI client +1ms
  cypress:server:browsers:chrome navigating to page http://localhost:50707/__/#/tests/integration/1-getting-started/todo.spec.js +0ms
  cypress:network:agent addRequest called { isHttps: true, href: 'https://api.cypress.io/exceptions' } +18s
  cypress:network:connect beginning getAddress { hostname: 'api.cypress.io', port: 443 } +224ms
Error: read ECONNRESET
    at TCP.onStreamRead (internal/stream_base_commons.js:209:20)
 {
  errno: -4077,
  code: 'ECONNRESET',
  syscall: 'read'
}
Error: read ECONNRESET
    at TCP.onStreamRead (internal/stream_base_commons.js:209:20)

  cypress:server:browsers browsers.kill called with no active instance +685ms
  cypress:proxy:http:util:prerequests metrics: { browserPreRequestsReceived: 0, proxyRequestsReceived: 0, immediatelyMatchedRequests: 0, eventuallyReceivedPreRequest: [], neverReceivedPreRequest: [] } +0ms
  cypress:cli child event fired { event: 'exit', code: 1, signal: null } +24s
  cypress:cli child event fired { event: 'close', code: 1, signal: null } +5ms
```
### Desired behavior

demo case should run pass with chrome

https://user-images.githubusercontent.com/15189659/136650311-111ce622-0f43-4f1c-8806-960c61985d6f.mp4



### Test code to reproduce

1. open the cmd
2. npm run cypress
3. select the chrome explore
4. run the demo case

### Cypress Version

8.5.0

### Other

window10 64bit
D:\repos\Cypress>npm -v
6.14.11
D:\repos\Cypress>node -v
v14.16.0

",bug
1021266881,Video functionality is not working on Firefox 93 and above,"### Current behavior

Cypress sessions are failing to record videos on Firefox 93 and 94. I checked this behavior is happening on both Windows 10 and macOS Big Sur.

Affected Cypress Versions: Looks like all (confirmed on 6.8.0, 8.1.0, 8.4.1, 8.5.0)
Affected OS: Looks like all (confirmed on macOS Big Sur and Windows 10)

Error Details
![Screenshot 2021-10-08 at 9 25 51 PM](https://user-images.githubusercontent.com/18749584/136587797-1f97b13b-7952-4c17-9216-bcbb44f91285.png)
Screenshot of a spec (actions.spec.js - kitchen-sink) run on Firefox 93.


### Desired behavior

Cypress sessions should be able to record videos on Firefox 93 and 94. It should work the way it's working on older Firefox versions and other browsers.

### Test code to reproduce

Steps to reproduce this error:
1. Make sure you have Firefox 93 or 94 as this error is specific to Firefox 93 and above browsers only.
2. Make sure you have the cypress installed.
3. Run any spec of your choice. You may use actions.spec.js from the kitchen-sink examples
4. Observe that all the test cases pass but video processing was failed. Refer to the attached screenshot above.

### Cypress Version

all

### Other

_No response_

### Edits
1. 8th November 2021 - Updated the issue a bit to point that the error is happening on Firefox 94 too.",bug
1020487761,`desktop-gui` can display wrong `<record-key>` instructions on slow Internet,"### Current behavior

1. Slow down your internet, or use staging environment to slow it down.
2. Connect to a project on the dashboard.
3. Observe that an incorrect CLI command is readable and copyable for some time, potentially enough to read it: 
![image](https://user-images.githubusercontent.com/1151760/136466447-00a915db-8282-421c-b2fd-1f16ec1d3e16.png)


### Desired behavior

Display a loading indicator in place of the command.		

### Test code to reproduce

--

### Cypress Version

all

### Other

_No response_",bug
1016417455,Opened page dissapears,"### Current behavior

When the link is clicked the new page appears for a moment and then disappears 
AND
The following error is shown:
Timed out retrying after 6000ms: expected '<a.nav-link.text-uppercase.active.>' to be 'visible'
This element <a.nav-link.text-uppercase.active.> is not visible because it has an effective width and height of: 0 x 0 pixels.

### Desired behavior

When the link is clicked the new page is kept opened AND Brand Marketing text is visible

### Test code to reproduce
```js
it( 'Test', function() {
                cy.visit( 'https://www.adweek.com/' );
                cy.get('nav').contains('Brand Marketing').click();
                cy.wait(1000);
                cy.contains('Brand Marketing').should('be.visible');
            })   
```

### Cypress Version

8.5.0

### Other

Sometimes only an ad unit is shown, maybe the framework is going inside an ad iframe?
![Screen Shot 2021-10-05 at 10 35 32 AM](https://user-images.githubusercontent.com/82416786/136044650-12c50a99-479b-4d3e-93e2-e9951c1316e0.png)
",bug
999426087,Error when printing an object to the dev tools console,"### Current behavior

When clicking on the graphql mutation call getting an error and nothing is printed

<img width=""1065"" alt=""Screen Shot 2021-09-17 at 10 33 37"" src=""https://user-images.githubusercontent.com/2212006/133800825-4c4dd8cc-aad9-4bae-8e93-617eaa32d9eb.png"">




### Desired behavior

_No response_

### Test code to reproduce

- clone https://github.com/bahmutov/todo-graphql-example
- npm install
- npm run dev
- click on the ""spy-spec.js""
- when the test finishes:
  - open the DevTools console
  -  click on the ""ITS"" ""firstCall.args.0.variables"" command
See video below

https://user-images.githubusercontent.com/2212006/133800758-963be3cb-76a4-488c-8e12-6be4510c3b21.mp4




### Cypress Version

8.4.0

### Other

_No response_",bug
998486944,Crash when connecting to Dashboard,"### Current behavior

Trying to connect a project to record to Cypress Dashboard

```
$ yarn cypress open
yarn run v1.22.10
$ /Users/glebbahmutov/git/mercari-double-helpcenter/node_modules/.bin/cypress open
TypeError: openProject.getRuns(...).then is not a function
    at IpcMainImpl.handleEvent (/Users/glebbahmutov/Library/Caches/Cypress/8.4.0/Cypress.app/Contents/Resources/app/packages/server/lib/gui/events.js:367:8)
    at apply (/Users/glebbahmutov/Library/Caches/Cypress/8.4.0/Cypress.app/Contents/Resources/app/packages/server/node_modules/lodash/lodash.js:492:17)
    at IpcMainImpl.wrapper (/Users/glebbahmutov/Library/Caches/Cypress/8.4.0/Cypress.app/Contents/Resources/app/packages/server/node_modules/lodash/lodash.js:5379:16)
    at IpcMainImpl.emit (events.js:315:20)
    at Object.<anonymous> (electron/js2c/browser_init.js:161:9469)
    at Object.emit (events.js:315:20)

TypeError: openProject.getRuns(...).then is not a function
    at IpcMainImpl.handleEvent (/Users/glebbahmutov/Library/Caches/Cypress/8.4.0/Cypress.app/Contents/Resources/app/packages/server/lib/gui/events.js:367:8)
    at apply (/Users/glebbahmutov/Library/Caches/Cypress/8.4.0/Cypress.app/Contents/Resources/app/packages/server/node_modules/lodash/lodash.js:492:17)
    at IpcMainImpl.wrapper (/Users/glebbahmutov/Library/Caches/Cypress/8.4.0/Cypress.app/Contents/Resources/app/packages/server/node_modules/lodash/lodash.js:5379:16)
    at IpcMainImpl.emit (events.js:315:20)
    at Object.<anonymous> (electron/js2c/browser_init.js:161:9469)
    at Object.emit (events.js:315:20)

✨  Done in 6.82s.
```

But it did write the project ID into `cypress.json` so at least that worked

### Desired behavior

_No response_

### Test code to reproduce

Company org, private project

### Cypress Version

8.4.0

### Other

_No response_",bug
994406437,"yarn 2 -  @cypress/webpack-dev-server tried to access lodash, but it isn't declared in its dependencies","### Current behavior

Use cypress component testing with cypress-react-selector with yarn 2 (PnP)

>  yarn cypress open-ct

The function exported by the plugins file threw an error.

We invoked the function exported by `/Users/francis/temp/test-material-ui/cypress/plugins/index.js`, but it threw an error.

 Error: @cypress/webpack-dev-server tried to access lodash, but it isn't declared in its dependencies; this makes the require call ambiguous and unsound.

Required package: lodash
Required by: @cypress/webpack-dev-server@virtual:75543d871e7c13242968c702e15bd65752052208169d6a9c713f2479a33c6be9684ca5208d64d7483a58061fe11b15c623f68d66865cff731493cbf160b2633a#npm:1.6.0 (via /Users/francis/temp/test-material-ui/.yarn/__virtual__/@cypress-webpack-dev-server-virtual-64fa467786/0/cache/@cypress-webpack-dev-server-npm-1.6.0-8a7c245dc5-39df29ddd3.zip/node_modules/@cypress/webpack-dev-server/dist/)

Require stack:
- /Users/francis/temp/test-material-ui/.yarn/__virtual__/@cypress-webpack-dev-server-virtual-64fa467786/0/cache/@cypress-webpack-dev-server-npm-1.6.0-8a7c245dc5-39df29ddd3.zip/node_modules/@cypress/webpack-dev-server/dist/plugin.js
- /Users/francis/temp/test-material-ui/.yarn/__virtual__/@cypress-webpack-dev-server-virtual-64fa467786/0/cache/@cypress-webpack-dev-server-npm-1.6.0-8a7c245dc5-39df29ddd3.zip/node_modules/@cypress/webpack-dev-server/dist/makeWebpackConfig.js
- /Users/francis/temp/test-material-ui/.yarn/__virtual__/@cypress-webpack-dev-server-virtual-64fa467786/0/cache/@cypress-webpack-dev-server-npm-1.6.0-8a7c245dc5-39df29ddd3.zip/node_modules/@cypress/webpack-dev-server/dist/startServer.js
- /Users/francis/temp/test-material-ui/.yarn/__virtual__/@cypress-webpack-dev-server-virtual-64fa467786/0/cache/@cypress-webpack-dev-server-npm-1.6.0-8a7c245dc5-39df29ddd3.zip/node_modules/@cypress/webpack-dev-server/dist/index.js
- /Users/francis/temp/test-material-ui/.yarn/__virtual__/@cypress-react-virtual-cf8e38ac08/0/cache/@cypress-react-npm-5.10.0-0880f09a0c-eaa959ffaa.zip/node_modules/@cypress/react/plugins/react-scripts/index.js
- /Users/francis/temp/test-material-ui/cypress/plugins/index.js
- /Users/francis/Library/Caches/Cypress/8.3.1/Cypress.app/Contents/Resources/app/packages/server/lib/plugins/child/run_plugins.js
- /Users/francis/Library/Caches/Cypress/8.3.1/Cypress.app/Contents/Resources/app/packages/server/lib/plugins/child/index.js
    at Function.external_module_.Module._resolveFilename (/Users/francis/temp/test-material-ui/.pnp.cjs:31396:55)
    at external_module_.Module._load (/Users/francis/temp/test-material-ui/.pnp.cjs:31195:48)
    at Function.f._load (electron/js2c/asar_bundle.js:5:12913)
    at Module.require (internal/modules/cjs/loader.js:959:19)
    at require (internal/modules/cjs/helpers.js:88:18)
    at Object.<anonymous> (/Users/francis/temp/test-material-ui/.yarn/__virtual__/@cypress-webpack-dev-server-virtual-64fa467786/0/cache/@cypress-webpack-dev-server-npm-1.6.0-8a7c245dc5-39df29ddd3.zip/node_modules/@cypress/webpack-dev-server/dist/plugin.js:8:34)
    at Module._compile (internal/modules/cjs/loader.js:1078:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1108:10)
    at Module.load (internal/modules/cjs/loader.js:935:32)
    at external_module_.Module._load (/Users/francis/temp/test-material-ui/.pnp.cjs:31245:14)
    at Function.f._load (electron/js2c/asar_bundle.js:5:12913)
    at Module.require (internal/modules/cjs/loader.js:959:19)
    at require (internal/modules/cjs/helpers.js:88:18)
    at Object.<anonymous> (/Users/francis/temp/test-material-ui/.yarn/__virtual__/@cypress-webpack-dev-server-virtual-64fa467786/0/cache/@cypress-webpack-dev-server-npm-1.6.0-8a7c245dc5-39df29ddd3.zip/node_modules/@cypress/webpack-dev-server/dist/makeWebpackConfig.js:39:34)
    at Module._compile (internal/modules/cjs/loader.js:1078:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1108:10)



### Desired behavior

> yarn cypress open-ct

(it works)

### Test code to reproduce

https://github.com/francisu/test-material-ui

> git clone https://github.com/francisu/test-material-ui
> cd test-material-ui
> git checkout yarn2-lodash
> yarn install
> yarn cypress open-ct

### Cypress Version

8.3.1

### Other

Fix is simple, just add lodash as a dependency in npm/webpack-dev-server

_No response_",bug
993024709,`cypress runner window` overlaps with results panel,"### Current behavior

When running via Cypress Dashboard, cypress runner window overlaps with the sidebar making it difficult to check screenshots or videos. It occurred on 8.3.1 version, previous Cypress versions don't have this issue. 

<div>
<img  src=""https://user-images.githubusercontent.com/25013382/132826913-ddb7ff7e-7c76-4c91-a775-e178181103c9.png"" />
</div>

### Desired behavior

_No response_

### Test code to reproduce

Here is our cypress dashboard with videos - https://dashboard.cypress.io/projects/oqk3fk/runs/2116/test-results/d887a64a-73c4-478c-8bac-cf083570a5b2

### Cypress Version

8.3.1

### Other

_No response_",bug
990885401,Dashboard duplicate Tags,"### Current behavior

While restructuring my GitLab-ci file, I encountered a Bug in the Cypress Dashboard. It shows duplicate tags for each run, when before they were merged together. I found a similar Ticket (#9375), but this is already closed.
![grafik](https://user-images.githubusercontent.com/31661551/132475111-c5db0a01-521e-4c6c-9ea4-fdd5dbe13184.png)
I think using Variables as tags triggered it.

### Desired behavior

Duplicate Tags should only be shown once. (Image: Run 10 and 11)

### Test code to reproduce

I'll embed most of my GitLab-ci file, but had to remove the build and publish job for customer privacy reasons. They should have no impact tho.

- CYPRESS_ENVIRONMENT = local
- CYPRESS_COUNTRY = de

```
image: ${NEXUS_REGISTRY}/eventim-light/docker-node:12

before_script:
  - npm ci

cache:
  untracked: true
  key: ""$CI_BUILD_REF_NAME""
  paths:
    - node_modules/
    - .cache/*
    - cache/Cypress
    - .npm
    - build

stages:
  - build
  - test
  - publish

.cypress:artifacts:
  artifacts:
    when: always
    paths:
      - cypress/videos/**/*.mp4
      - cypress/screenshots/**/*.png
      - cypress/downloads/**/*.*
    expire_in: 1 day

test-desktop:
  stage: test
  parallel: 3
  script:
    - npm run dev & npx wait-on http://localhost:8080/status/
    - npx cypress run --env environment=${CYPRESS_ENVIRONMENT},country=${CYPRESS_COUNTRY} --spec ""cypress/integration/UI/*"" --record --parallel --tag ""desktop,${CYPRESS_ENVIRONMENT},${CYPRESS_COUNTRY}"" --group Desktop
  extends: .cypress:artifacts

test-mobile:
  stage: test
  parallel: 3
  script:
    - npm run dev & npx wait-on http://localhost:8080/status/
    - npx cypress run --env environment=${CYPRESS_ENVIRONMENT},country=${CYPRESS_COUNTRY},viewMode=mobile --spec ""cypress/integration/UI/*"" --record --parallel --tag ""mobile,${CYPRESS_ENVIRONMENT},${CYPRESS_COUNTRY}"" --group Mobile
  extends: .cypress:artifacts

test-backend:
  stage: test
  script:
    - npm run dev & npx wait-on http://localhost:8080/status/
    - npx cypress run --env environment=${CYPRESS_ENVIRONMENT},country=${CYPRESS_COUNTRY} --spec ""cypress/integration/Backend/*"" --record --tag ""backend,${CYPRESS_ENVIRONMENT},${CYPRESS_COUNTRY}"" --group Backend
  extends: .cypress:artifacts

```


### Cypress Version

8.2.0

### Other

_No response_",bug
980491725,writeFile cannot handle big payloads (~100MB+),"### Current behavior

When `cy.writeFile` is called with 100MB+ of text it hangs forever. also when I try to inspect the websocket in chrome browser (in that case) the whole browser freezes.

### Desired behavior

`cy.writeFile` should either handle big payloads or have some explicit limitations.

### Test code to reproduce

```js
describe('big file spec', () => {
  it('should fail', () => {
    cy.visit('https://www.google.com');
    cy.writeFile('./text.txt', 'x'.repeat(100*1024*1024));
  });
});
```

### Cypress Version

8.3.0

### Other

tried to use a `task` and faced the same result, since it seems to be failing to send the serialized args (in case of big payloads).",bug
979623564,Cypress is not detecting chrome processes being killed with SIGKILL,"### Current behavior

Cypress keeps waiting forever when a descendent chrome process is killed with `SIGKILL`.

### Desired behavior

Cypress should detect the killed chrome process (or at least timeout) and closes accordingly.

### Test code to reproduce

1. `cypress run --browser chrome`
2. `htop`
3. find the cypress process in `htop` and look at the process tree.
4. kill the parent chrome process with `SIGKILL`.
5. return to the cypress output.
6. cypress will be still waiting forever.

### Cypress Version

8.3.0

### Other

Sometimes, we find Cypress process trees with Cypress and cypress sub-processes without any `chrome` process and stuck for more than 20 hours.

the latest lines on the log in that case are:
```
    ✓ Should display the correct info on initial page load (11691ms)
    ✓ Should display correctly collapsed and expanded states (12884ms)
    ✓ Should show the correct information with filters engaged (32327ms)
Gdk-Message: 19:51:52.245: Cypress: Fatal IO error 11 (Resource temporarily unavailable) on X server :99.

error Command failed with exit code 1.
info Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.
```",bug
979292979,Run CT w/ module API does not reproduce correct report,"### Current behavior

Ref: https://github.com/cypress-io/cypress/issues/17752#issuecomment-905362154

Running CT w/ module API + webpack does not give correct report.

### Desired behavior

Correct report.

### Test code to reproduce

https://github.com/lmiller1990/cypress-react-webpack-5-example/pull/1

### Cypress Version

7.x, 8.x

### Other

_No response_",bug
975734232,Cypress Docker Images: Chrome sometimes fails to launch with error: Inconsistency detected by ld.so,"### Current behavior

The symptom is that on our dashboard, the run will time out after 1.5 hours with the status never being reported. When looking at the docker container, it just says that 

```
Failed to connect to Chrome, retrying in 1 second (attempt 61/62)
Failed to connect to Chrome, retrying in 1 second (attempt 62/62)
Cypress failed to make a connection to the Chrome DevTools Protocol after retrying for 50 seconds.
This usually indicates there was a problem opening the Chrome browser.
The CDP port requested was 39369.
Error details:
Error: connect ECONNREFUSED 127.0.0.1:39369
    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1146:16)
```

I enabled some additional debug information with `DEBUG=cypress:server:util:process_profiler,cypress:server:browsers,cypress:launcher` to get a better idea of what was happening when the docker container did `cypress run`.

Now it appears the root cause of the issue is:

```
2021-08-20T12:19:19.870Z cypress:launcher chrome stderr: Inconsistency detected by ld.so: ../elf/dl-tls.c: 481: _dl_allocate_tls_init: Assertion `listp->slotinfo[cnt].gen <= GL(dl_tls_generation)' failed!
2021-08-20T12:19:19.876Z cypress:launcher chrome exited: { code: 127, signal: null }
```

I found an issue in `playwright` where they had to enable retries https://github.com/microsoft/playwright/issues/5214 because this is an upstream issue. Its mentioned that puppeteer stumbled on this .. https://github.com/puppeteer/puppeteer/issues/2207. When I look at that research, it is an upstream issue in a linux package. When looking at the upstream issue (https://sourceware.org/bugzilla/show_bug.cgi?id=19329) and the root cause (a race condition in a library) .. it looks like it was fixed in may. Maybe cypress needs to update containers OS packages?

### Desired behavior

If cypress cannot update the package that seems to root cause this, I would like cypress to do the same workaround as playwright and retry.

### Test code to reproduce

There is not a reliable way to reproduce this. It is intermittent based on what appears to be a race condition in a library used by chrome.

### Cypress Version

8.3.0

### Other

We are using `cypress/browsers:node14.17.0-chrome91-ff89` as our container base. Here is the command .. `ONBUILD CMD ./wait-for-it.sh $BASE_URL/health && DEBUG=cypress:server:util:process_profiler,cypress:server:browsers,cypress:launcher $(yarn bin)/cypress run --headless --browser chrome --record --parallel --ci-build-id=$CI_BUILD_ID --config baseUrl=$BASE_URL`",bug
974699071,Cypress session validation failure results in a 'existingSession.setup is not a function' error,"### Current behavior

While using the new experimental feature _sessions_ in cypress 8.2.0, adding a session validation routine does not seem to work correctly. Specifically, when a session exists, but the validation routine returns false, an error is thrown saying that the setup function does not exist.

Here is a sample block of code that can reproduce this issue:
![Screenshot from 2021-08-19 09-53-14](https://user-images.githubusercontent.com/32787297/130082019-f1a174fa-e5aa-4175-8575-d64dbc09efea.png)

When running this for the first time:
![Screenshot from 2021-08-19 09-52-29](https://user-images.githubusercontent.com/32787297/130082229-8bd6b4e2-3516-4419-9618-a45f9338d78d.png)

When re-running this test:
![Screenshot from 2021-08-19 09-52-45](https://user-images.githubusercontent.com/32787297/130082274-fa010203-65eb-4d89-8227-a05d7efce3e2.png)



### Desired behavior

Cypress should fail the validation, and re-run the setup function as specified in the docs. For some reason, the current code somehow loses the setup function when validation fails.

### Test code to reproduce

```js
  it('fails the session setup on the second run', () => {
    var validateFlag = false
    cy.session('test', () => {
      validateFlag = true
      cy.log('setup')
    },
    {
      validate() {
        cy.log('validate')
        if (validateFlag) {
          return true
        }
        else {
          return false
        }
      },
    })
  });
```

### Cypress Version

8.2.0

### Other

_No response_",bug
964293891,Screenshot (failed) captured during skipped tests,"### Current behavior

In some circumstances invovling skipped tests and the Cypress 'fail' event listener a failure screenshot will be taken when it shouldn't be. 

### Desired behavior

1. A failure screenshot should never be taken when the test is skipped. 
2. The `fail` event handler shouldn't be triggered during skipped tests. 

### Test code to reproduce

`spec.js`

```js
Cypress.on('fail', () => {
  throw new Error('error')
})

describe('tests', () => {
  before(function () {
    this.skip()
  })
  it('failing test', () => {
    expect(true).to.be.false
  })
})
```

<img width=""829"" alt=""Screen Shot 2021-08-09 at 2 14 45 PM"" src=""https://user-images.githubusercontent.com/1271364/128761523-22bfa84e-edf0-4cda-ac1d-38ebe5f5ecec.png"">


### Cypress Version

8.2.0

### Other

_No response_",bug
961374134,[sessions] When using an active session with cy.session waiting for an array of aliased XHR's do not resolve,"### Current behavior

When using cy.session to create a session and login using this session, it appears that XHR requests defined and waited on seem to hang, with no error in the Cypress test runner. This seems to happen in an array of aliases to wait

`cy.wait('['@alias1',  '@alias2', '@alias3']`

### Desired behavior

Cypress should wait for all aliases defined in the array.

### Test code to reproduce

```js
const login = (name, password) => {
  cy.session(
    [name, password],
    () => {
      cy.visit('/')
      cy.get('#signin-username').type(name)
      cy.get('#signin-password').type(password)
      cy.get('#signin-submit').click()
    })
}
```

```js   
login(Cypress.env('testUserEmail'), Cypress.env('testUserPassword'))
    cy.visit('/')
    cy.wait(['@alias1', '@alias2', '@alias3']);
```

### Cypress Version

8.2.0

### Other

_No response_",bug
955321523,MacOS: Cypress cannot find chrome:beta,"### Current behavior

After upgrade to Cypress@7.6.0 (and further to 8.0.0) it has stopped finding chrome:beta browser. Everytime I try to run the test suite with `yarn cypress run --browser chrome:beta` (even though Google Chrome Beta is installed in the default location) I get:
```
yarn run v1.22.5
$ /Users/jakubfreisler/Projects/Phrase/vue-components/packages/vue3/node_modules/.bin/cypress run --browser chrome:beta
Can't run because you've entered an invalid browser name.

Browser: 'chrome:beta' was not found on your system or is not supported by Cypress.

Cypress supports the following browsers:
- chrome
- chromium
- edge
- electron
- firefox

You can also use a custom browser: https://on.cypress.io/customize-browsers

Available browsers found on your system are:
- chrome
- firefox
- electron
info Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.
```

### Desired behavior

To run chrome beta

### Test code to reproduce

macOS Big Sur 11.2.3 (20D91)
`yarn cypress --browser chrome:beta`

### Cypress Version

8.0.0

### Other

_No response_",bug
952060107,Unable to visit a site using Cypress. Getting access denied.,"### Current behavior

I am trying to visit a website using cypress to test file upload. When I use Cypress it shows access denied. But when I tried using Selenium it worked fine.

### Code to reproduce

``` javascript
describe('Test upload file with cypress',function(){
    beforeEach(function(){
        cy.visit('https://easyupload.io',{failOnStatusCode: false});
    })
    it('upload pdf file',() =>{
        cy.get('form#dropzone').attachFile(
            {
                filePath: 'example.json',
                mimeType: 'document/json',
                encoding: 'binary'
            },
            {
                subjectType: 'drag-n-drop',
                force: true,
            })
        cy.wait(2000);
    });
})
```

### Cypress Version

7.7.0

### Screenshot
![image](https://user-images.githubusercontent.com/13873164/126867650-1aa8e11c-e799-439d-a0f8-99f89febf173.png)


",bug
950486962,"No specs found in Cy test runner if ""fixturesFolder"": ""cypress""","### Current behavior

No specs are found in the Cypress test runner if the ""fixturesFolder"" is set to ""cypress""

### Desired behavior

All specs defined as in scope should be found in the Cypress test runner if the ""fixturesFolder"" is set to ""cypress""

### Test code to reproduce

//cypress.json
```js
{
  ""fixturesFolder"": ""cypress"",
}
```

### Cypress Version

7.6.0

### Other

_No response_",bug
949386007,Cypress 8.0.0: A system error occurred: uv_os_get_passwd returned ENOENT (no such file or directory) on Docker,"### Current behavior

After updating to Cypress 8.0.0, running Firefox on Docker through Github Actions no longer works.

```
  cypress:server:appdata path: /github/home/.config/Cypress/cy/production +379ms
  cypress:server:appdata path: /github/home/.config/Cypress/cy/production/cache +111ms
  cypress:server:cypress exiting with err SystemError [ERR_SYSTEM_ERROR]: A system error occurred: uv_os_get_passwd returned ENOENT (no such file or directory)
    at Object.userInfo (os.js:270:11)
    at new File (/github/home/.cache/Cypress/8.0.0/Cypress/resources/app/packages/server/lib/util/file.js:26:62)
    at Object.<anonymous> (/github/home/.cache/Cypress/8.0.0/Cypress/resources/app/packages/server/lib/cache.js:8:18)
    at Module._compile (internal/modules/cjs/loader.js:1078:30)
```

It seems to have been introduced by this line https://github.com/cypress-io/cypress/blob/cf689dd6093b92cd950e9ec77edd84977f90260f/packages/server/lib/util/file.js#L26

This is happening because `os.userInfo()` throws when the `user` has no `username`, which is the case when running with `options: --user 1001`, needed to run Firefox as non-root.

### Desired behavior

Running tests on Firefox works :)

### Test code to reproduce

Setup a repo with a step to run tests on Firefox using Docker and Github Actions, similar to https://github.com/cypress-io/github-action#firefox - my config uses `cypress/browsers:node14.17.0-chrome88-ff89` instead.

To see it failing isolated from Cypress, add the following step to just call `os.userInfo()` inline:

```
      - name: debug node userinfo
        run: node -e ""console.log(os.userInfo());""
```

<img width=""986"" alt=""Screen Shot 2021-07-20 at 11 41 37 PM"" src=""https://user-images.githubusercontent.com/100320/126444148-f3e579c1-6266-4514-86f5-a2476d5bcc72.png"">


### Cypress Version

8.0.0

### Other

_No response_",bug
948952140,ELECTRON_RUN_AS_NODE fails with --browser chrome,"### Current behavior

currently when combining `ELECTRON_RUN_AS_NODE` with `--browser chrome` in ubuntu with chrome 91 via github actions fails. with the error

```
We found an invalid configuration value:

Found an error while validating the `browsers` list. Expected `version` to be a non-empty string. Instead the value was: 

`{""name"":""electron"",""channel"":""stable"",""family"":""chromium"",""displayName"":""Electron"",""version"":"""",""path"":"""",""info"":""Electron is the default browser that comes with Cypress. This is the default browser that runs in headless mode. Selecting this browser is useful when debugging. The version number indicates the underlying Chromium version that Electron uses.""}`
```

Running `--browser chrome` works fine and runs headless in chrome 91

### Desired behavior

the should work as described in the docs and version 8 release notes 

### Test code to reproduce

`ELECTRON_RUN_AS_NODE=1 ENVIRONMENT=test cypress run --config-file cypress-listings.json --spec cypress/integration/listings.spec.ts --browser chrome`

cypress-listings.json
```
{
    ""baseUrl"": ""http://localhost:3000"",
    ""componentFolder"": ""src/"",
    ""nodeVersion"": ""system"",
    ""reporter"": ""cypress/reporters/github-actions.js"",
    ""testFiles"": [""**/listing*.spec.ts""],
    ""video"": false,
    ""watchForFileChanges"": true
}
```

### Cypress Version

8.0.0

### Other

Trying this locally on macos any use of `ELECTRON_RUN_AS_NODE` produces this seemingly unrelated error 

```
internal/modules/cjs/loader.js:890
  throw err;
  ^

Error: Cannot find module '/Users/username/Library/Caches/Cypress/8.0.0/Cypress.app/Contents/MacOS/Contents/Resources/app/index.js'
    at Function.Module._resolveFilename (internal/modules/cjs/loader.js:887:15)
    at Module._load (internal/modules/cjs/loader.js:732:27)
    at Function.f._load (electron/js2c/asar_bundle.js:5:12789)
    at Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)
    at internal/main/run_main_module.js:17:47 {
  code: 'MODULE_NOT_FOUND',
  requireStack: []
}
```",bug
946582817,Cannot read 'split' of undefined,"### Current behavior

We've had reports that this error is displaying for some users. This error should never be shown in Cypress. There's also not currently a great way to track down why this was thrown (what was the stacktrace or shape of error that made this occur). 

<img width=""1170"" alt=""Screen Shot 2021-07-16 at 3 35 19 PM"" src=""https://user-images.githubusercontent.com/1271364/126005679-669be03b-a4e9-402b-84da-fc622ccf3ba5.png"">


### Desired behavior

We should better handle when the stack is undefined. Do not throw an error here and don't display the stack trace. This would unblock people who see this error.

### Test code to reproduce

This happens intermittently in CI on a large project, so there hasn't been a provided example. Although I don't think this is necessary in order to create a fallback solution and to test it. 

### Cypress Version

7.5.0

### Other

_No response_",bug
940772843,DOM snapshots that use @import directive are not restored correctly.,"Cypress v7.7.0 (but all versions of Cypress are affected I believe)

I have noticed a pretty terrible jumping when using time-traveling debugger in Cypress. All DOM snapshots are jumping, the element overlays are incorrect, making the debugging impossible. I have finally traced it to the CSS style attribute used by the application. As many modern apps, the site imports a reset.css stylesheet (similar to https://necolas.github.io/normalize.css/) using the `@import url()` keyword. In that case the time-traveling DOM snapshots are really bad.

I created a reproduction in https://github.com/cypress-io/cypress-test-tiny/tree/import-css-demo showing what is working and what is not woring

## Working cases

### Using style tag without any imports

If the reset style is directly included in the HTML, there is no problem

```html
<html>
  <head>
    <!-- reset CSS style -->
    <style>
      body {
        margin: 0;
      }
      button,
      input,
      optgroup,
      select,
      textarea {
        font-family: inherit;
        font-size: 100%;
        line-height: 1.15;
        margin: 0;
      }
    </style>
    <style>
      .signup {
        border: 1px;
        cursor: pointer;
        color: red;
        background: yellow;
        padding: 2em;
        margin-left: 10em;
        margin-top: 2em;
        width: 8em;
      }
    </style>
  </head>
  <body>
    <button class=""signup"">Sign up</button>
  </body>
</html>
```


https://user-images.githubusercontent.com/2212006/125084591-b5389580-e097-11eb-92c9-ce8ab126503d.mp4

### Using linked stylesheet

We can move the reset style into its own CSS resource and link it from the doc

```html
<html>
  <head>
    <!-- reset CSS style via link -->
    <link rel=""stylesheet"" href=""cypress/fixtures/reset.css"" />
    <style>
      .signup {
        border: 1px;
        cursor: pointer;
        color: red;
        background: yellow;
        padding: 2em;
        margin-left: 10em;
        margin-top: 2em;
        width: 8em;
      }
    </style>
  </head>
  <body>
    <button class=""signup"">Sign up</button>
  </body>
</html>
```

DOM snapshots work great.

https://user-images.githubusercontent.com/2212006/125085060-2d9f5680-e098-11eb-8994-c672fb5612f3.mp4

## Not working

Now imagine the style is imported using `@import url` directive

```html
<html>
  <head>
    <!-- reset CSS style via import -->
    <style>
      @import url('cypress/fixtures/reset.css');
    </style>
    <style>
      .signup {
        border: 1px;
        cursor: pointer;
        color: red;
        background: yellow;
        padding: 2em;
        margin-left: 10em;
        margin-top: 2em;
        width: 8em;
      }
    </style>
  </head>
  <body>
    <button class=""signup"">Sign up</button>
  </body>
</html>
```

The DOM snapshot shows ""jump"" while the CSS is loaded

https://user-images.githubusercontent.com/2212006/125085305-6f300180-e098-11eb-859f-8ec9c88881a8.mp4

The the imported CSS resource is remote, the jumps are even more pronounced. I have simulated the CSS delay using an intercept

```js
it('DOM snapshots jump with CSS resource delay', () => {
  cy.intercept('reset.css', {
    fixture: 'reset.css',
    delay: 500,
  })
  cy.visit('index-with-css-import.html')
  cy.get('button').click()
})
```
Notice how the test runner is making the CSS request again and again.

https://user-images.githubusercontent.com/2212006/125085720-e36aa500-e098-11eb-99e5-c8cb57c4b4d9.mp4

## Expected result

No DOM jumps in time-traveling debugger. In a larger site it becomes impossible to use the debugger.

",bug
933997697,Code in before hooks are rerun when navigating to new superdomain,"### Current behavior
In a single test script, with a single describe that contains a before(), beforeEach(), and beforeAfter(), the before() method can be invoked multiple times.  In this example before() is being invoked before the first test, then again on a test that visits a page with an xhr request loading its main content, then again on the test following that one.  Accessing the DOM via cy.get() is required to observe this behavior.  Another observed effect is that the console is getting cleared.  I'm not relying on a full console log for anything but on the other hand I have no desire for it to be cleared.


<!-- A description including screenshots, stack traces, DEBUG logs, etc. 👉 https://on.cypress.io/troubleshooting -->
It reaches this point
![image](https://user-images.githubusercontent.com/59699091/124012098-bc341980-d9ae-11eb-939d-f945f3900bfc.png)
Then seems to hiccup
![image](https://user-images.githubusercontent.com/59699091/124012128-c9e99f00-d9ae-11eb-9154-3b8a77108df0.png)
Then the GUI seems to get back on track but you look through the console it got cleared just before the Microbiology and Immunology test and re-ran the before() function.
![image](https://user-images.githubusercontent.com/59699091/124012370-17fea280-d9af-11eb-9b8b-ad367cf37909.png)



### Desired behavior
<!-- Remember, we are not familiar with the application you're testing, so please provide a clear description of what should happen.-->
Two outcomes would be better than the current behavior.

1. Visiting a page that loads some content via xhr should not invoke the before() in the middle of a script; even if the authors of the page being tested had a hair-brained approach for achieving that.
2. If something is wrong with the page and Cypress cannot process the html the it() should fail so that the Cypress tester (me) knows to go fix something.

### Test code to reproduce
<!-- Provide test code that we can copy, paste, and run on our machine to see the issue. -->

Two tests in the middle of this script focus on the page in question.  The currently skipped test accesses the returned xhr response directly and results in the desired behavior.  The currently not-skipped test demonstrates the undesired behavior.  This test accesses a page which makes a call for an xhr resource.  The Cypress gui kind of blinks, the console gets cleared, and the before() function is run again but Cypress continues with the test in question.  After finishing with the test of a page with the xhr resource, the Cypress gui kind of blinks again, the console gets cleared a second time, and the before() function is run again.  No error is logged that I can tell.  The GUI log on the left of the test browser appears to indicate that everything ran ok.

```js
describe('demonstrate multiple runs of the before() function in a single test script',() => {

    before(()=>{
        console.log("">ran before all"");
    })

    beforeEach(()=>{
        console.log("">>ran before each"");
    })

    afterEach(()=>{
        console.log("">>ran after each"");
    })

    it(""has expected departments"", ()=>{
        cy.visit(""https://ag.montana.edu/departments/"")
        cy.get(""#maincontent > ul:nth-of-type(1) > li"").should(""have.length"",8);
    })

    it(""Agricultural Economics & Economics"",()=>{
        cy.visit(""https://www.montana.edu/econ/directory/index.html"")
        cy.get("".row.faculty-directory"").each((profile)=>{
            //perform some checks
        })
    })
    

    it(""Agriculture and Technology Education"",()=>{
        cy.visit(""https://www.montana.edu/agtecheducation/directory/index.html"")
        cy.get("".row.faculty-directory"").each((profile)=>{
            //perform some checks
        })
    })


    // ---- The following two tests are the focus of the problem.
    it(""Animal & Range Sciences page visit - induces before() and clears console, both before this test and after this test"",()=>{
        cy.visit(""http://animalrange.montana.edu/directory/faculty/index.html"")
        cy.get("".row.faculty-directory"").each((profile)=>{
            //perform some checks
        })
    })

    it.skip(""Animal & Range Sciences xhr visit - does not induce before() nor clear console"",()=>{
        cy.visit(""https://www.montana.edu/cpa/cope/page_curator/auto-gen-templates/ajax/index.php?type=ai&version=2&region=maincontent&style=department_tenure&group%5B%5D=&tag%5B%5D=5&custom_tag=0&count=5&pagination=0&search=0&filter_type=&filter_label=&sticky%5B%5D=1524775&include%5B%5D=1524130&exclude%5B%5D=1896378&exclude%5B%5D=1524068&exclude%5B%5D=1687989&only%5B%5D=&=undefined&page=null"") 
        cy.get("".row"").each((profile)=>{
            //perform some checks
        })
    })
// ---- end of the two tests focusing on the problem

    it(""Microbiology & Immunology"",()=>{
        cy.visit(""https://www.montana.edu/mbi/directory/faculty.html"")
        cy.get("".row.faculty-directory"").each((profile)=>{
            //perform some checks
        })
    })

    it(""Land Resources & Environmental Sciences"",()=>{
        cy.visit(""https://landresources.montana.edu/directory/faculty/index.html"")
        cy.get("".row.faculty-directory"").each((profile)=>{
            //perform some checks
        })
    })

    it(""Plant Sciences & Plant Pathology"",()=>{
        cy.visit(""https://plantsciences.montana.edu/directory/faculty/index.html"")
        cy.get("".row.faculty-directory"").each((profile)=>{
            //perform some checks
        })
    })

})
```
<!-- You could also provide a repo that we can clone and run. You can fork 👉 https://github.com/cypress-io/cypress-test-tiny repo, set up a failing test, then link to your fork. -->
https://github.com/anmeeks-vt-edu/cypress-test-tiny/blob/master/cypress/integration/spec.js

### Versions
All versions of Cypress used to run this:
7.6.0
6.8.0 
<!-- Cypress version, last known working Cypress version (if applicable), Browser and version, Operating System, CI Provider, etc -->
<!-- If possible, please update Cypress to latest version and check if the bug is still present. -->
",bug
932775387,Tests set as it.only do not all run with nested describes,"### Current behavior
When tests are set to run with it.only, they do not always reliably run. This happens specifically when the tests are at different nesting levels.

### Desired behavior
Every it.only in a spec will run.

### Test code to reproduce
For a simple example, the below will reproduce the behavior I've seen. I would expect Test 1.2 and Test 1a.2 both to run, but only Test 1.2 runs. 

```js
describe('Test type 1', () => {
    it('Test 1.1', () => {
      cy.log('Ran test 1.1');
    });
    it.only('Test 1.2', () => {
      cy.log('Ran test 1.2');
    });
    describe('Test type 1a', () => {
      it('Test 1a.1', () => {
        cy.log('Ran test 1a.1');
      });
      it.only('Test 1a.2', () => {
        cy.log('Ran test 1a.2');
      });
    });
});
```

### Versions
7.5.0
",bug
932126187,`times` option of `cy.intercept` doesn't work with `req.reply`,"### Current behavior

I've written the code below when fixing #16821.

```html
<!DOCTYPE html>
<html>
  <head>
    <script type=""text/javascript"" src=""/node_modules/jquery/dist/jquery.js""></script>
  </head>
  <body>
    <button id=""request"">request</button>
    <div id=""result""></div>
    <script type=""text/javascript"">
      $(function(){
        $(""button#request"").click(function(){
          $.ajax({
            method: ""POST"",
            url: ""/post-only"",
            data: JSON.stringify({client: 'data'})
          })
          .then((data) => {
            $('#result').text(data)
          })
        })
      })
    </script>
  </body>
</html>
```

```js
it('works with reply', () => {
  cy.intercept({
    method: 'POST',
    times: 1,
    url: '/post-only',
  },
  (req) => {
    req.reply('stubbed data')
  }).as('interceptor')

  cy.visit('fixtures/request.html')

  cy.get('#request').click()
  cy.get('#result').should('contain', 'stubbed data')

  cy.get('#request').click()
  cy.get('#result').should('contain', 'client') // Fail
})
```

But it failed because our `times` counter only works with `before:request` event. But `reply` doesn't fire it and it only fires `response`-related ones. 

### Desired behavior

The test should pass.

### Test code to reproduce

See above.

### Versions

Current Cypress 7.6.0",bug
930014194,[@cypress/react] window.location.replace() method call in a component breaks cypress-ct runner,"### Current behavior
When the React component under test use `window.location.replace()` method - all following cases in current and other describe/context blocks don't work. Seems that the href is not restored after the tests' end. 

### Desired behavior
The environment should be restored after the test ends. 

### Test code to reproduce
Please see the following repo: https://github.com/denis-domanskii/cypress-react-template . 
Run `yarn & yarn cypress open-ct` to run the example.

`App` component has a button, which calls `window.location.replace()` on click:
https://github.com/denis-domanskii/cypress-react-template/blob/master/src/App.tsx#L31

The component test mounts the component and clicks the button. Href assertion works well, but the following `it` block fails (see the screenshot):
https://github.com/denis-domanskii/cypress-react-template/blob/master/src/App.spec.tsx#L12

![image](https://user-images.githubusercontent.com/61494460/123405217-4563de80-d5b2-11eb-9853-39f6ba7a63f6.png)

### Versions
```
""@cypress/react"": ""^5.9.1,
""@cypress/webpack-dev-server"": ""^1.4.0"",
""cypress"": ""^7.6.0"",
```",bug
929456088,Network requests are not intercepted for a short time between tests,"### Current behavior

There is a short amount of time between tests, where the page is still active but they `cy.intercept`s have been removed. As a result, stubbed network calls can make it through to the server. This can lead to test flakiness.

### Desired behavior

Network stubs should remain in place for as long as the page is active.

### Test code to reproduce

https://github.com/kevinkir/cypress-min-repro-17107

### Versions

Cypress version: 7.6.0 (failures are reprodicible as well all the way back on 6.0.0, although the error is slightly different)
Browser: Chrome 91, Firefox 78, Electron 89
OS: Mac, Linux
",bug
925202359,v7.4.0 No longer allows localhost as a RouteMatcher hostname,"<!-- 👋 Use the template below to report a bug. Fill in as much info as possible. 

Have a question? Start a new discussion 👉 https://github.com/cypress-io/cypress/discussions

As an open source project with a small maintainer team, it may take some time for your issue to be addressed. Please be patient and we will respond as soon as we can. 🙏 -->

### Current behavior
<!-- A description including screenshots, stack traces, DEBUG logs, etc. 👉 https://on.cypress.io/troubleshooting -->

`cy.intercept({ hostname: 'localhost' }, (req) => {
...
})`

Results in

```
An invalid RouteMatcher was supplied to cy.intercept(). hostname must be a valid host name or domain name.

You passed: {
  ""hostname"": ""localhost""
}
```

<img width=""897"" alt=""Screen Shot 2021-06-18 at 1 55 53 PM"" src=""https://user-images.githubusercontent.com/5984157/122615159-e72c7e00-d03c-11eb-8456-6e893d30a03e.png"">


### Desired behavior

As the docs suggest (https://docs.cypress.io/api/commands/intercept#Usage), I should be able to use 'localhost' as the `hostname`.

>
```
// spying, dynamic stubbing, request modification, etc.
cy.intercept('/users*', { hostname: 'localhost' }, (req) => {
  /* do something with request and/or response */
})
```

### Test code to reproduce
<!-- Provide test code that we can copy, paste, and run on our machine to see the issue. -->

`cy.intercept({ hostname: 'localhost' }, (req) => {
...
})`

<!-- You could also provide a repo that we can clone and run. You can fork 👉 https://github.com/cypress-io/cypress-test-tiny repo, set up a failing test, then link to your fork. -->

### Versions

Introduced in 7.4.0 in this PR https://github.com/cypress-io/cypress/pull/16577

Worked in 7.3.0
",bug
922948593,Images don't show up in my component tests,"<!-- 👋 Use the template below to report a bug. Fill in as much info as possible. 

Have a question? Start a new discussion 👉 https://github.com/cypress-io/cypress/discussions

As an open source project with a small maintainer team, it may take some time for your issue to be addressed. Please be patient and we will respond as soon as we can. 🙏 -->

### Current behavior
I use `CopyWebpackPlugin` in webpack to move images at dev and build time. 
When I use the same component in component testing, the images that are available in app are not served. They return a 404.

### Desired behavior
The image that should be at `http://localhost:53288/img/myImage.png` is available at `http://localhost:53288/__cypress/src/img/myImage.png`. 

In `router-ct.ts`, we capture all urls that don't start with `__cypress` and send them to the cypress http server. We could have a set of exceptions to this rule, to tell cypress to pass some of those urls to the dev-server (all those starting with img in this case). 

### Test code to reproduce

https://github.com/elevatebart/cy-public-path

Run `yarn start` => get an icon
Run `yarn cy` => same component but no icon

### Versions

7.5.0
",bug
918069917,Cypress never exits on infinite loops in the browser,"<!-- 👋 Use the template below to report a bug. Fill in as much info as possible. 

Have a question? Start a new discussion 👉 https://github.com/cypress-io/cypress/discussions

As an open source project with a small maintainer team, it may take some time for your issue to be addressed. Please be patient and we will respond as soon as we can. 🙏 -->


### Current behavior
On an infinite loop in the browser (from the app or in test code), the Cypress test runner, in both ""open"" & ""run"" mode, will hang indefinitely. We lose any kind of test state reporting, there are no errors logged or videos or screenshots for an extended period of time (over an hour).

Some context: Cypress caught a bug at Airbnb where a change introduced an infinite loop in the browser (yay!). However, the user experience around triaging this issue not clear or helpful and required us to extensively debug. 

The behavior prompted us to add a timeout to kill off Cypress processes to prevent jobs hanging on similar issues. 

<!-- A description including screenshots, stack traces, DEBUG logs, etc. 👉 https://on.cypress.io/troubleshooting -->

### Desired behavior
Cypress should detect infinite loops and fail the test / exit the process with information about why the process was exited.

In Jest, as a comparison, it can't continue garbage collection anymore & jest will crash in ~2mins. Which is still better because the process will end & outputs useful information about what happened.
```
❯ yarn jest tests/infinite.test.ts

 RUNS  tests/infinite.test.ts

<--- Last few GCs --->

[58983:0x110008000]   112018 ms: Mark-sweep 4094.8 (4100.6) -> 4094.8 (4101.1) MB, 4442.7 / 0.0 ms  (+ 0.0 ms in 0 steps since start of marking, biggest step 0.0 ms, walltime since start of marking 4443 ms) (average mu = 0.075, current mu = 0.000) allocat[58983:0x110008000]   116395 ms: Mark-sweep 4095.7 (4101.1) -> 4095.3 (4101.3) MB, 4334.2 / 0.0 ms  (+ 39.5 ms in 13 steps since start of marking, biggest step 9.1 ms, walltime since start of marking 4377 ms) (average mu = 0.039, current mu = 0.001) alloc

<--- JS stacktrace --->

==== JS stack trace =========================================

    0: ExitFrame [pc: 0x10097d5b9]
    1: StubFrame [pc: 0x10090465b]
Security context: 0x2a89e7bc08d1 <JSObject>
    2: /* anonymous */ [0x2a89c8180169] [/node_modules/jest-mock/build/index.js:~382] [pc=0x565ac922b88](this=0x2a89b583fe89 <Console map = 0x2a89afd5b6e9>)
    3: arguments adaptor frame: 1->0
    4: mockConstructor [0x2a89c81801e1] [...
```

Obviously, Jest & Cypress are wildly different frameworks, but ideally, the Cypress NodeJS process would be able to detect and kill of tests if they either exceed a given timeout / chrome becomes unresponsive.
<!-- Remember, we are not familiar with the application you're testing, so please provide a clear description of what should happen.-->

### Test code to reproduce
I would recommend running this wrapped in a timeout command of some sort i.e. `timeout 100 npx cypress run ...` 
```js
// cypress/integration/some-spec-file_spec.ts
describe('oh no' , () => {
   it('runs infinitely', () => {
    while(true) {}
  })
});
```

what I see:
```

==============================================================================

  (Run Starting)

  ┌────────────────────────────────────────────────────────────────────────────────────────────────┐
  │ Cypress:    7.5.0                                                                              │
  │ Browser:    Chrome 91 (headless)                                                               │
  │ Specs:      1 found (playgroundApp.spec.ts)                                                    │
  └────────────────────────────────────────────────────────────────────────────────────────────────┘


────────────────────────────────────────────────────────────────────────────────────────────────────
Running:  playgroundApp.spec.ts                                                           (1 of 1) 
  oh no

```

& then, nothing else, for an extended period of time until you forcibly exit. In open mode the browser will become unresponsive.

To recreate the same thing with a browser page that has infinite loop, set your base url to `https://jsfiddle.net` and then run this test: 
```js
describe('Infinite loop', () => {
  it('runs the fiddle', () => {
    cy.visit('/xspqo2kv');
    cy.contains('Run').click();
  });
});
```

Cypress will visit https://jsfiddle.net/xspqo2kv and hang indefinitely.
<!-- Provide test code that we can copy, paste, and run on our machine to see the issue. -->

<!-- You could also provide a repo that we can clone and run. You can fork 👉 https://github.com/cypress-io/cypress-test-tiny repo, set up a failing test, then link to your fork. -->

### Versions
Cypress Version: 6.6.0 & 7.5.0
Browser: Chrome 91
OS: Ubuntu 1804 (in docker) & MacOS Big Sur v11.4 (local)

<!-- Cypress version, last known working Cypress version (if applicable), Browser and version, Operating System, CI Provider, etc -->
<!-- If possible, please update Cypress to latest version and check if the bug is still present. -->
",bug
915929328,Problems with cypress 7.5.0 & @cyprss/react and 'uncaught:exception' handling,"<!-- 👋 Use the template below to report a bug. Fill in as much info as possible. 

Have a question? Start a new discussion 👉 https://github.com/cypress-io/cypress/discussions

As an open source project with a small maintainer team, it may take some time for your issue to be addressed. Please be patient and we will respond as soon as we can. 🙏 -->

### Current behavior
<!-- A description including screenshots, stack traces, DEBUG logs, etc. 👉 https://on.cypress.io/troubleshooting -->
REPRO: https://github.com/glomotion/cypress-bug-repro

When running headless tests WITH coverage enabled, cypress errors out (`npm run test`)

![Screen Shot 2021-06-09 at 6 13 39 pm](https://user-images.githubusercontent.com/1452237/121318262-6e4b6900-c94e-11eb-803a-32fd8e515f16.png)

However when running headed or with coverage DISABLED, cypress tests pass as they should (`npm run test:fast` or `npm run test:watch`)

![Screen Shot 2021-06-09 at 6 17 08 pm](https://user-images.githubusercontent.com/1452237/121318817-f2055580-c94e-11eb-8109-ba8cad2b1f7a.png)

### Desired behavior
<!-- Remember, we are not familiar with the application you're testing, so please provide a clear description of what should happen.-->

Tests should pass in all modes or fail in all modes 🤪  🤷 

### Test code to reproduce
<!-- Provide test code that we can copy, paste, and run on our machine to see the issue. -->
REPRO: https://github.com/glomotion/cypress-bug-repro

NOTE: these tests are using 'uncaught:exception' to catch runtime errors, and assert that they are happening correctly. EG:
```typescript
before(() => {
    Cypress.on('uncaught:exception', () => {
      // returning false here prevents Cypress from
      // failing the test
      return false;
    });
  });

it('should throw error, when a fragment is supplied as children', done => {
    cy.on('uncaught:exception', err => {
      expect(err.message).to.include(ERROR_TEXT);
      done();
      return false;
    });
    mount(
      <AppHeaderBarNavItem testId=""nav1"">
        <>moo</>
      </AppHeaderBarNavItem>,
    );
  });
```

<!-- You could also provide a repo that we can clone and run. You can fork 👉 https://github.com/cypress-io/cypress-test-tiny repo, set up a failing test, then link to your fork. -->

### Versions
MacOS: 11.4 (20F71)
MacBook Pro (15-inch, 2019)
```json
  ""@cypress/code-coverage"": ""^3.9.6"",
  ""@cypress/react"": ""^5.9.1"",
  ""@cypress/webpack-dev-server"": ""^1.3.1"",
  ""cypress"": ""^7.5.0"",
  ""cypress-real-events"": ""^1.5.0"",
```",bug
913206716,the times parameter in cy.interceptor is not respected,"<!-- 👋 Use the template below to report a bug. Fill in as much info as possible. 

Have a question? Start a new discussion 👉 https://github.com/cypress-io/cypress/discussions

As an open source project with a small maintainer team, it may take some time for your issue to be addressed. Please be patient and we will respond as soon as we can. 🙏 -->

### Current behavior
<!-- A description including screenshots, stack traces, DEBUG logs, etc. 👉 https://on.cypress.io/troubleshooting -->
When the `times` parameter is used in RouteMatcher, it doesn't respect the limit (i.e. using `times: 1` will still match more than once

![Screen Shot 2021-06-07 at 5 14 59 pm](https://user-images.githubusercontent.com/20273647/120975150-41634e80-c7b4-11eb-99ed-b95e2222ef4a.png)

### Desired behavior
<!-- Remember, we are not familiar with the application you're testing, so please provide a clear description of what should happen.-->
It should only match up to the `times` specified.

### Test code to reproduce
<!-- Provide test code that we can copy, paste, and run on our machine to see the issue. -->

```js
/// <reference types=""Cypress"" />
/* global cy */

before(() => {
	cy.visit(""https://mocki.io/fake-json-api"");
});

describe(
	""interceptor times test"",
	function () {
		it(
			""should not intercept twice"",
			function () {
				const routeMatcher = {
					method: ""POST"",
					times: 1,
					url: /graphql$/
				};
				cy.intercept(
					routeMatcher,
					(req) => {
						req.continue(res => {
							console.log(""hello i am here"");
							console.log(res);
						});
					}
				)
					.as(""interceptor"");
				cy.get(""#success"").should(""not.be.visible"");
				cy.get(""#body"").type(""{ \""abc\"": 123 }"", { parseSpecialCharSequences: false });
				cy.get(""#create"").click();
				cy.get(""#success"").should(""be.visible"", { timeout: 10000 });

				cy.get(""#body"").clear().type(""{ \""another\"": 123 }"", { parseSpecialCharSequences: false });
				cy.get(""#create"").click();
				cy.get(""#success"").should(""not.be.visible"");
				cy.get(""#success"").should(""be.visible"", { timeout: 10000 });
			});
	});
```

<!-- You could also provide a repo that we can clone and run. You can fork 👉 https://github.com/cypress-io/cypress-test-tiny repo, set up a failing test, then link to your fork. -->

### Versions

<!-- Cypress version, last known working Cypress version (if applicable), Browser and version, Operating System, CI Provider, etc -->
<!-- If possible, please update Cypress to latest version and check if the bug is still present. -->

7.4
",bug
911026764,"""cypress run-ct"" socket hang up error","<!-- 👋 Use the template below to report a bug. Fill in as much info as possible. 

Have a question? Start a new discussion 👉 https://github.com/cypress-io/cypress/discussions

As an open source project with a small maintainer team, it may take some time for your issue to be addressed. Please be patient and we will respond as soon as we can. 🙏 -->

### Current behavior
<!-- A description including screenshots, stack traces, DEBUG logs, etc. 👉 https://on.cypress.io/troubleshooting -->

In Vue 2 project with custom webpack config (not vue cli project) I've set up two npm scripts in package.json as follows:
```json
""test:open-integration"": ""DEBUG=cypress:* cypress open-ct"",
""test:run-integration"": ""DEBUG=cypress:* cypress run-ct"",
```

✅  When running `test:open-integration` - Cypress opens browser with spec file that it found. Clicking on the file runs test as expected.

❌  When running `test:run-integration` - Cypress hangs after bundling step with error:
```console
cypress:server:routes Proxy request error. This is likely the socket hangup issue, we can basically ignore this because the stream will automatically continue once the asset will be available Error: socket hang up
    at connResetException (internal/errors.js:617:14)
    at Socket.socketOnEnd (_http_client.js:493:23)
    at Socket.emit (events.js:327:22)
    at endReadableNT (_stream_readable.js:1327:12)
    at processTicksAndRejections (internal/process/task_queues.js:80:21)
 {
  code: 'ECONNRESET'
}
```

**Additional info:**
-  Same issue when running e.g. `cypress run-ct --browser chrome`
<details>
  <summary>cypress/plugins/index.js</summary>

  ```js
  module.exports = (on, config) => {
    const makeWebpackConfig = require('../../webpack.config.js');
    const webpackConfig = makeWebpackConfig({ config: 'local' });
    const { startDevServer } = require('@cypress/webpack-dev-server');
    on('dev-server:start', options => startDevServer({ options, webpackConfig: webpackConfig }));
  
    return config;
  };
  ```
</details>

### Desired behavior
<!-- Remember, we are not familiar with the application you're testing, so please provide a clear description of what should happen.-->

Since both scripts use same config and `cypress open-ct` succeeds, outcome of running `cypress run-ct` should be a successful test execution as shown in [docs](https://docs.cypress.io/guides/component-testing/introduction#Set-up-CI):
<img width=""300"" alt=""Screen Shot 2021-06-03 at 6 49 33 PM"" src=""https://user-images.githubusercontent.com/22001260/120733655-72820d00-c49c-11eb-857b-8d640931504a.png"">

In case of an error, ideally would be nice to see an additional, more descriptive message that we can act on, if possible. `Proxy request error. This is likely the socket hangup issue, we can basically ignore this because the stream will automatically continue once the asset will be available Error: socket hang up` makes reader go 🤷‍♂️ (unless you've seen this issue before)

### Versions

<!-- Cypress version, last known working Cypress version (if applicable), Browser and version, Operating System, CI Provider, etc -->
<!-- If possible, please update Cypress to latest version and check if the bug is still present. -->
Running in local terminal
macOs Big Sur, Version 11.3
Electron 89 OR Chrome 91 
""cypress"": ""^7.4.0"",
""@cypress/webpack-dev-server"": ""^1.3.0""
""webpack"": ""^4.46.0""
",bug
909772578,should('have.length.above') suppresses other assertion messages,"If I chain assertions after `.should('have.length.above')` then some of the assertions after it are not shown on the log.

Example:

```javascript
describe('Cypress', () => {
    it('can display all assertions after ""have.length.above""', () => {
        cy.visit('https://developer.mozilla.org/en-US/');
        cy.get('.hero-content')
            .should('have.length.above', 0)
            .should('contain', 'Resources') // this command runs, but it is never logged unless it fails
            .should('contain', 'developers');  // this command is logged even when passing (expected behavior)
    })

    // example without browsing to a page
    it('can display all assertions after ""have.length.above"" without a webpage', () => {
        const array = [1, 2, 3];
        cy.wrap(array)
            .should('have.length.above', 1)
            .should('contain', 1)
            .and('contain', 2);
    })
})
```

![image](https://user-images.githubusercontent.com/5297293/120532988-e1306f00-c3a5-11eb-809b-8629b33e27f3.png)

Notice how there is only 1 message for the 2 `'contain'` assertions, it only shows the second one.


If we change the test and convert `'have.length.above', 0` to `'have.length', 1`, then both assertions are shown:

![image](https://user-images.githubusercontent.com/5297293/120533503-6451c500-c3a6-11eb-83cb-83d534496498.png)

In this image we can see both `Resources` and `developers` in the assertions.

### Versions

Tested on Cypress v6.9.1 and v7.4.0, with Chrome and Electron.",bug
902552624,Keep getting redirect error after disabling windows security and set redirectionLimit higher,"<!-- 👋 Use the template below to report a bug. Fill in as much info as possible. 

Have a question? Start a new discussion 👉 https://github.com/cypress-io/cypress/discussions

As an open source project with a small maintainer team, it may take some time for your issue to be addressed. Please be patient and we will respond as soon as we can. 🙏 -->

### Current behavior
I am trying to submit more than 20 applications but I am receiving this error message, I increased limit to 200 in Cypress.Json file and disabled windows security but did not work.

""redirectionLimit"": 200,
""chromeWebSecurity"": false

**Error message coming in cypress:** The application redirected to more than 20 times. Please check if it's an intended behavior. If so, increase redirectionLimit value in configuration.

### Desired behavior
<!-- Remember, we are not familiar with the application you're testing, so please provide a clear description of what should happen.-->

### Test code to reproduce
<!-- Provide test code that we can copy, paste, and run on our machine to see the issue. -->

<!-- You could also provide a repo that we can clone and run. You can fork 👉 https://github.com/cypress-io/cypress-test-tiny repo, set up a failing test, then link to your fork. -->

### Versions

<!-- Cypress version, last known working Cypress version (if applicable), Browser and version, Operating System, CI Provider, etc -->
<!-- If possible, please update Cypress to latest version and check if the bug is still present. -->

",bug
899737730,Video processing times out on videos where 0 frames were written,"<!-- 👋 Use the template below to report a bug. Fill in as much info as possible. 

Have a question? Start a new discussion 👉 https://github.com/cypress-io/cypress/discussions

As an open source project with a small maintainer team, it may take some time for your issue to be addressed. Please be patient and we will respond as soon as we can. 🙏 -->

### Current behavior

Happens in our kitchensink tests for any video that is less than 3 seconds long: https://app.circleci.com/pipelines/github/cypress-io/cypress-example-kitchensink/1063/workflows/081e2595-85f7-4cc9-a5f7-fa3f23006b8e/jobs/6905

<img width=""890"" alt=""Screen Shot 2021-05-24 at 9 54 42 AM"" src=""https://user-images.githubusercontent.com/1271364/119366033-28b44e00-bc76-11eb-90c3-c83e4ae73d65.png"">

Also may be the issue with our `desktop-gui-component-tests` for `app/nav_spec.jsx` where the test runs for 0 seconds.

CircleCI failure: https://app.circleci.com/pipelines/github/cypress-io/cypress/20691/workflows/a3b97c80-6b4e-4697-b047-bbaf32471656/jobs/750928

<img width=""914"" alt=""Screen Shot 2021-05-20 at 10 26 30 AM (1)"" src=""https://user-images.githubusercontent.com/1271364/119392511-768c7e80-bc95-11eb-8b23-fb010a549df8.png"">

### Versions

7.3.0
",bug
899644122,Command failed with UNKNOWN,"I'm getting the following error.

I've tried clearing the cypress cache.

Node: v12.18.1
Npm: v6.14.5


```
npx cypress verify
  cypress:cli:cli cli starts with arguments [""C:\\Program Files\\nodejs\\node.exe"",""c:\\WS\\git\\betalningsforelaggande-web\\node_modules\\cypress\\bin\\cypress"",""verify""] +0ms
  cypress:cli NODE_OPTIONS is not set +0ms
  cypress:cli:cli program parsing arguments +3ms
  cypress:cli parsed cli options {} +3ms
  cypress:cli verifying Cypress app +0ms
  cypress:cli checking environment variables +1ms
  cypress:cli checking if executable exists C:\Users\EX13068\AppData\Local\Cypress\Cache\6.9.1\Cypress\Cypress.exe +3ms
  cypress:cli Binary is executable? : true +4ms
  cypress:cli binaryDir is  C:\Users\EX13068\AppData\Local\Cypress\Cache\6.9.1\Cypress +1ms
  cypress:cli Reading binary package.json from: C:\Users\EX13068\AppData\Local\Cypress\Cache\6.9.1\Cypress\resources\app\package.json +0ms
  cypress:cli Found binary version 6.9.1 installed in: C:\Users\EX13068\AppData\Local\Cypress\Cache\6.9.1\Cypress +4ms
  cypress:cli could not read binary_state.json file at ""C:\Users\EX13068\AppData\Local\Cypress\Cache\6.9.1\binary_state.json"" +5ms
  cypress:cli {} +0ms
  cypress:cli is Verified ? undefined +3ms
  cypress:cli force verify +1ms
  cypress:cli running binary verification check 6.9.1 +1ms

  cypress:cli clearing out the verified version +5ms
  cypress:cli needs Xvfb? false +7ms
  cypress:cli spawning, should retry on display problem? false +0ms
  cypress:cli running smoke test +2ms
  cypress:cli using Cypress executable C:\Users\EX13068\AppData\Local\Cypress\Cache\6.9.1\Cypress\Cypress.exe +0ms
  cypress:cli smoke test command: C:\Users\EX13068\AppData\Local\Cypress\Cache\6.9.1\Cypress\Cypress.exe --smoke-test --ping=859 +1ms
  cypress:cli smoke test timeout 30000 ms +1ms
  cypress:cli Smoke test failed: Error: Command failed with UNKNOWN: C:\Users\EX13068\AppData\Local\Cypress\Cache\6.9.1\Cypress\Cypress.exe --smoke-test --ping=859
spawn UNKNOWN
    at ChildProcess.spawn (internal/child_process.js:407:11)
    at Object.spawn (child_process.js:548:9)
    at Object.execa [as exec] (c:\WS\git\betalningsforelaggande-web\node_modules\cypress\node_modules\execa\index.js:80:26)
    at spawn (c:\WS\git\betalningsforelaggande-web\node_modules\cypress\lib\tasks\verify.js:123:33)
    at userFriendlySpawn (c:\WS\git\betalningsforelaggande-web\node_modules\cypress\lib\tasks\verify.js:150:12)
    at runSmokeTest (c:\WS\git\betalningsforelaggande-web\node_modules\cypress\lib\tasks\verify.js:165:10)
    at c:\WS\git\betalningsforelaggande-web\node_modules\cypress\lib\tasks\verify.js:191:29
    at tryCatcher (c:\WS\git\betalningsforelaggande-web\node_modules\bluebird\js\release\util.js:16:23)
    at Promise._settlePromiseFromHandler (c:\WS\git\betalningsforelaggande-web\node_modules\bluebird\js\release\promise.js:547:31)
    at Promise._settlePromise (c:\WS\git\betalningsforelaggande-web\node_modules\bluebird\js\release\promise.js:604:18)
    at Promise._settlePromise0 (c:\WS\git\betalningsforelaggande-web\node_modules\bluebird\js\release\promise.js:649:10)
    at Promise._settlePromises (c:\WS\git\betalningsforelaggande-web\node_modules\bluebird\js\release\promise.js:729:18)
    at Promise._fulfill (c:\WS\git\betalningsforelaggande-web\node_modules\bluebird\js\release\promise.js:673:18)
    at c:\WS\git\betalningsforelaggande-web\node_modules\bluebird\js\release\nodeback.js:42:21
    at CB (c:\WS\git\betalningsforelaggande-web\node_modules\cypress\node_modules\fs-extra\lib\remove\rimraf.js:57:5)
    at c:\WS\git\betalningsforelaggande-web\node_modules\cypress\node_modules\fs-extra\lib\remove\rimraf.js:81:14 {
  errno: 'UNKNOWN',
  code: 'UNKNOWN',
  syscall: 'spawn',
  originalMessage: 'spawn UNKNOWN',
  shortMessage: 'Command failed with UNKNOWN: C:\\Users\\EX13068\\AppData\\Local\\Cypress\\Cache\\6.9.1\\Cypress\\Cypress.exe --smoke-test --ping=859\n' +
    'spawn UNKNOWN',
  command: 'C:\\Users\\EX13068\\AppData\\Local\\Cypress\\Cache\\6.9.1\\Cypress\\Cypress.exe --smoke-test --ping=859',
  exitCode: undefined,
  signal: undefined,
  signalDescription: undefined,
  stdout: '',
  stderr: '',
  all: '',
  failed: true,
  timedOut: false,
  isCanceled: false,
  killed: false
} +83ms
  cypress:cli error message: Command failed with UNKNOWN: C:\Users\EX13068\AppData\Local\Cypress\Cache\6.9.1\Cypress\Cypress.exe --smoke-test --ping=859
spawn UNKNOWN +3ms
  ×  Verifying Cypress can run C:\Users\EX13068\AppData\Local\Cypress\Cache\6.9.1\Cypress
    → Cypress Version: 6.9.1
Cypress failed to start.

This is usually caused by a missing library or dependency.

The error below should indicate which dependency is missing.

https://on.cypress.io/required-dependencies

If you are using Docker, we provide containers with all required dependencies installed.

----------

Command failed with UNKNOWN: C:\Users\EX13068\AppData\Local\Cypress\Cache\6.9.1\Cypress\Cypress.exe --smoke-test --ping=859
spawn UNKNOWN

----------

Platform: win32 (10.0.17763)
Cypress Version: 6.9.1
```",bug
894652930,"Bigint does not display correctly in Command Log, throws error on print to console of 0n","### Current behavior
There are currently two issues with bigint in cypress.
1. when it prints log output, it says `{}` instead of serializing the bigint. If you click on the assertion, it displays properly in the console:
![image](https://user-images.githubusercontent.com/59899746/118701846-08454900-b7c9-11eb-9e0a-da4b258c72bf.png)
2. If either the expected or actual value is `0n`, you get an  exception when you click on it:
![image](https://user-images.githubusercontent.com/59899746/118702157-6a9e4980-b7c9-11eb-9a50-e1b11e732ea7.png)

### Desired behavior
- Bigints assertions should display their values in the command log (possibly with truncation)
- if you click on a bigint assertion that has `0n` on expected or actual, no exception should occur

### Test code to reproduce
```js
describe('Bigint example', () => {
    it('Displays wrong', () => {
        expect(2n).to.equal(2n);
    });

    it('Exception on inspect', () => {
        expect(1n).to.equal(0n);
    })

    it('Exception on inspect 2', () => {
        expect(0n).to.equal(1n);
    })
});
```
### Versions
This is present in 5.6.0 through 7.3.0, though you get different behavior for the exception in 5.6.0 and 7.3.0. In older versions, it doesn't show the exception and stack  trace, but expected/actual are missing:
![image](https://user-images.githubusercontent.com/59899746/118702995-72122280-b7ca-11eb-8782-8eae09e6d8c9.png)
![image](https://user-images.githubusercontent.com/59899746/118703038-80603e80-b7ca-11eb-89e6-2662bd605b0c.png)

",bug
893894303,chainers.split is not a function with an alias,"Cypress v7.3.0 on Mac

Reproduction https://github.com/bahmutov/cypress-grep-example/tree/chainers-split

This is our React TodoMVC app with standard tests. The routing-spec.js has a single allowed test

```js
beforeEach(function () {
    cy.createDefaultTodos().as('todos')
 })

it.only('should allow me to display all items @smoke', function () {
  cy.get('@todos').eq(1).find('.toggle').check()

  cy.get('.filters').contains('Active').click()

  cy.get('.filters').contains('Completed').click()

  cy.get('.filters').contains('All').click()

  cy.get('@todos').should('have.length', 3)
})
```

When this test runs it gives an unusual error, I think it has to do with the alias recompute

<img width=""1091"" alt=""Screen Shot 2021-05-17 at 10 47 34 PM"" src=""https://user-images.githubusercontent.com/2212006/118582749-e06eca80-b761-11eb-857d-7dcb956940a1.png"">

<img width=""721"" alt=""Screen Shot 2021-05-17 at 10 48 14 PM"" src=""https://user-images.githubusercontent.com/2212006/118582917-2f1c6480-b762-11eb-888a-d40df3c2f816.png"">

<img width=""572"" alt=""Screen Shot 2021-05-17 at 10 49 33 PM"" src=""https://user-images.githubusercontent.com/2212006/118582931-33488200-b762-11eb-8531-8b076bc39314.png"">

The custom command creating the todos ends with

```js
cy.get('.todo-list li', { log: false })
  // .should('have.length', 3)
  .should(($listItems) => {
    // check the text in each list item
    expect($listItems[0], 'first item').to.have.text(TODO_ITEM_ONE)
    expect($listItems[1], 'second item').to.have.text(TODO_ITEM_TWO)
    expect($listItems[2], 'third item').to.have.text(TODO_ITEM_THREE)
  })
  .then(function ($listItems) {
    // once we're done inserting each of the todos
    // above we want to return the .todo-list li's
    // to allow for further chaining and then
    // we want to snapshot the state of the DOM
    // and end the command so it goes from that
    // 'spinning blue state' to the 'finished state'
    cmd.set({ $el: $listItems }).snapshot().end()
  })
```

Seems the alias with multiple assertions is running intro trouble",bug
890082924,Cypress runner crashes after a cy.request() command times out,"### Current behaviour
The Cypress test runner crashes with a ""RangeError: Maximum call stack size exceeded"" error a few seconds after a cy.request() command times out.

This happens with both `cypress open` and `cypress run`.

### Desired behavior
cy.request() commands that time out should not crash the test runner.

### Test code to reproduce
Demo repo and instructions here: [demo repo](https://github.com/gabi-dobritescu/exceed-stack-size/tree/master)

Here's a copy of the relevant files from the project:

package.json
```javascript
{
  ""name"": ""stack-size-exceeded"",
  ""version"": ""1.0.0"",
  ""description"": ""A demo project to show the stack size exceeded error with Cypress"",
  ""main"": ""index.js"",
  ""author"": ""Gabi Dobritescu"",
  ""license"": ""MIT"",
  ""private"": true,
  ""scripts"": {
    ""start"": ""node app.js"",
    ""cypress:open"": ""node_modules\\.bin\\cypress open""
  },
  ""devDependencies"": {
    ""cypress"": ""^7.3.0"",
    ""express"": ""^4.17.1""
  }
}
```

cypress.json
```javascript
{
  ""responseTimeout"": 2000
}
```

app.js
```javascript
const express = require('express')
const app = express()
const port = 3000

app.get('/', (req, res) => {
  setTimeout(() => {
    res.send('Hello World!')
  }, 5000)

})

app.listen(port, () => {
  console.log(""Example app listening at http://localhost:${port}"")
})
```

quick-test.spec.js
```javascript
describe(""Demo test for the exceed stack size error"", () => {
  it(""should gracefully fail the test when api request times out"", () => {
    cy.request(""http://localhost:3000/"").then(response => {
      expect(response.body).to.equal(""Hello World!"");
    })
  })
})
```

To reproduce the issue:

`yarn install`

`yarn start`

`yarn cypress:open`

Run the `quick-test.spec` test. After the test completes (failing as expected because the request timed out before the server responded) wait for a few seconds (anywhere between 2 to 5 second usually).
The runner crashes with the following error and stacktrace:

```javascript
RangeError: Maximum call stack size exceeded
    at isBinary (C:\Users\dobrites\AppData\Local\Cypress\Cache\7.3.0\Cypress\resources\app\packages\socket\node_modules\socket.io-parser\dist\is-binary.js:23:18)
    at hasBinary (C:\Users\dobrites\AppData\Local\Cypress\Cache\7.3.0\Cypress\resources\app\packages\socket\node_modules\socket.io-parser\dist\is-binary.js:46:9)
    at hasBinary (C:\Users\dobrites\AppData\Local\Cypress\Cache\7.3.0\Cypress\resources\app\packages\socket\node_modules\socket.io-parser\dist\is-binary.js:55:63)
    at hasBinary (C:\Users\dobrites\AppData\Local\Cypress\Cache\7.3.0\Cypress\resources\app\packages\socket\node_modules\socket.io-parser\dist\is-binary.js:40:17)
    at hasBinary (C:\Users\dobrites\AppData\Local\Cypress\Cache\7.3.0\Cypress\resources\app\packages\socket\node_modules\socket.io-parser\dist\is-binary.js:55:63)
    at hasBinary (C:\Users\dobrites\AppData\Local\Cypress\Cache\7.3.0\Cypress\resources\app\packages\socket\node_modules\socket.io-parser\dist\is-binary.js:55:63)
    at hasBinary (C:\Users\dobrites\AppData\Local\Cypress\Cache\7.3.0\Cypress\resources\app\packages\socket\node_modules\socket.io-parser\dist\is-binary.js:55:63)
    at hasBinary (C:\Users\dobrites\AppData\Local\Cypress\Cache\7.3.0\Cypress\resources\app\packages\socket\node_modules\socket.io-parser\dist\is-binary.js:55:63)
    at hasBinary (C:\Users\dobrites\AppData\Local\Cypress\Cache\7.3.0\Cypress\resources\app\packages\socket\node_modules\socket.io-parser\dist\is-binary.js:55:63)
    at hasBinary (C:\Users\dobrites\AppData\Local\Cypress\Cache\7.3.0\Cypress\resources\app\packages\socket\node_modules\socket.io-parser\dist\is-binary.js:55:63)
    at hasBinary (C:\Users\dobrites\AppData\Local\Cypress\Cache\7.3.0\Cypress\resources\app\packages\socket\node_modules\socket.io-parser\dist\is-binary.js:40:17)
    at hasBinary (C:\Users\dobrites\AppData\Local\Cypress\Cache\7.3.0\Cypress\resources\app\packages\socket\node_modules\socket.io-parser\dist\is-binary.js:55:63)
    at hasBinary (C:\Users\dobrites\AppData\Local\Cypress\Cache\7.3.0\Cypress\resources\app\packages\socket\node_modules\socket.io-parser\dist\is-binary.js:55:63)
    at hasBinary (C:\Users\dobrites\AppData\Local\Cypress\Cache\7.3.0\Cypress\resources\app\packages\socket\node_modules\socket.io-parser\dist\is-binary.js:55:63)
    at hasBinary (C:\Users\dobrites\AppData\Local\Cypress\Cache\7.3.0\Cypress\resources\app\packages\socket\node_modules\socket.io-parser\dist\is-binary.js:55:63)
    at hasBinary (C:\Users\dobrites\AppData\Local\Cypress\Cache\7.3.0\Cypress\resources\app\packages\socket\node_modules\socket.io-parser\dist\is-binary.js:55:63)
    at hasBinary (C:\Users\dobrites\AppData\Local\Cypress\Cache\7.3.0\Cypress\resources\app\packages\socket\node_modules\socket.io-parser\dist\is-binary.js:55:63)
    at hasBinary (C:\Users\dobrites\AppData\Local\Cypress\Cache\7.3.0\Cypress\resources\app\packages\socket\node_modules\socket.io-parser\dist\is-binary.js:40:17)
    ...
    at hasBinary (C:\Users\dobrites\AppData\Local\Cypress\Cache\7.3.0\Cypress\resources\app\packages\socket\node_modules\socket.io-parser\dist\is-binary.js:55:63)
    at hasBinary (C:\Users\dobrites\AppData\Local\Cypress\Cache\7.3.0\Cypress\resources\app\packages\socket\node_modules\socket.io-parser\dist\is-binary.js:40:17)
    at Object.hasBinary (C:\Users\dobrites\AppData\Local\Cypress\Cache\7.3.0\Cypress\resources\app\packages\socket\node_modules\socket.io-parser\dist\is-binary.js:55:63)
    at Encoder.encode (C:\Users\dobrites\AppData\Local\Cypress\Cache\7.3.0\Cypress\resources\app\packages\socket\node_modules\socket.io-parser\dist\index.js:38:29)
    at Client._packet (C:\Users\dobrites\AppData\Local\Cypress\Cache\7.3.0\Cypress\resources\app\packages\socket\node_modules\socket.io\dist\client.js:169:44)
    at Socket.packet (C:\Users\dobrites\AppData\Local\Cypress\Cache\7.3.0\Cypress\resources\app\packages\socket\node_modules\socket.io\dist\socket.js:160:21)
    at C:\Users\dobrites\AppData\Local\Cypress\Cache\7.3.0\Cypress\resources\app\packages\socket\node_modules\socket.io\dist\socket.js:274:18
    at C:\Users\dobrites\AppData\Local\Cypress\Cache\7.3.0\Cypress\resources\app\packages\server\lib\socket-base.js:325:28
    at tryCatcher (C:\Users\dobrites\AppData\Local\Cypress\Cache\7.3.0\Cypress\resources\app\packages\server\node_modules\bluebird\js\release\util.js:16:23)
    at Promise._settlePromiseFromHandler (C:\Users\dobrites\AppData\Local\Cypress\Cache\7.3.0\Cypress\resources\app\packages\server\node_modules\bluebird\js\release\promise.js:547:31)
    at Promise._settlePromise (C:\Users\dobrites\AppData\Local\Cypress\Cache\7.3.0\Cypress\resources\app\packages\server\node_modules\bluebird\js\release\promise.js:604:18)
    at Promise._settlePromise0 (C:\Users\dobrites\AppData\Local\Cypress\Cache\7.3.0\Cypress\resources\app\packages\server\node_modules\bluebird\js\release\promise.js:649:10)
    at Promise._settlePromises (C:\Users\dobrites\AppData\Local\Cypress\Cache\7.3.0\Cypress\resources\app\packages\server\node_modules\bluebird\js\release\promise.js:725:18)
    at _drainQueueStep (C:\Users\dobrites\AppData\Local\Cypress\Cache\7.3.0\Cypress\resources\app\packages\server\node_modules\bluebird\js\release\async.js:93:12)
    at _drainQueue (C:\Users\dobrites\AppData\Local\Cypress\Cache\7.3.0\Cypress\resources\app\packages\server\node_modules\bluebird\js\release\async.js:86:9)
    at Async._drainQueues (C:\Users\dobrites\AppData\Local\Cypress\Cache\7.3.0\Cypress\resources\app\packages\server\node_modules\bluebird\js\release\async.js:102:5)
    at Immediate.Async.drainQueues [as _onImmediate] (C:\Users\dobrites\AppData\Local\Cypress\Cache\7.3.0\Cypress\resources\app\packages\server\node_modules\bluebird\js\release\async.js:15:14)
    at processImmediate (internal/timers.js:461:21)
```


### Versions
7.3.0
",bug
888447581,Flake with location object,"Cypress v7.3.0

Reproducible example in https://github.com/bahmutov/cypress-ethereal-email-example/tree/location-flake

The test redirects from localhost to localhost `/confirm` through Sendgrid URL. Sometimes it works, sometimes it does not (even though the page does load fine)

<img width=""996"" alt=""Screen Shot 2021-05-11 at 3 50 31 PM"" src=""https://user-images.githubusercontent.com/2212006/117877146-2f07fa80-b272-11eb-82ee-e18078b89f5f.png"">

When it fails it shows

<img width=""1027"" alt=""Screen Shot 2021-05-11 at 3 50 46 PM"" src=""https://user-images.githubusercontent.com/2212006/117877174-36c79f00-b272-11eb-8418-509e23bb1fa9.png"">

Almost like it has temporary blip with the `location` object and does not retry getting it again",bug
887474899,Intercept doesn't catch all requests.,"<!-- 👋 Use the template below to report a bug. Fill in as much info as possible. 

Have a question? Start a new discussion 👉 https://github.com/cypress-io/cypress/discussions

As an open source project with a small maintainer team, it may take some time for your issue to be addressed. Please be patient and we will respond as soon as we can. 🙏 -->

### Current behavior

I've set up `cy.intercept()` for a request that goes out quickly 3 times. Each has a `times` to respond once. Sometimes when this test is run, it hangs on the last `cy.wait()` even though all 3 requests did occur.

### Test code to reproduce

https://github.com/jennifer-shehane/cypress-intercept-times-flake

```js
it(`test`, () => {
  cy.intercept('https://jsonplaceholder.typicode.com/todos/1', { times: 1 }, { title: 'baz' }).as('getTodo')
  cy.intercept('https://jsonplaceholder.typicode.com/todos/1', { times: 1 }, { title: 'bar' }).as('getTodo')
  cy.intercept('https://jsonplaceholder.typicode.com/todos/1', { times: 1 }, { title: 'foo' }).as('getTodo')
  cy.visit('/')
  cy.wait('@getTodo')
  cy.wait('@getTodo')
  cy.wait('@getTodo')

  cy.get('#api-response-list li')
    .first().should('have.text', 'foo')
    .next().should('have.text', 'bar')
    .next().should('have.text', 'baz')
})
```

<img width=""694"" alt=""Screen Shot 2021-05-11 at 2 20 15 PM"" src=""https://user-images.githubusercontent.com/1271364/117872236-11339900-b264-11eb-8ff3-0f59cf2d9977.png"">


### Versions

Cypress 7.3.0
",bug
877301867,For some websites cypress runner hangs when running cy.visit for the second time in the same test spec,"<!-- 👋 Use the template below to report a bug. Fill in as much info as possible. 

Have a question? Start a new discussion 👉 https://github.com/cypress-io/cypress/discussions

As an open source project with a small maintainer team, it may take some time for your issue to be addressed. Please be patient and we will respond as soon as we can. 🙏 -->

### Current behavior
For some websites cypress runner hangs when running `cy.visit` for the second time within the same test session. It's totally frozen and it's not possible to click any button nor interact with page.

- It happens on every browser (Chrome, Edge, Electron, FF), in headless and non-headless mode.
- It happens every time - problem is reproducible on given [website](https://eeho.fa.us2.oraclecloud.com/hcmUI/CandidateExperience/en/sites/CX_1/requisitions).
- DEBUG logs does not show anything interesting.
- `cy.reload` or clicking ""Run all tests"" from test runner gives the same results

### Desired behavior
It should be possible to reload the page multiple times within one test session.

### Test code to reproduce
The first test passes, cypress get frozen when running `cy.visit` on the second test.
```js
describe('Test issue', () => {
    beforeEach(() => {
        cy.visit('https://eeho.fa.us2.oraclecloud.com/hcmUI/CandidateExperience/en/sites/CX_1/requisitions');
    });

    it('test 1', () => {
        cy.wait(3000);
    });

    it('test 2', () => {
        cy.wait(3000);
    });
});
```

### Versions

<!-- Cypress version, last known working Cypress version (if applicable), Browser and version, Operating System, CI Provider, etc -->
<!-- If possible, please update Cypress to latest version and check if the bug is still present. -->
Currently on **7.2.0**. Downgraded to **6.7.0** - issue exists.

macOS 11.2.3
",bug
871006933,"In Desktop GUI, e2e and component in config display as [object Object]","<!-- 👋 Use the template below to report a bug. Fill in as much info as possible. 

Have a question? Start a new discussion 👉 https://github.com/cypress-io/cypress/discussions

As an open source project with a small maintainer team, it may take some time for your issue to be addressed. Please be patient and we will respond as soon as we can. 🙏 -->

### Current behavior

Introduced in https://github.com/cypress-io/cypress/pull/15526, the visualization of the config in the Desktop-GUI displays as [object Object]. 

<img width=""448"" alt=""Screen Shot 2021-04-29 at 8 09 51 AM copy"" src=""https://user-images.githubusercontent.com/1271364/116555980-93b27500-a8c2-11eb-9a72-23cd1aaa23ee.png"">

When overriding the values, the overridden value does not display for the `e2e` object. 

<img width=""437"" alt=""Screen Shot 2021-04-29 at 8 16 15 AM copy"" src=""https://user-images.githubusercontent.com/1271364/116556677-5995a300-a8c3-11eb-9547-6c90d7ea887f.png"">


### Desired behavior

- Should show an empty object if it's not overridden. 
- Should show config values that are overriden.

### Test code to reproduce

`cypress open`

```json
{
  ""defaultCommandTimeout"": 4000,
  ""e2e"": {
    ""defaultCommandTimeout"": 10000
  },
  ""component"": {
    ""defaultCommandTimeout"": 1000
  }
}
```


### Versions

7.0+
",bug
870174445,"Cypress was unable to save these commands to your spec file: ENOENT: no such file or directory, open ....","### Current behavior
When I ""Save Commands"" using Cypress Studio, I get the following error:


>ENOENT: no such file or directory, open '[ABSOLUTE PATH TO THE FOLDER I AM RUNNING THE TEST]/[PACKAGE NAME from PACKAGE.JSON]/[RELATIVE PATH TO TEST FILE]
>
>Cypress was unable to save these commands to your spec file. Cypress Studio is still in beta and the team is working hard to resolve issues like this. To help us fix this issue more quickly, you can provide us with more information by clicking 'Learn more' below.Learn more

### Desired behavior
I expect the tests to be saved to the file for which I have ran Cypress Studio on to generate the commands.
 The path should not have the package name from the package.json file. Instead, it should be: 

'[ABSOLUTE PATH TO THE FOLDER I AM RUNNING THE TEST]/[RELATIVE PATH TO TEST FILE]'

For RELATIVE PATH TO TEST FILE, I had expected it to be derived from the `cypress.json` file from `testFiles` or integration Folder: 
```
  ""testFiles"": ""../apps/**/*.cypress.ts"",
  ""ignoreTestFiles"": ""**/node_modules/**"",
  ""integrationFolder"": ""../apps/"",
```

Curiously, when I click the ""open in IDE"" button on hover over the file path on the top left, it does open to the correct file path (not the '[ABSOLUTE PATH TO THE FOLDER I AM RUNNING THE TEST]/[PACKAGE NAME from PACKAGE.JSON]/[RELATIVE PATH TO TEST FILE]' version) in the Finder.
### Versions

7.2.0 (Latest Version)",bug
864546217,'New Spec File' filename adds extra dots,"<!-- 👋 Use the template below to report a bug. Fill in as much info as possible. 

Have a question? Start a new discussion 👉 https://github.com/cypress-io/cypress/discussions

As an open source project with a small maintainer team, it may take some time for your issue to be addressed. Please be patient and we will respond as soon as we can. 🙏 -->

### Current behavior
<!-- A description including screenshots, stack traces, DEBUG logs, etc. 👉 https://on.cypress.io/troubleshooting -->

As you can see in the video below, switching between JavaScript and TypeScript in the dialog will add a new dot to the end of the filename each time.

### Desired behavior
<!-- Remember, we are not familiar with the application you're testing, so please provide a clear description of what should happen.-->
No extra dots! My guess would be the extensions here https://github.com/cypress-io/cypress/blob/3700fe7271b016f8a89c5a7a4c40d0af62155b45/packages/server/lib/gui/dialog.ts#L36-L45 shouldn't have dots (e.g. ['.js'] -> ['js']

### Test code to reproduce
<!-- Provide test code that we can copy, paste, and run on our machine to see the issue. -->

<!-- You could also provide a repo that we can clone and run. You can fork 👉 https://github.com/cypress-io/cypress-test-tiny repo, set up a failing test, then link to your fork. -->


https://user-images.githubusercontent.com/16643647/115658592-a4676600-a36b-11eb-9609-e2b8b845b2f0.mp4




### Versions

<!-- Cypress version, last known working Cypress version (if applicable), Browser and version, Operating System, CI Provider, etc -->
<!-- If possible, please update Cypress to latest version and check if the bug is still present. -->
7.1.0
",bug
863235104,CLI filtering `--spec` with glob pattern does not find spec files,"<!-- 👋 Use the template below to report a bug. Fill in as much info as possible. 

Have a question? Start a new discussion 👉 https://github.com/cypress-io/cypress/discussions

As an open source project with a small maintainer team, it may take some time for your issue to be addressed. Please be patient and we will respond as soon as we can. 🙏 -->

### Current behavior
Given the following folder structure:
```
.
├── cypress
│   ├── integration
│       └── _fixtures
│           └── fixture-should-not-match.spec.js
│       └── _unit
│           └── unit-should-not-match.spec.js                  
│       └── sub-level-1
│           └── should-match-level-1.spec.js                   --> this one should match!
│         └── sub-level-2
│             └── should-match-level-2.spec.js                 --> this one should match!
│       └── fixture-should-not-match.spec.js
```
I'd like to trigger cypress with `cypress run` targeting only the two spec files highlighted. One glob pattern tested from [here](https://www.digitalocean.com/community/tools/glob?comments=true&glob=cypress%2Fintegration%2F%7B%5B%21fix%5D%2A.spec.js%2C%21%28_unit%29%2F%2A%2A%2F%5B%21fix%5D%2A.spec.js%7D&matches=false&tests=cypress%2Fintegration%2F_fixtures%2Ffixture-should-not-match.spec.js&tests=cypress%2Fintegration%2F_unit%2Funit-should-not-match.spec.js&tests=cypress%2Fintegration%2Fsub-level-1%2Fshould-match-level-1.spec.js&tests=cypress%2Fintegration%2Fsub-level-2%2Fshould-match-level-2.spec.js&tests=cypress%2Fintegration%2Ffixture-should-not-match.spec.js) gives the right result.

However, when triggering from the command line with `npx cypress run --spec 'cypress/integration/{[!fix]*.spec.js,!(_unit)/**/[!fix]*.spec.js}'`, I get the message 
```
Can't run because no spec files were found.

We searched for any files matching this glob pattern:

cypress/integration/{[!fix]*.spec.js,!(_unit)/**/[!fix]*.spec.js}

Relative to the project root folder:

/Users/username/path/to/project

```

### Desired behavior
<!-- Remember, we are not familiar with the application you're testing, so please provide a clear description of what should happen.-->
Cypress should find & run the two specs highlighted in the snippet above.

### Test code to reproduce
<!-- Provide test code that we can copy, paste, and run on our machine to see the issue. -->
`npx cypress run --spec 'cypress/integration/{[!fix]*.spec.js,!(_unit)/**/[!fix]*.spec.js}'`

<!-- You could also provide a repo that we can clone and run. You can fork 👉 https://github.com/cypress-io/cypress-test-tiny repo, set up a failing test, then link to your fork. -->

### Versions
Cypress 6.5.0 (Upgrade to Cypress 7 impossible atm, as the project has tied dependencies)
Mac OS 10.15.7
<!-- Cypress version, last known working Cypress version (if applicable), Browser and version, Operating System, CI Provider, etc -->
<!-- If possible, please update Cypress to latest version and check if the bug is still present. -->
",bug
862962357,Part of application URL is getting omitted while running the script,"**Current Behaviour**

Below code is mentioned in one of the spec.js file
```js
/// <reference types=""cypress"" />

context('openurl', () => {
    beforeEach(() => {
      cy.viewport (1920,1080);
    })
  
    it('.as() - alias a DOM element for later use', () => {
        cy.visit('https://www.mikedane.com/web-development/html/creating-an-html-file/#:~:text=html%20.-,index.,organized%20in%20this%20same%20way.')
    })
  
  })
```
  
**Issue:** In the test runner, URL displayed is 'https://www.mikedane.com/web-development/html/creating-an-html-file/' . The part '#:~:text=html%20.-,index.,organized%20in%20this%20same%20way.' is getting omitted. 

If symbol '#' is removed, the entire URL is displayed in the test runner.

**Desired Behaviour**
The entire application URL should be displayed in the test runner.

**Cypress Version**
7.1.0
![visitissue](https://user-images.githubusercontent.com/52565181/115426558-3e20fd00-a21e-11eb-96f1-5e727dcfd5c4.png)


",bug
862353086,Test-level config env replaces (rather than merges with) suite-level config env,"### Current behavior
When a suite is provided a `config` argument with an `env` property, and a contained test is also provided a `config` argument with an `env` property, the test's `env` **entirely replaces** the suite's `env`.

### Desired behavior
Properties of the test's `config` `env` should **override/merge** into the suite's `config` `env`, similarly to how the rest of the config/env overrides work.

### Test code to reproduce
```js
describe('Suite with a config env',
  { env: {
      var0: 'I was set on the suite!',
      var1: 'I was set on the suite!'
  }},
  () => {
    it('Test with a config env',
      { env: { var1: 'I was set on the test!' } },
      () => {
        expect(Cypress.env('var0')).to.exist.and.to.equal('I was set on the suite!') // AssertionError: expected undefined to exist
        expect(Cypress.env('var1')).to.exist.and.to.equal('I was set on the test!')
    })
})
```

### Versions
Cypress 7.1.0
",bug
861406466,CSS links containing media attribute are not properly reinstated in snapshot,"<!-- 👋 Use the template below to report a bug. Fill in as much info as possible. 

Have a question? Start a new discussion 👉 https://github.com/cypress-io/cypress/discussions

As an open source project with a small maintainer team, it may take some time for your issue to be addressed. Please be patient and we will respond as soon as we can. 🙏 -->

### Current behavior
<!-- A description including screenshots, stack traces, DEBUG logs, etc. 👉 https://on.cypress.io/troubleshooting -->
The [example page](https://github.com/sirjackal/cypress-mq-issue) links two CSS files. One with and one without `media` attribute:

```html
<link rel=""stylesheet"" href=""css/1.css"">
<link rel=""stylesheet"" href=""css/2.css"" media=""(min-width:735px)"">
```

When the test is run via `cypress open` command (with GUI), during the test itself everything seems to be OK. All links are included.

![Screenshot](https://github.com/sirjackal/cypress-mq-issue/blob/main/img/ok.png?raw=true)

But if you then go back to the certain step, the link with the `media` attribute is ignored/missing. The styles are probably taken from the DOM snapshot, which was created in a wrong way.

![Screenshot](https://github.com/sirjackal/cypress-mq-issue/blob/main/img/error.png?raw=true)

Tested with viewport 1300 x 880px (>735px).

### Desired behavior
<!-- Remember, we are not familiar with the application you're testing, so please provide a clear description of what should happen.-->
Media queries should be considered when creating DOM snapshots and should be applied during the stepping (when the test has finished).

### Test code to reproduce
<!-- Provide test code that we can copy, paste, and run on our machine to see the issue. -->
[GitHub repository](https://github.com/sirjackal/cypress-mq-issue) with minimal working example.

<!-- You could also provide a repo that we can clone and run. You can fork 👉 https://github.com/cypress-io/cypress-test-tiny repo, set up a failing test, then link to your fork. -->

### Versions

<!-- Cypress version, last known working Cypress version (if applicable), Browser and version, Operating System, CI Provider, etc -->
<!-- If possible, please update Cypress to latest version and check if the bug is still present. -->

Cypress version: 7.0.0
",bug
861251473,ant design date input type does not work,"<!-- 👋 Use the template below to report a bug. Fill in as much info as possible. 

Have a question? Start a new discussion 👉 https://github.com/cypress-io/cypress/discussions

As an open source project with a small maintainer team, it may take some time for your issue to be addressed. Please be patient and we will respond as soon as we can. 🙏 -->

### Current behavior
it seems to be working for a react date input but not for an antd date input
`cy.get(""#justDate"").type(""2020-10-01"")` does not change anything

### Desired behavior
for it to change the value

### Test code to reproduce
here is a [repo ](https://github.com/alissaVrk/my-test-app)with reproduction

### Versions

last known version it worked 6.3.0
not working in 7.1.0

<!-- Cypress version, last known working Cypress version (if applicable), Browser and version, Operating System, CI Provider, etc -->
<!-- If possible, please update Cypress to latest version and check if the bug is still present. -->
",bug
860354382,select('value') cannot contain round bracket ( ) as value,"### Current behavior
select() are not able to find and select value with round bracket ( ). Example value: lorem (lorem)

### Desired behavior
select() should be able to find and select value with any special characters

### Test code to reproduce
cy.get('select#dropdownelement').select('Lorem (ipsum)');

### Versions
7.1.0

### Note
Had tested it with no round bracket ( ) and is able to select the desired value

![2021-04-17_16-05-33](https://user-images.githubusercontent.com/80996786/115106331-cb522080-9f96-11eb-998c-eb9838fd7e7b.png)

",bug
858775044,Does not show more than one .should('contain') assertion when chained after .should('be.visible'),"### Current behavior
Test runner shows misleading info when more than one `.should('contain')` assertion is chained after `.should('be.visible')`
Consider following code


```js
 cy.get('[data-cy=mobile-payments-template]')
        .should('be.visible')
        .should('contain', 'Something')
        .should('contain', '+420 737 799 983');
```
This is displayed incorrectly in Test runner (notice the replaced `to contain Something` with `to be visible`)
![image](https://user-images.githubusercontent.com/36360797/114858971-6b1e7b80-9dea-11eb-92c3-a6978f323cd8.png)

When I delete the `should('be.visible')` assertion, it's displayed properly
![image](https://user-images.githubusercontent.com/36360797/114859101-9608cf80-9dea-11eb-9e06-2505ebea4a48.png)


### Desired behavior
Display `to contain Something`
![image](https://user-images.githubusercontent.com/36360797/114860480-56db7e00-9dec-11eb-848a-f5d29ba9291f.png)

### Test code to reproduce
<!-- Provide test code that we can copy, paste, and run on our machine to see the issue. -->

<!-- You could also provide a repo that we can clone and run. You can fork 👉 https://github.com/cypress-io/cypress-test-tiny repo, set up a failing test, then link to your fork. -->

### Versions
6.8.0
",bug
856168841,"Cypress crashes with misleading error message ""Unknown signal: true""","<!-- 👋 Use the template below to report a bug. Fill in as much info as possible. 

Have a question? Start a new discussion 👉 https://github.com/cypress-io/cypress/discussions

As an open source project with a small maintainer team, it may take some time for your issue to be addressed. Please be patient and we will respond as soon as we can. 🙏 -->

### Current behavior

If Cypress crashes with 7.x, it will print out an ""Unknown signal: true"" error below the actual error due to #15751

```
Uncaught TypeError [ERR_UNKNOWN_SIGNAL]: Unknown signal: true
```

### Desired behavior

When Cypress crashes, it only prints the actual crash message

### Versions

7.0.0+",bug
855582655,Chromium Devtools bug when using Electron,"<!-- 👋 Use the template below to report a bug. Fill in as much info as possible. 

Have a question? Start a new discussion 👉 https://github.com/cypress-io/cypress/discussions

As an open source project with a small maintainer team, it may take some time for your issue to be addressed. Please be patient and we will respond as soon as we can. 🙏 -->

### Current behavior
<!-- A description including screenshots, stack traces, DEBUG logs, etc. 👉 https://on.cypress.io/troubleshooting -->

Repro:

1. launch `runner-ct` with electron
2. open devtools (right click -> inspect element)
3. run a spec
4. inspect some elements
5. run spec again
6. the devtools sometimes to not refresh

First discovered and noted here: https://github.com/cypress-io/cypress/pull/15777

### Desired behavior
<!-- Remember, we are not familiar with the application you're testing, so please provide a clear description of what should happen.-->

Can use devtools with electron.

### Test code to reproduce
<!-- Provide test code that we can copy, paste, and run on our machine to see the issue. -->

<!-- You could also provide a repo that we can clone and run. You can fork 👉 https://github.com/cypress-io/cypress-test-tiny repo, set up a failing test, then link to your fork. -->

### Versions

<!-- Cypress version, last known working Cypress version (if applicable), Browser and version, Operating System, CI Provider, etc -->
<!-- If possible, please update Cypress to latest version and check if the bug is still present. -->

This issue also occurs in E2E, running against master@6.8.0 . For me, this is occurring on every spec run.
",bug
854351081,[7.0.1]Bug: cy.intercept POST terminates cypress process,"## Simplified reproduction

https://github.com/bahmutov/cypress-15901-bug

### Current behavior
### presettings
- The code includes POST request with Chineese words inside it's body (Chineese words should be long enough)
```html
<script>
    fetch('http://localhost:5000/api/sample', {
    method: 'POST', body: JSON.stringify({first: '東京都新東', second: '東京都新'})})
</script>
```
- use `cy.intercept` in the test with the API above
```
cy.intercept('POST', 'http://localhost:5000/api/sample');
```

### Result
If I run Cypress, it's process is terminated with error messages
![cypress-intercept-bug](https://user-images.githubusercontent.com/40619551/114158693-f1a50a00-995f-11eb-80a9-308332661720.gif)
```
TypeError [ERR_INVALID_ARG_TYPE] [ERR_INVALID_ARG_TYPE]: The first argument must be of type string or an instance of Buffer or Uint8Array. Received type number (123)
    at write_ (_http_outgoing.js:696:11)
    at ClientRequest.write (_http_outgoing.js:661:15)
    at Request.write (/Users/user/Library/Caches/Cypress/7.0.1/Cypress.app/Contents/Resources/app/packages/server/node_modules/@cypress/request/request.js:1496:27)
    at /Users/user/Library/Caches/Cypress/7.0.1/Cypress.app/Contents/Resources/app/packages/server/node_modules/@cypress/request/request.js:546:20
    at Array.forEach (<anonymous>:null:null)
    at end (/Users/user/Library/Caches/Cypress/7.0.1/Cypress.app/Contents/Resources/app/packages/server/node_modules/@cypress/request/request.js:545:23)
    at Immediate._onImmediate (/Users/user/Library/Caches/Cypress/7.0.1/Cypress.app/Contents/Resources/app/packages/server/node_modules/@cypress/request/request.js:578:7)
    at processImmediate (internal/timers.js:461:21)
 {
  code: 'ERR_INVALID_ARG_TYPE'
}
```
![image](https://user-images.githubusercontent.com/40619551/114159754-1a79cf00-9961-11eb-9728-04eaf1d1d95b.png)


### Desired behavior
Cypress test process must not be terminated.

### Test code to reproduce

https://github.com/njh7799/cypress7.0-intercept-post-bug

### Versions

Cypress version: 7.0.1
OS: MAC Big Sir
",bug
853178089,404 page,"Hello! I just noticed you have a ""404 page"" on your short intro tutorial.
![404](https://user-images.githubusercontent.com/58033582/113988230-ecf52e80-9857-11eb-9ed7-2c579c8c6d23.gif)
",bug
852063225,[7.0.0] cy.intercept(): stubbed responses still send request to server,"### Current behavior
After upgrading from 6.7.1 to 7.0.0, I noticed my tests are still working as expected, but my server logs show requests being made to my server for intercepted requests using fixtures, objects, or strings.
```
    cy.intercept('/api/getThings', { fixture: 'getThings' });
    cy.intercept('/api/getAnotherThing', 'AnotherThing');
    cy.intercept('/api/getYetAnotherThing', { text: 'YetAnotherThing' });
```
Each of these intercepts _will_ return the stubbed response, but the requests are still being made afterward.

Example server log:
```
GET /api/getThings 200 4.389 ms - -
error: GET - 500 - /api/getThings -- some error because I'm not using a live service
GET /api/getAnotherThing 200 2.312 ms - -
error: GET - 500 - /api/getThings -- some error because I'm not using a live service
GET /api/getYetAnotherThing 200 4.231 ms - -
error: GET - 500 - /api/getYetAnotherThing -- some error because I'm not using a live service
```

### Desired behavior
The requests should NOT go to the server after returning the stubbed response.
```
GET /api/getThings 200 4.389 ms - -
GET /api/getAnotherThing 200 2.312 ms --
GET /api/getYetAnotherThing 200 4.231 ms --
```

### Current workaround
`req.reply` works as expected, blocking the requests to the server.
```
    cy.intercept('/api/getThings', (req) => req.reply({ fixture: 'getThings' }));
    cy.intercept('/api/getAnotherThing', (req) => req.reply('AnotherThing'));
    cy.intercept('/api/getYetAnotherThing', (req) => req.reply({ text: 'YetAnotherThing' }));
```

### Versions
7.0.0
",bug
851857127,Checked for Updates event not firing due to malformed http header,"The ""Checked for Updates"" event is not firing in version `7.0.0` and users will not see the update banner when we release `7.0.1`.",bug
851601332,Undefined snapshot on test failure,"Testing Cypress v7

Reproduction in https://github.com/bahmutov/cypress-spy

The test fails, but when I hover over the failed command shows our failure


https://user-images.githubusercontent.com/2212006/113746464-59dfbb80-96d4-11eb-8660-9dcf7d76a1df.mp4

The stack:

<img width=""655"" alt=""Screen Shot 2021-04-06 at 12 34 12 PM"" src=""https://user-images.githubusercontent.com/2212006/113746494-65cb7d80-96d4-11eb-990f-6ad92252f97f.png"">

Relevant code:

<img width=""1062"" alt=""Screen Shot 2021-04-06 at 12 34 34 PM"" src=""https://user-images.githubusercontent.com/2212006/113746555-72e86c80-96d4-11eb-8c3d-8e9a6bc4d0ac.png"">

Setting the breakpoint:

<img width=""1063"" alt=""Screen Shot 2021-04-06 at 12 34 56 PM"" src=""https://user-images.githubusercontent.com/2212006/113746701-9b706680-96d4-11eb-9249-50b5d4fa4d8f.png"">
",bug
851542104,Crash when running v7 in Docker using Electron,"Cypress v7.0.0 running using `cypress/included:7.0.0` image crashes in Electron

https://github.com/cypress-io/cypress-docker-images/pull/469

Last frame of the video

<img width=""1435"" alt=""Screen Shot 2021-04-06 at 11 25 44 AM"" src=""https://user-images.githubusercontent.com/2212006/113736414-13399380-96cb-11eb-9636-eec8ee399b59.png"">

Nothing extra-ordinary in the debug logs

workaround: Using Chrome browser works fine",bug
851511820,open-ct complains about unknown property `publicPath`,"### Current behavior

```
$ npx cypress open-ct --browser=chromium
(node:128091) Warning: Accessing non-existent property 'padLevels' of module exports inside circular dependency
(Use `Cypress --trace-warnings ...` to show where the warning was created)
will watch ""build/*""
Error [ValidationError]: Invalid configuration object. Object has been initialized using a configuration object that does not match the AP - configuration has an unknown property 'publicPath'. These properties are valid:
   object { bonjour?, client?, compress?, dev?, firewall?, headers?, historyApiFallback?, host?, hot?, http2?, https?, injectClient?, injels?, static?, stdin?, transportMode?, useLocalIp? }
    at validate (/home/cassou/Documents/projects/ftgp/monitor/monitor/Monitor.Web.Ui/Client/node_modules/webpack-dev-server/node_modules/s    at new Server (/home/cassou/Documents/projects/ftgp/monitor/monitor/Monitor.Web.Ui/Client/node_modules/webpack-dev-server/lib/Server.j    at Object.<anonymous> (/home/cassou/Documents/projects/ftgp/monitor/monitor/Monitor.Web.Ui/Client/node_modules/@cypress/webpack-dev-se    at Generator.next (<anonymous>)
    at fulfilled (/home/cassou/Documents/projects/ftgp/monitor/monitor/Monitor.Web.Ui/Client/node_modules/@cypress/webpack-dev-server/dist    at processTicksAndRejections (internal/process/task_queues.js:93:5)
ValidationError: Invalid configuration object. Object has been initialized using a configuration object that does not match the API schema - configuration has an unknown property 'publicPath'. These properties are valid:
   object { bonjour?, client?, compress?, dev?, firewall?, headers?, historyApiFallback?, host?, hot?, http2?, https?, injectClient?, injels?, static?, stdin?, transportMode?, useLocalIp? }
    at validate (/home/cassou/Documents/projects/ftgp/monitor/monitor/Monitor.Web.Ui/Client/node_modules/webpack-dev-server/node_modules/s    at new Server (/home/cassou/Documents/projects/ftgp/monitor/monitor/Monitor.Web.Ui/Client/node_modules/webpack-dev-server/lib/Server.j    at Object.<anonymous> (/home/cassou/Documents/projects/ftgp/monitor/monitor/Monitor.Web.Ui/Client/node_modules/@cypress/webpack-dev-se    at Generator.next (<anonymous>)
    at fulfilled (/home/cassou/Documents/projects/ftgp/monitor/monitor/Monitor.Web.Ui/Client/node_modules/@cypress/webpack-dev-server/dist    at processTicksAndRejections (internal/process/task_queues.js:93:5)
```

The error message is about `publicPath` but my code doesn't contain this property. It seems that this comes from webpack-dev-server or html-webpack-plugin.

### Versions

- Cypress 7
- Fedora GNU/Linux

```
$ yarn list --pattern webpack
yarn list v1.22.5
├─ @cypress/webpack-dev-server@1.1.1
├─ @types/webpack-sources@2.1.0
├─ @types/webpack@4.41.27
├─ html-webpack-plugin@4.5.2
├─ lazy-compile-webpack-plugin@0.1.11
├─ terser-webpack-plugin@1.4.5
├─ webpack-dev-middleware@4.1.0
├─ webpack-dev-server@4.0.0-beta.1
├─ webpack-merge@5.7.3
├─ webpack-sources@1.4.3
└─ webpack@4.46.0
Done in 0.60s.

$ yarn list --pattern cypress
yarn list v1.22.5
├─ @cypress/listr-verbose-renderer@0.4.1
├─ @cypress/request@2.88.5
├─ @cypress/webpack-dev-server@1.1.1
├─ @cypress/xvfb@1.2.4
├─ cypress-file-upload@5.0.3
├─ cypress-plugin-snapshots@1.4.4
├─ cypress-watch-and-reload@1.3.6
├─ cypress@7.0.0
└─ eslint-plugin-cypress@2.11.2
Done in 0.61s.
```",bug
851481929,Cypress 7.0 (Component Testing) 404s runtime files while using create-react-app with a homepage set,"### Current behavior
<!-- A description including screenshots, stack traces, DEBUG logs, etc. 👉 https://on.cypress.io/troubleshooting -->
If you create a new CRA app and do the cypress setup and add a homepage to package.json, you will notice when you try to run your cypress tests your runtime files will 404. Here a repo that does all of the setup for you:

https://github.com/sscaff1/cypress-bug

To reproduce:
- clone
- npm i
- npm run cy:watch
- Open the Chrome dev tools and click on the App.spec.jsx. You will notice 2 files 404 because they are looking for those files in the directory specified by the package.json homepage.

Remove the homepage from the package.json and notice that the test now runs.

### Desired behavior
<!-- Remember, we are not familiar with the application you're testing, so please provide a clear description of what should happen.-->
That the App.spec.jsx can run even with the homepage specified.

### Versions

This is a new bug with Cypress 7.0. This was not a bug in Cypress 6.8. 

<!-- Cypress version, last known working Cypress version (if applicable), Browser and version, Operating System, CI Provider, etc -->
<!-- If possible, please update Cypress to latest version and check if the bug is still present. -->
",bug
846143698,Unzipping cypress progress goes above 100%,"### Current behavior
Just upgraded to Cypress 6.8 (was 6.6) and looked at the output while it was downloading and unzipping.
![image](https://user-images.githubusercontent.com/143341/113110427-5ac1aa80-9207-11eb-9ea4-4b5150f87eb7.png)
The progress percentage nearly reached 2030% before it completed.

### Debug logs
```
DEBUG=cypress:* npm i -D cypress

> cypress@6.8.0 postinstall /Users/jonas/Documents/Dev/xyz/frontend/node_modules/cypress
> node index.js --exec install

  cypress:cli installing Cypress from NPM +0ms
  cypress:cli installing with options {} +0ms
  cypress:cli version in package.json is 6.8.0 +0ms
  cypress:cli Reading binary package.json from: /Users/jonas/Library/Caches/Cypress/6.8.0/Cypress.app/Contents/Resources/app/package.json +0ms
  cypress:cli found npm argv json '{""remain"":[""cypress""],""cooked"":[""i"",""--save-dev"",""cypress""],""original"":[""i"",""-D"",""cypress""]}' +42ms
  cypress:cli looking for versionSpecifier { dir: '/Users/jonas/Documents/Dev/xyz/frontend/node_modules/cypress' } +1ms
  cypress:cli looking for versionSpecifier { dir: '/Users/jonas/Documents/Dev/xyz/frontend/node_modules' } +5ms
  cypress:cli looking for versionSpecifier { dir: '/Users/jonas/Documents/Dev/xyz/frontend' } +0ms
  cypress:cli finished looking for versionSpecifier { versionSpecifier: '^6.8.0' } +2ms
  cypress:cli installed version is null version needed is 6.8.0 +1ms
  cypress:cli no binary installed under cli version +0ms
  cypress:cli checking local file /Users/jonas/Documents/Dev/xyz/frontend/6.8.0 cwd /Users/jonas/Documents/Dev/xyz/frontend/node_modules/cypress +1ms
  cypress:cli preparing to download and unzip version  6.8.0 to path /Users/jonas/Library/Caches/Cypress/6.8.0 +0ms
Installing Cypress (version: 6.8.0)

  cypress:cli needed Cypress version: 6.8.0 +0ms
  cypress:cli source url https://download.cypress.io/desktop/6.8.0?platform=darwin&arch=x64 +0ms
  cypress:cli downloading cypress.zip to ""/var/folders/6z/hvb_536j2_314fdjscsjgysh0000gn/T/cypress-80608.zip"" +0ms
  cypress:cli Downloading package {
  url: 'https://download.cypress.io/desktop/6.8.0?platform=darwin&arch=x64',
  proxy: null,
  downloadDestination: '/var/folders/6z/hvb_536j2_314fdjscsjgysh0000gn/T/cypress-80608.zip'
} +6ms
  ⠼  Downloading Cypress    
  ⠧  Downloading Cypress    
     Unzipping Cypress      
     Finishing Installation 
  ⠋  Downloading Cypress      98% 0s     Unzipping Cypress      
  ⠇  Downloading Cypress      100% 0s
     Unzipping Cypress      
     Finishing Installation 
  cypress:cli downloaded file has the expected checksum and size ✅ +807ms
  cypress:cli finished downloading file: /var/folders/6z/hvb_536j2_314fdjscsjgysh0000gn/T/cypress-80608.zip +8s
  cypress:cli:unzip unzipping from /var/folders/6z/hvb_536j2_314fdjscsjgysh0000gn/T/cypress-80608.zip +0ms
  ✔  Downloaded Cypress
  ⠴  Unzipping Cypress        2030% -28s
     Finishing Installation 
  cypress:cli:unzip unzip completed { yauzlMs: 5, unzipMs: 33647 } +34s
  ✔  Downloaded Cypress  ✔  Unzipped Cypress
  ✔  Finished Installation /Users/jonas/Library/Caches/Cypress/6.8.0

You can now open Cypress by running: node_modules/.bin/cypress open

https://on.cypress.io/installing-cypress

npm WARN @angular-eslint/builder@1.2.0 requires a peer of @angular-devkit/architect@~0.1001.4 || ~0.1100.1 but none is installed. You must install peer dependencies yourself.

+ cypress@6.8.0
updated 1 package and audited 2365 packages in 60.236s

131 packages are looking for funding
  run `npm fund` for details

found 3 vulnerabilities (2 low, 1 moderate)
  run `npm audit fix` to fix them, or `npm audit` for details
```

### Download method
6.8.0

- [x] npm
- [ ] yarn
- [ ] Direct download
- [ ] other <!--Please specify-->

### Operating System
11.2.3

- [ ] Linux
- [x] Mac
- [ ] Windows

### Other

- [x] I'm installing latest Cypress version <!--Please update to latest first 👉 https://on.cypress.io/changelog -->
- [ ] I'm behind a proxy <!--Configure your proxy first 👉 https://on.cypress.io/proxy-configuration -->
- [ ] This only occurs in CI <!--specify CI provider -->
",bug
843878439,Active spec loses highlighting in desktop-gui once runner opens,"<!-- 👋 Use the template below to report a bug. Fill in as much info as possible. 

Have a question? Start a new discussion 👉 https://github.com/cypress-io/cypress/discussions

As an open source project with a small maintainer team, it may take some time for your issue to be addressed. Please be patient and we will respond as soon as we can. 🙏 -->

### Current behavior
In the Real World App, an active spec will lose its highlight in the desktop-gui once the runner opens. I've only been able to see this issue happen specifically in the Real World App, but other users may be experiencing it as well.

![ezgif-6-3bad8e19f9dc](https://user-images.githubusercontent.com/7033952/112908732-0a8b0100-90be-11eb-806d-923dc5f52e22.gif)

### Desired behavior
Highlighting should not disappear

### Test code to reproduce
I wasn't able to quickly reproduce the issue in a different repo/project 

### Versions

Cypress 6.8.0
",bug
841315157,CustomElements delegating focus,"Currently, customElements and redirect focus to a child element make the child element unelectable in Cypress.  This kind of thing is needed for handling form support and making sure focus is set on validation before submission of a form.  

### Current behavior
![image](https://user-images.githubusercontent.com/9418958/112544710-988c8200-8d74-11eb-8814-ad7262e1cc7f.png)


### Desired behavior
The underlying input should be focused and should be able to interact with the element.

### Test code to reproduce

Here is a repo of some sample code and cypress tests I would expect to work https://github.com/brion-fuller/cypress-focus-custom-elements

### Versions

Cypress: 6.8.0

Everything should be in the repo for reproducing.",bug
840572872,Cannot open testing browser when running a test: failed to connect to CDP,"`**Title:** Error launching browser

**Message:** 

```
Cypress failed to make a connection to the Chrome DevTools Protocol after retrying for 50 seconds.

This usually indicates there was a problem opening the Chrome browser.

The CDP port requested was <span class=""ansi-yellow-fg"">64829</span>.

Error details:

Error: connect ECONNREFUSED 127.0.0.1:64829
    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1141:16)
```

**Stack trace:**
```
Error: Cypress failed to make a connection to the Chrome DevTools Protocol after retrying for 50 seconds.

This usually indicates there was a problem opening the Chrome browser.

The CDP port requested was [33m64829[39m.

Error details:

Error: connect ECONNREFUSED 127.0.0.1:64829
    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1141:16)

    at get (C:\Users\Neeraj\AppData\Local\Cypress\Cache\6.6.0\Cypress\resources\app\packages\server\lib\errors.js:966:15)
    at Object.throwErr [as throw] (C:\Users\Neeraj\AppData\Local\Cypress\Cache\6.6.0\Cypress\resources\app\packages\server\lib\errors.js:984:9)
    at C:\Users\Neeraj\AppData\Local\Cypress\Cache\6.6.0\Cypress\resources\app\packages\server\lib\browsers\protocol.js:105:21
    at tryCatcher (C:\Users\Neeraj\AppData\Local\Cypress\Cache\6.6.0\Cypress\resources\app\packages\server\node_modules\bluebird\js\release\util.js:16:23)
    at Promise._settlePromiseFromHandler (C:\Users\Neeraj\AppData\Local\Cypress\Cache\6.6.0\Cypress\resources\app\packages\server\node_modules\bluebird\js\release\promise.js:547:31)
    at Promise._settlePromise (C:\Users\Neeraj\AppData\Local\Cypress\Cache\6.6.0\Cypress\resources\app\packages\server\node_modules\bluebird\js\release\promise.js:604:18)
    at Promise._settlePromise0 (C:\Users\Neeraj\AppData\Local\Cypress\Cache\6.6.0\Cypress\resources\app\packages\server\node_modules\bluebird\js\release\promise.js:649:10)
    at Promise._settlePromises (C:\Users\Neeraj\AppData\Local\Cypress\Cache\6.6.0\Cypress\resources\app\packages\server\node_modules\bluebird\js\release\promise.js:725:18)
    at _drainQueueStep (C:\Users\Neeraj\AppData\Local\Cypress\Cache\6.6.0\Cypress\resources\app\packages\server\node_modules\bluebird\js\release\async.js:93:12)
    at _drainQueue (C:\Users\Neeraj\AppData\Local\Cypress\Cache\6.6.0\Cypress\resources\app\packages\server\node_modules\bluebird\js\release\async.js:86:9)
    at Async._drainQueues (C:\Users\Neeraj\AppData\Local\Cypress\Cache\6.6.0\Cypress\resources\app\packages\server\node_modules\bluebird\js\release\async.js:102:5)
    at Immediate.Async.drainQueues [as _onImmediate] (C:\Users\Neeraj\AppData\Local\Cypress\Cache\6.6.0\Cypress\resources\app\packages\server\node_modules\bluebird\js\release\async.js:15:14)
    at processImmediate (internal/timers.js:456:21)

````",bug
837416029,cy.screenshot(). Different behavior in headless mode and without it.,"<!-- 👋 Use the template below to report a bug. Fill in as much info as possible. 

Have a question? Start a new discussion 👉 https://github.com/cypress-io/cypress/discussions

As an open source project with a small maintainer team, it may take some time for your issue to be addressed. Please be patient and we will respond as soon as we can. 🙏 -->

### Current behavior
Screenshots taken in non-headless mode differ from screenshots in headless mode. In headless mode, the element is not fully captured.

Non-headless:
![topview_before_wheel](https://user-images.githubusercontent.com/33020454/111953092-3115ce80-8af7-11eb-8389-27f419a29b6f.png)
Headless:
![topview_before_wheel](https://user-images.githubusercontent.com/33020454/111953121-3d9a2700-8af7-11eb-9f8c-4007ee8dfcb5.png)


### Desired behavior
The screenshot completely captures the element. This looks true in non-headless mode.

### Test code to reproduce
```git clone https://github.com/manasars/cvat.git && cd ./cvat```
```git checkout cvat-3D-M4```
```docker-compose -f docker-compose.yml -f docker-compose.dev.yml build```
```docker-compose up -d```
```cd ./tests && npm ci```
```npx cypress run --env coverage=false --headless --browser chrome --spec=""cypress/integration/canvas3d_functionality/case_56_canvas3d_functionality_basic_actions.js""```
``` npx cypress open``` and run test ```canvas3d_functionality/case_56_canvas3d_functionality_basic_actions.js```

### Versions
Cypress 6.4.0, 6.8.0
Chrome 89",bug
831817417,Install fails if using vmware that contains Microsoft Edge browser,"<!-- 👋 Use the template below to report an issue with installing Cypress 👉 https://on.cypress.io/installing-cypress

Have a question? Start a new discussion 👉 https://github.com/cypress-io/cypress/discussions

Fill in as much info as possible. As an open source project with a small maintainer team, it may take some time for your issue to be addressed. Please be patient and we will respond as soon as we can. 🙏 -->

### Current behavior

 I did the npm install cypress --save-deps and if I turn to use ""run"" instead of ""open"" at the command line it gives the error as well which is

```
We found an invalid configuration value:

Found an error while validating the `browsers` list. Expected `majorVersion` to be a string or a positive number. Instead the value was: `{""name"":""edge"",""family"":""chromium"",""channel"":""stable"",""displayName"":""Edge"",""version"":""VMware Fusion 12.1.0"",""path"":""/Applications/Microsoft Edge.app/Contents/MacOS/Microsoft Edge"",""majorVersion"":null}
```

I have tried upgrading npm, restarting, reinstalling. I've tried googling the error message, I've tried searching for where this config file may be. I've tried searching the github issues. I'm not sure where to go from here. Any insights would be greatly appreciated.


The error is saying your Edge = ""majorVersion"":null
Test it running on Chrome npx cypress run --browser chrome --headless


Benny, thanks for your message. I tried that here, but the same thing happens:

```
npx cypress run --browser chrome --headless
We found an invalid configuration value:

Found an error while validating the `browsers` list. Expected `majorVersion` to be a string or a positive number. Instead the value was: `{""name"":""edge"",""family"":""chromium"",""channel"":""stable"",""displayName"":""Edge"",""version"":""VMware Fusion 12.1.0"",""path"":""/Applications/Microsoft Edge.app/Contents/MacOS/Microsoft Edge"",""majorVersion"":null}`
```

npx cypress info shows:

```
npx cypress info
Displaying Cypress info...

Detected 3 browsers installed:

1. Chrome
  - Name: chrome
  - Channel: stable
  - Version: 89.0.4389.82
  - Executable: /Applications/Google Chrome.app/Contents/MacOS/Google Chrome

2. Edge
  - Name: edge
  - Channel: stable
  - Version: VMware Fusion 12.1.0
  - Executable: /Applications/Microsoft Edge.app/Contents/MacOS/Microsoft Edge

3. Firefox
  - Name: firefox
  - Channel: stable
  - Version: 86.0
  - Executable: /Applications/Firefox.app/Contents/MacOS/firefox-bin

Note: to run these browsers, pass <name>:<channel> to the '--browser' field

Examples:
- cypress run --browser firefox
- cypress run --browser edge

Learn More: https://on.cypress.io/launching-browsers

Proxy Settings: none detected
Environment Variables: none detected
```

I went into the Applications folder and deleted Microsoft Edge as that is what the error was mentioning, then I ran the info command and Edge was gone. So I tried open and now it loaded ""properly"" with the ""To help you get started"" screen

Gleb Bahmutov
@bahmutov

Yeah, why is Edge version VMware Fusion 12.1.0? This breaks the version parser we have for browser versions. If this is expected Edge version, could you open a new github issue for us


Gleb, this is because I'm running VM Ware Fusion on my mac so that I can run Windows 10 as well. That makes sense then as I couldn't get past that error even after trying a different version of node and reinstalling everything from scratch.

```
npx cypress -v
Cypress package version: 6.6.0
Cypress binary version: 6.6.0
Electron version: 11.2.3
Bundled Node version: 12.18.3
```

```
node -v
v14.16.0
```

```
npm -v
6.14.11
```



### Debug logs
<!-- Include DEBUG logs setting `DEBUG=cypress:*` 👉 https://on.cypress.io/troubleshooting#Print-DEBUG-logs -->

<!-- Include npm/yarn logs if applicable -->

### Download method
 <!-- Add version number if applicable -->

- [X ] npm
- [ ] yarn
- [ ] Direct download
- [ ] other <!--Please specify-->

### Operating System
 <!-- Add version number if applicable -->

- [ ] Linux
- [X ] Mac Big Sur, Version 11.2.3
- [ ] Windows

with vmWare Fusion Professional version 12.1.0 running Windows 8.1

### Other

- [ x] I'm installing latest Cypress version <!--Please update to latest first 👉 https://on.cypress.io/changelog -->
- [no proxy ] I'm behind a proxy <!--Configure your proxy first 👉 https://on.cypress.io/proxy-configuration -->
- [did not try in CI ] This only occurs in CI <!--specify CI provider -->
",bug
830960493,Test consistently takes almost exactly 2 minutes to begin running from `cypress open` (can workaround by reloading browser. But I think I see the issue in DEBUG logs),"### Current behavior
Click test, browser opens and shows loading indicator for almost exactly 2 minutes before running the test. In debugs, I'm seeing timeout errors like this that _maybe_ are the culprit?

```
2021-03-13T17:52:57.024Z cypress:server:request received an error making http request { 
  timeout: undefined, 
  retryIntervals: [ 0, 100, 200, 200 ], 
  url: 'http://gmupcrzgw/', 
  requestId: 'request10', 
  retryOnNetworkFailure: true, 
  retryOnStatusCodeFailure: false, 
  delaysRemaining: [], 
  err: Error: getaddrinfo ENOTFOUND gmupcrzgw 
    at GetAddrInfoReqWrap.onlookup [as oncomplete] (dns.js:66:26) { 
     errno: 'ENOTFOUND', 
     code: 'ENOTFOUND', 
     syscall: 'getaddrinfo', 
     hostname: 'gmupcrzgw' 
} }
```

Here's the [full debug log](https://github.com/cypress-io/cypress/files/6135319/cypress-open-debug.txt) too for more context if needed. Explanation of debug file:
- ran `set DEBUG=cypress:* && cypress open`
- search box already contains ""validat"", so I simply click ""validator.spec.js""
- chrome opens at 11:52:22am shows loading indicator for almost exactly 2min at 11:54:18 (consistently ~2min give or take a few sec)
- test runs successfully
- stop cypress

If I simply reload the browser instead of waiting the 2 minutes, it starts pretty much right away, so don't beat yourself up if you're not seeing what's up since it seems like I can work around it.

Things I've tried so far:
- uninstalling cypress, clearing all cypress appdata local/roaming, re-installing cypress (also tried the formal `cypress cache clear` cmd too)
- downgrading cypress to `6.4.0` (we're running current latest `6.6.0`)
- using version of node that cypress comes with instead of what's on my system (which is 15.11.0 with npm 7.6.2)
- trying other browsers (edge, ff, electron)

Let me know if you want any other info about my setup--can provide `cypress.json`, `state.json` in appdata, etc.

If you all aren't quite sure, I might take some time to look around in cypress code. I didn't realize I have the whole thing, as this article mentions: https://docs.cypress.io/guides/references/troubleshooting.html#Edit-the-installed-Cypress-code. Very cool.

### Versions
Cypress: 6.6.0
Win10
Chrome89 (tried edge chromium, ff, electron too)
Node: 15.11.0 (cypress configured to use my `system` node)
Webpack: 5.25.0 (and a slightly modified version of `cypress-webpack-preprocessor-v5` to support webpack@5.x, but the bundles are definitely not the slowdown--that was what I originally thought was the culprit, but they get built super quick)",bug
829326306,"Seeing new ""Fetching resource at"" error randomly with Cypress after upgrading","### Current behavior
After upgrading to Cypress 6.6.0 (from Cypress 6.2.x), we are now seeing a new random error pop up in our tests:

```
Error: The following error originated from your test code, not from Cypress.

  > Fetching resource at '/__cypress/tests?p=<path to test>' failed

When Cypress detects uncaught errors originating from your test code it will automatically fail the current test.

Cypress could not associate this error to any specific test.

We dynamically generated a new test to display this failure.
    at XMLHttpRequest.xhr.onerror (http://localhost:4001/__cypress/runner/cypress_runner.js:175913:14)
throw err;
```

### Desired behavior
This shouldn't happen.

### Test code to reproduce
No idea how to repro this. It happens randomly and it's really not clear why Cypress is failing.

### Versions

Current version is 6.6.0, last known working version was 6.2.x.",bug
822313430,Desktop gui crashes when showing an environment object,"Cypress v6.6.0

While investigating https://github.com/cypress-io/cypress/issues/15323 I stumbled upon a bug in desktop gui

In https://github.com/bahmutov/cypress-env-from-cli-example

```
$ CYPRESS_person='{ ""name"": { ""first"": ""Joe"", ""last"": ""Smith"" }, ""age"": 18 }' npx cypress open
```
plugins file has the config.env { person: { name: { first: 'Joe', last: 'Smith' }, age: 18 } }


So the environment will have parsed `person` value, but when I click on it from the configuration tab, the app goes blank

![person](https://user-images.githubusercontent.com/2212006/109999147-e9620b00-7cdf-11eb-8508-03b59851aba6.gif)


",bug
822298668,Crash when parsing JSON object passed via --env option,"Cypress v6.6.0 trying to use `--env` option to pass an object, related to the discussion https://github.com/cypress-io/cypress/discussions/14292

works

```
$ npx cypress open --env person='{ ""name"": ""hi"", ""age"": 18 }'
plugins file has the config.env { person: { name: 'hi', age: 18 } }
```

crashes

```
$ npx cypress open --env person='{ ""name"": {}, ""age"": 18 }'
Cypress encountered an error while parsing the argument env

You passed: person={ ""name"": {}, ""age"": 18 }

The error was: Cannot read property 'split' of undefined
```

Running with debug log

```
$ DEBUG=cypress:server:args npx cypress open --env person='{ ""name"": {}, ""age"": 18 }'
  cypress:server:args argv array: [ '/Users/gleb/Library/Caches/Cypress/6.6.0/Cypress.app/Contents/MacOS/Cypress', '--no-sandbox', '--env', 'person={ ""name"": {}, ""age"": 18 }', '--project', '/Users/gleb/git/cypress-env-from-cli-example', '--cwd', '/Users/gleb/git/cypress-env-from-cli-example' ] +0ms
  cypress:server:args parsed argv options { options: { _: [ '/Users/gleb/Library/Caches/Cypress/6.6.0/Cypress.app/Contents/MacOS/Cypress' ], sandbox: false, env: 'person={ ""name"": {}, ""age"": 18 }', project: '/Users/gleb/git/cypress-env-from-cli-example', cwd: '/Users/gleb/git/cypress-env-from-cli-example' } } +5ms
  cypress:server:args argv parsed: { _: [ '/Users/gleb/Library/Caches/Cypress/6.6.0/Cypress.app/Contents/MacOS/Cypress' ], sandbox: false, env: 'person={ ""name"": {}, ""age"": 18 }', project: '/Users/gleb/git/cypress-env-from-cli-example', cwd: '/Users/gleb/git/cypress-env-from-cli-example', invokedFromCli: true } +3ms
  cypress:server:args could not pass config env value person={ ""name"": {}, ""age"": 18 } +1ms
  cypress:server:args error TypeError: Cannot read property 'split' of undefined at pipesToCommas (/Users/gleb/Library/Caches/Cypress/6.6.0/Cypress.app/Contents/Resources/app/packages/server/lib/util/args.js:90:14) at JSONOrCoerce (/Users/gleb/Library/Caches/Cypress/6.6.0/Cypress.app/Contents/Resources/app/packages/server/lib/util/args.js:111:9)
```

Feels weird to parse some JSON, but not the nested objects (or at least fallback to try JSON)

## Reproduction

https://github.com/bahmutov/cypress-env-from-cli-example

## Proposed fix

Add a check, and if the argument is of the form `name=JSON object or array` parse the right side of `=` as JSON and not a comma-separated list.
",bug
820965136,ffmpeg error with Chrome 89,"<!-- 👋 Use the template below to report a bug. Fill in as much info as possible. 

Have a question? Start a new discussion 👉 https://github.com/cypress-io/cypress/discussions

As an open source project with a small maintainer team, it may take some time for your issue to be addressed. Please be patient and we will respond as soon as we can. 🙏 -->

### Current behavior
<!-- A description including screenshots, stack traces, DEBUG logs, etc. 👉 https://on.cypress.io/troubleshooting -->

After upgrading to google-chrome 89 Cypress fails:

```
Warning: We failed to record the video.

This error will not alter the exit code.

Error: ffmpeg exited with code 1: Error initializing output stream 0:0 -- Error while opening encoder for output stream #0:0 - maybe incorrect parameters such as bit_rate, rate, width or height
Conversion failed!

    at ChildProcess.<anonymous> (/usr/local/Cypress/6.5.0/Cypress/resources/app/packages/server/node_modules/fluent-ffmpeg/lib/processor.js:182:22)
    at ChildProcess.emit (events.js:315:20)
    at Process.ChildProcess._handle.onexit (internal/child_process.js:275:12)

Error: ffmpeg exited with code 1: Error initializing output stream 0:0 -- Error while opening encoder for output stream #0:0 - maybe incorrect parameters such as bit_rate, rate, width or height
Conversion failed!

    at ChildProcess.<anonymous> (/usr/local/Cypress/6.5.0/Cypress/resources/app/packages/server/node_modules/fluent-ffmpeg/lib/processor.js:182:22)
    at ChildProcess.emit (events.js:315:20)
    at Process.ChildProcess._handle.onexit (internal/child_process.js:275:12)

Error: ffmpeg exited with code 1: Error initializing output stream 0:0 -- Error while opening encoder for output stream #0:0 - maybe incorrect parameters such as bit_rate, rate, width or height
Conversion failed!

    at ChildProcess.<anonymous> (/usr/local/Cypress/6.5.0/Cypress/resources/app/packages/server/node_modules/fluent-ffmpeg/lib/processor.js:182:22)
    at ChildProcess.emit (events.js:315:20)
    at Process.ChildProcess._handle.onexit (internal/child_process.js:275:12)

Error: Command failed with exit code 1: cypress run --record --group totp --browser chrome
    at makeError (/app/node_modules/start-server-and-test/node_modules/execa/lib/error.js:56:11)
    at handlePromise (/app/node_modules/start-server-and-test/node_modules/execa/index.js:114:26)
    at processTicksAndRejections (internal/process/task_queues.js:93:5) {
  command: 'cypress run --record --group totp --browser chrome',
  exitCode: 1,
  signal: undefined,
  signalDescription: undefined,
  stdout: undefined,
  stderr: undefined,
  failed: true,
  timedOut: false,
  isCanceled: false,
  killed: false
}
error Command failed with exit code 1.
```

### Desired behavior
<!-- Remember, we are not familiar with the application you're testing, so please provide a clear description of what should happen.-->

google-chrome 89 should work


### Test code to reproduce
<!-- Provide test code that we can copy, paste, and run on our machine to see the issue. -->

`cypress run --browser chrome`

having installed chrome 89 (the new stable version since yesterday):

```
$ google-chrome-stable --version
Google Chrome 89.0.4389.72 
```

It works with chrome 88

```
$ google-chrome-stable --version
Google Chrome 88.0.4324.182 
```

<!-- You could also provide a repo that we can clone and run. You can fork 👉 https://github.com/cypress-io/cypress-test-tiny repo, set up a failing test, then link to your fork. -->

### Versions

<!-- Cypress version, last known working Cypress version (if applicable), Browser and version, Operating System, CI Provider, etc -->
<!-- If possible, please update Cypress to latest version and check if the bug is still present. -->

Cypress 6.6.0
Google Chrome 89.0.4389.72 
",bug
820415357,breaks HTMLElement.focus() preventScroll option,"<!-- 👋 Use the template below to report a bug. Fill in as much info as possible. 

Have a question? Start a new discussion 👉 https://github.com/cypress-io/cypress/discussions

As an open source project with a small maintainer team, it may take some time for your issue to be addressed. Please be patient and we will respond as soon as we can. 🙏 -->

### Current behavior
When code under test calls `HTMLElement.focus()` with the `preventScroll` option set to true, the page under test scrolls the focused element into view.

### Desired behavior
<!-- Remember, we are not familiar with the application you're testing, so please provide a clear description of what should happen.-->
`HTMLElement.focus()` should behave the same whether or not it's called in the context of a Cypress test and preserve the current scroll position when the `preventScroll` option is set to true.

### Test code to reproduce
<!-- Provide test code that we can copy, paste, and run on our machine to see the issue. -->
https://github.com/diminutivesloop/cypress-test-tiny/blob/breaks-preventscroll/cypress/integration/spec.js
<!-- You could also provide a repo that we can clone and run. You can fork 👉 https://github.com/cypress-io/cypress-test-tiny repo, set up a failing test, then link to your fork. -->

### Versions

<!-- Cypress version, last known working Cypress version (if applicable), Browser and version, Operating System, CI Provider, etc -->
Cypress 6.6.0
Chrome 88.0.4324.190
Windows 10
<!-- If possible, please update Cypress to latest version and check if the bug is still present. -->
",bug
814826330,Getting error with cy.screenshot() while capturing a big image (page with lots of scrolling),"**Current behavior:**

cy.screenshot() is not working with a long web page

**Desired behavior:**

cy.screenshot()  should handle a long web page


**Test code to reproduce**

```
cy.visit(""https://en.wikipedia.org/wiki/United_States"");
cy.screenshot(""big-image"", { timeout: 100000 });
```
Error:

![image](https://user-images.githubusercontent.com/13773749/108907415-0d429400-75f0-11eb-9080-d0a81e4f53c7.png)

",bug
814494015,cy.intercept: delay is not working on 204 No Content,"### Current behavior
When using `cy.intercept('POST', url, { statusCode: 204, delay: 5000 })` `delay` (or `delayMs`) is not respected.

Is this intended behavior? If so, why?

When running tests below I see: 

First spec: 
![image](https://user-images.githubusercontent.com/440339/108854401-1e87a280-75e8-11eb-9104-d02fce5ea13b.png)

Second spec:
![image](https://user-images.githubusercontent.com/440339/108854457-319a7280-75e8-11eb-8ba4-3bed9bd5c091.png)

### Desired behavior
When a request responds with 204 No Content `delay` (or `delayMs`) should work.

### Test code to reproduce
```js
it('post a comment 200 OK', () => {
    cy.intercept('POST', 'https://jsonplaceholder.cypress.io/comments', {
            statusCode: 200,
            delay: 5000,
    }).as('success');

    cy.visit('https://example.cypress.io/commands/network-requests');

    cy.get('.network-post-comment').should('have.value', '')

    cy.get('.btn-success').click();

    cy.wait('@success'); // waits 5000 ms

    cy.get('.network-post-comment').should('contain', 'POST successful!')
});

it('post a comment 204 No Content', () => {
    cy.intercept('POST', 'https://jsonplaceholder.cypress.io/comments', {
            statusCode: 204, // delay is not respected
            delay: 5000,
    }).as('success');

    cy.visit('https://example.cypress.io/commands/network-requests');

    cy.get('.network-post-comment').should('have.value', '')

    cy.get('.btn-success').click();

    cy.wait('@success'); // resolves immediately

    cy.get('.network-post-comment').should('contain', 'POST successful!')
});
```
### Versions

* Cypress: 6.5.0
* Chrome: 88.0.4324.182
* MacOS: 10.15.7",bug
813759033,Studio button is not displayed properly when a test has a long title,"<!-- 👋 Use the template below to report a bug. Fill in as much info as possible. 

Have a question? Start a new discussion 👉 https://github.com/cypress-io/cypress/discussions

As an open source project with a small maintainer team, it may take some time for your issue to be addressed. Please be patient and we will respond as soon as we can. 🙏 -->

### Current behavior
When a test has a long title the studio icon will not be displayed properly.
<img width=""578"" alt=""Screen Shot 2021-02-22 at 1 36 44 PM"" src=""https://user-images.githubusercontent.com/7033952/108753719-17db2b80-7513-11eb-8c7c-97529622c02e.png"">

### Desired behavior
Studio icon should appear to the right of the test title as it normally would if the title had been shorter
<img width=""574"" alt=""Screen Shot 2021-02-22 at 1 36 36 PM"" src=""https://user-images.githubusercontent.com/7033952/108753743-1dd10c80-7513-11eb-9dfe-dec593802621.png"">

### Versions
Most likely has been present since Studio was first introduced
",bug
812561660,Electron runner crash when current page redirect to a external website.,"<!-- 👋 Use the template below to report a bug. Fill in as much info as possible. 

Have a question? Start a new discussion 👉 https://github.com/cypress-io/cypress/discussions

As an open source project with a small maintainer team, it may take some time for your issue to be addressed. Please be patient and we will respond as soon as we can. 🙏 -->

### Current behavior
<!-- A description including screenshots, stack traces, DEBUG logs, etc. 👉 https://on.cypress.io/troubleshooting -->

When the page been tested redirect user to a external website, the electron runner will crash with the follow message:

```
We detected that the Chromium Renderer process just crashed.

This is the equivalent to seeing the 'sad face' when Chrome dies.

This can happen for a number of different reasons:

- You wrote an endless loop and you must fix your own code
- There is a memory leak in Cypress (unlikely but possible)
- You are running Docker (there is an easy fix for this: see link below)
- You are running lots of tests on a memory intense application
- You are running in a memory starved VM environment
- There are problems with your GPU / GPU drivers
- There are browser bugs in Chromium

You can learn more including how to fix Docker here:

https://on.cypress.io/renderer-process-crashed

```
(PS. the message show trice).

The Chrome runner works well with `""chromeWebSecurity"": false` in cypress.json.

### Desired behavior
<!-- Remember, we are not familiar with the application you're testing, so please provide a clear description of what should happen.-->

The test itself has successful, should not crash the test.

### Test code to reproduce
<!-- Provide test code that we can copy, paste, and run on our machine to see the issue. -->

<!-- You could also provide a repo that we can clone and run. You can fork 👉 https://github.com/cypress-io/cypress-test-tiny repo, set up a failing test, then link to your fork. -->

https://github.com/xpol/electron-redirect-crash

Clone above reop and run `yarn`.
- run `yarn cy:chrome` will start server and run test in chrome, which will succeed.
- yun `yarn cy:electron` will start server and run test in electron, which will fail.



### Versions

Tested with cypress 6.3/6.4/6.5.

<!-- Cypress version, last known working Cypress version (if applicable), Browser and version, Operating System, CI Provider, etc -->
<!-- If possible, please update Cypress to latest version and check if the bug is still present. -->
",bug
812458033,"When Cookies with Same Name but Different Paths Exist, All Cookies are Deleted After A PreserveOnce Call","This issue is very similar to [8954](https://github.com/cypress-io/cypress/issues/8954). I used a similar format for this write up.

**Current behavior**
When multiple cookies with the same name but different paths are preserved via a call to PreserveOnce, no cookies are preserved.

**Desired behavior**
All cookies are preserved, even when there are multiple cookies with the same name and path.

**Test code to reproduce**
With the baseUrl set to ""https://cypress.io"", run the following test:

```js
context('Cookies', function () {
  it('Test 1 - Sets Cookies', function () {
    cy.setCookie('cookie', 'value 1', { path: '/first/path/' });
    cy.setCookie('cookie', 'value 2', { path: '/second/path/' });
    cy.getCookies()
      .should('have.length', 2);
  });

  it('Test 2 - Relies on Preserved Cookies', function () {
    cy.getCookies()
      .should('have.length', 2); // Fails; 0 cookies are present.
  });

  afterEach(function () {
    cy.getCookies()
      .then((cookies) => {
        cookies.forEach((element) => {
          Cypress.Cookies.preserveOnce(element.name);
        });
      });
  });
});
```
Versions
Cypress version 5.6.0, Chrome 88, macOS 10.15.6.",bug
809492330,React.lazy component test errors,"<!-- 👋 Use the template below to report a bug. Fill in as much info as possible. 

Have a question? Start a new discussion 👉 https://github.com/cypress-io/cypress/discussions

As an open source project with a small maintainer team, it may take some time for your issue to be addressed. Please be patient and we will respond as soon as we can. 🙏 -->

### Current behavior
I have a simple spec that lazy loads a component (followed the example outlined in the [lazy-load advanced examples](https://github.com/cypress-io/cypress/tree/master/npm/react/cypress/component/advanced/lazy-loaded)) which fails to compile correctly with the following error:
```
The following error originated from your test code, not from Cypress.

  > Automatic publicPath is not supported in this browser
```
I've tried to re-set up the whole environment to mirror, as closely as possible, the example link from above. Of note is that I'm using `cypress-webpack-preprocessor-v5` instead of what is provided in the example as, subsequently, thats what my project is using as well.

If I comment out the `Bar` lazy load on line 3 of `src/Foo.js` and the usage of `<Bar />` on line 8, the test compiles correctly. I've attached a zip file mirroring the whole setup. After downloading, run the following:
* `npm i`
* `npm test`

### Desired behavior
The test should pass.

### Test code to reproduce
See attached zip file.

[cypress-i18n.zip](https://github.com/cypress-io/cypress/files/5990293/cypress-i18n.zip)

### Versions
""cypress"": ""^6.5.0"",
""@cypress/react"": ""^5.0.0"",
""cypress-webpack-preprocessor-v5"": ""^5.0.0-alpha.1"",
""webpack"": ""^5.22.0"",


<!-- Cypress version, last known working Cypress version (if applicable), Browser and version, Operating System, CI Provider, etc -->
<!-- If possible, please update Cypress to latest version and check if the bug is still present. -->
",bug
809278111,Module not found: Error: Can't resolve 'cypress-react-selector',"Hi all 

I am trying to use [@cypress/react][1] and I followed the installation instructions. Besides, I have also installed [Cypress Testing Library][2] to use Testing Library extensions for Cypress. 

When the cypress is started, I have got the following error messages:
```
./node_modules/@cypress/react/support/index.js
Module not found: Error: Can't resolve 'cypress-react-selector' in '/home/developer/project/example/webapp/board-ui/node_modules/@cypress/react/support'
resolve 'cypress-react-selector' in '/home/developer/project/example/webapp/board-ui/node_modules/@cypress/react/support'
  Parsed request is a module
  using description file: /home/developer/project/example/webapp/board-ui/node_modules/@cypress/react/package.json (relative path: ./support)
    Field 'browser' doesn't contain a valid alias configuration
    Looked for and couldn't find the file at the following paths:
[/home/developer/project/example/webapp/board-ui/node_modules/@cypress/react/support/node_modules]
[/home/developer/project/example/webapp/board-ui/node_modules/@cypress/node_modules]  
```

Installed packages:
```
  ""devDependencies"": {
    ""@cypress/react"": ""^5.0.0"",
    ""@testing-library/cypress"": ""^7.0.3"",
    ""cypress"": ""^6.5.0""
  }
 ```

Thanks


  [1]: https://www.npmjs.com/package/@cypress/react
  [2]: https://www.npmjs.com/package/@testing-library/cypress",bug
805723169,Studio does not properly handle typing into an input with existing value,"<!-- 👋 Use the template below to report a bug. Fill in as much info as possible. 

Have a question? Start a new discussion 👉 https://github.com/cypress-io/cypress/discussions

As an open source project with a small maintainer team, it may take some time for your issue to be addressed. Please be patient and we will respond as soon as we can. 🙏 -->

### Current behavior
When a user types into an input field, Studio will record the characters pressed and add them to a new `cy.type()` command. However, we run into a problem when there is already a value in that field before the typing begins. If the user's cursor is not at the end of the line, or they highlight some characters and delete, etc. Studio will still generate a type command with the characters typed. This causes those typed characters to be appended to the end of the input when run, which does not accurately reflect the user's actions. See an example below

![ezgif-7-1499f9aef674](https://user-images.githubusercontent.com/7033952/107547977-18cb9f00-6b9c-11eb-8a14-bbc72f581725.gif)

### Desired behavior
Studio should attempt to mimic the user's actions as closely as possible. We'll have to compare the actual values within the input element to guess at what action the user is taking and do our best to accurately replicate that in the generated Studio commands. This might require us to add `cy.clear()` before the `cy.type()` command or something along those lines.

### Versions

Cypress 6.3.0
",bug
804962553,Assertions are still shown as pending (in blue with with a spinner) in tests that are marked as passing/failing.,"### Current behavior

Tests using an aliased element are showing incomplete assertions after a test has passed or failed.

### Desired behavior

Assertions are not left in a pending state in passed/failed tests.

### Test code to reproduce

```js
describe('Still Pending Assertions', function () {
  beforeEach(function () {
    // Visit the page.
    cy.visit('https://play.vidyard.com/jPp3mEre5CxorHazjiCUid', {
      qs: { first_frame: 1 },
    });

    cy.wait(5000); // Just to make sure the page is fully loaded.

    // Play and pause the video.
    cy.get('[data-testid=playButton]')
      .click()
      .click();
  });

  it('Passes, but shows a pending assertion', function () {
    cy.get('[data-testid=upNext]')
      .as('upNext');

    cy.get('@upNext')
      .should('be.visible');

    cy.get('[data-testid=closeUpNext]')
      .click();

    cy.get('@upNext')
      .should('not.exist');
  });

  it('Fails, but still shows a pending assertion', function () {
    cy.get('[data-testid=upNext]')
      .should('be.visible') // This test is identical to the previous test with the exception of this line.
      .as('upNext');

    cy.get('@upNext')
      .should('be.visible');

    cy.get('[data-testid=closeUpNext]')
      .click();

    cy.get('@upNext')
      .should('not.exist');
  });
});
```

### Screenshots

First Test:

![image](https://user-images.githubusercontent.com/62152998/107433186-04819680-6af7-11eb-9a9d-dbb0f0be2499.png)

Second Test:

![image](https://user-images.githubusercontent.com/62152998/107433288-2418bf00-6af7-11eb-9a62-7cd6329fcba4.png)

### Versions

Cypress 6.0.1 on macOS 10.15.7 in Chrome 88.
",bug
804920558,Assertions on an aliased spy get stuck instead of failing in all browsers except Firefox.,"### Current behavior

In our test suite, when an assertion on a spy should fail, the test runner gets stuck and does not fail the test. We have some of our tests remain stuck for 45+ minutes in our CI runs before Cypress fails the test.

The command log behaves as if the assertion is retrying over and over, though it is unclear what is actually happening.

![image](https://user-images.githubusercontent.com/62152998/107424466-aa2f0880-6aeb-11eb-94d2-658ef728c735.png)

### Desired behavior

When the assertion should fail, it does so after the appropriate timeout length.

### Test code to reproduce

```js
describe('Stuck Test When Assertion on Spy Fails', function () {
  beforeEach(function () {
    // Visit the page.
    cy.visit('https://play.vidyard.com/EmrX1jweW4rRGPRJEQeqtn', {
      qs: { first_frame: 1 },
      onBeforeLoad(win) {
        // Setup the spy and give it an alias.
        cy.spy(win.parent, 'postMessage').as('postMessage');
      },
    });

    cy.wait(5000); // Just to make sure the page is fully loaded.

    // Use the video seek bar to skip ahead in the video.
    cy.get('[data-testid=progressControl]')
      .should('be.visible')
      .click('center');
  });

  it('Passes', function () {
    cy.get('@postMessage')
      .should('be.calledWithMatch', '""currentTime"":2.56,""scrubbing"":true');
  });

  it('Should fail, but gets stuck', function () {
    cy.get('@postMessage')
      .should('be.calledWithMatch', '""currentTime"":2.56,""scrubbing"":false');
  });
});
```

### Versions

The issue exists in Cypress 6.4.0 on macOS 10.15.7 in Chrome 88, Edge 88, and Electron 87.

In Firefox 85 (with the same configuration otherwise) this actually works properly; the test fails after a the brief retry timeout as expected.
",bug
804377296,Framebusting on 3rd party (top.location != location)  breaks cypress test,"Cybpress 6.4.0 (6.4.0.597354)

When we're trying to test payment simulation using Cypress, we have trouble to complete writing test scenario for checkout flow. On our example, when we select payment methods, it redirects to an external page to confirm payment and somehow the test window closes immediately.

Sample URL : https://test.adyen.com/hpp/ideal/IssuerPage 

On my configiration, I didn't disabled modifyObstructiveCode option. 
modifyObstructiveCode : true (as default)

related issue : https://github.com/cypress-io/cypress/issues/886

",bug
804181038,"using cy.contains against a textarea with style=""height: 0px"" passes even though the user cannot see it","I suspect this is not how it is intended to work so I am raising this has a bug.

### Current behavior
cy.contains passes when there is a textarea with style=""height: 0px;"" that hence means the user cannot see it.

### Desired behavior
cy.contains fails when the element is not visible.

### Test code to reproduce
```js
describe('JsFiddle', () => {
    it('TextArea issue', ()=> {
        cy.visit('https://jsfiddle.net/ur5gmqvs/7/');
        cy.get('iframe[name=""result""]').then($iframe => {
            const $body = $iframe.contents().find('body');
            cy.wrap($body)
                .find('#helloWorld')
                .should('have.length', 1);
            cy.wrap($body)
                .find('textarea')
                .contains('Comment 2');
            cy.wrap($body)
                .find('#theRedDiv')
                .contains('Comment 2');
        })
    });
});
```

### Versions
Chrome 88
Cypress 6.4.0

![image](https://user-images.githubusercontent.com/146976/107313439-a0ef6d00-6ae6-11eb-853c-dcf057379717.png)
",bug
803728290,Cypress Crashes w/ SIGSEGV Error in CircleCI w/ Parallelism,"<!-- 👋 Use the template below to report a bug. Fill in as much info as possible. 

Have a question? Start a new discussion 👉 https://github.com/cypress-io/cypress/discussions

As an open source project with a small maintainer team, it may take some time for your issue to be addressed. Please be patient and we will respond as soon as we can. 🙏 -->

### Current behavior
When running a workflow in CircleCI with a Cypress job, one or more of the containers will crash with a SIGSEGV error during the test run. This happens sometimes mid run and sometimes at the end of the run after all tests have passed. Attached are a screenshot fo the output in CircleCI as well as the DEBUG logs from the cypress run in CircleCI. This is happening a lot more frequently since we upped our parallelism in CircleCI to 3 from 2.
![Screenshot1](https://user-images.githubusercontent.com/46907262/107248807-ae322c00-6a00-11eb-93c8-33e71eeb9314.png)
![Screenshot2](https://user-images.githubusercontent.com/46907262/107248810-aecac280-6a00-11eb-958f-79541c6dc714.png)
[CircleCI Cypress Logs.txt.zip](https://github.com/cypress-io/cypress/files/5945112/CircleCI.Cypress.Logs.txt.zip)

### Desired behavior
Cypress should not crash and/or send SIGSEGV error during CircleCI run with parallelism

### Test code to reproduce
Happening for our entire project and not able to share repo/code

### Versions
Tests are running on the latest version of Cypress at this time (6.4.0) and on the latest version of Chrome. CircleCI is using a Docker Medium executor and the following images: `circleci/ruby:2.5.8-node-browsers`, `circleci/mysql:5.7.24`, `cypress/base:14.7.0`


",bug
802579267,On cy.visit() our website loads for a quick few milliseconds and then goes blank. ,"Everything opens up great and after the tests begins to run and gets to the first visit() the page goes white: 

Here's the site: 
```
cy.visit(""https://c2pms-stage.azurewebsites.net/Account/SignIn"");
cy.login(Cypress.env(""roleDevManName""), Cypress.env(""roleDevManPass""));
```
Cypress used to work but for some reason now it does not. ",bug
801997147,visible button in a sticky element in a modal is detected as not visible,"
### Current behavior
I have a button inside a sticky element in a modal. Behind the modal is a scrollable element which is an ancestor of the modal. Cypress thinks that the button is not visible. I get the following error message:

> This element `<button#button>` is not visible because its content is being clipped by one of its parent elements, which has a CSS property of overflow: `hidden`, `scroll` or `auto`

Here is the screenshot of the failing test:
![page -- works (failed)](https://user-images.githubusercontent.com/54527640/107015265-d883af80-679c-11eb-9e0d-25221ee1a39d.png)

### Desired behavior
I can see the button. Cypress should recognize that it is visible.

### Test code to reproduce
I have a simple example which reproduces this error. You can find it here:
https://github.com/FraKraBa/cypress-test-tiny

### Versions
Cypress 6.4.0

",bug
801740545,"Dashboard: tests passing in seconds, but keeps running for +1 hour.","### Current behavior
<!-- A description including screenshots, stack traces, DEBUG logs, etc. 👉 https://on.cypress.io/troubleshooting -->

Whenever a run is started on the cypress dashboard, the tests pass quickly. But it keeps being stuck in ""Running"" for multiple hours.

This seems to have started happening today.

The exact same tests that is now taking 2 hours & counting. Were passing in 10 seconds this morning.

It seems to have gradually gotten worse (even though I have made no changes to the tests, or the pages related to the tests).

Tests running this morning:
<img width=""1342"" alt=""Screen Shot 2021-02-04 at 19 24 44"" src=""https://user-images.githubusercontent.com/6841110/106972335-a7fd3080-671e-11eb-87ef-1955e062421c.png"">

The same tests running now:
<img width=""1340"" alt=""Screen Shot 2021-02-04 at 19 25 12"" src=""https://user-images.githubusercontent.com/6841110/106972365-b8151000-671e-11eb-9d14-ceb2a4c0d54c.png"">

The output of the tests showing it's passing in 1 second
<img width=""1568"" alt=""Screen Shot 2021-02-04 at 19 25 59"" src=""https://user-images.githubusercontent.com/6841110/106972421-d4b14800-671e-11eb-9a30-20961fec0e0c.png"">

When running cypress locally in open mode, it finishes in 5 seconds.
When running cypress in CI mode with record key. It finishes in ~4 seconds (and exits out correctly).

When running it in GitHub, it finishes in ~4 minutes (mostly installing node_modules & building), but the run in the dashboard never ends...

in console:
<img width=""1345"" alt=""Screen Shot 2021-02-04 at 19 27 54"" src=""https://user-images.githubusercontent.com/6841110/106972565-193ce380-671f-11eb-90e9-7c77e59a627d.png"">


The status looks like this for about an hour or so.
<img width=""1362"" alt=""Screen Shot 2021-02-04 at 19 29 12"" src=""https://user-images.githubusercontent.com/6841110/106972651-47babe80-671f-11eb-9188-78c46b4aae2e.png"">

Then it does change to reflect saying my 2 tests have passed. but it's STILL running... :(

<img width=""1359"" alt=""Screen Shot 2021-02-04 at 19 30 02"" src=""https://user-images.githubusercontent.com/6841110/106972719-64ef8d00-671f-11eb-8906-1e386d6b0ccc.png"">

This is blocking our CI/CD pipeline as the Cypress status takes hours to pass.


### Desired behavior
<!-- Remember, we are not familiar with the application you're testing, so please provide a clear description of what should happen.-->

The tests should be marked as passed after all assertions have passed & cypress should stop running.
Status checks should pass if tests all tests have passed.

### Test code to reproduce
<!-- Provide test code that we can copy, paste, and run on our machine to see the issue. -->

integration test:

```
import {
  SPEC_MOCK
} from '../../src/test/mocks'

declare var cy: any

describe('Page load', () => {
  it('Should visit the page', () => {
    cy.intercept(
      { method: 'GET', url: 'https://api.colonynetworks.com/v3/timescale' },
      SPEC_MOCK
    )

    cy.visit('localhost:5000')
    cy.contains('Dashboard')
  })
})

```

Github workflow:
```
name: Integration tests

on: [push]

jobs:
  cypress-run:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Cypress run
        uses: cypress-io/github-action@v2
        with:
          build: yarn build
          start: yarn serve
          wait-on: http://localhost:5000
          record: true
        env:
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
```

Versions:

""cypress"": ""6.4.0"", (latest as of today)

Any idea why this is happening O.o?",bug
800882859,cy.submit command does not check the form's validity,"Cypress v6.4.0
Reproduction in https://github.com/cypress-io/cypress-test-tiny/tree/invalid-form-submit

Imagine a form with input element validation

```html
<body>
  <form id=""form-validation"" action=""/action_page.php"">
    <div>
      <label for=""item"">Item:</label>
      <input id=""item"" type=""text"" name=""item"" required />
    </div>

    <div>
      <label for=""quantity"">Quantity (between 1 and 5):</label>
      <input
        type=""number""
        id=""quantity""
        name=""quantity""
        min=""1""
        max=""5""
        required
      />
    </div>

    <input type=""submit"" />
  </form>
</body>
```

The user should not be able to submit this form. If we try to use `cy.click` then we see the browser validation message, and the form is not submitted

```js
/// <reference types=""cypress"" />
describe('form', () => {
  it('should not be submittable', () => {
    cy.visit('index.html')

    cy.get('#form-validation').within(() => {
      // note we cannot submit by clicking the button
      // since some of the input elements on the page
      // fail the HTML validation
      cy.get('input[type=submit]').click()
    })
  })
})
```
<img width=""699"" alt=""Screen Shot 2021-02-03 at 9 56 29 PM"" src=""https://user-images.githubusercontent.com/2212006/106838724-d0c3ee00-666a-11eb-83ff-b948f63b473c.png"">

But if we use `cy.submit` it happily submits the form bypassing the validation

```js
/// <reference types=""cypress"" />
describe('form', () => {
  it('should not be submittable', () => {
    cy.visit('index.html')

    cy.get('#form-validation').within(() => {
      // note we cannot submit by clicking the button
      // since some of the input elements on the page
      // fail the HTML validation
      cy.get('input[type=submit]').click()

      // but the .submit() happily ignores the checks
      cy.root().submit()
    })
  })
})
```

<img width=""773"" alt=""Screen Shot 2021-02-03 at 9 56 43 PM"" src=""https://user-images.githubusercontent.com/2212006/106838784-ed602600-666a-11eb-9311-eb724b83431a.png"">

## Expected

- `cy.submit` should check the form's validity by calling `element.checkValidity()` first, it should be a built-in assertion",bug
799310441,sync skip; aborting execution error thrown when this.skip() inside function,"<!-- 👋 Use the template below to report a bug. Fill in as much info as possible. 

Have a question? Start a new discussion 👉 https://github.com/cypress-io/cypress/discussions

As an open source project with a small maintainer team, it may take some time for your issue to be addressed. Please be patient and we will respond as soon as we can. 🙏 -->

### Current behavior
<!-- A description including screenshots, stack traces, DEBUG logs, etc. 👉 https://on.cypress.io/troubleshooting -->
Scenarios skipped with use of ""@focus"" annotation generates a bug as seen on screenshot:
![image](https://user-images.githubusercontent.com/51486694/106609905-64f85d00-6566-11eb-8d41-0b0cc6fa2a00.png)

Focused scenario(s) run(s) correctly. It happened shortly after upgrading cypress to v.6.4.0 (I was using 6.3.0 before). Also I am using cypress-cucumber-preprocessor v.4.0.0. Problem disappears while running tests without annotation. 
It's my first bug here so if you need any additional info please let me know, I will gladly provide :)  
 
### Desired behavior
<!-- Remember, we are not familiar with the application you're testing, so please provide a clear description of what should happen.-->
It should simply run focused scenario(s) and skip the rest of them without failing .

### Versions
Cypress v.6.4.0
cypress-cucumber-preprocessor v.4.0.0
<!-- Cypress version, last known working Cypress version (if applicable), Browser and version, Operating System, CI 
",bug
799101740,Keyup event is fired in same tick as keydown and input,"<!-- 👋 Use the template below to report a bug. Fill in as much info as possible. 

Have a question? Start a new discussion 👉 https://github.com/cypress-io/cypress/discussions

As an open source project with a small maintainer team, it may take some time for your issue to be addressed. Please be patient and we will respond as soon as we can. 🙏 -->

### Current behavior
Currently, the ""keyup"" event is fired in the same *tick* as ""keydown"" and ""input"". I have tracked this down to the `typeSimulatedKey()` method where `simulatedKeyup()` is called synchronously after `simulatedKeydown()`:  https://github.com/cypress-io/cypress/blob/develop/packages/driver/src/cy/keyboard.ts#L1193

Unfortunately, this results in issues with the [Slate editor](https://github.com/ianstormtaylor/slate), which waits for a resolved `Promise` inside of its change handling, as can be seen here: https://github.com/ianstormtaylor/slate/blob/228f4fa94f61f42ca41feae2b3029ebb570e0480/packages/slate/src/create-editor.ts#L84

Because of this, ""keyup"" events on the Slate editor will be triggered *before* its `onChange` handler has completed, which can lead to all kinds of unexpected side-effects. Seeing how the behavior works fine in regular browsers (tested in Chrome and Firefox), this leads me to believe the browsers will wait for the next *tick* before firing ""keyup"", at least. And thus, I believe it would be better if Cypress would match the regular browser behavior more closely.

### Desired behavior
The ""keyup"" event should be fired in the next *tick* from the preceding events. I currently use the following work-around in my setup code that works for me:

```js
const { keyboard } = cy.devices;
keyboard.typeSimulatedKey = function typeSimulatedKey(el, key, options) {
  if (options.prevText === undefined) {
    options.prevText = null;
  }

  this.simulatedKeydown(el, key, options);

  // Waiting for the resolved Promise, just as Slate does internally, resolves the issue for me:
  Promise.resolve().then(() => {
    const elToKeyup = this.getActiveEl(options);
    this.simulatedKeyup(elToKeyup, key, options);
  });
};
```

Ideally, no work-arounds would be necessary.

### Versions

6.3.0",bug
799031332,cy.contains('xxx').should('not.exist') try to expect <body> not to exist in the DOM,"### Current behavior
I try to test input validation by cypress
When user enter page first time, user should not see the error message
So I write test like this
`cy.contains('forgot_password_error_email_empty').should('not.exist');`
but it seems that command try to expect body not to exist in the DOM so it fails in the end

<img width=""327"" alt=""2"" src=""https://user-images.githubusercontent.com/9814815/106564709-91ad7400-6568-11eb-84e8-3593970aa168.png"">

When I reproduced my problem, I found this bug is related to `next-i18n` and only occur in `next production build`
If I have translation key `test` (public/static/locales/en) `cy.contains('test').should('not.exist')` will check body exist or not

If I write cy.contains with selector `cy.contains('span', 'test').should('not.exist')`, the test will pass.
But I think this is not the good solution.

### Desired behavior
cy.contains should not check the body 

### Test code to reproduce
clone this project (https://github.com/aNyMoRe0505/next-cypress)
npm install => npm run build =>  npm run start
then npm run cypress:open to execute test
### if you run in dev mode (npm run dev) everything works fine.

### Versions
""cypress"": ""^6.3.0""

",bug
798846360,Clicking anchor link to download file causes page load timeout,"i was update Cypress 6.4.0
but i cannot click button download
![error_download_file](https://user-images.githubusercontent.com/56146091/106539839-53489280-6531-11eb-80e7-319e937eb4dc.jpg)

file source:
![error_download_file_2](https://user-images.githubusercontent.com/56146091/106539852-5774b000-6531-11eb-9e13-a75b2dde1b03.jpg)

source:
[cypress_download.zip](https://github.com/cypress-io/cypress/files/5908040/cypress_download.zip)
",bug
796577631,Studio fails to save command when test or suite definition has test configuration,"<!-- 👋 Use the template below to report a bug. Fill in as much info as possible. 

Have a question? Start a new discussion 👉 https://github.com/cypress-io/cypress/discussions

As an open source project with a small maintainer team, it may take some time for your issue to be addressed. Please be patient and we will respond as soon as we can. 🙏 -->

### Current behavior

If my test definition or suite uses test configuration, the commands captured in Cypress Studio will error when trying to save. I tried several different properties of test config - so it doesn't seem to matter which one you use.

If you have a suite with test config and try to 'add commands' to the inner `it` test - it will be successful.

**Test definition with test config**

<img width=""807"" alt=""Screen Shot 2021-01-29 at 11 17 34 AM"" src=""https://user-images.githubusercontent.com/1271364/106233036-f775c500-6223-11eb-9ff2-011da1fa8991.png"">

**Suite definition with test config**

<img width=""792"" alt=""Screen Shot 2021-01-29 at 11 21 39 AM"" src=""https://user-images.githubusercontent.com/1271364/106233276-81be2900-6224-11eb-87bb-a3e709050e65.png"">


### Test code to reproduce

#### Failing to add commands for test definition

`index.html`

```js
<button>button</button>
```

`spec.js`

```js
it('test 1', { responseTimeout: 60000 }, () => {
  cy.visit('index.html')
})
```

1. `cypress open` with the files above
2. Click 'Add Commands to Test'
3. Click button on AUT
4. Click 'Save Commands'

#### Failing to add a new test for suite definition

```js
describe('tests', { responseTimeout: 60000 }, () => {
  it('test 1', () => {
    cy.visit('index.html')
  })
} )
```

1. `cypress open` with the files above
2. Click 'Add New Test'
3. Enter url
4. Click 'Save Commands'

### Versions

Cypress 6.3.0
",bug
794685850,Hovering on the video doesn't play the video. Clicking on the video opens a new tab,"<!-- 👋 Use the template below to report a bug. Fill in as much info as possible. 

Have a question? Start a new discussion 👉 https://github.com/cypress-io/cypress/discussions

As an open source project with a small maintainer team, it may take some time for your issue to be addressed. Please be patient and we will respond as soon as we can. 🙏 -->

### Current behavior
<!-- A description including screenshots, stack traces, DEBUG logs, etc. 👉 https://on.cypress.io/troubleshooting -->
1) Hovering on a video tile doesn't play the video as expected
2) Clicking on the video opens a new tab (Expected to open the video player on the same screen) 


### Desired behavior
<!-- Remember, we are not familiar with the application you're testing, so please provide a clear description of what should happen.-->
1) Hovering on a video should play the video 
2) Clicking on the video should open up the video player and video should play 

### Test code to reproduce
<!-- Provide test code that we can copy, paste, and run on our machine to see the issue. -->

1) **Hovering on a video should play the video** 
```js
const urls = [`https://cat-press.com/cat-movies/firework`]
  urls.forEach((url) => {
    it(`Should load the videos and autoplay one: ${url}`, () => {
      cy.visit(url)
      // Scroll to feed
      cy.get('.cy-grid').scrollIntoView()
      // Should hover over to the video at index 1
      cy.get(`.cy-thumbnail-link`).eq(1).trigger('mouseover')
     
    })
  })
```

2) Clicking on the video opens a new tab (Expected to open the video player on the same screen) 

```js
const urls = [`https://cat-press.com/cat-movies/firework`]
  urls.forEach((url) => {
    it(`Should load the videos and autoplay one: ${url}`, () => {
      cy.visit(url)
      // Scroll to feed
      cy.get('.cy-grid').scrollIntoView()
      // Should hover over to the video at index 1
      cy.get(`.cy-thumbnail-link`).eq(1).trigger('click')
     
    })
  })
```

![image](https://user-images.githubusercontent.com/76002992/105928410-e48ca600-6013-11eb-8478-fd6865dbed3b.png)


<!-- You could also provide a repo that we can clone and run. You can fork 👉 https://github.com/cypress-io/cypress-test-tiny repo, set up a failing test, then link to your fork. -->

### Versions

<!-- Cypress version, last known working Cypress version (if applicable), Browser and version, Operating System, CI Provider, etc -->
<!-- If possible, please update Cypress to latest version and check if the bug is still present. -->
Mac: Catalina 10.15.7
Chrome: Version 87.0.4280.141 (Official Build) (x86_64)
Cypress: Version 6.1.0 (6.1.0.531243)",bug
794050088,Setting watchForFileChanges to false keeps the Studio open,"### Current behavior
<!-- A description including screenshots, stack traces, DEBUG logs, etc. 👉 https://on.cypress.io/troubleshooting -->
Steps to replicate:
1. set `watchForFileChanges` to `false` in `cypress.json`
2. open a test and start a studio
3. interact with your app and click on ""save commands""
4. nothing happens, studio remains open, however, scneario is added to my test file - multiple times if I click the button multiple times. which I do, because it feels unresponsive 🙈

### Desired behavior
<!-- Remember, we are not familiar with the application you're testing, so please provide a clear description of what should happen.-->
When the `watchForFileChanges` is set to `true`, clicking on „save commands“ will close the studio. I believe this would be better UX for this case as well

### Test code to reproduce
<!-- Provide test code that we can copy, paste, and run on our machine to see the issue. -->
I explored this in my stream, you can [see the behavior at 16:20](https://youtu.be/f_GAyKdD8OE?t=981)

<!-- You could also provide a repo that we can clone and run. You can fork 👉 https://github.com/cypress-io/cypress-test-tiny repo, set up a failing test, then link to your fork. -->

### Versions
Cypress 6.3.1
<!-- Cypress version, last known working Cypress version (if applicable), Browser and version, Operating System, CI Provider, etc -->
<!-- If possible, please update Cypress to latest version and check if the bug is still present. -->
",bug
793858410,"Clicking on select option in Cypress Studio, main window empties - cannot continue testing","<!-- 👋 Use the template below to report a bug. Fill in as much info as possible. 

Have a question? Start a new discussion 👉 https://github.com/cypress-io/cypress/discussions

As an open source project with a small maintainer team, it may take some time for your issue to be addressed. Please be patient and we will respond as soon as we can. 🙏 -->

### Current behavior

When I use the Cypress Studio to click on a select option from the Cypress example website, the main window is cleared/rerouted.

![](http://g.recordit.co/LBG4edBZzX.gif)

Looks like a MobX error is thrown in the UI. 

```
cypress_runner.js:60154 Error: [mobx] An invariant failed, however the error is obfuscated because this is a production build.
    at invariant (cypress_runner.js:49438)
    at fail (cypress_runner.js:49438)
    at checkIfStateModificationsAreAllowed (cypress_runner.js:49438)
    at e.spliceWithArray (cypress_runner.js:49438)
    at Proxy.replace (cypress_runner.js:49438)
    at Array.normalize (cypress_runner.js:46501)
    at Core.../../node_modules/markdown-it/lib/parser_core.js.Core.process (cypress_runner.js:43383)
    at MarkdownIt.../../node_modules/markdown-it/lib/index.js.MarkdownIt.parseInline (cypress_runner.js:43173)
    at MarkdownIt.../../node_modules/markdown-it/lib/index.js.MarkdownIt.renderInline (cypress_runner.js:43190)
    at formattedMessage (cypress_runner.js:183289)
    at cypress_runner.js:183363
    at cypress_runner.js:49273
    at cypress_runner.js:49251
    at trackDerivedFunction (cypress_runner.js:49438)
    at e.track (cypress_runner.js:49438)
    at useObserver (cypress_runner.js:49249)
```

<img width=""794"" alt=""Screen Shot 2021-01-26 at 8 17 54 AM"" src=""https://user-images.githubusercontent.com/1271364/105788513-0e5fb180-5faf-11eb-9c82-3f80fcfb5b40.png"">


### Desired behavior

Cypress Studio should record a 'click' on the multi-select's option instead of rerouting the main window.

### Test code to reproduce

```js
it('test', () => {
  cy.visit('https://example.cypress.io/commands/actions')
  cy.get('#select').scrollIntoView()
})
```

- Run `cypress open` for code above
- Click 'Add Commands to Test'
- Click on 'oranges' or other option in the visible multi-select


### Versions

Cypress 6.3.0
",bug
792019732,Cypress 6.3.0 Fails to exit if connecting to Chrome falls back to TCP,"### Current behavior
Cypress 6.3.0 Running in Headless Mode, set to Chrome Browser does not EXIT after the tests are done, if the connection falls back to TCP, showing this in any part of the test.

```
Timed out waiting for the browser to connect. Retrying...
Warning: Cypress failed to connect to Chrome via stdio after 1 minute, 0 seconds. Falling back to TCP...
Connecting to Chrome via TCP was successful, continuing with tests
```

Additional Information:
- We have to run ""killall -9 chrome"" for the Cypress to exit, if the tests all passed, it does return a success status when doing this. So it is likely an issue with Cypress during termination.

- If there are retries in the test, which should have otherwise passed due to retry, the retry is not honored, and the test is reported as failed 

- This only happens in our AWS EC2 Linux Ubuntu 20.04, it DOES NOT happen in our Mac Mini environment, maybe because the Chrome TCP Fallback does not happen at all in our Mac-Mini Server.

### Desired behavior
Cypress 6.3.0 Running in Headless Mode, set to Chrome Browser SHOULD EXIT after the tests are done even if the connection falls back to TCP

### Test code to reproduce
This happens on any occasion that this notice appears:

```
Timed out waiting for the browser to connect. Retrying...
Warning: Cypress failed to connect to Chrome via stdio after 1 minute, 0 seconds. Falling back to TCP...
Connecting to Chrome via TCP was successful, continuing with tests
```

### Versions
6.3.0",bug
791683104,Selector playground remains open when studio is activated,"<!-- 👋 Use the template below to report a bug. Fill in as much info as possible. 

Have a question? Start a new discussion 👉 https://github.com/cypress-io/cypress/discussions

As an open source project with a small maintainer team, it may take some time for your issue to be addressed. Please be patient and we will respond as soon as we can. 🙏 -->

### Current behavior
If a user already has the selector playground open and activates studio, they'll be put into a weird mode where the selector playground is open in studio mode and they don't work so well together.

![ezgif-5-1357a88b762f](https://user-images.githubusercontent.com/7033952/105445670-82602980-5c3e-11eb-8e45-926177a95ad5.gif)

### Desired behavior
The selector playground should be closed when a user enters studio mode. In the future we may add the ability to toggle the selector playground hover state while creating tests in studio. 
",bug
791679282,Studio does not prompt to start adding commands after visiting an inputted url,"<!-- 👋 Use the template below to report a bug. Fill in as much info as possible. 

Have a question? Start a new discussion 👉 https://github.com/cypress-io/cypress/discussions

As an open source project with a small maintainer team, it may take some time for your issue to be addressed. Please be patient and we will respond as soon as we can. 🙏 -->

### Current behavior
After inputting a url to visit a site, the user does not see the prompt ""Interact with your site to generate commands"". This can be fairly confusing to first-time users as there is no directive after entering a url.

![Screen Shot 2021-01-21 at 11 03 50 PM](https://user-images.githubusercontent.com/7033952/105444999-f13c8300-5c3c-11eb-945b-8d968e2ffe08.png)

### Desired behavior
Prompt should be shown until an additional command is generated.",bug
791677196,Studio prompts user to enter url even if an error has already occured,"<!-- 👋 Use the template below to report a bug. Fill in as much info as possible. 

Have a question? Start a new discussion 👉 https://github.com/cypress-io/cypress/discussions

As an open source project with a small maintainer team, it may take some time for your issue to be addressed. Please be patient and we will respond as soon as we can. 🙏 -->

### Current behavior
If a test has failed and the user has not yet visit a url, they will still be prompted to enter a url.

Note: does not happen for failed `cy.visit(...)` commands as that was the only situation in which I ran into this during initial development and fixed.

### Desired behavior
Studio should not prompt the user to enter a url if their test has already failed

### Test code to reproduce
Attempting to extend the following suite produces this error:
```js
describe('studio', () => {
  beforeEach(() => {
    throw new Error('My Error')
  })

  it('types', () => {

  })
})
```

![Screen Shot 2021-01-21 at 10 51 58 PM](https://user-images.githubusercontent.com/7033952/105444529-006f0100-5c3c-11eb-978e-7c5b6c34d8cc.png)
",bug
791641592,Studio will generate empty cy.type() commands,"<!-- 👋 Use the template below to report a bug. Fill in as much info as possible. 

Have a question? Start a new discussion 👉 https://github.com/cypress-io/cypress/discussions

As an open source project with a small maintainer team, it may take some time for your issue to be addressed. Please be patient and we will respond as soon as we can. 🙏 -->

### Current behavior
When tabbing through inputs, sometimes an empty `cy.type()` will be generated which leads to a failing test. This is known to happen when entering an input field and then tabbing out without entering any content.

![ezgif-3-0da3635149f5](https://user-images.githubusercontent.com/7033952/105436989-3907de00-5c2e-11eb-8909-81b294d61ad6.gif)

### Desired behavior
Studio should never produce empty type commands",bug
790251829,Studio unable to save to files with special characters in path,"<!-- 👋 Use the template below to report a bug. Fill in as much info as possible. 

Have a question? Start a new discussion 👉 https://github.com/cypress-io/cypress/discussions

As an open source project with a small maintainer team, it may take some time for your issue to be addressed. Please be patient and we will respond as soon as we can. 🙏 -->

### Current behavior
Studio throws an error when trying to save to files that have a space somewhere in their path. If the space is removed, the saving works fine. I assume that a similar thing could be happening with `open in ide` since they share some of the same logic here but I'll have to test that.

### Desired behavior
Studio should be able to save to all file names.

### Test code to reproduce
See comment below

Originally reported by @ChaseBig https://github.com/cypress-io/cypress/discussions/14339#discussioncomment-297047
",bug
790246882,"Studio uses selectors after an action has occurred, causing failing tests","<!-- 👋 Use the template below to report a bug. Fill in as much info as possible. 

Have a question? Start a new discussion 👉 https://github.com/cypress-io/cypress/discussions

As an open source project with a small maintainer team, it may take some time for your issue to be addressed. Please be patient and we will respond as soon as we can. 🙏 -->

### Current behavior
Studio will use selectors for elements after an action has occurred. For example, if clicking a button adds an `.active` class, studio might use that class to select the button. However, this will cause a broken test since the button does not have the `.active` class until after it's been clicked.

### Desired behavior
Studio should only use properties of the element **before** an action has taken place to select that element.

### Test code to reproduce
```html
<button class=""btn"">button</button>
<button class=""btn"">button</button>
<script>
  const btn = document.getElementsByClassName('btn')[0]

  btn.addEventListener('mousedown', function() {
    btn.classList.add('active')
  })
</script>
```

Enter studio and visit the page with the above html content. Click on the first button to generate a command like the following:
<img width=""391"" alt=""Screen Shot 2021-01-27 at 3 04 24 PM"" src=""https://user-images.githubusercontent.com/7033952/106046970-f96b4700-60b0-11eb-8668-7b7a2e598ef0.png"">

You can see that Studio picked a selector that only existed after the mousedown (but before the click completed). Therefore, when the test runs, it will fail as the selector isn't there yet.

<img width=""413"" alt=""Screen Shot 2021-01-27 at 3 06 37 PM"" src=""https://user-images.githubusercontent.com/7033952/106047174-43542d00-60b1-11eb-968a-22892303ac04.png"">

Originally reported by @dverbiest https://github.com/cypress-io/cypress/discussions/14339#discussioncomment-295344",bug
790187866,Test gets into runaway loop if cy.wrap is inside cy.should,"Cypress v6.3.0
```js
it('gets into a loop', () => {
  cy.wrap('bar')
    .should(() => {
      cy.wrap('foo')
    })
})
```

Runs away, never finishes


https://user-images.githubusercontent.com/2212006/105213850-39648400-5b1d-11eb-92fe-0d04751496e6.mp4

Example in https://github.com/cypress-io/cypress-test-tiny/tree/runaway",bug
790178967,cy.intercept is shown as processing,"Cypress v6.3.0

In this two test scenario

```js

beforeEach(() => {
  cy.visit('/')
})

it('confirms the number of times an intercept was called', () => {
  cy.intercept('/users?_limit=3').as('users3')
  cy.intercept('/users?_limit=5').as('users5')

  cy.get('#load-users').click().click()
  cy.wait('@users3')

  // to avoid clicking too quickly, add small pauses
  cy.get('#load-five-users').click()
    .wait(20).click()
    .wait(20).click()
    .wait(20).click()
})

it('spies using query parameter', () => {
  cy.intercept({
    pathname: '/users',
    query: {
      _limit: '3',
    },
  }).as('users3')

  cy.intercept({
    pathname: '/users',
    query: {
      _limit: '5',
    },
  }).as('users5')

  cy.get('#load-users').click()
  cy.wait('@users3')

  cy.get('#load-five-users').click()
  cy.wait('@users5')
})
```

I have noticed that the last XHR of the first test never completes


https://user-images.githubusercontent.com/2212006/105212173-19cc5c00-5b1b-11eb-97f8-bc5104c03746.mp4


## Reproduction

Repo and branch https://github.com/cypress-io/cypress-example-recipes/tree/runaway-test

- clone the repo
- install dependencies
- `cd examples/stubbing-spying__intercept`
- `npm run dev`
- click on the `spec.js`

Note that if there is no second test, or if the first test is `it.only` then everything is fine, the XHR completes right away. So something about the state is leaking from one test into another I guess",bug
789036830,An error inside the intercept callback hangs Cypress,"Cypress v6.2.1
Reproducible example in https://github.com/bahmutov/todo-graphql-example/tree/crash-and-hang

- Clone the repo
- `git checkout crash-and-hang` branch
- `npm install`
- `npm run dev`
- click on the `spec.js`
- after running, try to click 'rerun' tests or interact - is it frozen

This spec runs
```js
it('completes the first todo', () => {
  cy.intercept(
    {
      method: 'POST',
      url: '/',
    },
    (req) => {
      console.log('inside the intercept')
      throw new Error('nope')
    },
  )
  cy.visit('/')
})
```

It throws an error inside the intercept - this error is never shown to the user, the test passes, but the Cypress is frozen after that as this video shows. I cannot restart the tests or even really close the browser until some time later


https://user-images.githubusercontent.com/2212006/105042919-d72f5480-5a32-11eb-8716-ff6f8b5ac501.mp4

",bug
788257449,material-multi-picker item requires 2 clicks for the item to be selected,"### Current behavior
Currently when using the material-multi-picker component, you can type something into the input to filter the list of options. However, it then takes 2 cypress click() events to trigger the click on the list item correctly.

### Desired behavior
Just like when driving the UI manually, a single click on the list item should be sufficient to select it

### Test code to reproduce
Simple Cypress test:
```js
describe ('Scratch', function () {
  beforeEach(() => {
    cy.visit('https://atropos-tech.github.io/material-multi-picker/index.html')
  })

  it('Does stuff', function () {
      cy.get('#downshift-0-input').type('app')
      cy.get('li').contains('apple').click().click();  // shouldn't need the second click() here
  })
})
```
### Versions
Tried with Cypress 5.5 and 6.1, and Chrome 87 on CentOS",bug
788245072,window:before:unload handler triggered before app's unload handler,"<!-- 👋 Use the template below to report a bug. Fill in as much info as possible. 

Have a question? Start a new discussion 👉 https://github.com/cypress-io/cypress/discussions

As an open source project with a small maintainer team, it may take some time for your issue to be addressed. Please be patient and we will respond as soon as we can. 🙏 -->

### Current behavior
According to the docs:
`Fires when your application is about to navigate away. The real event object is provided to you. Your app may have set a returnValue on the event, which is useful to assert on`

but it seems that this event handler is called before the beforeunload handler in the app which sets the return value so I can't assert if value has been set correctly.

### Desired behavior
My understanding of the docs is that cypress handler should be called after and there I'd be able to see if return value has been set or not.

### Test code to reproduce
https://github.com/jbojcic1/cypress-test-tiny/tree/before-unload-example

Just run the only test. App code can be seen here:

https://codesandbox.io/s/modern-mountain-1vd73?file=/index.html

### Versions

6.2.1
",bug
786331325,Cypress crashes on trying to record with an empty key,"Cypress v6.2.1

Cypress crashes if you pass an empty `--key` CLI parameter.

Reproduction steps:
- clone https://github.com/cypress-io/cypress-test-tiny/tree/key-example
- install dependencies `npm i`
- run Cypress in record mode with an empty key parameter, for example
```
DEBUG=cypress:* npx cypress run --record --key --parallel --ci-build-id bar
```

Crash
```
token.slice is not a function
TypeError: token.slice is not a function
    at Object.hide (/Users/gleb/Library/Caches/Cypress/6.2.1/Cypress.app/Contents/Resources/app/packages/server/lib/util/keys.js:7:11)
    at /Users/gleb/Library/Caches/Cypress/6.2.1/Cypress.app/Contents/Resources/app/packages/server/lib/modes/record.js:406:26
```

Note: if you simply try

```
cypress run --record --key
```

The our CLI catches the empty parameter and shows a good message. You must follow `--key` by something else. Then it somehow evades our CLI argument checks. I can see in the crashing case

```
  cypress:cli spawning Cypress with executable: /Users/gleb/Library/Caches/Cypress/6.2.1/Cypress.app/Contents/MacOS/Cypress +3ms
  cypress:cli spawn args [ '--no-sandbox', '--', '--run-project', '/Users/gleb/git/cypress-test-tiny', '--ci-build-id', 'bar', '--key', '--parallel', '--record', true, '--cwd', '/Users/gleb/git/cypress-test-tiny' ] { detached: false, stdio: [ 'inherit', 'inherit', 'pipe' ] }
```

## Why this matters

As we found with @estrada9166 if you pass an environment variable on CI that is undefined, it happily crashes

```
npx cypress run --record --key $KEY_DOES_NOT_EXIST --parallel
```",bug
785052724,cy.intercept() breaks multipart form submissions,"### Current behavior

Since upgrading to Cypress 6.2.1, multipart form submissions no longer work when they are `intercept()`ed. This seems to be a regression introduced by https://github.com/cypress-io/cypress/issues/9359

### Desired behavior

I can intercept multipart uploads, as I was able to do in Cypress 6.0.0 - 6.2.0

### Test code to reproduce

As a minimal reproducing program, I used https://github.com/AlexCSR/cypress-intercept-buffer-bug (from the #9359 ticket). In my system, that tests works fine in 6.2.0, but breaks in 6.2.1. It seems to be the opposite of what people on that ticket where experiencing.

If I inspect network traffic using that test in 6.2.1:
- The body of the browser -> cypress proxy request is correct
- The body of the cypress proxy -> origin server is `{}` (no multipart boundaries included)

### Versions

Broken in Cypress 6.2.1, works in Cypress 6.0.0 - 6.2.0
Tested with Node 15.4.0, 10.20.1 and 12.18.2 running on Linux (Arch Linux & Ubuntu)
Chromium 87 (although that seems irrelevant, I can reproduce by sending HTTP requests to the Cypress proxy using curl)

Maybe @AlexCSR can comment on what versions they use? Since I'm using their code to reproduce and get the opposite results.",bug
784809412,Response not coming through for every request with intercept,"Hi There,

I was upgrading cypress in our application and migrating to intercept. 
It seems to work intermittently. 

**OLD**
```js
cy.server()
        .route('post', '**/landlord')
        .as('saveLandlord');

cy.contains('button', 'Next').click();

cy.wait('@saveLandlord').should('have.property', 'status', 200);
```

**New**

```js
cy.intercept('POST', '**/landlord**').as('saveLandlord');

cy.contains('button', 'Next').click();

cy.wait('@saveLandlord')
        .its('response.statusCode')
        .should('eq', 200);
```

I have tried to log the response in between and the response is just not passed in.

This is the error I get, and you can see that it did not yield a response on the right:
![image](https://user-images.githubusercontent.com/4668890/104411681-f0fa1300-55be-11eb-9106-02bf0aa3824f.png)

Here is the response from the console:
![image](https://user-images.githubusercontent.com/4668890/104411723-05d6a680-55bf-11eb-876c-273a9e450a96.png)

The same code works for some other requests, I can't really see why this doesn't work for this instance.
",bug
784572091,"static interception delayMs option measures time from ""cy.intercept"" command, not from the request timestamp","Cypress v6.2.1 using `cy.intercept` to send a static response. My goal is to clearly see the loading indicator in the UI, thus I want to slow down the server response.

## Situation

Without intercept, the request fires 3 seconds after the page loads

```js
it('use positive then negative assertion', () => {
  cy.visit('/?delay=3000')
  // first, make sure the loading indicator shows up (positive assertion)
  cy.get('.loading').should('be.visible')
  // then assert it goes away (negative assertion)
  cy.get('.loading').should('not.be.visible')
})
```

Notice how quickly the loading message appears and disappears without network control. In fact it passes on the first run, and fails to ""catch"" the quickly appearing loading element on the second re-run.


https://user-images.githubusercontent.com/2212006/104367851-5bd91a80-54e9-11eb-985e-3512a4f7a54b.mp4

Of course, this is a flakey test and we could use test retries to solve it. But let's make the test better using network control.

## Attempt

So I want to slow down the network request to `GET /todos` to always have the loading indicator stay visible for a period of time.

```js
it('slows down the network response (does not work)', () => {
  cy.intercept('/todos', {
    body: [],
    delayMs: 2000
  })
  cy.visit('/?delay=3000')
  // first, make sure the loading indicator shows up (positive assertion)
  cy.get('.loading').should('be.visible')
  // then assert it goes away (negative assertion)
  cy.get('.loading').should('not.be.visible')
})
```

Hmm, it looks wrong! It looks like the `delayMs` wasn't even applied

https://user-images.githubusercontent.com/2212006/104368454-149f5980-54ea-11eb-860a-44181c1246b5.mp4

## Code

Looking at the code in https://github.com/cypress-io/cypress/blob/f43f1c1f26290fc8387697c8122f0f50b6c7cb55/packages/driver/src/cy/net-stubbing/static-response-utils.ts#L106

I see that we compute the response time using the time when `cy.intercept()` command runs

```js
if (staticResponse.delayMs) {
  backendStaticResponse.continueResponseAt = Date.now() + staticResponse.delayMs
}
```

Ok, let's see. If our application makes the request after 3 seconds, let's set the response to be sent after 5 seconds


https://user-images.githubusercontent.com/2212006/104368736-795ab400-54ea-11eb-923c-ecd0ea60d6fc.mp4

yeah, this works, but is so counterintuitive

## Workaround

Use programmatic reply and not a static response

```js
it('slows down the network response (programmatic)', () => {
  cy.intercept('/todos', req => {
    req.reply({
      body: [],
      delayMs: 2000
    })
  })
  cy.visit('/?delay=3000')
  // first, make sure the loading indicator shows up (positive assertion)
  cy.get('.loading').should('be.visible')
  // then assert it goes away (negative assertion)
  cy.get('.loading').should('not.be.visible')
})
```

BUT this solution also has a bug noted in #14446 - it uses the first time `req.reply` runs to ""remember"" the response delay :)

## Desired output

when using static intercept, start counting the delay from the moment the network request starts",bug
782697296,Empty Cypress window on Windows 7,"On `npx cypress open` I get an empty window with menu:

![](https://i.imgur.com/j9fa26V.jpg)

I tried with standalone installation, with cypress-example-kitchensink and with my test server. Same result everywhere. 
```
>npx cypress --version
Cypress package version: 6.2.1
Cypress binary version: 6.2.1
Electron version: 11.1.1
Bundled Node version:
12.18.3
```

```
>npx cypress info

Displaying Cypress info...

Detected 1 browser installed:

1. Canary
  - Name: chrome
  - Channel: canary
  - Version: 89.0.4364.0
  - Executable: C:\Users\Dron\AppData\Local\Google\Chrome SxS\Application\chrome.exe

Note: to run these browsers, pass <name>:<channel> to the '--browser' field

Examples:
- cypress run --browser chrome:canary

Learn More: https://on.cypress.io/launching-browsers

Proxy Settings: none detected
Environment Variables: none detected

Application Data: C:\Users\Dron\AppData\Roaming\cypress\cy\development
Browser Profiles: C:\Users\Dron\AppData\Roaming\cypress\cy\development\browsers
Binary Caches: C:\Users\Dron\AppData\Local\Cypress\Cache

Cypress Version: 6.2.1
System Platform: win32 (6.1.7601)
System Memory: 17.2 GB free 8.97 GB

```
I am not sure why it only shows Canary Chrome. I have usual Chrome here in `C:\Users\Dron\AppData\Local\Google\Chrome\Application\chrome.exe`

I tried opening Cypress with debug:
```
set DEBUG=cypress:*
npx cypress open --env server_url=http://127.0.0.1:3000 2> err.txt 1> log.txt
```
See results of `err.txt` and `log.txt` [here](https://gist.github.com/Dron007/ffd3ba84ab32e11c12363c51abab6b19).
In `log.txt` there is an error `Error: Module did not self-register ... registry-js` but it is probably different issue. I commented out temporarily its usage in `Cypress\resources\app\packages\server\lib\util\chrome_policy_check.js` and error got disappeared but I still see the empty screen.",bug
781423673,"""No tests found in your file"" when error thrown outside suite with .only","Given you have a .only on a suite, and have an error thrown outside a test:
```js
import './setup'

describe.only('suite', ()=>{
  it('t1', ()=>{
    
  })
  it('t2', ()=>{
    
  })
})

throw new Error('my error')
```

Current Behavior:
Cypress does not generate a new test for the uncaught failure, but says no tests are found.
![image](https://user-images.githubusercontent.com/14625260/103914547-fb587080-50d7-11eb-94e1-910eb520db78.png)

Expected:
![image](https://user-images.githubusercontent.com/14625260/103914606-14f9b800-50d8-11eb-9c28-b40113d69457.png)


Bug since: unknown

(originally found during feature work)",bug
781230536,Cypress won't run tests on Windows in an enterprise as admin,"<!-- 👋 Use the template below to report a bug. Fill in as much info as possible. 

Have a question? Start a new discussion 👉 https://github.com/cypress-io/cypress/discussions

As an open source project with a small maintainer team, it may take some time for your issue to be addressed. Please be patient and we will respond as soon as we can. 🙏 -->

In our team we want to use Cypress for our End2End testing. We are able to run Cypress on macOS, but not on any Windows machines. We are running Cypress as admins on Windows. The error messages we get are not sufficient for us to solve the issue ourselves.


### Current behavior
<!-- A description including screenshots, stack traces, DEBUG logs, etc. 👉 https://on.cypress.io/troubleshooting -->
To trigger the error, we have just sat up a standard Node Project with ```npm init``` and installed Cypress with ```npm install cypress```.

When verifying Cypress, we do not get any errors, and we are also able to open Cypress with ```npx cypress open```.

But when we are to run a test, either with the GUI from ```cypress open``` or with ```npx cypress run``` we are facing errors.

The error encountered in the GUI (cypress open):
![not_working_chrome](https://user-images.githubusercontent.com/71631165/103883714-db2bb000-50dd-11eb-8c31-ef7438a16dd5.PNG)
(clicking the balloon doesn't help)

with the output from the command prompt being:
```
We detected that the Chromium Renderer process just crashed.

This is the equivalent to seeing the 'sad face' when Chrome dies.

This can happen for a number of different reasons:

- You wrote an endless loop and you must fix your own code
- There is a memory leak in Cypress (unlikely but possible)
- You are running Docker (there is an easy fix for this: see link below)
- You are running lots of tests on a memory intense application
- You are running in a memory starved VM environment
- There are problems with your GPU / GPU drivers
- There are browser bugs in Chromium

You can learn more including how to fix Docker here:

https://on.cypress.io/renderer-process-crashed

We detected that the Chromium Renderer process just crashed.

This is the equivalent to seeing the 'sad face' when Chrome dies.

This can happen for a number of different reasons:

- You wrote an endless loop and you must fix your own code
- There is a memory leak in Cypress (unlikely but possible)
- You are running Docker (there is an easy fix for this: see link below)
- You are running lots of tests on a memory intense application
- You are running in a memory starved VM environment
- There are problems with your GPU / GPU drivers
- There are browser bugs in Chromium

You can learn more including how to fix Docker here:

https://on.cypress.io/renderer-process-crashed
ERR_FAILED (-2) loading 'http://localhost:52682/__/#/tests/integration\examples\actions.spec.js'
Error: ERR_FAILED (-2) loading 'http://localhost:52682/__/#/tests/integration\examples\actions.spec.js'
    at rejectAndCleanup (electron/js2c/browser_init.js:205:1493)
    at Object.stopLoadingListener (electron/js2c/browser_init.js:205:1868)
    at Object.emit (events.js:315:20)


  (Results)

  ┌────────────────────────────────────────────────────────────────────────────────────────────────┐
  │ Tests:        0                                                                                │
  │ Passing:      0                                                                                │
  │ Failing:      1                                                                                │
  │ Pending:      0                                                                                │
  │ Skipped:      0                                                                                │
  │ Screenshots:  0                                                                                │
  │ Video:        false                                                                            │
  │ Duration:     0 seconds                                                                        │
  │ Spec Ran:     examples\actions.spec.js                                                         │
  └────────────────────────────────────────────────────────────────────────────────────────────────┘
```

We are running the example tests from Cypress, so it can't be because of any tests that we have written. We are also not running on Docker or any other VM. Furthermore we are not facing any issues with our GPUs, having tried different machines and GPUs.

When running ```npx cypress run``` we get the same error. I have attached the [debug.log](https://github.com/cypress-io/cypress/files/5781147/debug.log) after running with set DEBUG=cypress:*






### Desired behavior
<!-- Remember, we are not familiar with the application you're testing, so please provide a clear description of what should happen.-->

Being able to run tests.

### Test code to reproduce
<!-- Provide test code that we can copy, paste, and run on our machine to see the issue. -->

Since we are running on out enterprises' machines, it might not be possible for you to reproduce the problem we are facing.
But we did:
```
npm init
npm install cypress
npx cypress run
```
<!-- You could also provide a repo that we can clone and run. You can fork 👉 https://github.com/cypress-io/cypress-test-tiny repo, set up a failing test, then link to your fork. -->

### Versions

Platform: win32 (10.0.19041)
Cypress Version: 6.2.1
Chrome 87

<!-- Cypress version, last known working Cypress version (if applicable), Browser and version, Operating System, CI Provider, etc -->
",bug
781212222,Delay for intercepted HTTP routes only works for the first call on that route,"### Current behavior
When using `.intercept()` for a HTTP route and stubbing it with a static response with a defined delay, that delay is only used on the first ever occurrence of this call.

### Desired behavior
Every call of this route is delayed

### Test code to reproduce
Given the following HTML:
```html
<!DOCTYPE html>
<head>
    <title>msDelay Test</title>
</head>
<body>
<button id=""click-me"">Click me</button>
<p id=""difference"">0</p>
<script type=""text/javascript"">
    const difference = document.getElementById('difference');
    document.getElementById('click-me').addEventListener('click', () => {
        const before = new Date().getTime();
        fetch('/api/something').then(() => {
            const after = new Date().getTime();
            const diff = after - before;
            difference.innerHTML = `${diff / 1000}`;
        });
    });
</script>
</body>
```

the following Cypress test should work:
```js
describe('Delaying Responses', () => {
  it('should delay every response', () => {
    cy.intercept('GET', '/api/something', { body: {}, delayMs: 5000 }).as('apiRoute');
    cy.visit('msDelay.html');

    cy.get('#click-me').click();
    cy.wait('@apiRoute');
    cy.get('#difference').invoke('text').then(text => expect(parseFloat(text)).to.be.closeTo(5, 0.5));

    cy.get('#click-me').click();
    cy.wait('@apiRoute');
    cy.get('#difference').invoke('text').then(text => expect(parseFloat(text)).to.be.closeTo(5, 0.5));
  });
});
```

However the first assertion goes through just fine and the second one fails with `expected 0.009 to be close to 5 +/- 0.5`

### Versions

6.2.1


### Additional info
From what I can see, this is because in https://github.com/cypress-io/cypress/blob/f43f1c1f26290fc8387697c8122f0f50b6c7cb55/packages/driver/src/cy/net-stubbing/events/response-received.ts the delay is defined as follows and probably is only called on the first occurrence:
```
continueFrame.continueResponseAt = Date.now() + delayMs
```",bug
781171809,Page load timeout will not fail the test if page is in redirection loop,"### Current behavior

Page load timeout will not stop the test if page is in redirection loop. The test may run forever. No log output is generated indicating what is happening.

Video: https://github.com/henrikauppinen/cypress-redirect-loop/blob/main/cypress/videos/redirect-loop.spec.js.mp4

The problem is obvious when looking at the UI but when this happens in headless mode in CI it may be extremely difficult to detect as the outcome may be just a long-running cypress process killed by CI.

We had a situation where tests completed successfully locally in headed mode and failed in CI. There was an oversight in test mocks and the application under test behaved differently in CI with drastically different performance constraints.

### Desired behavior
Page load timeout should trigger and stop the test even when page redirects continuously.

### Test code to reproduce
<!-- Provide test code that we can copy, paste, and run on our machine to see the issue. -->
https://github.com/henrikauppinen/cypress-redirect-loop



### Versions

<!-- Cypress version, last known working Cypress version (if applicable), Browser and version, Operating System, CI Provider, etc -->

Confirmed with 5.4 until most recent 6.2.1 version.",bug
781170530,Alias name for `req.alias` containing a dot fail to intercept,"<!-- 👋 Use the template below to report a bug. Fill in as much info as possible. 

Have a question? Start a new discussion 👉 https://github.com/cypress-io/cypress/discussions

As an open source project with a small maintainer team, it may take some time for your issue to be addressed. Please be patient and we will respond as soon as we can. 🙏 -->

### Current behavior

This was first mentioned here: https://github.com/cypress-io/cypress/issues/3512#issuecomment-754544578

Alias names containing a dot in the `req.alias` (like `get.url`) cause the `cy.wait()` to timeout. 

This does not occur when setting the alias name within an `.as()` command (`.as('get.url')`).

### Test code to reproduce

```js
it('alias without dot', () => {
  cy.intercept('/users', (req) => {
    req.alias = 'getUrl'
    req.reply('foo')
  })
  cy.visit('https://example.com')
  cy.window().then((win) => {
    const xhr = new win.XMLHttpRequest()
    xhr.open('GET', '/users')
    xhr.send()
  })
  // ✅ passes
  cy.wait('@getUrl')
})

it('alias with dot', () => {
  cy.intercept('/users', (req) => {
    req.alias = 'get.url'
    req.reply('foo')
  })
  cy.visit('https://example.com')
  cy.window().then((win) => {
    const xhr = new win.XMLHttpRequest()
    xhr.open('GET', '/users')
    xhr.send()
  })
  // ❗️ fails, cy.wait() times out
  cy.wait('@get.url')
})
```

<img width=""544"" alt=""Screen Shot 2021-01-07 at 4 04 08 PM"" src=""https://user-images.githubusercontent.com/1271364/103876410-01fbdd80-5102-11eb-8d7c-f5f5365ca537.png"">


### Versions

Cypress 6.2.1
",bug
777942987,Visiting page is not loading - rerouting parent window,"<!-- 👋 Use the template below to report a bug. Fill in as much info as possible. 

Have a question? Start a new discussion 👉 https://github.com/cypress-io/cypress/discussions

As an open source project with a small maintainer team, it may take some time for your issue to be addressed. Please be patient and we will respond as soon as we can. 🙏 -->

### Current behavior
![Screenshot 2021-01-04 at 10 00 40](https://user-images.githubusercontent.com/18396201/103518790-a963e080-4e74-11eb-8428-e58f846bc4b3.png)


### Desired behavior
Should load page normally

### Test code to reproduce
```js
describe('My First Test', () => {
  it('Visits homepage', () => {
    cy.visit('https://nba-staging.playon.co');  
  });
});
```

<!-- You could also provide a repo that we can clone and run. You can fork 👉 https://github.com/cypress-io/cypress-test-tiny repo, set up a failing test, then link to your fork. -->

### Versions

<!-- Cypress version, last known working Cypress version (if applicable), Browser and version, Operating System, CI Provider, etc -->
",bug
776905306,Selecting the main window hides the developer tools menu item,"<!-- 👋 Use the template below to report a bug. Fill in as much info as possible. 

Have a question? Start a new discussion 👉 https://github.com/cypress-io/cypress/discussions

As an open source project with a small maintainer team, it may take some time for your issue to be addressed. Please be patient and we will respond as soon as we can. 🙏 -->

### Current behavior
This bug : https://github.com/cypress-io/cypress/issues/3559

is happening in 6.2.0

I’m not sure if it has regressed or it was never fixed.

1. Open cypress
2. Open a spec
3. Click the main window
4. Developer tools menu disappears from the spec window

am Reproducing on windows.

### Versions

6.2.0
Windows 10",bug
776858228,Cypress hangs after Angular 11 upgrade ,"<!-- 👋 Use the template below to report a bug. Fill in as much info as possible. 

Have a question? Start a new discussion 👉 https://github.com/cypress-io/cypress/discussions

As an open source project with a small maintainer team, it may take some time for your issue to be addressed. Please be patient and we will respond as soon as we can. 🙏 -->

### Current behavior
After migrating to Angular 11 in my nx workspace, Cypress hangs in default or headless mode. In watch mode it still runs tests.

### Desired behavior
Cypress doesn't hang in default or headless mode.

### Test code to reproduce
[This branch](https://github.com/D0rmouse/nx-cypress-cucumber-demo/tree/nx_upgrade_cypress) demonstrates the behavior. Just run `npm run e2e` or `npm run e2e -- --headless` to see Cypress hang. Updating to a more recent version does not resolve the issue.

### Versions

<!-- Cypress version, last known working Cypress version (if applicable), Browser and version, Operating System, CI Provider, etc -->
Cypress: 4.4.0, but 6.2.0 also hangs.
OS: Windows 10.0.19041 Build 19041

",bug
773180857,Cypress.dom.isJquery is inconsistent in return,"Cypress v6.2.0

`Cypress.dom.isJquery` returns `undefined` instead of a boolean `false`

```js
describe('page', () => {
  it('works', () => {
    cy.visit('https://example.cypress.io')
    cy.contains('Kitchen Sink').then($el => {
      console.log('is element', Cypress.dom.isElement($el))
      console.log('is jquery', Cypress.dom.isJquery($el))

      console.log('[0] is element', Cypress.dom.isElement($el[0]))
      console.log('[0] is jquery', Cypress.dom.isJquery($el[0]))

      console.log('undefined is element', Cypress.dom.isElement())
      console.log('undefined is jquery', Cypress.dom.isJquery())
    })
  })
})
```

<img width=""589"" alt=""Screen Shot 2020-12-22 at 2 10 55 PM"" src=""https://user-images.githubusercontent.com/2212006/102924496-ae319900-445f-11eb-939b-fbe17e98e83a.png"">

Minor, but this method should return `false` or `true`",bug
772822618,Cypress failed to make a connection to Firefox - ECONNREFUSED at TCPConnectWrap.afterConnect,"### Current behavior
When the 1st test/spec is finished, 
1) cypress cannot connect to Firefox
![image](https://user-images.githubusercontent.com/48921683/102875576-a7e5f180-444c-11eb-8c8d-b8abeee851bf.png)

 and fails with this error:
![image](https://user-images.githubusercontent.com/48921683/102875416-6ead8180-444c-11eb-85df-167b0966a508.png)


```
 Error launching browser
Cypress failed to make a connection to Firefox.
This usually indicates there was a problem opening the Firefox browser.
Error details:
Error: connect ECONNREFUSED 127.0.0.1:57146 at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1128:14)
Stack trace
Error: Cypress failed to make a connection to Firefox.
This usually indicates there was a problem opening the Firefox browser.
Error details:
Error: connect ECONNREFUSED 127.0.0.1:57146
    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1128:14)
    at get (/Users/i018093/Library/Caches/Cypress/4.12.1/Cypress.app/Contents/Resources/app/packages/server/lib/errors.js:946:15)
    at Object.throwErr [as throw] (/Users/i018093/Library/Caches/Cypress/4.12.1/Cypress.app/Contents/Resources/app/packages/server/lib/errors.js:964:9)
    at /Users/i018093/Library/Caches/Cypress/4.12.1/Cypress.app/Contents/Resources/app/packages/server/lib/browsers/firefox.js:413:41
    at tryCatcher (/Users/i018093/Library/Caches/Cypress/4.12.1/Cypress.app/Contents/Resources/app/packages/server/node_modules/bluebird/js/release/util.js:16:23)
    at Promise._settlePromiseFromHandler (/Users/i018093/Library/Caches/Cypress/4.12.1/Cypress.app/Contents/Resources/app/packages/server/node_modules/bluebird/js/release/promise.js:547:31)
    at Promise._settlePromise (/Users/i018093/Library/Caches/Cypress/4.12.1/Cypress.app/Contents/Resources/app/packages/server/node_modules/bluebird/js/release/promise.js:604:18)
    at Promise._settlePromise0 (/Users/i018093/Library/Caches/Cypress/4.12.1/Cypress.app/Contents/Resources/app/packages/server/node_modules/bluebird/js/release/promise.js:649:10)
    at Promise._settlePromises (/Users/i018093/Library/Caches/Cypress/4.12.1/Cypress.app/Contents/Resources/app/packages/server/node_modules/bluebird/js/release/promise.js:725:18)
    at _drainQueueStep (/Users/i018093/Library/Caches/Cypress/4.12.1/Cypress.app/Contents/Resources/app/packages/server/node_modules/bluebird/js/release/async.js:93:12)
    at _drainQueue (/Users/i018093/Library/Caches/Cypress/4.12.1/Cypress.app/Contents/Resources/app/packages/server/node_modules/bluebird/js/release/async.js:86:9)
    at Async._drainQueues (/Users/i018093/Library/Caches/Cypress/4.12.1/Cypress.app/Contents/Resources/app/packages/server/node_modules/bluebird/js/release/async.js:102:5)
    at Immediate.Async.drainQueues [as _onImmediate] (/Users/i018093/Library/Caches/Cypress/4.12.1/Cypress.app/Contents/Resources/app/packages/server/node_modules/bluebird/js/release/async.js:15:14)
    at processImmediate (internal/timers.js:439:21)
```

2) The 2nd test/spec cannot start.

### Desired behavior
1) Firefox should work properly without errors, similar to Chrome:
![image](https://user-images.githubusercontent.com/48921683/102875950-2f336500-444d-11eb-9edd-06392b3cab8a.png)
2) All tests can run one-by-one.

### Test code to reproduce
```js
describe('tests', () => {  
    before(() => {
        cy.visit('https://www.google.com');
        cy.viewport(screen.availWidth, screen.availHeight);
    })

    it('test', () => {
        // type 'Hello World!' in search field
        cy.get('.gLFyf.gsfi').clear().type('Hello World!{enter}');
	})
})
```

### Versions

Cypress package version: 4.12.1
Cypress binary version: 4.12.1
Browser: Firefox 83
Operating System: macOS Big Sur, Version 11.1
",bug
770752702,Unexpected `URIError` for proxied request,"<!-- 👋 Use the template below to report a bug. Fill in as much info as possible. 

Have a question? Start a new discussion 👉 https://github.com/cypress-io/cypress/discussions

As an open source project with a small maintainer team, it may take some time for your issue to be addressed. Please be patient and we will respond as soon as we can. 🙏 -->

### Current behavior
<!-- A description including screenshots, stack traces, DEBUG logs, etc. 👉 https://on.cypress.io/troubleshooting -->

If I run `fetch('/%')` in my tests, the proxy returns an error.

```
URIError: Failed to decode param '/%'
    at decodeURIComponent (<anonymous>:null:null)
    at decode_param (/Users/oliverash/Library/Caches/Cypress/6.1.0/Cypress.app/Contents/Resources/app/packages/server/node_modules/express/lib/router/layer.js:172:12)
    at Layer.match (/Users/oliverash/Library/Caches/Cypress/6.1.0/Cypress.app/Contents/Resources/app/packages/server/node_modules/express/lib/router/layer.js:123:27)
    at matchLayer (/Users/oliverash/Library/Caches/Cypress/6.1.0/Cypress.app/Contents/Resources/app/packages/server/node_modules/express/lib/router/index.js:574:18)
    at next (/Users/oliverash/Library/Caches/Cypress/6.1.0/Cypress.app/Contents/Resources/app/packages/server/node_modules/express/lib/router/index.js:220:15)
```

(stack trace truncated)

### Desired behavior
<!-- Remember, we are not familiar with the application you're testing, so please provide a clear description of what should happen.-->

If I run `fetch('/%')` in my tests, the proxy should forward the request to my server so it can handle the request itself.

For context, I am trying to write a test that ensures my server's error handler works correctly. However, I can't test this if the proxy does not allow the request to go through to my server.

### Test code to reproduce
<!-- Provide test code that we can copy, paste, and run on our machine to see the issue. -->

<!-- You could also provide a repo that we can clone and run. You can fork 👉 https://github.com/cypress-io/cypress-test-tiny repo, set up a failing test, then link to your fork. -->

https://github.com/OliverJAsh/cypress-uri-error-test

`index.js`:
```js
const express = require(""express"");

const app = express();

app.get(""*"", (req, res) => {
  res.send(""foo"");
});

// error handling middleware
app.use((error, req, res, next) => {
  res.send(""my custom error page"");
});

app.listen(3000);
```

`cypress/integration/server.test.js`:
```js
describe(""server"", () => {
  it(""handles errors"", async () => {
    const responseTextPromise = fetch(""/%"").then((res) => res.text());

    expect(await responseTextPromise).to.equal(""my custom error page"");
  });
});
```

This test assertion fails because the request does not go through to my server. The proxy responds with an error.

### Versions

<!-- Cypress version, last known working Cypress version (if applicable), Browser and version, Operating System, CI Provider, etc -->

Cypress v6.1.0",bug
770480542,Cypress doesnt support having the same folder for fixtures and integration,"**Description**

I use always a folder structure by features, allowing to have the code and the test in same folder per each feature/component/endpoint/whatever. This makes me more fast to follow TDD, to find bugs related to some part, and more.

I try to put this in `Cypress.json`
```
""fixturesFolder"": ""src"",
""integrationFolder"": ""src"",
""testFiles"": ""**/*.test.js""
```

But when I run Cypress in any mode, with UI or not, don't found any test

Thanks,
Regards",bug
763434378,click() has side effect of moving DOM elements vertically within non-scrollable container,"### Current behavior

Applying a .click() to an element can in some situations result in the page layout changing in that a containing element of the click target moves vertically.

In this case, we have a simple page rendered by React with a page root (green border) and a div (yellow border) with

    height: 100%
    position: fixed;
    padding-top: 60px;

The padding leaves space for some top nav (light grey)

Inside this container there is some content, (red border) which is set to
    height: 100%

I.e. it fills the remaining viewport space (apart from the padding) and therefore is positioned 60px from viewport top. All is well:

![image](https://user-images.githubusercontent.com/11148387/101978780-da773980-3c57-11eb-8c4c-8c8e5619b79a.png)

Then, we apply a Cypress click to the button element, and:
 - the padding is no longer obeyed - the red element moves UP
 - the click then fails as the center of the button has moved behind the header

![image](https://user-images.githubusercontent.com/11148387/101978812-0bf00500-3c58-11eb-8e96-254790f50f09.png)

DOM inspection shows that the padding still exists, no attributes of the key elements appear to have changed.
It has been captured by the Cypress screenshots, it's clear to see that it is the click() that causes the move.
Inserting a pause() or wait() before the click means that no movement is seen until the click is called.
Clicking other elements also has the same effect.

### Desired behavior

No side-effects on click.
Needless to say, a real click does not have this effect, neither does the app ever exhibit this behavior in real life, only in Cypress.

### Test code to reproduce

This will take quite some effort to strip down but can be done if the above does not give any ""aha"" ideas, or private access can be given to a repo.

### Versions

Cypress 6.1.0 and many past versions at least to 3.x.x  (this has been a problem for a while)
Electron, Firefox and Chrome browser with Cypress.",bug
761471562,Cypress could not connect to Firefox. `Error: cannot open socket` displayed at beginning of running spec,"When running cypress with options '--headless --browser firefox', cypress halts at the start of the second spec with message:
```
Cypress could not connect to Firefox.

An unexpected error was received from Marionette connection:

Error: cannot open socket

To avoid this error, ensure sure that there are no other instances of Firefox launched by Cypress running.
```

This blocks running all specs in 'run' mode

it seems this problem resolved just for windows platform at #6392 but we experience same via docker and Linux. 
",bug
760723402,Test runner window when occluded affects test results,"### Current behavior
We have a ""global loading"" element in our app that covers the entire screen any time a component `fetch()`es data (well, it's more sophisticated than that, but it doesn't matter). I've noticed that if I put another window on top of Cypress's ""Test runner"" window, my tests will consistently fail, claiming something can't be clicked because it's being covered by another element (our ""global loading"" element). The same tests will consistently pass if the window isn't covered, even if it's only a few pixels that are exposed.

I believe this is Chromium detecting it's _fully_ covered and throttling itself somehow. However, I don't think it's only slowing its rate of processing things, I think it's fully halting things. If I add a `{ timeout: 10000 }` to my commands, they still fail when the window is covered.

I can also reproduce this by minimizing the window.

I've played around with covering the window with _a lot_ of different apps -- because at first I couldn't make it fail when SQL Server Management Studio was covering it up, but now I can't even reproduce that. That is, SSMS covering Cypress consistently fails the test now.

### Desired behavior
Cypress test runner window state should not affect the results

### Test code to reproduce
[I tried to put together a simple repro](https://github.com/OlsonDev/cypress-test-tiny), forking [cypress-test-tiny](https://github.com/cypress-io/cypress-test-tiny), but of course it passes regardless of windows covering it or being minimized. I'll have to come back to this; but I'm still submitting this now in case anyone has ideas.

### Versions
6.0.0, but probably earlier and 6.1.0",bug
760661061,cy.intercept does not properly stub when there are request headers,"### Current behavior
I am trying to stub out some API calls and I do not want to actually reach the API server. I am seeing that whenever I make a cross domain request with request headers the request actually reaches the destination server. In my example since I am trying to fetch from a non-existent domain the request times out.

### Desired behavior
The request should be stubbed without hitting the destination server. 

### Test code to reproduce
```js
it('Stubbing cross domain without headers works', () => {
  cy.intercept('get', '/endpoint', { body: 'hello' }).as('getUrl')
  cy.visit('https://example.com')
  cy.window().then(win => {
    fetch('https://someotherapiserverthatdoesntreallyexist.com/endpoint', {
      method: 'get'
    })
  })
  cy.wait('@getUrl')
})

it('Stubbing cross domain with headers does not work', () => {
  cy.intercept('get', '/endpoint', { body: 'hello' }).as('getUrl')
  cy.visit('https://example.com')
  cy.window().then(win => {
    fetch('https://someotherapiserverthatdoesntreallyexist.com/endpoint', {
      method: 'get',
      headers: {
        'Content-Type': 'application/json',
        Authorization: 'Bearer token'
      }
    })
  })
  cy.wait('@getUrl')
})
```

### Versions

Version 6.1.0
",bug
759939527,Alias for intercept is not working if overwriting cy.intercept command,"Cypress v6.1.0

```js
describe('intercept', () => {
  Cypress.Commands.overwrite('intercept', (intercept, ...args) => {
    return cy.log('intercept!').then(() => {
      return intercept(...args)
    })
  })

  it('is registered too late', () => {
    cy.visit('/')
    cy.intercept('/todos').as('todos')
    cy.wait('@todos')
  })
})
```

The alias `todos` is not recognized, but the routes table is showing it

<img width=""619"" alt=""Screen Shot 2020-12-08 at 9 35 57 PM"" src=""https://user-images.githubusercontent.com/2212006/101566668-5db93680-399d-11eb-8c84-80e88dd2990f.png"">

Note: even putting `cy.wait` into `cy.then` does not solve it - something is really off about this alias.",bug
759702599,Cypress never loads - blank GUI during cypress open,"### Current behavior
Cypress gui is loading and never ends :( 

I have tried to clear the project yarn files, yarn cache etc. and nothing helped
![image](https://user-images.githubusercontent.com/5715907/101529156-7bcc6a00-3990-11eb-9f78-b537aec92112.png)


### Debug logs
```  
cypress:server:windows creating electron window with options { backgroundColor: '#dfe2e4', width: 798, height: 548, minWidth: 458, minHeight: 400, x: 289, y: 312, type: 'INDEX', devTools: false, trackState: { width: 'appWidth', height: 'appHeight', x: 'appX', y: 'appY', devTools: 'isAppDevToolsOpen' }, onBlur: [Function: onBlur], onFocus: [Function: onFocus], onClose: [Function: onClose], show: true, webPreferences: { preload: 'C:\\Users\\Wojtek\\AppData\\Local\\Cypress\\Cache\\6.1.0\\Cypress\\resources\\app\\packages\\server\\lib\\ipc\\ipc.js', partition: null, webSecurity: false, nodeIntegration: false, contextIsolation: false, backgroundThrottling: false, backgroundColor: '#dfe2e4' }, url: 'file://C:\\Users\\Wojtek\\AppData\\Local\\Cypress\\Cache\\6.1.0\\Cypress\\resources\\app\\packages\\desktop-gui\\dist\\index.html', frame: true, contextMenu: false, recordFrameRate: null, onCrashed: [Function: onCrashed], onNewWindow: [Function: onNewWindow] } +0ms
  cypress:server:util:process_profiler current & mean memory and CPU usage by process group:
  cypress:server:util:process_profiler ÔöîÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÉ
  cypress:server:util:process_profiler Ôöé (index) Ôöé   group   Ôöé processCount Ôöé                  pids                   Ôöé cpuPercent Ôöé meanCpuPercent Ôöé memRssMb Ôöé meanMemRssMb Ôöé maxMemRssMb Ôöé
  cypress:server:util:process_profiler ÔöťÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöĄ
  cypress:server:util:process_profiler Ôöé    0    Ôöé  'other'  Ôöé      6       Ôöé '2456, 3184, 26556, 3400, 19032, 19356' Ôöé    1.63    Ôöé
      0.81      Ôöé  204.77  Ôöé    130.7     Ôöé   204.77    Ôöé
  cypress:server:util:process_profiler Ôöé    1    Ôöé 'cypress' Ôöé      1       Ôöé                 '19360'                 Ôöé    3.91    Ôöé
      1.95      Ôöé  164.41  Ôöé    124.03    Ôöé   164.41    Ôöé
  cypress:server:util:process_profiler Ôöé    2    Ôöé  'TOTAL'  Ôöé      7       Ôöé                   '-'                   Ôöé    5.54    Ôöé
      2.77      Ôöé  369.18  Ôöé    254.74    Ôöé   369.18    Ôöé
  cypress:server:util:process_profiler ÔööÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöś +10s
  cypress:server:util:process_profiler current & mean memory and CPU usage by process group:
  cypress:server:util:process_profiler ÔöîÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÉ
  cypress:server:util:process_profiler Ôöé (index) Ôöé   group   Ôöé processCount Ôöé                  pids                   Ôöé cpuPercent Ôöé meanCpuPercent Ôöé memRssMb Ôöé meanMemRssMb Ôöé maxMemRssMb Ôöé
  cypress:server:util:process_profiler ÔöťÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöĄ
  cypress:server:util:process_profiler Ôöé    0    Ôöé  'other'  Ôöé      6       Ôöé '2456, 3184, 26556, 5136, 25808, 25740' Ôöé    3.95    Ôöé
      1.86      Ôöé  205.24  Ôöé    155.55    Ôöé   205.24    Ôöé
  cypress:server:util:process_profiler Ôöé    1    Ôöé 'cypress' Ôöé      1       Ôöé                 '19360'                 Ôöé    0.48    Ôöé
      1.46      Ôöé  143.83  Ôöé    130.63    Ôöé   164.41    Ôöé
  cypress:server:util:process_profiler Ôöé    2    Ôöé  'TOTAL'  Ôöé      7       Ôöé                   '-'                   Ôöé    4.43    Ôöé
      3.32      Ôöé  349.07  Ôöé    286.18    Ôöé   369.18    Ôöé
  cypress:server:util:process_profiler ÔööÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöś +10s
  cypress:server:util:process_profiler current & mean memory and CPU usage by process group:
  cypress:server:util:process_profiler ÔöîÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÉ
  cypress:server:util:process_profiler Ôöé (index) Ôöé   group   Ôöé processCount Ôöé                  pids                   Ôöé cpuPercent Ôöé meanCpuPercent Ôöé memRssMb Ôöé meanMemRssMb Ôöé maxMemRssMb Ôöé
  cypress:server:util:process_profiler ÔöťÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöĄ
  cypress:server:util:process_profiler Ôöé    0    Ôöé  'other'  Ôöé      6       Ôöé '2456, 3184, 26556, 19540, 10936, 4696' Ôöé    3.06    Ôöé
      2.16      Ôöé  205.11  Ôöé    167.94    Ôöé   205.24    Ôöé
  cypress:server:util:process_profiler Ôöé    1    Ôöé 'cypress' Ôöé      1       Ôöé                 '19360'                 Ôöé    0.1     Ôöé
      1.12      Ôöé  146.98  Ôöé    134.72    Ôöé   164.41    Ôöé
  cypress:server:util:process_profiler Ôöé    2    Ôöé  'TOTAL'  Ôöé      7       Ôöé                   '-'                   Ôöé    3.15    Ôöé
      3.28      Ôöé  352.09  Ôöé    302.66    Ôöé   369.18    Ôöé
  cypress:server:util:process_profiler ÔööÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöś +10s
  cypress:server:util:process_profiler current & mean memory and CPU usage by process group:
  cypress:server:util:process_profiler ÔöîÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÉ
  cypress:server:util:process_profiler Ôöé (index) Ôöé   group   Ôöé processCount Ôöé                   pids                   Ôöé cpuPercent Ôöé meanCpuPercent Ôöé memRssMb Ôöé meanMemRssMb Ôöé maxMemRssMb Ôöé
  cypress:server:util:process_profiler ÔöťÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöĄ
  cypress:server:util:process_profiler Ôöé    0    Ôöé  'other'  Ôöé      6       Ôöé '2456, 3184, 26556, 26024, 22104, 15816' Ôöé    2.99    Ôöé      2.33      Ôöé  204.98  Ôöé    175.35    Ôöé   205.24    Ôöé
  cypress:server:util:process_profiler Ôöé    1    Ôöé 'cypress' Ôöé      1       Ôöé                 '19360'                  Ôöé    0.06    Ôöé      0.91      Ôöé  147.75  Ôöé    137.32    Ôöé   164.41    Ôöé
  cypress:server:util:process_profiler Ôöé    2    Ôöé  'TOTAL'  Ôöé      7       Ôöé                   '-'                    Ôöé    3.05    Ôöé      3.23      Ôöé  352.72  Ôöé    312.67    Ôöé   369.18    Ôöé
  cypress:server:util:process_profiler ÔööÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöś +10s
  cypress:server:util:process_profiler current & mean memory and CPU usage by process group:
  cypress:server:util:process_profiler ÔöîÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÉ
  cypress:server:util:process_profiler Ôöé (index) Ôöé   group   Ôöé processCount Ôöé                   pids                   Ôöé cpuPercent Ôöé meanCpuPercent Ôöé memRssMb Ôöé meanMemRssMb Ôöé maxMemRssMb Ôöé
  cypress:server:util:process_profiler ÔöťÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöĄ
  cypress:server:util:process_profiler Ôöé    0    Ôöé  'other'  Ôöé      6       Ôöé '2456, 3184, 26556, 12148, 20544, 16436' Ôöé    4.44    Ôöé      2.68      Ôöé  204.83  Ôöé    180.26    Ôöé   205.24    Ôöé
  cypress:server:util:process_profiler Ôöé    1    Ôöé 'cypress' Ôöé      1       Ôöé                 '19360'                  Ôöé    0.1     Ôöé      0.77      Ôöé  148.81  Ôöé    139.24    Ôöé   164.41    Ôöé
  cypress:server:util:process_profiler Ôöé    2    Ôöé  'TOTAL'  Ôöé      7       Ôöé                   '-'                    Ôöé    4.54    Ôöé      3.45      Ôöé  353.64  Ôöé    319.5     Ôöé   369.18    Ôöé
  cypress:server:util:process_profiler ÔööÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöś +10s
  cypress:server:util:process_profiler current & mean memory and CPU usage by process group:
  cypress:server:util:process_profiler ÔöîÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÉ
  cypress:server:util:process_profiler Ôöé (index) Ôöé   group   Ôöé processCount Ôöé                   pids                   Ôöé cpuPercent Ôöé meanCpuPercent Ôöé memRssMb Ôöé meanMemRssMb Ôöé maxMemRssMb Ôöé
  cypress:server:util:process_profiler ÔöťÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöĄ
  cypress:server:util:process_profiler Ôöé    0    Ôöé  'other'  Ôöé      6       Ôöé '2456, 3184, 26556, 10068, 25420, 10764' Ôöé    3.85    Ôöé      2.85      Ôöé  204.8   Ôöé    183.77    Ôöé   205.24    Ôöé
  cypress:server:util:process_profiler Ôöé    1    Ôöé 'cypress' Ôöé      1       Ôöé                 '19360'                  Ôöé    0.11    Ôöé      0.68      Ôöé  149.36  Ôöé    140.68    Ôöé   164.41    Ôöé
  cypress:server:util:process_profiler Ôöé    2    Ôöé  'TOTAL'  Ôöé      7       Ôöé                   '-'                    Ôöé    3.97    Ôöé      3.53      Ôöé  354.16  Ôöé    324.45    Ôöé   369.18    Ôöé
  cypress:server:util:process_profiler ÔööÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöś +10s
  cypress:server:util:process_profiler current & mean memory and CPU usage by process group:
  cypress:server:util:process_profiler ÔöîÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÉ
  cypress:server:util:process_profiler Ôöé (index) Ôöé   group   Ôöé processCount Ôöé                   pids                   Ôöé cpuPercent Ôöé meanCpuPercent Ôöé memRssMb Ôöé meanMemRssMb Ôöé maxMemRssMb Ôöé
  cypress:server:util:process_profiler ÔöťÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöĄ
  cypress:server:util:process_profiler Ôöé    0    Ôöé  'other'  Ôöé      6       Ôöé '2456, 3184, 26556, 16596, 12748, 26360' Ôöé    3.03    Ôöé      2.87      Ôöé  204.79  Ôöé    186.39    Ôöé   205.24    Ôöé
  cypress:server:util:process_profiler Ôöé    1    Ôöé 'cypress' Ôöé      1       Ôöé                 '19360'                  Ôöé    0.06    Ôöé      0.6       Ôöé  150.63  Ôöé    141.93    Ôöé   164.41    Ôöé
  cypress:server:util:process_profiler Ôöé    2    Ôöé  'TOTAL'  Ôöé      7       Ôöé                   '-'                    Ôöé    3.09    Ôöé      3.47      Ôöé  355.42  Ôöé    328.32    Ôöé   369.18    Ôöé
  cypress:server:util:process_profiler ÔööÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöś +10s
  cypress:server:util:process_profiler current & mean memory and CPU usage by process group:
  cypress:server:util:process_profiler ÔöîÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÉ
  cypress:server:util:process_profiler Ôöé (index) Ôöé   group   Ôöé processCount Ôöé                   pids                   Ôöé cpuPercent Ôöé meanCpuPercent Ôöé memRssMb Ôöé meanMemRssMb Ôöé maxMemRssMb Ôöé
  cypress:server:util:process_profiler ÔöťÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöĄ
  cypress:server:util:process_profiler Ôöé    0    Ôöé  'other'  Ôöé      6       Ôöé '2456, 3184, 26556, 10584, 23728, 19952' Ôöé    3.17    Ôöé      2.9       Ôöé  204.97  Ôöé    188.46    Ôöé   205.24    Ôöé
  cypress:server:util:process_profiler Ôöé    1    Ôöé 'cypress' Ôöé      1       Ôöé                 '19360'                  Ôöé    0.09    Ôöé      0.55      Ôöé  151.45  Ôöé    142.99    Ôöé   164.41    Ôöé
  cypress:server:util:process_profiler Ôöé    2    Ôöé  'TOTAL'  Ôöé      7       Ôöé                   '-'                    Ôöé    3.27    Ôöé      3.45      Ôöé  356.42  Ôöé    331.44    Ôöé   369.18    Ôöé
  cypress:server:util:process_profiler ÔööÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöś +10s
  cypress:server:util:process_profiler current & mean memory and CPU usage by process group:
  cypress:server:util:process_profiler ÔöîÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÉ
  cypress:server:util:process_profiler Ôöé (index) Ôöé   group   Ôöé processCount Ôöé                  pids                   Ôöé cpuPercent Ôöé meanCpuPercent Ôöé memRssMb Ôöé meanMemRssMb Ôöé maxMemRssMb Ôöé
  cypress:server:util:process_profiler ÔöťÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöĄ
  cypress:server:util:process_profiler Ôöé    0    Ôöé  'other'  Ôöé      6       Ôöé '2456, 3184, 26556, 9176, 15788, 20992' Ôöé    4.7     Ôöé
      3.08      Ôöé  205.4   Ôöé    190.15    Ôöé    205.4    Ôöé
  cypress:server:util:process_profiler Ôöé    1    Ôöé 'cypress' Ôöé      1       Ôöé                 '19360'                 Ôöé    0.06    Ôöé
      0.5       Ôöé  153.13  Ôöé     144      Ôöé   164.41    Ôöé
  cypress:server:util:process_profiler Ôöé    2    Ôöé  'TOTAL'  Ôöé      7       Ôöé                   '-'                   Ôöé    4.76    Ôöé
      3.58      Ôöé  358.53  Ôöé    334.15    Ôöé   369.18    Ôöé
  cypress:server:util:process_profiler ÔööÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöś +10s
  cypress:server:util:process_profiler current & mean memory and CPU usage by process group:
  cypress:server:util:process_profiler ÔöîÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÉ
  cypress:server:util:process_profiler Ôöé (index) Ôöé   group   Ôöé processCount Ôöé                  pids                   Ôöé cpuPercent Ôöé meanCpuPercent Ôöé memRssMb Ôöé meanMemRssMb Ôöé maxMemRssMb Ôöé
  cypress:server:util:process_profiler ÔöťÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöĄ
  cypress:server:util:process_profiler Ôöé    0    Ôöé  'other'  Ôöé      6       Ôöé '2456, 3184, 26556, 11288, 20788, 1076' Ôöé    3.29    Ôöé
      3.1       Ôöé  205.38  Ôöé    191.54    Ôöé    205.4    Ôöé
  cypress:server:util:process_profiler Ôöé    1    Ôöé 'cypress' Ôöé      1       Ôöé                 '19360'                 Ôöé    0.27    Ôöé
      0.48      Ôöé  149.29  Ôöé    144.48    Ôöé   164.41    Ôöé
  cypress:server:util:process_profiler Ôöé    2    Ôöé  'TOTAL'  Ôöé      7       Ôöé                   '-'                   Ôöé    3.56    Ôöé
      3.58      Ôöé  354.67  Ôöé    336.02    Ôöé   369.18    Ôöé
  cypress:server:util:process_profiler ÔööÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöś +10s
  cypress:server:util:process_profiler current & mean memory and CPU usage by process group:
  cypress:server:util:process_profiler ÔöîÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÉ
  cypress:server:util:process_profiler Ôöé (index) Ôöé   group   Ôöé processCount Ôöé                  pids                   Ôöé cpuPercent Ôöé meanCpuPercent Ôöé memRssMb Ôöé meanMemRssMb Ôöé maxMemRssMb Ôöé
  cypress:server:util:process_profiler ÔöťÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöĄ
  cypress:server:util:process_profiler Ôöé    0    Ôöé  'other'  Ôöé      6       Ôöé '2456, 3184, 26556, 15456, 9924, 20920' Ôöé    2.92    Ôöé
      3.09      Ôöé  205.37  Ôöé    192.69    Ôöé    205.4    Ôöé
  cypress:server:util:process_profiler Ôöé    1    Ôöé 'cypress' Ôöé      1       Ôöé                 '19360'                 Ôöé    0.1     Ôöé
      0.44      Ôöé  149.75  Ôöé    144.92    Ôöé   164.41    Ôöé
  cypress:server:util:process_profiler Ôöé    2    Ôöé  'TOTAL'  Ôöé      7       Ôöé                   '-'                   Ôöé    3.02    Ôöé
      3.53      Ôöé  355.12  Ôöé    337.61    Ôöé   369.18    Ôöé
  cypress:server:util:process_profiler ÔööÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöś +10s
  cypress:server:util:process_profiler current & mean memory and CPU usage by process group:
  cypress:server:util:process_profiler ÔöîÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÉ
  cypress:server:util:process_profiler Ôöé (index) Ôöé   group   Ôöé processCount Ôöé                  pids                   Ôöé cpuPercent Ôöé meanCpuPercent Ôöé memRssMb Ôöé meanMemRssMb Ôöé maxMemRssMb Ôöé
  cypress:server:util:process_profiler ÔöťÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöĄ
  cypress:server:util:process_profiler Ôöé    0    Ôöé  'other'  Ôöé      6       Ôöé '2456, 3184, 26556, 24156, 6296, 17140' Ôöé    3.69    Ôöé
      3.13      Ôöé  205.41  Ôöé    193.67    Ôöé   205.41    Ôöé
  cypress:server:util:process_profiler Ôöé    1    Ôöé 'cypress' Ôöé      1       Ôöé                 '19360'                 Ôöé    0.17    Ôöé
      0.42      Ôöé  150.66  Ôöé    145.36    Ôöé   164.41    Ôöé
  cypress:server:util:process_profiler Ôöé    2    Ôöé  'TOTAL'  Ôöé      7       Ôöé                   '-'                   Ôöé    3.86    Ôöé
      3.56      Ôöé  356.07  Ôöé    339.03    Ôöé   369.18    Ôöé
  cypress:server:util:process_profiler ÔööÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöś +10s
  cypress:server:util:process_profiler current & mean memory and CPU usage by process group:
  cypress:server:util:process_profiler ÔöîÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÉ
  cypress:server:util:process_profiler Ôöé (index) Ôöé   group   Ôöé processCount Ôöé                   pids                   Ôöé cpuPercent Ôöé meanCpuPercent Ôöé memRssMb Ôöé meanMemRssMb Ôöé maxMemRssMb Ôöé
  cypress:server:util:process_profiler ÔöťÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöĄ
  cypress:server:util:process_profiler Ôöé    0    Ôöé  'other'  Ôöé      6       Ôöé '2456, 3184, 26556, 25156, 23076, 15376' Ôöé    4.07    Ôöé      3.2       Ôöé  205.45  Ôöé    194.51    Ôöé   205.45    Ôöé
  cypress:server:util:process_profiler Ôöé    1    Ôöé 'cypress' Ôöé      1       Ôöé                 '19360'                  Ôöé    0.17    Ôöé      0.41      Ôöé  150.46  Ôöé    145.73    Ôöé   164.41    Ôöé
  cypress:server:util:process_profiler Ôöé    2    Ôöé  'TOTAL'  Ôöé      7       Ôöé                   '-'                    Ôöé    4.25    Ôöé      3.61      Ôöé  355.91  Ôöé    340.24    Ôöé   369.18    Ôöé
  cypress:server:util:process_profiler ÔööÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöś +10s
  cypress:server:util:process_profiler current & mean memory and CPU usage by process group:
  cypress:server:util:process_profiler ÔöîÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÉ
  cypress:server:util:process_profiler Ôöé (index) Ôöé   group   Ôöé processCount Ôöé                   pids                   Ôöé cpuPercent Ôöé meanCpuPercent Ôöé memRssMb Ôöé meanMemRssMb Ôöé maxMemRssMb Ôöé
  cypress:server:util:process_profiler ÔöťÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöĄ
  cypress:server:util:process_profiler Ôöé    0    Ôöé  'other'  Ôöé      6       Ôöé '2456, 3184, 26556, 25380, 10324, 15108' Ôöé    3.09    Ôöé      3.19      Ôöé  205.38  Ôöé    195.23    Ôöé   205.45    Ôöé
  cypress:server:util:process_profiler Ôöé    1    Ôöé 'cypress' Ôöé      1       Ôöé                 '19360'                  Ôöé    0.08    Ôöé      0.38      Ôöé  150.91  Ôöé    146.07    Ôöé   164.41    Ôöé
  cypress:server:util:process_profiler Ôöé    2    Ôöé  'TOTAL'  Ôöé      7       Ôöé                   '-'                    Ôöé    3.17    Ôöé      3.58      Ôöé  356.29  Ôöé    341.31    Ôöé   369.18    Ôöé
  cypress:server:util:process_profiler ÔööÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöś +10s
  cypress:server:util:process_profiler current & mean memory and CPU usage by process group:
  cypress:server:util:process_profiler ÔöîÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÉ
  cypress:server:util:process_profiler Ôöé (index) Ôöé   group   Ôöé processCount Ôöé                  pids                   Ôöé cpuPercent Ôöé meanCpuPercent Ôöé memRssMb Ôöé meanMemRssMb Ôöé maxMemRssMb Ôöé
  cypress:server:util:process_profiler ÔöťÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöĄ
  cypress:server:util:process_profiler Ôöé    0    Ôöé  'other'  Ôöé      6       Ôöé '2456, 3184, 26556, 12068, 8884, 20704' Ôöé    3.19    Ôöé
      3.19      Ôöé  205.37  Ôöé    195.87    Ôöé   205.45    Ôöé
  cypress:server:util:process_profiler Ôöé    1    Ôöé 'cypress' Ôöé      1       Ôöé                 '19360'                 Ôöé    0.19    Ôöé
      0.37      Ôöé  151.66  Ôöé    146.42    Ôöé   164.41    Ôöé
  cypress:server:util:process_profiler Ôöé    2    Ôöé  'TOTAL'  Ôöé      7       Ôöé                   '-'                   Ôöé    3.38    Ôöé
      3.56      Ôöé  357.03  Ôöé    342.29    Ôöé   369.18    Ôöé
  cypress:server:util:process_profiler ÔööÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö┤ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöś +10s
  cypress:server:util:process_profiler current & mean memory and CPU usage by process group:
  cypress:server:util:process_profiler ÔöîÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöČÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÉ
  cypress:server:util:process_profiler Ôöé (index) Ôöé   group   Ôöé processCount Ôöé                   pids                   Ôöé cpuPercent Ôöé meanCpuPercent Ôöé memRssMb Ôöé meanMemRssMb Ôöé maxMemRssMb Ôöé
  cypress:server:util:process_profiler ÔöťÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔö╝ÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöÇÔöĄ
  cypress:server:util:process_profiler Ôöé    0    Ôöé  'other'  Ôöé      6       Ôöé '2456, 3184, 26556, 15780, 11672, 25864' Ôöé    4.17    Ôöé      3.25      Ôöé  205.42  Ôöé    196.43    Ôöé   205.45    Ôöé
  cypress:server:util:process_profiler Ôöé    1    Ôöé 'cypress' Ôöé      1       Ôöé                 '19360'                  Ôöé    0.1     Ôöé      0.36      Ôöé  152.28  Ôöé    146.77    Ôöé   164.41    Ôöé
  cypress:server:util:process_profiler Ôöé    2    Ôöé  'TOTAL'  Ôöé      7       Ôöé                   '-'                    Ôöé    4.27    Ôöé      3.61      Ôöé  357.7   Ôöé    343.2     Ôöé   369.18    Ôöé
```

### Download method

- [ ] npm
- [x] yarn version 6.1.0
- [ ] Direct download
- [ ] other <!--Please specify-->

### Operating System

- [ ] Linux
- [ ] Mac
- [x] Windows 10 

### Other

- [x] I'm installing latest Cypress version <!--Please update to latest first 👉 https://on.cypress.io/changelog -->
- [ ] I'm behind a proxy <!--Configure your proxy first 👉 https://on.cypress.io/proxy-configuration -->
- [ ] This only occurs in CI <!--specify CI provider -->
",bug
758881922,cy.intercept does not handle response modification where only the header is modified (redirect),"Cypress v6.1.0 (`develop` branch)

the following redirect test changes the redirect location header 

```js
it.only('stubs the redirect', () => {
  // stub the redirect call and once it returns from the server
  // verify the target location and then change it to a safe ""/""
  cy.intercept('/getout', (req) => {
    req.reply((res) => {
      expect(res.statusCode).to.equal(302)
      // the server wants to redirect us to another domain
      expect(res.headers).to.have.property('location', 'https://www.cypress.io')
      res.headers.location = '/'
      // need to provide something for the updated ""res""
      // object to be used
      // res.send('stay here')
      // res.send()
    })
  })

  cy.get('#getout').click()
  cy.location('pathname').should('equal', '/') // redirect worked
})
```

## Reproduction

Branch `6.1.0` of https://github.com/cypress-io/cypress-example-recipes from https://github.com/cypress-io/cypress-example-recipes/pull/598 recipe examples/stubbing-spying__intercept spec file cypress/integration/redirect-spec.js

- install dependencies
- `cd examples/stubbing-spying__intercept`
- `npm start`

Now run Cypress with `npm run cypress:open` and pick the redirect spec

Without `res.send` or with `res.send()` the changed reply is not working

<img width=""1276"" alt=""Screen Shot 2020-12-07 at 4 52 47 PM"" src=""https://user-images.githubusercontent.com/2212006/101410362-36833c00-38ad-11eb-8f44-2e77ce99e5d5.png"">

With `res.send('stay here')` the updated location is working and we get redirected to `/`

<img width=""934"" alt=""Screen Shot 2020-12-07 at 4 52 25 PM"" src=""https://user-images.githubusercontent.com/2212006/101410409-49960c00-38ad-11eb-8e3a-edb3597874d3.png"">

I believe it should NOT be necessary to do `res.send` - the modified response header should be enough",bug
758468397,cy.wait timeouts on aborted xhr requests,"### Current behavior

Whenever there is something like this in app (pseudo code):

```js
var xhr = new XHR()
xhr.send()
xhr.abort() // <- POI
xhr = new XHR()
xhr.send()
```

and this in test:

```js
cy.intercept('...').as('xhr')
cy.visit('/')
cy.wait('@xhr')
```

cypress timeouts with  an error `Timed out retrying: cy.wait() timed out waiting 30000ms for the 1st response to the route: xhr. No response ever occurred.`

![image](https://user-images.githubusercontent.com/88868/101350868-68d66e80-3898-11eb-8e92-cc3229df5f5e.png)

As you can see on screenshot:

- in network tab there is aborted and follow up requests
- app renders response
- on a sidebar we can see that interception recognized the query (yellow marks)
- but somehow second requests still have spinning icon on left side

### Desired behavior

Page with app loads and works as expected, cypress should handle such cases as well

### Test code to reproduce

**index.html** - aka our app

```html
<!DOCTYPE html>
<html>
  <head>
    <title>demo</title>
  </head>
  <body>
    <button onclick=""good()"">good</button>
    <button onclick=""bad()"">bad</button>
    <script>
      function good() {
        const xhr = new XMLHttpRequest();
        xhr.open(""GET"", ""https://jsonplaceholder.typicode.com/todos/1"");
        xhr.responseType = ""json"";
        xhr.send();
        xhr.onload = () => {
          document.body.innerHTML += ""<pre>"" + JSON.stringify(xhr.response) + ""</pre>"";
        };
      }
      function bad() {
        let xhr = new XMLHttpRequest();
        xhr.open(""GET"", ""https://jsonplaceholder.typicode.com/todos/1"");
        xhr.responseType = ""json"";
        xhr.send();
        xhr.abort();
        xhr = new XMLHttpRequest();
        xhr.open(""GET"", ""https://jsonplaceholder.typicode.com/todos/1"");
        xhr.responseType = ""json"";
        xhr.send();
        xhr.onload = () => {
          document.body.innerHTML += ""<pre>"" + JSON.stringify(xhr.response) + ""</pre>"";
        };
      }
    </script>
  </body>
</html>
```

**demo.spec.js**

```js
describe(""demo"", () => {
  it(""should handle aborted requests"", () => {
    cy.intercept(""https://jsonplaceholder.typicode.com/todos/1"").as(""xhr"");
    cy.visit(""http://localhost:3000"");
    cy.get(""button"").contains(""bad"").click();
    cy.wait(""@xhr"");
  });
});
```

### Versions

cypress - 6.0.1
node - 12.8.3
chrome - 87.0.4280.88
os - macos 11.0.1 (20B29)
ci provider - undefined

PS: not sure but it might be related to this [PR](https://github.com/cypress-io/cypress/pull/2969) which was made by @brian-mann ",bug
756263394,After version 5.5 Stripe Checkout tests break out of the iframe,"### Current behavior
When testing a Stripe Checkout workflow the `stripe.redirectToCheckout` or the redirected page breaks out of the iframe and instead of completing the test just hangs.

### Desired behavior
I'd expect the application to not break out of the iframe and the test runner to continue working even after being redirected to the Stripe Checkout page. (Like it did with version 5.5.0 and below)

### Test code to reproduce
Here's a link to a repo with a simple React app to reproduce the issue.
https://github.com/kide-science/cypress-test-tiny

Unfortunately I was not able to reproduce the issue with vanilla JS. Stripe seems to do the redirect with:
```
window.top.location.href = redirectUrl
```
Setting the `top.location.href` seems to work without breaking out of the iframe, which leads me to believe that there are additional checks before the redirect or on the Stripe hosted Checkout page after the redirect that cause the test to break out of the iframe.

### Versions
Cypress version: 6.0.1
Last known working Cypress version: 5.5.0
Browser: Chrome 87
MacOS Mojave",bug
756105856,Cannot login to dashboard from Test Runner using 'Log in with Email' option,"### Current behavior

Logging in to dashboard via test runner and selecting 'Log in with Email' results in blank screen in Chrome.

### Desired behavior
Should be able to enter credentials and login

### Test code to reproduce

1. Start Test Runner
2. Select 'Log in'
3. When browser opens select 'Log in with email' option
4. Get blank screen

F5 results in 404 screen for the URL https://dashboard.cypress.io/test-runner-login/email

### Versions
Cypress 6.0.1, Chrome 86",bug
754883505,cy.intercept can leak from one test to another,"Cypress v6.0.1 branch `issue-8999`

While testing the solution to https://github.com/cypress-io/cypress/issues/8934 I stumbled on a weird situation that seems to occur pretty often.

The page only has an image resource

```html
<img src=""images/tiger.jpg"">
```

There are two tests, but they both create an intercept with the same alias `image`

https://github.com/cypress-io/cypress-example-recipes/blob/6.1.0/examples/stubbing-spying__intercept/cypress/integration/image-spec.js#L4-L18

```js
it.only('spies on loading a static image', () => {
  cy.intercept('/images').as('image')
  cy.visit('/pics.html')
  cy.wait('@image')

  // reload the page, it should send another request
  cy.reload()
  cy.wait('@image')
})

it.only('spies on loading a static image (2nd test)', () => {
  cy.intercept('/images').as('image')
  cy.visit('/pics.html')
  cy.wait('@image')
})
```

I noticed that sometimes the second test shows 2 intercepts for `image`, see the gif below

![leaking-intercept](https://user-images.githubusercontent.com/2212006/100821014-7e254600-341d-11eb-89c7-8ba93557daaa.gif)

If I rename the alias so that every test has its own, then I do not see anything suspicious. Might be that an alias can leak from test to test if the names match?

",bug
753649960,Test fails as a result of a visible element being deemed not visible.,"### Current behavior
Cypress fails a test indicating that an element is not visible, but the element is actually visible onscreen.

### Desired behavior
The test passes because the element is visible.

### Test code to reproduce
```js
context('Visibility Issue', function () {
  it('Test', function () {
    cy.visit('https://play.vidyard.com/EmrX1jweW4rRGPRJEQeqtn?first_frame=1');
    cy.wait(5000); // Just to make sure everything is loaded.
    cy.contains('Cypress is amazing!')
      .should('be.visible');
  });
});
```
![image](https://user-images.githubusercontent.com/62152998/100639520-44601c80-3303-11eb-8475-acd447c48bd9.png)

The element is clearly visible onscreen, yet this test fails because it says that the element is covered by another element. 🤷‍♂️ 

### Versions

This occurs in Cypress 5.1.0 and 6.0.0 in Chrome 87, Firefox 82, Edge, 87, and Electron 87 on macOS 10.15.7.
",bug
752337961,intercept leaks between tests when combined with aliases,"### Current behavior
Using aliases in combination with intercept causes tests to interfere with other tests regularly.

### Desired behavior
Intercept is cleaned up properly between tests.

### Test code to reproduce
The below test will reproduce this. For me it reproduces it about 60% of the time. I can reproduce it 100% of the time in the closed source test where I encountered the issue, perhaps because it has a lot more assertions. I suppose it may depend on your hardware.

It seems that the error disappears if I clear cookies in `afterEach`.

```ts
const url = 'https://www.cypress.io/'
const dummyRequest = () =>
  cy.request({
    url,
  })

context('InterceptBug', () => {
  beforeEach(() => {
    dummyRequest().as('home')
    cy.visit(url)
  })
  // afterEach(() => {
  //   cy.clearCookies()
  // })

  it('shows the logo', () => {
    cy.get('[alt=""Cypress.io""]').should('exist')
  })
  const navigate = () => {
    cy.get('[alt=""Cypress.io""]').should('exist')

    // The second time this is called, this sometimes triggers an additional
    // error: `Cannot read property 'fireChangeEvent' of undefined`
    // Other times it will fail on the previous selector with the (assert)
    // error: `expected undefined to exist`
    // I figured those are different bugs, so consider them out of scope for
    // this issue.
    cy.intercept(url).as('navigation')

    cy.contains('Features').click({
      force: true,
    })

    cy.wait('@navigation')

    // If the below visit is removed the test should succeed most of the time
    cy.visit(url)
  }
  it('allows navigating', navigate)
  it('allows navigating2 very irregularly fails', navigate)
  const useHomeAlias = () => {
    cy.get<string>('@home').then((response) => {
      // do something with response
      dummyRequest()
    })
  }
  // cy.get() could not find a registered alias for: @home.
  // You have not aliased anything yet.
  it('use home alias fails', useHomeAlias)
  it('use home alias succeeds', useHomeAlias)
})

export {}
```

### Versions

Cypress version 6.0.0, N/A, Chrome 87, macOS Catalina, N/A

Possibly related issues:

- https://github.com/cypress-io/cypress/issues/8926
- https://github.com/cypress-io/cypress/issues/9170
- https://github.com/cypress-io/cypress/issues/9406",bug
752034188,cy.intercept() breaks uploaded image,"### Current behavior
When using cy.intercept(), an image uploaded has incorrect size and doesn't recognized as image. It's almost 2x more in size than original image.

### Desired behavior
An image uploaded should be the same as the original image.

### Test code to reproduce
Please clone and try: https://github.com/AlexCSR/cypress-intercept-buffer-bug

### Versions
Cypress: 6.0.0

- - -
This issue looks similar to #9166 and only faced with cy.route2() / cy.intercept(), but not with cy.route().

",bug
751157013,cy.intercept url change not detected during file watching in Cypress open,"### Current behavior

This issue occurred migrating the Cypress RWA from `cy.route` to `cy.intercept`.

A `cy.route` with a minimatch is converted to use `cy.intercept`:

Note:  Two aliases are defined against the same path (/users)

```js
beforeEach(function () {
    cy.intercept(""GET"", ""/users"").as(""allUsers"");
    cy.intercept(""GET"", ""/users/search*"").as(""usersSearch"");
})
```

When run in open mode the test fails:


![Screen Shot 2020-11-25 at 4 26 11 PM](https://user-images.githubusercontent.com/21967/100287927-3db85a80-2f3b-11eb-8960-587fee47b51b.png)


Migrating from `cy.route` to `cy.intercept` requires a glob-match (`**`) to be added to the beginning of the route.

The glob-match is added **without stopping the current run** and the file is saved:

```js
beforeEach(function () {
    cy.intercept(""GET"", ""/users"").as(""allUsers"");
    cy.intercept(""GET"", ""**/users/search*"").as(""usersSearch"");
})
```

The browser refreshes and fails against a different alias:

![Screen Shot 2020-11-25 at 4 31 59 PM](https://user-images.githubusercontent.com/21967/100288219-d5b64400-2f3b-11eb-880b-2930515c2533.png)

**Solution** Stop the current run and start a fresh run, where the glob-match is honored and the tests pass as expected

![Screen Shot 2020-11-25 at 4 36 16 PM](https://user-images.githubusercontent.com/21967/100288474-5d03b780-2f3c-11eb-8f8d-f8d6cb49b5ff.png)


A detailed demo of the issue and the solution is in this Loom:

https://www.loom.com/share/33778ef182bd489c80efa2d941e4e9f1

### Desired behavior

When a glob-match is added to a `cy.intercept` the test runner should reflect that code change during the current run.

### Test code to reproduce

See the Loom video and this diff in the RWA against the `new-transactions.spec.ts` where it can be reproduced: https://github.com/cypress-io/cypress-realworld-app/commit/504652c4561db611d6c54a8a40cdd3fea4db6bb1

### Versions

6.0.0
",bug
750743971,5.4.0 Regression: TypeError: TsconfigPaths.loadConfig if not a function,"Cypress is crashing with following message:
![obraz](https://user-images.githubusercontent.com/34089686/100222015-c7efc700-2f19-11eb-8b78-5de188abf253.png)

The same in testrunner:
![obraz](https://user-images.githubusercontent.com/34089686/100222700-c5da3800-2f1a-11eb-84be-8c32acaf7348.png)

This test file is running correctly in cypress 5.3.0 version and lower.
Please help me!

### Test code to reproduce
package.json file:

```json
{
  ""name"": ""sa-portal"",
  ""homepage"": ""http://localhost:3000/SOLOCOOPREFIX"",
  ""version"": ""0.1.0"",
  ""private"": true,
  ""dependencies"": {
    ""@craco/craco"": ""^3.4.1"",
    ""@date-io/moment"": ""^1.1.0"",
    ""@material-ui/core"": ""^3.9.2"",
    ""@material-ui/icons"": ""^4.5.1"",
    ""@rematch/core"": ""^1.4.0"",
    ""@rematch/select"": ""^2.0.5"",
    ""@types/jest"": ""24.0.0"",
    ""@types/node"": ""10.12.24"",
    ""@types/react"": ""16.8.2"",
    ""@types/react-dom"": ""16.8.0"",
    ""@types/react-select"": ""^3.0.0"",
    ""axios"": ""^0.19.0"",
    ""brace"": ""^0.11.1"",
    ""classnames"": ""^2.2.6"",
    ""connected-react-router"": ""^6.3.0"",
    ""file-saver"": ""^2.0.1"",
    ""js-cookie"": ""^2.2.0"",
    ""jsoneditor"": ""^9.0.3"",
    ""lodash"": ""^4.17.19"",
    ""ls"": ""^0.2.1"",
    ""material-ui-pickers"": ""^2.2.1"",
    ""memoize-one"": ""^5.1.1"",
    ""mocha"": ""5.2.0"",
    ""moment"": ""^2.24.0"",
    ""object-sizeof"": ""^1.6.0"",
    ""qs"": ""^6.6.0"",
    ""react"": ""^16.8.1"",
    ""react-diff-viewer"": ""^3.0.1"",
    ""react-dnd"": ""^9.3.2"",
    ""react-dnd-html5-backend"": ""^9.3.2"",
    ""react-dom"": ""^16.8.1"",
    ""react-helmet"": ""^5.2.1"",
    ""react-json-view"": ""^1.19.1"",
    ""react-redux"": ""^6.0.0"",
    ""react-router"": ""^5.1.2"",
    ""react-router-dom"": ""^5.1.2"",
    ""react-scripts"": ""^2.1.8"",
    ""react-select"": ""^3.0.4"",
    ""react-sizeme"": ""^2.5.2"",
    ""react-xml-viewer"": ""^1.1.0"",
    ""redux-form"": ""^8.3.6"",
    ""reselect"": ""^4.0.0"",
    ""rimraf"": ""^3.0.0"",
    ""styled-components"": ""^4.1.3"",
    ""typescript"": ""^4.1.2"",
    ""uuid"": ""^7.0.3"",
    ""yargs"": ""^14.2.0""
  },
  ""scripts"": {
    ""start"": ""craco start"",
    ""build"": ""craco build"",
    ""build:test"": ""cross-env PUBLIC_URL=/ craco build"",
    ""deploy"": ""npm run build && node copyExtraFiles.js"",
    ""test"": ""craco test"",
    ""eject"": ""react-scripts eject"",
    ""lint"": ""tslint --project tsconfig.json"",
    ""ts"": ""tsc -p tsconfig.lint.json"",
    ""cypress:open"": ""cypress open"",
    ""cypress:run"": ""cypress run"",
    ""cypress:00"": ""cypress run -s cypress/endToEndTests/00*.js --browser chrome"",
    ""cypress:01"": ""cypress run -s cypress/endToEndTests/01*.js --browser chrome"",
    ""cypress:02"": ""cypress run -s cypress/endToEndTests/02*.js --browser chrome"",
    ""cypress:03"": ""cypress run -s cypress/endToEndTests/03*.js --browser chrome"",
    ""cypress:04"": ""cypress run -s cypress/endToEndTests/04*.js --browser chrome"",
    ""cypress:05"": ""cypress run -s cypress/endToEndTests/05*.js --browser chrome"",
    ""cypress:06"": ""cypress run -s cypress/endToEndTests/06*.js --browser chrome"",
    ""cypress:07"": ""cypress run -s cypress/endToEndTests/07*.js --browser chrome"",
    ""cypress:08"": ""cypress run -s cypress/endToEndTests/08*.js --browser chrome"",
    ""cypress:09"": ""cypress run -s cypress/endToEndTests/09*.js --browser chrome"",
    ""cypress:10"": ""cypress run -s cypress/endToEndTests/10*.js --browser chrome"",
    ""cypress:11"": ""cypress run -s cypress/endToEndTests/11*.js --browser chrome"",
    ""cypress:12"": ""cypress run -s cypress/endToEndTests/12*.js --browser chrome"",
    ""cypress:13"": ""cypress run -s cypress/endToEndTests/13*.js --browser chrome"",
    ""cypress:14"": ""cypress run -s cypress/endToEndTests/14*.js --browser chrome"",
    ""cypress:15"": ""cypress run -s cypress/endToEndTests/15*.js --browser chrome"",
    ""cypress:16"": ""cypress run -s cypress/endToEndTests/16*.js --browser chrome"",
    ""cypress:17"": ""cypress run -s cypress/endToEndTests/17*.js --browser chrome"",
    ""cypress:18"": ""cypress run -s cypress/endToEndTests/18*.js --browser chrome"",
    ""cypress:19"": ""cypress run -s cypress/endToEndTests/19*.js --browser chrome"",
    ""cypress:20"": ""cypress run -s cypress/endToEndTests/20*.js --browser chrome"",
    ""cypress:21"": ""cypress run -s cypress/endToEndTests/21*.js --browser chrome"",
    ""cypress:22"": ""cypress run -s cypress/endToEndTests/22*.js --browser chrome"",
    ""cypress:23"": ""cypress run -s cypress/endToEndTests/23*.js --browser chrome"",
    ""cypress:24"": ""cypress run -s cypress/endToEndTests/24*.js --browser chrome"",
    ""cypress:25"": ""cypress run -s cypress/endToEndTests/25*.js --browser chrome"",
    ""cypress:26"": ""cypress run -s cypress/endToEndTests/26*.js --browser chrome"",
    ""cypress:27"": ""cypress run -s cypress/endToEndTests/27*.js --browser chrome"",
    ""cypress:28"": ""cypress run -s cypress/endToEndTests/28*.js --browser chrome"",
    ""cypress:29"": ""cypress run -s cypress/endToEndTests/29*.js --browser chrome"",
    ""cypress:30"": ""cypress run -s cypress/endToEndTests/30*.js --browser chrome"",
    ""cypress:31"": ""cypress run -s cypress/endToEndTests/31*.js --browser chrome"",
    ""cypress:32"": ""cypress run -s cypress/endToEndTests/32*.js --browser chrome"",
    ""cypress:33"": ""cypress run -s cypress/endToEndTests/33*.js --browser chrome"",
    ""cypress:34"": ""cypress run -s cypress/endToEndTests/34*.js --browser chrome"",
    ""cypress:35"": ""cypress run -s cypress/endToEndTests/35*.js --browser chrome"",
    ""cypress:36"": ""cypress run -s cypress/endToEndTests/36*.js --browser chrome"",
    ""cypress:37"": ""cypress run -s cypress/endToEndTests/37*.js --browser chrome"",
    ""cypress:38"": ""cypress run -s cypress/endToEndTests/38*.js --browser chrome"",
    ""cypress:39"": ""cypress run -s cypress/endToEndTests/39*.js --browser chrome"",
    ""cypress:40"": ""cypress run -s cypress/endToEndTests/40*.js --browser chrome"",
    ""cypress:41"": ""cypress run -s cypress/endToEndTests/41*.js --browser chrome"",
    ""cypress:42"": ""cypress run -s cypress/endToEndTests/42*.js --browser chrome"",
    ""cypress:43"": ""cypress run -s cypress/endToEndTests/43*.js --browser chrome"",
    ""cypress:44"": ""cypress run -s cypress/endToEndTests/44*.js --browser chrome"",
    ""cypress:45"": ""cypress run -s cypress/endToEndTests/45*.js --browser chrome"",
    ""cypress:46"": ""cypress run -s cypress/endToEndTests/46*.js --browser chrome"",
    ""cypress:47"": ""cypress run -s cypress/endToEndTests/47*.js --browser chrome"",
    ""cypress:48"": ""cypress run -s cypress/endToEndTests/48*.js --browser chrome"",
    ""cypress:49"": ""cypress run -s cypress/endToEndTests/49*.js --browser chrome"",
    ""cypress:50"": ""cypress run -s cypress/endToEndTests/50*.js --browser chrome"",
    ""cypress:51"": ""cypress run -s cypress/endToEndTests/51*.js --browser chrome"",
    ""cypress:52"": ""cypress run -s cypress/endToEndTests/52*.js --browser chrome"",
    ""cypress:53"": ""cypress run -s cypress/endToEndTests/53*.js --browser chrome"",
    ""cypress:54"": ""cypress run -s cypress/endToEndTests/54*.js --browser chrome"",
    ""cypress:55"": ""cypress run -s cypress/endToEndTests/55*.js --browser chrome"",
    ""cypress:56"": ""cypress run -s cypress/endToEndTests/56*.js --browser chrome"",
    ""cypress:57"": ""cypress run -s cypress/endToEndTests/57*.js --browser chrome"",
    ""cypress:58"": ""cypress run -s cypress/endToEndTests/58*.js --browser chrome"",
    ""cypress:runChrome"": ""node editProgramsDates.js && cypress run --browser chrome"",
    ""cypress:runFirefox"": ""node editProgramsDates.js && cypress run --browser firefox"",
    ""cypress:runElectron"": ""node editProgramsDates.js && cypress run --browser electron --headed"",
    ""editDates"": ""node editProgramsDates.js""
  },
  ""eslintConfig"": {
    ""extends"": ""react-app""
  },
  ""browserslist"": [
    "">0.2%"",
    ""not dead"",
    ""not ie <= 11"",
    ""not op_mini all""
  ],
  ""devDependencies"": {
    ""@types/axios"": ""^0.14.0"",
    ""@types/classnames"": ""^2.2.7"",
    ""@types/file-saver"": ""^2.0.0"",
    ""@types/js-cookie"": ""^2.2.2"",
    ""@types/jsoneditor"": ""^8.6.0"",
    ""@types/lodash"": ""^4.14.121"",
    ""@types/qs"": ""^6.5.1"",
    ""@types/react-helmet"": ""^5.0.8"",
    ""@types/react-redux"": ""^6.0.10"",
    ""@types/react-router"": ""^5.1.4"",
    ""@types/react-router-dom"": ""^5.1.3"",
    ""@types/redux-form"": ""^8.1.1"",
    ""@types/styled-components"": ""^4.1.8"",
    ""@types/uuid"": ""^7.0.2"",
    ""babel-plugin-styled-components"": ""^1.10.0"",
    ""cross-env"": ""^5.2.0"",
    ""cypress"": ""^6.0.0"",
    ""cypress-file-upload"": ""^3.2.0"",
    ""cypress-multi-reporters"": ""^1.4.0"",
    ""husky"": ""^1.3.1"",
    ""lint-staged"": ""^8.1.3"",
    ""mocha-junit-reporter"": ""^2.0.0"",
    ""mochawesome"": ""^4.1.0"",
    ""mochawesome-merge"": ""^2.1.0"",
    ""mochawesome-report-generator"": ""^5.1.0"",
    ""prettier"": ""^1.16.4"",
    ""servor"": ""^2.2.1"",
    ""tsconfig-paths-webpack-plugin"": ""^3.2.0"",
    ""tslint"": ""^5.12.1"",
    ""tslint-config-prettier"": ""^1.18.0"",
    ""tslint-eslint-rules"": ""^5.4.0"",
    ""tslint-microsoft-contrib"": ""^6.0.0"",
    ""tslint-plugin-prettier"": ""^2.0.1"",
    ""tslint-react"": ""^3.6.0"",
    ""typescript-styled-plugin"": ""^0.13.0"",
    ""typescript-tslint-plugin"": ""^0.3.1""
  },
  ""husky"": {
    ""hooks"": {
      ""pre-commit"": ""lint-staged""
    }
  }
}
```

index.js file:

```js
import './commands'

const addContext = require('mochawesome/addContext')

Cypress.on('test:after:run', (test, runnable) => {
  if (test.state === 'failed') {
    const screenshotFileName = `${runnable.parent.title} -- ${test.title} (failed).png`
    addContext({ test }, `assets/${Cypress.spec.name}/${screenshotFileName}`)
  }
})

Cypress.on('window:before:load', function (win) {
  const original = win.EventTarget.prototype.addEventListener

  win.EventTarget.prototype.addEventListener = function () {
    if (arguments && arguments[0] === 'beforeunload') {
      return
    }
    return original.apply(this, arguments)
  }

  Object.defineProperty(win, 'onbeforeunload', {
    get: function () { },
    set: function () { }
  })
})
```

tsconfig-paths.json file:

```json
{
  ""compilerOptions"": {
    ""baseUrl"": ""./"",
    ""paths"": {
      ""src/*"": [""src/*""]
    }
  }
}
```

tsconfig.json file:

```json
{
  ""extends"": ""./tsconfig-paths.json"",
  ""compilerOptions"": {
    ""target"": ""es2016"",
    ""lib"": [
      ""dom"",
      ""dom.iterable"",
      ""esnext""
    ],
    ""allowJs"": true,
    ""skipLibCheck"": true,
    ""esModuleInterop"": true,
    ""allowSyntheticDefaultImports"": true,
    ""strict"": true,
    ""forceConsistentCasingInFileNames"": true,
    ""module"": ""esnext"",
    ""moduleResolution"": ""node"",
    ""resolveJsonModule"": true,
    ""isolatedModules"": true,
    ""noEmit"": true,
    ""jsx"": ""preserve""
  },
  ""plugins"": [
    {
      ""name"": ""typescript-styled-plugin""
    },
    {
      ""name"": ""typescript-tslint-plugin"",
      ""alwaysShowRuleFailuresAsWarnings"": false,
      ""ignoreDefinitionFiles"": true,
      ""configFile"": ""./tslint.json"",
      ""disableNoUnusedVariableRule"": true,
      ""suppressWhileTypeErrorsPresent"": false,
      ""mockTypeScriptVersion"": false
    }
  ],
  ""include"": [
    ""src""
  ]
}
```

### Versions
node: 14.15.1
typescript: 4.1.2
cypress: 5.4.0 and higher
windows10 and MacOS

Last working cypress version: 5.3.0

",bug
749853637,cy.intercept does not work with lowercase HTTP methods,"Cypress v6.0.0 with new `cy.intercept` should match the behavior of `cy.route`

* it should understand both lowercase and uppercase HTTP methods

Reproducible example from https://github.com/cypress-io/cypress-example-recipes/tree/get-vs-GET

file examples/stubbing-spying__intercept/cypress/integration/spy-on-fetch-spec.js

```js
describe.only('get vs GET', () => {
  context('cy.route', () => {
    let polyfill

    // grab fetch polyfill from remote URL, could be also from a local package
    before(() => {
      const polyfillUrl = 'https://unpkg.com/unfetch/dist/unfetch.umd.js'

      cy.request(polyfillUrl)
      .then((response) => {
        polyfill = response.body
      })
    })

    it('works with GET', function () {
      cy.server()
      cy.route('get', '/favorite-fruits').as('fruits')
      cy.visit('/', {
        onBeforeLoad (win) {
          delete win.fetch
          win.eval(polyfill)
          win.fetch = win.unfetch
        },
      })

      cy.wait('@fruits')
    })

    it('works with get', function () {
      cy.server()
      cy.route('get', '/favorite-fruits').as('fruits')
      cy.visit('/', {
        onBeforeLoad (win) {
          delete win.fetch
          win.eval(polyfill)
          win.fetch = win.unfetch
        },
      })

      cy.wait('@fruits')
    })
  })

  context('cy.intercept', () => {
    it('works with GET', function () {
      cy.intercept('GET', '/favorite-fruits').as('fruits')
      cy.visit('/')

      cy.wait('@fruits')
    })

    // NOTE: does NOT work with ""get""
    it.skip('works with get', function () {
      cy.intercept('get', '/favorite-fruits').as('fruits')
      cy.visit('/')

      cy.wait('@fruits')
    })
  })
})
```

if we run just the skipped test

```js
it.only('works with get', function () {
  cy.intercept('get', '/favorite-fruits').as('fruits')
  cy.visit('/')

  cy.wait('@fruits')
})
```

The wait times out

![](https://user-images.githubusercontent.com/2212006/100122035-0ff1e980-2e47-11eb-9dd9-a1d364508cc0.png)

The network call does happen

![](https://user-images.githubusercontent.com/2212006/100122144-15e7ca80-2e47-11eb-9f5d-9390a9937deb.png)

",bug
749666505,cy.get('@aliasOfIntercept) return null,"<!-- :wave: Use the template below to report a bug. Fill in as much info as possible. 

Have a question? Start a new discussion :point_right: https://github.com/cypress-io/cypress/discussions

As an open source project with a small maintainer team, it may take some time for your issue to be addressed. Please be patient and we will respond as soon as we can. :pray: -->

### Current behavior
Till now (before v6) i could get data eg `request.body` using `cy.get(aliasOf cy.route)` if request occurs.  Now I get on the same code which works before.

```
Timed out retrying: cy.its() errored because your subject is: null. You cannot access any properties such as request on a null value.
If you expect your subject to be null, then add an assertion such as:
cy.wrap(null).should('be.null')
```

### Desired behavior
I should get data from request

### Test code to reproduce
```js
 cy.intercept('PATCH', ${uriPatch}`).as('update_success')
 cy.wait('@update_success').its('response.statusCode').should('eq', 200)
        if (Array.isArray(bodyJson)) {
            cy.get('@update_success').its('request.body').should('deep.equal', bodyJson)    <- here I get this null, works till v6
        } else {
            cy.get('@update_success').its('request.body').should('deep.include', bodyJson)  <- here I get this null, works till v6
        }
```

### Versions
6.0.0

",bug
749110611,"Crash when using --config ignoreTestFiles="""" CLI argument","Cypress v5.6.0 on Mac

Command `npx cypress run --config ignoreTestFiles=""""` runs fine

```
$ npx cypress run --config ignoreTestFiles=""""

====================================================================================================

  (Run Starting)

  ┌────────────────────────────────────────────────────────────────────────────────────────────────┐
  │ Cypress:    5.6.0                                                                              │
  │ Browser:    Electron 85 (headless)                                                             │
  │ Specs:      1 found (spec.js)                                                                  │
  └────────────────────────────────────────────────────────────────────────────────────────────────┘


────────────────────────────────────────────────────────────────────────────────────────────────────
                                                                                                    
  Running:  spec.js 
```

But when trying to do the same with `cypress open`, the desktop-gui flashes and immediately crashes

```
$ npx cypress open --config ignoreTestFiles=""""
TypeError: Expected pattern to be a non-empty string
    at picomatch (/Users/gleb/Library/Caches/Cypress/5.6.0/Cypress.app/Contents/Resources/app/packages/server/node_modules/picomatch/lib/picomatch.js:48:11)
    at createPattern (/Users/gleb/Library/Caches/Cypress/5.6.0/Cypress.app/Contents/Resources/app/packages/server/node_modules/anymatch/index.js:27:18)
    at /Users/gleb/Library/Caches/Cypress/5.6.0/Cypress.app/Contents/Resources/app/packages/server/node_modules/anymatch/index.js:89:43
    at Array.map (<anonymous>:null:null)
    at anymatch (/Users/gleb/Library/Caches/Cypress/5.6.0/Cypress.app/Contents/Resources/app/packages/server/node_modules/anymatch/index.js:89:28)
    at FSWatcher._isIgnored (/Users/gleb/Library/Caches/Cypress/5.6.0/Cypress.app/Contents/Resources/app/packages/server/node_modules/chokidar/index.js:754:25)
    at FsEventsHandler._addToFsEvents (/Users/gleb/Library/Caches/Cypress/5.6.0/Cypress.app/Contents/Resources/app/packages/server/node_modules/chokidar/lib/fsevents-handler.js:446:18)

TypeError: Expected pattern to be a non-empty string
    at picomatch (/Users/gleb/Library/Caches/Cypress/5.6.0/Cypress.app/Contents/Resources/app/packages/server/node_modules/picomatch/lib/picomatch.js:48:11)
    at createPattern (/Users/gleb/Library/Caches/Cypress/5.6.0/Cypress.app/Contents/Resources/app/packages/server/node_modules/anymatch/index.js:27:18)
    at /Users/gleb/Library/Caches/Cypress/5.6.0/Cypress.app/Contents/Resources/app/packages/server/node_modules/anymatch/index.js:89:43
    at Array.map (<anonymous>:null:null)
    at anymatch (/Users/gleb/Library/Caches/Cypress/5.6.0/Cypress.app/Contents/Resources/app/packages/server/node_modules/anymatch/index.js:89:28)
    at FSWatcher._isIgnored (/Users/gleb/Library/Caches/Cypress/5.6.0/Cypress.app/Contents/Resources/app/packages/server/node_modules/chokidar/index.js:754:25)
    at FsEventsHandler._addToFsEvents (/Users/gleb/Library/Caches/Cypress/5.6.0/Cypress.app/Contents/Resources/app/packages/server/node_modules/chokidar/lib/fsevents-handler.js:446:18)
```

Reproducible example in https://github.com/cypress-io/cypress-test-tiny/tree/ignore-empty
",bug
747803830,Blank/Frozen Video Recording on Chrome v87,"### Current behavior
I think that the issue has been reported a couple of times but the context was quite different. 

So the issue here is that the Cypress Video Recording is Frozen or only shows the Cypress Frame Layout on Chrome V87. 

It's pretty straightforward to reproduce the issue, just download the latest version of Chrome (v87), write a small Cypress test, and run cypress using headless mode targeting chrome, and voilà.
 
For now, we've managed to partially resolve the issue by downgrading the Chrome version to v85.

![Screenshot 2020-11-20 at 22 25 36](https://user-images.githubusercontent.com/14129459/99851532-9379b500-2b7f-11eb-846d-2ad4c328ab9d.png)

### Versions

Cypress version: v5.6.0 and v5.2.0
Chrome version: V87
",bug
747650743,cy.intercept cannot properly wait for request against endpoint with multiple aliases,"### Current behavior 
Migrating from `cy.route` to `cy.intercept` for the upcoming 6.0.0 release reveals a bug when and endpoint has multiple aliases defined for it.

Failing screenshot shows that the `mockedPublicTransactions` request is being intercepted and responded to successfully (notice the Chrome DevTools console where the response shows `""limit"": 9000000,` which is only present in the fixture returned (`public-transactions.json`)
![Screen Shot 2020-11-19 at 3 48 41 PM](https://user-images.githubusercontent.com/21967/99827207-f9822000-2b1e-11eb-95e9-c5fc92ab9087.png)

```js
beforeEach(function () {
   // ...
   cy.http(""GET"", ""http://localhost:3001/transactions/public*"").as(feedViews.public.routeAlias); //publicTransactions

})

// ...

describe(""renders and paginates all transaction feeds"", function () {
    it(""renders transactions item variations in feed"", function () {
      cy.intercept(""GET"", ""http://localhost:3001/transactions/public*"", {
        headers: {
          ""access-control-allow-origin"": window.location.origin,
          ""Access-Control-Allow-Credentials"": ""true"",
        },
        fixture: ""public-transactions.json"",
      }).as(""mockedPublicTransactions"");

      // Visit page again to trigger call to /transactions/public
      cy.visit(""/"");

      //cy.wait(""@notifications"");
      cy.wait(""@mockedPublicTransactions"")
        .its(""response.body.results"")
        .then(JSON.parse)
        .then((transactions) => {
// ...
```

Here is what the run looks like

![transaction-feeds spec ts](https://user-images.githubusercontent.com/21967/99827761-a9f02400-2b1f-11eb-9585-65c6df9a078b.gif)

### Desired behavior
Results from `mockedPublicTransactions` are available as they were using `cy.route` to the remainder of the test.

### Test code to reproduce
A reproduction is available [in a branch in the RWA](https://github.com/cypress-io/cypress-realworld-app/pull/649/files#diff-a861fe4d6d78d89525e438b23fbf224ff723dfe2651e05dc608ea3bc82fe9b25)

### Versions
6.0.0

",bug
744233907,SIGSEGV with ERR_TLS_REQUIRED_SERVER_NAME in Server.addContext,"```
The Test Runner unexpectedly exited via a exit event with signal SIGSEGV

Please search Cypress documentation for possible solutions:

https://on.cypress.io

Check if there is a GitHub issue describing this crash:

https://github.com/cypress-io/cypress/issues

Consider opening a new issue.

----------

Platform: darwin (19.5.0)
Cypress Version: 5.6.0
```

```
GET /__cypress/tests?p=cypress/support/index.js 200 1268.985 ms - -
Error [ERR_TLS_REQUIRED_SERVER_NAME] [ERR_TLS_REQUIRED_SERVER_NAME]: ""servername"" is required parameter for Server.addContext
    at Server.addContext (_tls_wrap.js:1400:11)
    at /Users/gleb/Library/Caches/Cypress/5.6.0/Cypress.app/Contents/Resources/app/packages/https-proxy/lib/server.js:222:23
    at tryCatcher (/Users/gleb/Library/Caches/Cypress/5.6.0/Cypress.app/Contents/Resources/app/packages/https-proxy/node_modules/bluebird/js/release/util.js:16:23)
    at Promise._settlePromiseFromHandler (/Users/gleb/Library/Caches/Cypress/5.6.0/Cypress.app/Contents/Resources/app/packages/https-proxy/node_modules/bluebird/js/release/promise.js:512:31)
```

Relevant code from `packages/https-proxy/lib/server.js`

```js
  _getPortFor (hostname) {
    return this._getCertificatePathsFor(hostname)
    .catch((err) => {
      return this._generateMissingCertificates(hostname)
    }).then((data = {}) => {
      if (net.isIP(hostname)) {
        return this._getServerPortForIp(hostname, data)
      }

      this._sniServer.addContext(hostname, data) // line 222

      return this._sniPort
    })
  }
```

Reproduction steps:

- clone https://github.com/cypress-io/cypress-fiddle
- checkout branch `sigsegv`
- npm install
- `npm run cy:md`
- click on any file

What is happening I think: the test tries to include a script pointing at external CDN `https: //cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/js/bootstrap.bundle.min.js` in the iframe, which seems to crash badly.",bug
743972396,"Cypress generates superfluous screenshots for passing tests too, after afterEach() hook once failed but retried.","This issue is related to the newer test retries feature. In general, when `afterEach()` hook fails once all other test cases of the test file are just skipped. However when we have retries enabled (`retries : 1`), then cypress tries to run the test case again even if it failed in the `afterEach()` hook. I think somehow the `afterEach()` hook's failure state stuck, because after the test passes for the second try and so the test goes on with the remaining test cases, cypress creates a screenshot for all remaining tests even if they are not failing. Note that I'm speaking about the screenshot made for the test failures.

### Current behavior
Superfluous screenshots are made every time `afterEach()` hook is called. These screenshots have the 'failed' string in their name, suggesting that a failure happened, however the tests passed.

### Desired behavior
Cypress should not generate failure screenshots, when nothing is failing.

### Test code to reproduce
```js
describe('Superfluous screenshots.', {retries : 1}, function() {
	afterEach(function() {
		Cypress.env('SOMEVARIABLE', 'X');
		expect(this.currentTest.state).not.to.be.equal('failed');
	});

	it('Failing test which passes for the second time.', function() {
		expect(Cypress.env('SOMEVARIABLE')).to.be.equal('X');
	});

	it('Passing test 1.', function() {
		expect(true).to.be.true;
	});

	it('Passing test 2.', function() {
		expect(false).to.be.false;
	});
});
```
I used an environment variable to make the first test case and afterEach() hook to fail for the first time and then they pass for the second time, we run the test.

I see the following output when I run this in headless mode:
```
  Running:  writer/test_spec.js                                                             (1 of 1)


  Superfluous screenshots.
    (Attempt 1 of 2) Failing test which passes for the second time.
    (Attempt 1 of 2) Failing test which passes for the second time.
    ✓ Failing test which passes for the second time. (178ms)
    ✓ Failing test which passes for the second time. (196ms)
    ✓ Passing test 1. (115ms)
    ✓ Passing test 2. (113ms)


  4 passing (4s)


  (Results)

  ┌────────────────────────────────────────────────────────────────────────────────────────────────┐
  │ Tests:        3                                                                                │
  │ Passing:      3                                                                                │
  │ Failing:      0                                                                                │
  │ Pending:      0                                                                                │
  │ Skipped:      0                                                                                │
  │ Screenshots:  6                                                                                │
  │ Video:        false                                                                            │
  │ Duration:     4 seconds                                                                        │
  │ Spec Ran:     writer/test_spec.js                                                              │
  └────────────────────────────────────────────────────────────────────────────────────────────────┘


  (Screenshots)

  -  /home/zolnai/libreoffice/online/cypress_test/cypress/screenshots/writer/test_spe     (1280x720)
     c.js/Superfluous screenshots -- Failing test which passes for the second time (f               
     ailed).png                                                                                     
  -  /home/zolnai/libreoffice/online/cypress_test/cypress/screenshots/writer/test_spe     (1280x720)
     c.js/Superfluous screenshots -- Failing test which passes for the second time --               
      after each hook (failed).png                                                                  
  -  /home/zolnai/libreoffice/online/cypress_test/cypress/screenshots/writer/test_spe     (1280x720)
     c.js/Superfluous screenshots -- Failing test which passes for the second time --               
      after each hook (failed) (attempt 2).png                                                      
  -  /home/zolnai/libreoffice/online/cypress_test/cypress/screenshots/writer/test_spe     (1280x720)
     c.js/Superfluous screenshots -- Failing test which passes for the second time --               
      after each hook (failed) (attempt 2) (1).png                                                  
  -  /home/zolnai/libreoffice/online/cypress_test/cypress/screenshots/writer/test_spe     (1280x720)
     c.js/Superfluous screenshots -- Passing test 1 -- after each hook (failed).png                 
  -  /home/zolnai/libreoffice/online/cypress_test/cypress/screenshots/writer/test_spe     (1280x720)
     c.js/Superfluous screenshots -- Passing test 2 -- after each hook (failed).png                 


====================================================================================================

  (Run Finished)


       Spec                                              Tests  Passing  Failing  Pending  Skipped  
  ┌────────────────────────────────────────────────────────────────────────────────────────────────┐
  │ ✔  writer/test_spec.js                      00:04        3        3        -        -        - │
  └────────────────────────────────────────────────────────────────────────────────────────────────┘
    ✔  All specs passed!                        00:04        3        3        -        -        - 
```

Note that the second and third test cases pass without any failure, but screenshots were made for them too. I checked the screenshots and they do not show any failure, everything is green.

My expectation here is two screenshots: one for the failure in the test case, the second one is for the failure in afterEach hook. However, we get six screenshots here. Four is about the first test case and two for the other two test cases, which have never failed.

### Versions

cypress version: 5.5.0
browser: chromium 78.0.3904.108
OS: openSUSE Leap 15.0",bug
743942661,Cypress exits with `SIGABRT`/`SIGTERM`/`SIGSEGV` when `experimentalSourceRewriting` is active.,"<!-- 👋 Use the template below to report a bug. Fill in as much info as possible. 

Have a question? Start a new discussion 👉 https://github.com/cypress-io/cypress/discussions

As an open source project with a small maintainer team, it may take some time for your issue to be addressed. Please be patient and we will respond as soon as we can. 🙏 -->

### Current behavior

Occasionally, Cypress will exit with `SIGABRT`, `SIGTERM`, or `SIGSEGV` and a non-zero exit code when `experimentalSourceRewriting` is active.

### Desired behavior

Cypress exits with correct exit code.

This is due to an upstream bug in Electron that is definitely fixed with Electron 12, but may be backported to Electron 11/10: https://github.com/electron/electron/issues/23315
",bug
743834574,Selector TypeError: Cannot read property 'length' of undefined on salesforce page,"<!-- 👋 Use the template below to report a bug. Fill in as much info as possible. 

Have a question? Start a new discussion 👉 https://github.com/cypress-io/cypress/discussions

As an open source project with a small maintainer team, it may take some time for your issue to be addressed. Please be patient and we will respond as soon as we can. 🙏 -->

### Current behavior
<!-- A description including screenshots, stack traces, DEBUG logs, etc. 👉 https://on.cypress.io/troubleshooting -->
- login to any salesforce application
- click on cypress selector tool (arrow) and click on any element to see selector
- selector displayed
### Desired behavior
<!-- Remember, we are not familiar with the application you're testing, so please provide a clear description of what should happen.-->
 selector is always the same: ""body""
 error in console:
```
cypress_runner.js:49413 [mobx] Encountered an uncaught exception that was thrown by a reaction or observer component, in: 'Reaction[Autorun@40]' TypeError: Cannot read property 'length' of undefined
    at superMatcher (cypress_runner.js:88491)
    at Sizzle.select (cypress_runner.js:88687)
    at Function.Sizzle [as find] (cypress_runner.js:86855)
    at jQuery.fn.init.find (cypress_runner.js:88886)
    at getOrCreateSelectorHelperDom (cypress_runner.js:199120)
    at Object.addOrUpdateSelectorPlaygroundHighlight (cypress_runner.js:199152)
    at AutIframe._clearHighlight (cypress_runner.js:197891)
    at AutIframe.toggleSelectorHighlight (cypress_runner.js:198058)
    at cypress_runner.js:198629
    at i (cypress_runner.js:49413)
    at trackDerivedFunction (cypress_runner.js:49413)
    at e.track (cypress_runner.js:49413)
    at e.onInvalidate (cypress_runner.js:49413)
    at e.runReaction (cypress_runner.js:49413)
    at runReactionsHelper (cypress_runner.js:49413)
    at reactionScheduler (cypress_runner.js:49413)
```
### Test code to reproduce
<!-- Provide test code that we can copy, paste, and run on our machine to see the issue. -->

<!-- You could also provide a repo that we can clone and run. You can fork 👉 https://github.com/cypress-io/cypress-test-tiny repo, set up a failing test, then link to your fork. -->
```js
     cy.request('{yout_salesforce_login_link}.salesforce.com/?un=_login_&pw={password}')
    .then(() => {
     cy.visit('{your_salesforce_app_welcome_page}' );
     })
```
### Versions
5.6.0
<!-- Cypress version, last known working Cypress version (if applicable), Browser and version, Operating System, CI Provider, etc -->
<img width=""942"" alt=""cypress_slesforce_bug"" src=""https://user-images.githubusercontent.com/11328178/99258009-334de080-2818-11eb-99e0-1d42cd839fad.png"">
",bug
742886372,MacBook crashing when running cypress tests,"<!-- 👋 Use the template below to report a bug. Fill in as much info as possible. 

Have a question? Start a new discussion 👉 https://github.com/cypress-io/cypress/discussions

As an open source project with a small maintainer team, it may take some time for your issue to be addressed. Please be patient and we will respond as soon as we can. 🙏 -->

### Current behavior
<!-- A description including screenshots, stack traces, DEBUG logs, etc. 👉 https://on.cypress.io/troubleshooting -->
I upgraded my MacBook to Big Sur and now my MacBook crashes each time I try to run my cypress tests. I tried both Chrome and Electron.

### Desired behavior
<!-- Remember, we are not familiar with the application you're testing, so please provide a clear description of what should happen.-->

### Test code to reproduce
<!-- Provide test code that we can copy, paste, and run on our machine to see the issue. -->

<!-- You could also provide a repo that we can clone and run. You can fork 👉 https://github.com/cypress-io/cypress-test-tiny repo, set up a failing test, then link to your fork. -->

### Versions
macOS Big Sur
Version: 11.0.1 (20B29)
Cypress package version: 5.6.0
Cypress binary version: 5.6.0
<!-- Cypress version, last known working Cypress version (if applicable), Browser and version, Operating System, CI Provider, etc -->",bug
741403131,Misleading error message when trying to access (probably) detached DOM-Element,"Some of our tests sometimes showed the following error message: `cy.contains() failed because it requires the subject be a global window object`.

This wasn't very helpful at all, because the check looked something like this: `cy.get(""foo"").contains(""bar"")`

The `cy.get(""foo"")` obviously is not a window-object.

After digging around in the source code, I think the following line is the problem: https://github.com/cypress-io/cypress/blob/052892d79f95f9792e00d426722a9d904b572df4/packages/driver/src/cy/ensures.js#L84

When all tests fail on the type, only the first error is shown, which in the ""contain""-Case is the check if it is a window-object. It probably should show all errors, as then a user would also see the ""cy.get(""foo"") is detached""-error. This would help in trying to debug applications which seem to fail at random.",bug
741243363,Cypress click doesn't close menu when it clicks on a button from menu in Vue.,"I have a Vue application and I am testing it using cypress. I have a menu on my app screen. Normally when users click a button on the menu it closes the menu and performs the functionality. But when I do it using cypress, it can't close the menu.

**Note:** I am using ""cypress"": ""^4.10.0"",
Now I am sharing a simple environment and test case so that anyone can easily reproduce it in an index.html file and check it. This HTML and test are the same as my application environment. Can anyone please suggest something better for me?

HTML code:
```html
<!DOCTYPE html>
<html>
<head>
  <link href=""https://fonts.googleapis.com/css?family=Roboto:100,300,400,500,700,900"" rel=""stylesheet"">
  <link href=""https://cdn.jsdelivr.net/npm/@mdi/font@4.x/css/materialdesignicons.min.css"" rel=""stylesheet"">
  <link href=""https://cdn.jsdelivr.net/npm/vuetify@2.x/dist/vuetify.min.css"" rel=""stylesheet"">
  <meta name=""viewport"" content=""width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no, minimal-ui"">
</head>
<body>
  <div id=""app"">
    <v-app>
      <v-main>
        <v-container>Hello world</v-container>
        <v-menu
        buttom
        :close-on-content-click=""closeOnContentClick""
      >
        <template v-slot:activator=""{ on, attrs }"">
          <v-btn
            color=""primary""
            dark
            v-bind=""attrs""
            v-on=""on""
            right
            class=""ml-15""
          >
            Dropdown
          </v-btn>
        </template>
  
        <v-list>
          <v-row>
              <v-col>
                <v-btn-toggle>
                    <v-btn 
                      class=""ml-2""
                      small
                      color=""success""
                      @click=""closeMenu()""
                    >
                      A</br>Z
                      <v-icon>mdi-arrow-up</v-icon>
                    </v-btn>
                    <v-btn 
                      small 
                      color=""success"" 
                    >
                      Z</br>A
                      <v-icon>mdi-arrow-down</v-icon>
                    </v-btn>
                </v-btn-toggle>
              </v-col>
            </v-row>
            <v-card-actions>
              <v-spacer></v-spacer>
              <v-btn color=""success darken-1"" text >OK</v-btn>
              <v-btn color=""success darken-1"" text >Cancel</v-btn>
            </v-card-actions>
        </v-list>
      </v-menu>
      </v-main>
    </v-app>
  </div>

  <script src=""https://cdn.jsdelivr.net/npm/vue@2.x/dist/vue.js""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vuetify@2.x/dist/vuetify.js""></script>
  <script>
    new Vue({
      el: '#app',
      vuetify: new Vuetify(),
      data: () => ({
        items: [
          { title: 'Click Me' },
          { title: 'Click Me' },
          { title: 'Click Me' },
          { title: 'Click Me 2' },
        ],
        closeOnContentClick: false,
      }),
      methods:{
        closeMenu() {
          this.closeOnContentClick = true;
        },
      }
    })
  </script>
</body>

</html>
```
And here is the test case:
// .click({ force: true }) also doesn't work for me.

```js
describe('Check functionality of sort button', function () {
    it('Open menu, Click on sort button(A -> Z): Check menu is closed', function () {
        cy.visit('./pages/index.html');
        //Open menu
        cy.get('.v-main__wrap').find('button').click();
        //Click first button
        cy.get('.v-menu__content').find('.v-item-group').find('button').eq(0).click();
        //Check visibility
        cy.get('.v-menu__content').should('not.be.visible');
     })
 });
```",bug
740938070,"Cannot read property ""fireChangeEvent"" of undefined when stubbing with route2 in Chrome","<!-- :wave: Use the template below to report a bug. Fill in as much info as possible. 

Have a question? Start a new discussion :point_right: https://github.com/cypress-io/cypress/discussions

As an open source project with a small maintainer team, it may take some time for your issue to be addressed. Please be patient and we will respond as soon as we can. :pray: -->

### Current behavior
<!-- A description including screenshots, stack traces, DEBUG logs, etc. :point_right: https://on.cypress.io/troubleshooting -->

I am stubbing many (all) server calls for testing our web-app without the real server. As the server is not reachable, I also have to stub OPTIONS-method http calls.

My code looks something like this:

```TypeScript
const preflightHeaders = {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Expose-Headers': '*',
    'access-control-allow-headers': '*',
    'Access-Control-Request-Headers': '*',
    'Access-Control-Request-Method': '*',
    'Access-Control-Allow-Methods': '*'
};


cy.route2({ url: this._urlMatch }, (req) => {

  if (req.method.toUpperCase() === 'OPTIONS') {
    req.reply(200, undefined, preflightHeaders);
    return;
  }

  // [...Actual stubs here]
}
```

In many cases this works without any problem. With one specific test, I get this error:
Cypress tells me that this error originates from my test code and not from cypress itself. If that is true, I am very sorry for opening this issue. But in this case, I think this might be a bug in the experimental full network stubbing feature, especially since this problem only occurs in Chromium!

```
TypeError: The following error originated from your test code, not from Cypress.

  > Cannot read property 'fireChangeEvent' of undefined

When Cypress detects uncaught errors originating from your test code it will automatically fail the current test.
    at sendContinueFrame (http://localhost:4200/__cypress/runner/cypress_runner.js:164493:17)
    at onRequestReceived (http://localhost:4200/__cypress/runner/cypress_runner.js:164497:12)
    at http://localhost:4200/__cypress/runner/cypress_runner.js:164283:14
From previous event:
    at $Cypress.<anonymous> (http://localhost:4200/__cypress/runner/cypress_runner.js:164281:56)
    at $Cypress.../driver/node_modules/eventemitter2/lib/eventemitter2.js.EventEmitter.emit (http://localhost:4200/__cypress/runner/cypress_runner.js:85136:19)
    at $Cypress.parent.<computed> [as emit] (http://localhost:4200/__cypress/runner/cypress_runner.js:172903:33)
    at Socket.<anonymous> (http://localhost:4200/__cypress/runner/cypress_runner.js:199515:17)
    at Socket.../socket/node_modules/component-emitter/index.js.Emitter.emit (http://localhost:4200/__cypress/runner/cypress_runner.js:187266:20)
    at Socket.../socket/node_modules/socket.io-client/lib/socket.js.Socket.onevent (http://localhost:4200/__cypress/runner/cypress_runner.js:193994:10)
    at Socket.../socket/node_modules/socket.io-client/lib/socket.js.Socket.onpacket (http://localhost:4200/__cypress/runner/cypress_runner.js:193952:12)
    at Manager.<anonymous> (http://localhost:4200/__cypress/runner/cypress_runner.js:187124:15)
    at Manager.../socket/node_modules/component-emitter/index.js.Emitter.emit (http://localhost:4200/__cypress/runner/cypress_runner.js:187266:20)
    at Manager.../socket/node_modules/socket.io-client/lib/manager.js.Manager.ondecoded (http://localhost:4200/__cypress/runner/cypress_runner.js:193450:8)
    at Decoder.<anonymous> (http://localhost:4200/__cypress/runner/cypress_runner.js:187124:15)
    at Decoder.../socket/node_modules/component-emitter/index.js.Emitter.emit (http://localhost:4200/__cypress/runner/cypress_runner.js:187266:20)
    at Decoder.../socket/node_modules/socket.io-circular-parser/index.js.Decoder.add (http://localhost:4200/__cypress/runner/cypress_runner.js:192098:12)
    at Manager.../socket/node_modules/socket.io-client/lib/manager.js.Manager.ondata (http://localhost:4200/__cypress/runner/cypress_runner.js:193440:16)
    at Socket.<anonymous> (http://localhost:4200/__cypress/runner/cypress_runner.js:187124:15)
    at Socket.../socket/node_modules/engine.io-client/node_modules/component-emitter/index.js.Emitter.emit (http://localhost:4200/__cypress/runner/cypress_runner.js:189743:20)
    at Socket.../socket/node_modules/engine.io-client/lib/socket.js.Socket.onPacket (http://localhost:4200/__cypress/runner/cypress_runner.js:187810:14)
    at WS.<anonymous> (http://localhost:4200/__cypress/runner/cypress_runner.js:187627:10)
    at WS.../socket/node_modules/engine.io-client/node_modules/component-emitter/index.js.Emitter.emit (http://localhost:4200/__cypress/runner/cypress_runner.js:189743:20)
    at WS.../socket/node_modules/engine.io-client/lib/transport.js.Transport.onPacket (http://localhost:4200/__cypress/runner/cypress_runner.js:188253:8)
logError @ cypress_runner.js:199876
(anonymous) @ cypress_runner.js:199531
emit @ cypress_runner.js:51548
(anonymous) @ cypress_runner.js:184636
emit @ cypress_runner.js:51548
emit @ cypress_runner.js:184676
onPrint @ cypress_runner.js:183587
_onPrintClick @ cypress_runner.js:183592
(anonymous) @ cypress_runner.js:184847
executeAction @ cypress_runner.js:49413
n @ cypress_runner.js:49413
ca @ cypress_runner.js:59945
ja @ cypress_runner.js:59946
ka @ cypress_runner.js:59946
wa @ cypress_runner.js:59948
Aa @ cypress_runner.js:59949
ya @ cypress_runner.js:59949
Da @ cypress_runner.js:59952
Ad @ cypress_runner.js:60015
Gi @ cypress_runner.js:60181
Kb @ cypress_runner.js:59970
Dd @ cypress_runner.js:60017
(anonymous) @ cypress_runner.js:60182
../../node_modules/scheduler/cjs/scheduler.production.min.js.exports.unstable_runWithPriority @ cypress_runner.js:64056
Ii @ cypress_runner.js:60182
Cd @ cypress_runner.js:60016
```

The error is thrown in this code excerpt in the cypress_runner.js:

```TypeScript
  const sendContinueFrame = () => {
    if (continueSent) {
      throw new Error('sendContinueFrame called twice in handler');
    }

    continueSent = true;

    if (request) {
      request.state = 'Intercepted';
    }

    if (continueFrame) {
      // copy changeable attributes of userReq to req in frame
      // @ts-ignore
      continueFrame.req = { ...lodash__WEBPACK_IMPORTED_MODULE_0___default.a.pick(userReq, _types__WEBPACK_IMPORTED_MODULE_1__[/* SERIALIZABLE_REQ_PROPS */ ""a""])
      };

      lodash__WEBPACK_IMPORTED_MODULE_0___default.a.merge(request.request, continueFrame.req);

      emitNetEvent('http:request:continue', continueFrame);
    }

    request.log.fireChangeEvent(); // <--- Error here
  };
```

Any idea why ""log"" is missing in some cases?

### Desired behavior
<!-- Remember, we are not familiar with the application you're testing, so please provide a clear description of what should happen.-->

No exception when (an OPTIONS) http call is intercepted.

### Test code to reproduce
<!-- Provide test code that we can copy, paste, and run on our machine to see the issue. -->

Sadly, I cannot share the project that this error occurred in, I might be able to reproduce this in a fresh repo, if required I will add that later.

<!-- You could also provide a repo that we can clone and run. You can fork :point_right: https://github.com/cypress-io/cypress-test-tiny repo, set up a failing test, then link to your fork. -->

### Versions
<!-- Cypress version, last known working Cypress version (if applicable), Browser and version, Operating System, CI Provider, etc -->
Found in:
Cypress 5.6.0
Chrome 86 & Edge Dev 88
Windows 10

Works in Firefox 80

",bug
739743374,Runner shows white page when switching from Settings to Test,"Tested on version 5.6.0
Windows

**How to reproduce:**
1) Open the runner
2) Click on an test so it starts to run
3) Click to the settings options
4) Click back to to Tests
5) Now you get an white page and need to close the runner",bug
739543010,"5.2.0 Regression: ""TypeError: webpack is not a function"" when baseUrl present in tsconfig.json","### Current behavior
```
Oops...we found an error preparing this test file:

  cypress/integration/myTest.js

The error was:

TypeError: webpack is not a function

```

### Desired behavior
Cypress should run tests.

### Test code to reproduce
https://github.com/jwalton/cypress-test-tiny

```
git clone git@github.com:jwalton/cypress-test-tiny.git
cd cypress-test-tiny
npm install
npm cypress run
```

### Versions
This works fine in Cypress 4.x, 5.0.0, and 5.1.0, but 5.2.0 and higher, it breaks.

I did a little digging at the line it's failing on is [here](https://github.com/cypress-io/cypress/blob/36a4289a98d65eb16ec5714a9e246dfc5fc56922/npm/webpack-preprocessor/index.ts#L226):

```js
    const compiler = webpack(webpackOptions)
```

Again, I couldn't figure out how to set a breakpoint here and hit this, so I added a `console.log(webpack)` to see what webpack actually was.  What's interesting here is that in our project, in the root folder we have a folder called ""webpack"" with some configuration files in it, and the contents of the `webpack` variable here are clearly from our `/webpack/index.js`, not from the real webpack.  (Perhaps this is related to https://github.com/cypress-io/cypress/issues/8555?)

",bug
739475665,Incorrect config values shows for retries in Desktop GUI when set from plugins file,"
<!-- 👋 Use the template below to report a bug. Fill in as much info as possible. 

Have a question? Start a new discussion 👉 https://github.com/cypress-io/cypress/discussions

As an open source project with a small maintainer team, it may take some time for your issue to be addressed. Please be patient and we will respond as soon as we can. 🙏 -->

### Current behavior
<!-- A description including screenshots, stack traces, DEBUG logs, etc. 👉 https://on.cypress.io/troubleshooting -->

Similar to #7652 but this is for `retries` properties.
<img width=""1417"" alt=""Untitled5"" src=""https://user-images.githubusercontent.com/2043287/98613577-5f62e200-22ab-11eb-8e5c-ee0015e84feb.png"">


### Desired behavior
<!-- Remember, we are not familiar with the application you're testing, so please provide a clear description of what should happen.-->

### Test code to reproduce
<!-- Provide test code that we can copy, paste, and run on our machine to see the issue. -->

<!-- You could also provide a repo that we can clone and run. You can fork 👉 https://github.com/cypress-io/cypress-test-tiny repo, set up a failing test, then link to your fork. -->

### Versions

<!-- Cypress version, last known working Cypress version (if applicable), Browser and version, Operating System, CI Provider, etc -->
Cypress: 5.5.0
Chrome: 86.0.4240.183
MacOS: 10.15.6",bug
739005828,Failed to set the 'domain' property on 'Document': '{string}' is a top-level domain.,"# Current behaviour

<img width=""658"" alt=""Screenshot 2020-11-09 at 2 49 05 PM"" src=""https://user-images.githubusercontent.com/16741917/98543623-6eda2f00-229b-11eb-91ae-f9571fb357d3.png"">


This happens for all the staging and production domains we have.

 An example staging url looks like this
'https://develop-v3-staging-wm6caaxt.undisclosed.bg'
Those also end in .gr or .com.

An example production url looks like this
'https://undisclosed.gr
Those end in .com, gr, de etc... (I can provide the production URLs in direct message but i won't post them online)

# Desired behaviour
Just visit the given target url without any issue

# Test code to reproduce
The cy.visit('requiredUrl') command.

# Versions 
I have tried all the cypress versions 3 4 and 5. All produce the same thing. The website continues to load normally after the fail. I do not exactly understand what is going on because this behaviour leads to something which is fixed in version 2.xxx or 3.xxx as I saw while researching

Error log
```
cypress_runner.js:199686 SecurityError: Failed to set the 'domain' property on 'Document': 'bg' is a top-level domain.
    at Module.<anonymous> (https://develop-v3-staging-wm6caaxt.undisclosed.bg//main.508083c96c0153842fb5.js:2:2588107)
    at r (https://develop-v3-staging-wm6caaxt.undisclosed.bg//bundle.6e8dace29fd0427bfa2e.js:1:571)
at Object.<anonymous> (https://develop-v3-staging-wm6caaxt.undisclosed.bg//main.508083c96c0153842fb5.js:2:723212)
    at r (https://develop-v3-staging-wm6caaxt.undisclosed.bg//bundle.6e8dace29fd0427bfa2e.js:1:571)
at d (https://develop-v3-staging-wm6caaxt.undisclosed.bg//bundle.6e8dace29fd0427bfa2e.js:1:430)
at Array.a [as push] (https://develop-v3-staging-wm6caaxt.undisclosed.bg//bundle.6e8dace29fd0427bfa2e.js:1:293)
    at https://develop-v3-staging-wm6caaxt.undisclosed.bg//main.508083c96c0153842fb5.js:2:47
    From previous event:
    at run (https://develop-v3-staging-wm6caaxt.undisclosed.bg/__cypress/runner/cypress_runner.js:169474:21)
at $Cy.cy.<computed> [as then] (https://develop-v3-staging-wm6caaxt.undisclosed.bg/__cypress/runner/cypress_runner.js:169931:11)
    at Context.runnable.fn (https://develop-v3-staging-wm6caaxt.undisclosed.bg/__cypress/runner/cypress_runner.js:170155:21)
    at callFn (https://develop-v3-staging-wm6caaxt.undisclosed.bg/__cypress/runner/cypress_runner.js:104227:21)
    at https://develop-v3-staging-wm6caaxt.undisclosed.bg/__cypress/runner/cypress_runner.js:175754:28
    From previous event:
    at Object.onRunnableRun (https://develop-v3-staging-wm6caaxt.undisclosed.bg/__cypress/runner/cypress_runner.js:175742:17)
    at $Cypress.action (https://develop-v3-staging-wm6caaxt.undisclosed.bg/__cypress/runner/cypress_runner.js:166291:28)
    at Test.Runnable.run (https://develop-v3-staging-wm6caaxt.undisclosed.bg/__cypress/runner/cypress_runner.js:174128:13)
    at https://develop-v3-staging-wm6caaxt.undisclosed.bg/__cypress/runner/cypress_runner.js:105012:12
    at next (https://develop-v3-staging-wm6caaxt.undisclosed.bg/__cypress/runner/cypress_runner.js:104795:14)
    at https://develop-v3-staging-wm6caaxt.undisclosed.bg/__cypress/runner/cypress_runner.js:104805:7
    at next (https://develop-v3-staging-wm6caaxt.undisclosed.bg/__cypress/runner/cypress_runner.js:104707:14)
    at Hook.<anonymous> (https://develop-v3-staging-wm6caaxt.undisclosed.bg/__cypress/runner/cypress_runner.js:104768:7)
        at next (https://develop-v3-staging-wm6caaxt.undisclosed.bg/__cypress/runner/cypress_runner.js:175675:22)
        at https://develop-v3-staging-wm6caaxt.undisclosed.bg/__cypress/runner/cypress_runner.js:175697:11
        From previous event:
        at onNext (https://develop-v3-staging-wm6caaxt.undisclosed.bg/__cypress/runner/cypress_runner.js:175694:57)
        at done (https://develop-v3-staging-wm6caaxt.undisclosed.bg/__cypress/runner/cypress_runner.js:104167:5)
        at callFn (https://develop-v3-staging-wm6caaxt.undisclosed.bg/__cypress/runner/cypress_runner.js:104250:7)
        at https://develop-v3-staging-wm6caaxt.undisclosed.bg/__cypress/runner/cypress_runner.js:175754:28
        From previous event:
        at Object.onRunnableRun (https://develop-v3-staging-wm6caaxt.undisclosed.bg/__cypress/runner/cypress_runner.js:175742:17)
        at $Cypress.action (https://develop-v3-staging-wm6caaxt.undisclosed.bg/__cypress/runner/cypress_runner.js:166291:28)
        at Hook.Runnable.run (https://develop-v3-staging-wm6caaxt.undisclosed.bg/__cypress/runner/cypress_runner.js:174128:13)
        at next (https://develop-v3-staging-wm6caaxt.undisclosed.bg/__cypress/runner/cypress_runner.js:104729:10)
        at https://develop-v3-staging-wm6caaxt.undisclosed.bg/__cypress/runner/cypress_runner.js:104773:5
        at timeslice (https://develop-v3-staging-wm6caaxt.undisclosed.bg/__cypress/runner/cypress_runner.js:98699:27)
```",bug
738956845,5.5.0 regression of 'We failed to record the video' error in Firefox when running 2 spec files,"Regression of this fix https://github.com/cypress-io/cypress/issues/6408

### Current behavior

We are running Cypress via Docker in our Gitlab CI/CD and it seems that the video recording issue is back with 5.5.0, reported here https://github.com/cypress-io/cypress/issues/6408 for Cypress 4.x. The specific image we are using is `cypress/included:5.5.0@sha256:1bade581de1f7ea02b8a000f4526ded862e020adfd5f5b95cf58eb884cb344d3`

Note this only affects Firefox, not Chrome.

```
Warning: We failed processing this video.
This error will not alter the exit code.
TimeoutError: operation timed out
    at afterTimeout (/root/.cache/Cypress/5.5.0/Cypress/resources/app/packages/server/node_modules/bluebird/js/release/timers.js:46:19)
    at Timeout.timeoutTimeout [as _onTimeout] (/root/.cache/Cypress/5.5.0/Cypress/resources/app/packages/server/node_modules/bluebird/js/release/timers.js:76:13)
    at listOnTimeout (internal/timers.js:549:17)
    at processTimers (internal/timers.js:492:7)
```


```
Warning: We failed to record the video.
This error will not alter the exit code.
Error: ffmpeg exited with code 1: pipe:0: Function not implemented
    at ChildProcess.<anonymous> (/root/.cache/Cypress/5.5.0/Cypress/resources/app/packages/server/node_modules/fluent-ffmpeg/lib/processor.js:182:22)
    at ChildProcess.emit (events.js:310:20)
    at Process.ChildProcess._handle.onexit (internal/child_process.js:275:12)
Error: ffmpeg exited with code 1: pipe:0: Function not implemented
    at ChildProcess.<anonymous> (/root/.cache/Cypress/5.5.0/Cypress/resources/app/packages/server/node_modules/fluent-ffmpeg/lib/processor.js:182:22)
    at ChildProcess.emit (events.js:310:20)
    at Process.ChildProcess._handle.onexit (internal/child_process.js:275:12)
Error: ffmpeg exited with code 1: pipe:0: Function not implemented
    at ChildProcess.<anonymous> (/root/.cache/Cypress/5.5.0/Cypress/resources/app/packages/server/node_modules/fluent-ffmpeg/lib/processor.js:182:22)
    at ChildProcess.emit (events.js:310:20)
    at Process.ChildProcess._handle.onexit (internal/child_process.js:275:12)
```

### Desired behavior

- Firefox video-recording should work.
- Tests should run and pass, even if video-recording fails.

### Test code to reproduce

Code from here, running on Cypress 5.5.0 replicates this: https://github.com/cypress-io/cypress/issues/6408

### Versions

- Cypress 5.5.0 `cypress/included:5.5.0@sha256:1bade581de1f7ea02b8a000f4526ded862e020adfd5f5b95cf58eb884cb344d3`
- Gitlab 13.4.3-ee
",bug
737675171,Vaadin Combobox input field type action not working properly,"### Current behavior
Could not able use search functionality of Vaadin Lazy Loading Combobox 

it is useful manually;
![image](https://user-images.githubusercontent.com/38225108/98359451-5074f900-2039-11eb-8258-aab8daf4c083.png)

automation code cannot continue;
![image](https://user-images.githubusercontent.com/38225108/98359392-34715780-2039-11eb-9f81-30d02d84df18.png)

### Desired behavior
fill into combobox with given text and filter matched values

### Test code to reproduce

```js
/// <reference types=""cypress"" />

context('Vaadin Components', () => {
  beforeEach(() => {
    cy.visit('https://vaadin.com/components/vaadin-combo-box/java-examples')
  })

  it('.type() - type into Vaadin Combobox', () => {
    cy.contains('Lazy loading with callbacks',{timeout:20000}).click()
    cy.get('#callback-box',{timeout:20000}).should('be.visible')
    cy.get('#callback-box').shadow().find('vaadin-text-field#input').type('Oliver',{force:true})
      
  })
})
```
### Versions

cypress 5.5
",bug
735420744,Cypress - TypeError: cannot read property 'KeyboardEvent' of undefined (Cypress version - 5.5.0),"While executing the code it is throwing TypeError for - `cy.get('selector').type('pqr.com')`.

```
at Keyboard.fireSimulatedEvent ({{URL}}/__cypress/runner/cypress_runner.js:162534:29)  
at Keyboard.simulatedKeydown ({{URL}}/__cypress/runner/cypress_runner.js:162679:59)  
at Keyboard.typeSimulatedKey ({{URL}}/__cypress/runner/cypress_runner.js:162719:11)  
at ({{URL}}/__cypress/runner/cypress_runner.js:162396:15) From previous event:  
at ({{URL}}/__cypress/runner/cypress_runner.js:162405:66) From previous event:  
at Keyboard.type ({{URL}}/__cypress/runner/cypress_runner.js:162404:61)  
at type ({{URL}}/__cypress/runner/cypress_runner.js:153804:24)  
at ({{URL}}/__cypress/runner/cypress_runner.js:153999:21) From previous event:  
at onReady ({{URL}}/__cypress/runner/cypress_runner.js:153975:15)  
at runAllChecks ({{URL}}/__cypress/runner/cypress_runner.js:150154:15)  
at retryActionability ({{URL}}/__cypress/runner/cypress_runner.js:150163:17) From previous event:  
at tryFn ({{URL}}/__cypress/runner/cypress_runner.js:165407:22)  
at whenStable ({{URL}}/__cypress/runner/cypress_runner.js:165445:13)  at ({{URL}}/__cypress/runner/cypress_runner.js:164960:17) From previous event:  
at $Cy.retry ({{URL}}/__cypress/runner/cypress_runner.js:164940:39)  
at retryActionability ({{URL}}/__cypress/runner/cypress_runner.js:150166:20)  
at ({{URL}}/__cypress/runner/cypress_runner.js:150168:8) From previous event:  
at Object.verify ({{URL}}/__cypress/runner/cypress_runner.js:150095:22)  
at handleFocused ({{URL}}/__cypress/runner/cypress_runner.js:153947:30)  
at Context.type ({{URL}}/__cypress/runner/cypress_runner.js:154006:13)  
at Context. ({{URL}}/__cypress/runner/cypress_runner.js:169891:22)  at ({{URL}}/__cypress/runner/cypress_runner.js:169315:16) From previous event:  
at runCommand ({{URL}}/__cypress/runner/cypress_runner.js:169294:9)  
at next ({{URL}}/__cypress/runner/cypress_runner.js:169440:15)  
at ({{URL}}/__cypress/runner/cypress_runner.js:169468:17) From previous event:  
at next ({{URL}}/__cypress/runner/cypress_runner.js:169440:35) From previous event:  
at Promise.catch.err.name ({{URL}}/__cypress/runner/cypress_runner.js:169481:38) From previous event:  
at run ({{URL}}/__cypress/runner/cypress_runner.js:169474:22)  
at $Cy.cy. [as get] ({{URL}}/__cypress/runner/cypress_runner.js:169931:12)  at Context.runnable.fn ({{URL}}/__cypress/runner/cypress_runner.js:170155:22)  at callFn ({{URL}}/__cypress/runner/cypress_runner.js:104227:22)  at Test.../driver/node_modules/mocha/lib/runnable.js.Runnable.run ({{URL}}/__cypress/runner/cypress_runner.js:104214:8)  at ({{URL}}/__cypress/runner/cypress_runner.js:175754:29) From previous event:  at Object.onRunnableRun ({{URL}}/__cypress/runner/cypress_runner.js:175742:18)  at $Cypress.action ({{URL}}/__cypress/runner/cypress_runner.js:166291:29)  at Test.Runnable.run ({{URL}}/__cypress/runner/cypress_runner.js:174128:14)  at Runner.../driver/node_modules/mocha/lib/runner.js.Runner.runTest ({{URL}}/__cypress/runner/cypress_runner.js:104886:11)  at ({{URL}}/__cypress/runner/cypress_runner.js:105012:13)  at next ({{URL}}/__cypress/runner/cypress_runner.js:104795:15)  at ({{URL}}/__cypress/runner/cypress_runner.js:104805:8)  at next ({{URL}}/__cypress/runner/cypress_runner.js:104707:15)  at ({{URL}}/__cypress/runner/cypress_runner.js:104773:6)  at timeslice ({{URL}}/__cypress/runner/cypress_runner.js:98699:28)
```


A web application which I am trying to automate contains the different text boxes. I have experienced that this issue is not related to the specific filed. But it is something relevant to the previous filed. Using Cypress (`cy.get('selector').type('text')`) I am able to type the proper value into one field and then when I try to enter the text into another text, mentioned issue is occurred. I have checked with changing the order of the text box and found that it is not specific to the particular field.
Also to note that, it is not throwing error if I try `cy.get('selector').clear()`.",bug
734898555,Network automation to emulate offline mode only works with DevTools open,"You can find the tests for this in https://github.com/cypress-io/cypress-example-recipes/pull/581

Imagine I want to test how the web app handles offline mode. I can turn the offline mode using CDP and confirm the `window.navigator.onLine` changes correctly

```js
const goOffline = () => {
  cy.log('**offline**')
  .then(() => {
    return Cypress.automation('remote:debugger:protocol',
      {
        command: 'Network.emulateNetworkConditions',
        params: {
          offline: true,
          latency: -1,
          downloadThroughput: -1,
          uploadThroughput: -1,
        },
      })
  })
}
```

```
cy.wrap(window).its('navigator.onLine').should('be.false')
```

This works.

![online-offline](https://user-images.githubusercontent.com/2212006/97928976-215b4080-1d36-11eb-996e-2bee94f2a826.gif)

Now imagine we actually _make_ fetch requests from the app, and in offline mode they should fail. Check this out - it works. They do fail, but only _when DevTools is open_. Once we close the DevTools, the `navigator.onLine` still changes as expected, but the network calls start all working, as if ignoring the offline mode emulation.

In the video below I run the test several times with DevTools open - it is passing as expected. But when I close the DevTools, the test fails.

![says-offline-but-request-happens](https://user-images.githubusercontent.com/2212006/97929073-5e273780-1d36-11eb-8cc7-3eced12eabbf.gif)

Browsers: Electron 85, Chrome 86, 88, Edge 86",bug
734896371,cy.route2 cannot wait on the stubbed request with forceNetworkError: true,"I am trying to confirm that the application handles failed network Ajax calls

```js
cy.visit('/')
cy.route2(url, { forceNetworkError: true }).as('users')
cy.get('#load-users').click()
cy.contains('#users', 'Problem fetching users Failed to fetch')

cy.wait('@users', { timeout: 1000 }) // the network call happens
```

The wait never resolves

![forceNetworkError](https://user-images.githubusercontent.com/2212006/97928708-9bd79080-1d35-11eb-970e-2e9711154f5f.gif)

Screenshot

![](https://user-images.githubusercontent.com/2212006/97928740-a7c35280-1d35-11eb-8de9-711f8cbe8dcd.png)

Cypress v5.5.0 and `develop` at `d12676c561fbd24a47ecd846a54cfe9042402dbe` (which is AFTER `fix: improve route2 logs` commit)

Reproducible example in https://github.com/cypress-io/cypress-example-recipes/pull/581

",bug
733437892,"Blocked a frame with origin ""https://angular.io"" from accessing a cross-origin frame.","### Current behavior

Trying to visit https://angular.io

```js
context('Angular.io search', () => {
  it('finds the right answer', function () {
    cy.visit('/')
    cy.get('[aria-label=search]').type('install')
  })
})
```

with `cypress.json`

```
{
  ""baseUrl"": ""https://angular.io""
}
```

Getting an error

<img width=""450"" alt=""Screen Shot 2020-10-30 at 2 44 45 PM"" src=""https://user-images.githubusercontent.com/2212006/97745939-f8ca1100-1abf-11eb-8bbf-c35da369e3ff.png"">

The inline script that we inject is missing

<img width=""990"" alt=""Screen Shot 2020-10-30 at 2 45 11 PM"" src=""https://user-images.githubusercontent.com/2212006/97745973-04b5d300-1ac0-11eb-9267-10bde8534b48.png"">

Maybe our proxy could not inject it into this site for some reason?

### Desired behavior

Visit the site, run the test

### Test code to reproduce

https://github.com/bahmutov/test-angular-search/tree/problem

### Versions

5.5.0
",bug
733013298,"Test retries, when retrying on several failed tests, causes hanging in `cypress run`","Hi, 
I am running cypress and tests using docker inside the Jenkins pipeline. Unfortunately when the test failing cypress is hanging on with test retries attempt I suppose that in both attempts the test fails but no idea why cypress didn't go on after it. Could anyone help me with this or explain if it is a bug or wrong usage? I am trying to search for any issue with this case but didn't find it.
Screen from the pipeline:
![image](https://user-images.githubusercontent.com/18685560/97680499-1040d400-1a97-11eb-87db-c3bbc39b71fe.png)

I've experimented with different ways for adding test retries to my tests in many ways:
```js
it('should emit event search_triggered', { retries: 1 }, () => {...}
```
```js
it('should emit event search_triggered', { retries: { runMode: 1, openMode: 1} }, () => {...}. 
```

//and in global `cypress.json`
```json
{
  ""retries"": {
    ""runMode"": 1,
    ""openMode"": 3
  }
}
````

docker Image:
````
FROM cypress/browsers:node12.6.0-chrome77
#install cypress and dependecy
COPY e2e ./e2e
WORKDIR ./e2e
RUN npm ci
```

command use to run docker:
````
docker run --rm --ipc=host -m 4GB -e CYPRESS_VIDEO=false \
                                                    --entrypoint=npm "".../cypress-test:5.5.0-1"" \
                                                    run testOnJenkins -- --env configFile=""cypress-$ENVIRONMENT_ID""
```

Cypress:    5.5.0                                                                      
Browser:    Electron 85 
",bug
732922730,@cypress/webpack-preprocessor latest version appears not to have `dist` directory,"<!-- 👋 Use the template below to report a bug. Fill in as much info as possible. 

As an open source project with a small maintainer team, it may take some time for your issue to be addressed. Please be patient and we will respond as soon as we can. 🙏 -->

### Current behavior

`@cypress/webpack-preprocessor@5.4.9` (latest one) does not have `dist` directory as specified in `main`. Cannot be used.

### Desired behavior

Deploy a new version with `dist` correctly built.

### Test code to reproduce

```
yarn add @cypress/webpack-preprocessor
```

Then just do `ls node_modules/@cypress/webpack-preprocessor` and see no `dist` is there.


### Versions

5.4.9.
",bug
730383482,Cypress failed to make a connection to the Chrome DevTools Protocol: ECONNREFUSED at TCPConnectWrap.afterConnect,"<!-- Use the template below to report a bug. Fill in as much info as possible. As an open source project with a small maintainer team, it may take some time for your issue to be addressed. Please be patient and we will respond as soon as we can. -->

### Current behavior
I'm simply trying to run some of the tests in the Example folder under Integration and it will not run on Chrome. Runs on Electron and Edge but refuses to run on Chrome. 

My version of Chrome is Version 86.0.4240.111 (Official Build) (64-bit)

Current Cypress version is - cypress"": ""^5.5.0


### Desired behavior
<!-- Chrome should start up and the tests run
 as expected -->

### Test code to reproduce
<!-- Provide test code that we can copy, paste, and run on our machine to see the issue. -->

<!-- You could also provide a repo that we can clone and run. You can fork https://github.com/cypress-io/cypress-test-tiny repo, set up a failing test, then link to your fork. -->

### Versions

<!-- Cypress version ""cypress"": ""^5.5.0"" -->


![Chrome error](https://user-images.githubusercontent.com/35727935/97298206-0591ff00-184b-11eb-92ac-0ad0564d899d.PNG)
",bug
728112156,webpack-preprocessor cleanError throws TypeError,"https://github.com/cypress-io/cypress/blob/5082238e42013c17a78396ab1abf9cf4ddc77708/npm/webpack-preprocessor/index.ts#L379

` TypeError: err.replace is not a function`
It seems `err` is an `Error` in my case, not a `string`.

I'm not familiar enough to make sure it would break anything else, but changing the js output locally to `err.message.replace`fixes things for me.

My real error was:
`""Module not found: Error: Can't resolve '../../src/Component' in '<mypath>/cypress/component'""`",bug
727932463,2nd test does not log commands when cy.route2() included with polling XHR requests,"### Current behavior
Reported in https://github.com/cypress-io/cypress/issues/8926, so it may be related or the same issue. In which case go ahead and close. 

With a specific set of tests using cy.route2() testing some polling XHR requests, none of the commands in the following test get logged to the Command Log.

### Desired behavior
Run and log commands in 2nd test

### Test code to reproduce
`index.html`

```html
<button id=""aa"">button aa</button>
<script>
  document.getElementById('aa').addEventListener('click', async () => {
    const response = await window.fetch(`/${'aa'}`)
    const { data } = await response.json()

    // Fire off a bunch of extra requests to try to trigger the error
    for (let i = 0; i < 5; i++) {
      setTimeout(() => {
        window.fetch(`/${'aa'}`)
      }, i * 20)
    }
  })
</script>
```

`spec.js`

```js
it('first test', () => {
  cy.visit('index.html')
  cy.route2({ method: 'GET', pathname: /[a-z]+/ }, (req) => {
      const data = 'aa'
      req.reply({ data })
    })
    cy.get('button').contains('aa').click()
  })

it('second test', () => {
  cy.log('command here')
})
```

![](https://user-images.githubusercontent.com/1271364/96960947-96a26680-1529-11eb-916e-603d1990bb0c.png)

### Versions
Cypress 5.4.0

",bug
727450593,cy.route2 times out waiting for image load,"Cypress v5.4.0 and even https://github.com/cypress-io/cypress/pull/8916

Test in https://github.com/cypress-io/cypress-example-recipes/blob/master/examples/stubbing-spying__route2/cypress/integration/image-spec.js#L4

```js
  it.only('spies on loading a static image', () => {
    cy.route2('/images').as('image')
    cy.visit('/pics.html')
    // how to check if the /image route was called once?
    cy.wait('@image')
  })
```

The image request happens, but the test fails it. Notice that the routes tab shows 1 matching request

![wait-on-image-times-out](https://user-images.githubusercontent.com/2212006/96887408-8ff4f000-1452-11eb-964c-d91837c1b01a.gif)

",bug
727092605,cy.route2 errors leak between tests,"<!-- Use the template below to report a bug. Fill in as much info as possible. As an open source project with a small maintainer team, it may take some time for your issue to be addressed. Please be patient and we will respond as soon as we can. -->

### Current behavior
I have a few tests that I'd like to share some network stubs.  My first thought was to use `before`:

```js
context('Context', () => {
  before(() => {
    cy.route2(...)
  })

  it('test a', () => {
    doSomethingThatShouldTriggerStub()
    // stub is triggered
  })

  it('test b', () => {
    doSomethingThatShouldTriggerStub()
    // stub is not triggered
  })
})
```

But the stubbed route isn't getting triggered on the 2nd test.  I wasn't sure if that was intentional but I assumed it was either intentional or WIP and moved to `beforeEach`:

```js
context('Context', () => {
  beforeEach(() => {
    cy.route2(...)
  })
  ...
})
```

`beforeEach` solved the problem with the stubs only working on the first test, but seemed to create a sort of race condition; (I think) when a stubbed request happens in between tests.  (e.g. if the app is polling in the background)

![](https://user-images.githubusercontent.com/834042/96827294-1e815700-13ea-11eb-96b4-2cd49cec496f.png)

### Different errors depending on the timing
I don't understand the cypress code well enough to figure out how to control the timing for a consistent repro, but I was able to track down a couple different places where it's failing.

`Cannot access 'continueSent' before initialization`

* Looks like the function can bail before `continueSent` gets initialized?

https://github.com/cypress-io/cypress/blob/052892d79f95f9792e00d426722a9d904b572df4/packages/driver/src/cy/net-stubbing/events/request-received.ts#L51-L102

```
ReferenceError: The following error originated from your test code, not from Cypress.

  > Cannot access 'continueSent' before initialization

When Cypress detects uncaught errors originating from your test code it will automatically fail the current test.
    at sendContinueFrame (http://localhost:5000/__cypress/runner/cypress_runner.js:164953:5)
    at onRequestReceived (http://localhost:5000/__cypress/runner/cypress_runner.js:164976:12)
    at http://localhost:5000/__cypress/runner/cypress_runner.js:164832:14
From previous event:
    at $Cypress.<anonymous> (http://localhost:5000/__cypress/runner/cypress_runner.js:164830:56)
    at $Cypress.../driver/node_modules/eventemitter2/lib/eventemitter2.js.EventEmitter.emit (http://localhost:5000/__cypress/runner/cypress_runner.js:85891:19)
    at $Cypress.parent.<computed> [as emit] (http://localhost:5000/__cypress/runner/cypress_runner.js:173409:33)
    at Socket.<anonymous> (http://localhost:5000/__cypress/runner/cypress_runner.js:199986:17)
    at Socket.../socket/node_modules/component-emitter/index.js.Emitter.emit (http://localhost:5000/__cypress/runner/cypress_runner.js:187739:20)
    at Socket.../socket/node_modules/socket.io-client/lib/socket.js.Socket.onevent (http://localhost:5000/__cypress/runner/cypress_runner.js:194467:10)
    at Socket.../socket/node_modules/socket.io-client/lib/socket.js.Socket.onpacket (http://localhost:5000/__cypress/runner/cypress_runner.js:194425:12)
    at Manager.<anonymous> (http://localhost:5000/__cypress/runner/cypress_runner.js:187597:15)
    at Manager.../socket/node_modules/component-emitter/index.js.Emitter.emit (http://localhost:5000/__cypress/runner/cypress_runner.js:187739:20)
    at Manager.../socket/node_modules/socket.io-client/lib/manager.js.Manager.ondecoded (http://localhost:5000/__cypress/runner/cypress_runner.js:193923:8)
    at Decoder.<anonymous> (http://localhost:5000/__cypress/runner/cypress_runner.js:187597:15)
    at Decoder.../socket/node_modules/component-emitter/index.js.Emitter.emit (http://localhost:5000/__cypress/runner/cypress_runner.js:187739:20)
    at Decoder.../socket/node_modules/socket.io-circular-parser/index.js.Decoder.add (http://localhost:5000/__cypress/runner/cypress_runner.js:192571:12)
    at Manager.../socket/node_modules/socket.io-client/lib/manager.js.Manager.ondata (http://localhost:5000/__cypress/runner/cypress_runner.js:193913:16)
    at Socket.<anonymous> (http://localhost:5000/__cypress/runner/cypress_runner.js:187597:15)
    at Socket.../socket/node_modules/engine.io-client/node_modules/component-emitter/index.js.Emitter.emit (http://localhost:5000/__cypress/runner/cypress_runner.js:190216:20)
    at Socket.../socket/node_modules/engine.io-client/lib/socket.js.Socket.onPacket (http://localhost:5000/__cypress/runner/cypress_runner.js:188283:14)
    at WS.<anonymous> (http://localhost:5000/__cypress/runner/cypress_runner.js:188100:10)
    at WS.../socket/node_modules/engine.io-client/node_modules/component-emitter/index.js.Emitter.emit (http://localhost:5000/__cypress/runner/cypress_runner.js:190216:20)
    at WS.../socket/node_modules/engine.io-client/lib/transport.js.Transport.onPacket (http://localhost:5000/__cypress/runner/cypress_runner.js:188726:8)
```

And then I was also sometimes experiencing it here, where `request` can apparently be undefined:

https://github.com/cypress-io/cypress/blob/052892d79f95f9792e00d426722a9d904b572df4/packages/driver/src/cy/net-stubbing/events/response-received.ts#L45-L51

### Confusing things
Easy for me to imagine this is all my user error, but a few confusing things:

* The error message is a bit confusing, as the errors seem to be coming from cypress code (though obviously caused by my test code)
* The error seems to leak into other commands like `click` shown above, even though it seems to be coming from the network stubbing.
* The error was also sometimes causing `click` to fail silently (cypress said it had clicked, but didn't perform the click).  This seems to happen if the error occurs in between the ""actionability"" checks.

`state('error')` was returning the stubbing error, and `click` was then failing silently (the cypress UI says it completed, but there's no click)

https://github.com/cypress-io/cypress/blob/052892d79f95f9792e00d426722a9d904b572df4/packages/driver/src/cy/retries.js#L101

<!-- A description including screenshots, stack traces, DEBUG logs, etc. See our Troubleshooting Guide: https://on.cypress.io/troubleshooting-->

### Desired behavior
* Ideally I'd like to be able to define stubs for a set of tests in the `before` hook.
* If that's not possible or intended, it would be nice if there was a way to prevent these errors.  (It would be pretty simple to initialize `continueSent` earlier and put a null check around `request.response=`, but I obviously don't understand the code remotely well enough to know if that creates other issues :)
* Or if this is outside the intended usage, might be nice if the error exploded things more (like if you try to run `cy.etc` outside a test)

### Test code to reproduce
<!-- Provide test code that we can copy, paste, and run on our machine to see the issue. -->
Because of the finicky timing, I was unable to get a consistent minimal repro, but this repros about 50% of the time for me.  The crux seems to be that the app fires off a stubbed request in between the tests.

### ""App""
```html
<div data-cy=""buttons"">
  <button id=""aa"">button aa</button>
  <button id=""bb"">button bb</button>
  <button id=""cc"">button cc</button>
  <button id=""clear"">clear</button>
</div>
<div id=""result"" data-cy=""result""></div>
<script>
  document.getElementById('clear').addEventListener('click', () => {
    document.getElementById('result').innerHTML = ''
  })
  ;['aa', 'bb', 'cc'].forEach((id) => {
    document.getElementById(id).addEventListener('click', async () => {
      const response = await window.fetch(`/${id}`)
      const { data } = await response.json()
      console.log('click', id, { data })

      // Fire off a bunch of extra requests to try to trigger the error
      for (let i = 0; i < 5 ; i++) {
        setTimeout(() => {
          window.fetch(`/${id}`)
        }, i * 20)
      }

      document.getElementById('result').innerHTML = data
    })
  })
</script>
```

### Test code
```js
const url = 'http://localhost:5000'

context('Trying to repro', () => {
  before(() => {
    cy.visit(url)
  })

  beforeEach(() => {
    cy.route2({ method: 'GET', pathname: /[a-z]+/ }, (req) => {
      req.reply({ data: req.url })
    })
  })
  ;['aa', 'bb'].forEach((data) => {
    it(`clicks button ${data}`, () => {
      cy.get(`#clear`).click()
      cy.get(`[data-cy=buttons]`).contains(data).click()
      cy.get(`[data-cy=result]`).contains(`${url}/${data}`)
    })
  })
})
```

<!-- You could also provide a repo that we can clone and run. You can fork https://github.com/cypress-io/cypress-test-tiny repo, set up a failing test, then link to your fork. -->

### Versions
<!-- Cypress version, last known working Cypress version (if applicable), Browser and version, Operating System, CI Provider, etc -->
Cypress 5.4.0
Electron 85
macOS 10.15.7

PS: Cypress is amazing, thanks!

",bug
726023203,"Upgrading to 5.4.0 -> ""Cannot read property 'constructor' of undefined"" when running any test file","<!-- Use the template below to report a bug. Fill in as much info as possible. As an open source project with a small maintainer team, it may take some time for your issue to be addressed. Please be patient and we will respond as soon as we can. -->

### Current behavior
When running a spec file, an error is thrown. 
```
(function () {
  Cypress.action(""spec:script:error"", {
    type: ""BUNDLE_ERROR"",
    error: ""TypeError: Cannot read property 'constructor' of undefined""
  })
}())
```


### Desired behavior
Tests run as expected. 

### Test code to reproduce
<!-- Provide test code that we can copy, paste, and run on our machine to see the issue. -->

<!-- You could also provide a repo that we can clone and run. You can fork https://github.com/cypress-io/cypress-test-tiny repo, set up a failing test, then link to your fork. -->

### Versions
Everything works and runs fine on version 5.3.0
<!-- Cypress version, last known working Cypress version (if applicable), Browser and version, Operating System, CI Provider, etc -->
",bug
723610953,Cypress.route will not match any request where the url has a query param containing http://{anything},"
### Current behavior

Cypress.route will fail on any request that has a query param with value `http://anything`

So if you have this in cypress:

```javascript
describe(""route"", () => {
  beforeEach(() => {
    cy.server();
    cy.route({
      method: ""GET"",
      url: `**/has-http-in-query-param**`,
      response: 'ok'
    }).as('has-http-in-query-param')
  });

  it(""mocks a url with a query param containing http://a"", () => {
    cy.visit(""/"");
    cy.wait(""@has-http-in-query-param"");
    cy.get(""#responseText"").contains(""ok"");
  });
});
```

...and then your app under test makes a request for `/has-http-in-query-param?x=http%3A%2F%2Fa`

Then the route *SHOULD* match but it will not

### Desired behavior
`Cypress.route('/has-http-in-query-param**')` should match `/has-http-in-query-param?x=http%3A%2F%2Fa`

### Test code to reproduce

Here is a full project that demos the bug with steps: https://github.com/ICTLearningSciences/cypress-route-bug

### Versions
5.3.0 on OSX with Chrome
",bug
722595159,Cannot set property response of undefined,"Cypress v5.4.0 but might happen earlier

![route2-flake](https://user-images.githubusercontent.com/2212006/96174984-2f1c6380-0ef8-11eb-99ec-b2f078dbd1a8.gif)

Reproducible example in https://github.com/cypress-io/cypress-example-recipes

Spec examples/stubbing-spying__route2/cypress/integration/image-spec.js

Test

```js
  it('redirects static image', () => {
    // instead of serving an image from a fixture
    // we can redirect the request for the image
    // to another route
    cy.route2({
      method: 'GET',
      url: '/images/tiger.jpg',
    }, (req) => {
      // /__root/* is a special URL that can serve a file from the
      // project's root. Normally this is used during bundling
      // but here we are using it to serve another image
      req.redirect('/__root/cypress/fixtures/roo.jpg')
    })

    cy.visit('/pics.html')
  })
```

Error screenshot

![](https://user-images.githubusercontent.com/2212006/96175048-4eb38c00-0ef8-11eb-880d-1ce6cf461de7.png)

Last stack frame

![](https://user-images.githubusercontent.com/2212006/96175077-583cf400-0ef8-11eb-9b82-c71a0fb6419d.png)

`request` is undefined

![](https://user-images.githubusercontent.com/2212006/96175097-5ecb6b80-0ef8-11eb-8876-f29600cf10b7.png)

Previous stack frame

* checks if `request` is undefined and calls `sendContinuationFrame` (where it crashes trying to set `request`)

![](https://user-images.githubusercontent.com/2212006/96175134-6db21e00-0ef8-11eb-8949-894ed8035d70.png)

",bug
722484502,cypress cache list —size throws: ReferenceError: regeneratorRuntime is not defined,"Cypress v5.4.0 on Mac with Node v12.14.1

Trying to run `npx cypress cache list --size` command

```
$ npx cypress version
Cypress package version: 5.4.0
Cypress binary version: 5.4.0
~/git/cypress-react-unit-test on main
$ npx cypress cache list --size
Unhandled rejection ReferenceError: regeneratorRuntime is not defined
    at _getSize (/Users/gleb/git/cypress-react-unit-test/node_modules/cypress/lib/tasks/get-folder-size.js:29:46)
    at getSize (/Users/gleb/git/cypress-react-unit-test/node_modules/cypress/lib/tasks/get-folder-size.js:25:19)
    at /Users/gleb/git/cypress-react-unit-test/node_modules/cypress/lib/tasks/cache.js:141:14
    at tryCatcher (/Users/gleb/git/cypress-react-unit-test/node_modules/bluebird/js/release/util.js:16:23)
    at Object.gotValue (/Users/gleb/git/cypress-react-unit-test/node_modules/bluebird/js/release/reduce.js:166:18)
    at Object.gotAccum (/Users/gleb/git/cypress-react-unit-test/node_modules/bluebird/js/release/reduce.js:155:25)
    at Object.tryCatcher (/Users/gleb/git/cypress-react-unit-test/node_modules/bluebird/js/release/util.js:16:23)
    at Promise._settlePromiseFromHandler (/Users/gleb/git/cypress-react-unit-test/node_modules/bluebird/js/release/promise.js:547:31)
    at Promise._settlePromise (/Users/gleb/git/cypress-react-unit-test/node_modules/bluebird/js/release/promise.js:604:18)
    at Promise._settlePromiseCtx (/Users/gleb/git/cypress-react-unit-test/node_modules/bluebird/js/release/promise.js:641:10)
    at _drainQueueStep (/Users/gleb/git/cypress-react-unit-test/node_modules/bluebird/js/release/async.js:97:12)
    at _drainQueue (/Users/gleb/git/cypress-react-unit-test/node_modules/bluebird/js/release/async.js:86:9)
    at Async._drainQueues (/Users/gleb/git/cypress-react-unit-test/node_modules/bluebird/js/release/async.js:102:5)
    at Immediate.Async.drainQueues [as _onImmediate] (/Users/gleb/git/cypress-react-unit-test/node_modules/bluebird/js/release/async.js:15:14)
    at processImmediate (internal/timers.js:439:21)

~/git/cypress-react-unit-test on main
$ node -v
v12.14.1
```

",bug
722441426,Cannot read property '_currentRetry' of undefined,"### Current behavior
Running a smoke test suite with the following `cypress.json`

```json
{
  ""projectId"": ""4bbr1p"",
  ""baseUrl"": ""http://127.0.0.1:5000/console/ui/"",
  ""defaultCommandTimeout"": 180000,
  ""env"": {
    ""codeCoverage"": {
      ""url"": ""/api/__coverage__""
    },
    ""ELECTRON_ENABLE_LOGGING"": 0,
    ""USE_MOCKS"": true
  },
  ""requestTimeout"": 180000,
  ""responseTimeout"": 180000,
  ""retries"": {
    ""runMode"": 2,
    ""openMode"": 0
  },
  ""testFiles"": ""**/*.spec.js"",
  ""viewportHeight"": 1080,
  ""viewportWidth"": 1920,
  ""videoUploadOnPasses"": false
}
```

We encounter the following error on our Travis CI - sporadically

```
TypeError: Cannot read property '_currentRetry' of undefined
    at Reporter.<anonymous> (/home/travis/.cache/Cypress/5.3.0/Cypress/resources/app/packages/server/lib/reporter.js:141:46)
    at Reporter.parseArgs (/home/travis/.cache/Cypress/5.3.0/Cypress/resources/app/packages/server/lib/reporter.js:337:18)
    at Reporter.emit (/home/travis/.cache/Cypress/5.3.0/Cypress/resources/app/packages/server/lib/reporter.js:319:17)
    at Object.onMocha (/home/travis/.cache/Cypress/5.3.0/Cypress/resources/app/packages/server/lib/project.js:360:18)
    at Socket.<anonymous> (/home/travis/.cache/Cypress/5.3.0/Cypress/resources/app/packages/server/lib/socket.js:320:32)
    at Socket.emit (events.js:223:5)
    at /home/travis/.cache/Cypress/5.3.0/Cypress/resources/app/packages/socket/node_modules/socket.io/lib/socket.js:528:12
```

It is unclear if the test had failed and attempted a retry.

### Desired behavior
Test should retry if failed, or continue on without crashing.

### Versions
Cypress 5.3.0
",bug
721499794,DOM Snapshots don't include Shadow DOM,"<!-- Is this a question? Questions WILL BE CLOSED. Ask in our chat https://on.cypress.io/chat  -->

### Current behavior
1. Setting `includeShadowDom` to `true` allows accessing Shadow DOM but when debugging previous commands DOM snapshots, Shadow DOM is missing.
2. Visual regression tools like Percy fail because Shadow DOM is missing.

Related issues: https://github.com/cypress-io/cypress/issues/144 https://github.com/cypress-io/cypress/issues/830 https://github.com/cypress-io/cypress/issues/5776

### Desired behavior
DOM Snapshots should somehow include Shadow DOM.

### Test code to reproduce
Please let me know if you really need a repro or if the given information is enough.

### Versions
Cypress: 5.3.0
@percy/cypress: 2.3.2
",bug
718196659,Some asynchronously thrown spec errors do not fail test,"<!-- Is this a question? Questions WILL BE CLOSED. Ask in our chat https://on.cypress.io/chat  -->

### Current behavior

Uncaught rejections thrown in tests that use `done` will not fail the test when no `cy` chain is active:

https://github.com/cypress-io/cypress/blob/f65fd61d1e81597cb8b1e3e3d95c73a5ce869dac/packages/server/test/support/fixtures/projects/e2e/cypress/integration/caught_async_sync_test_spec.coffee#L89-L95

Similar behavior exists for other unhandled rejections:

https://github.com/cypress-io/cypress/blob/f65fd61d1e81597cb8b1e3e3d95c73a5ce869dac/packages/server/test/support/fixtures/projects/e2e/cypress/integration/caught_async_sync_test_spec.coffee#L70-L73

Potentially related: some asynchronous test failures are incorrectly attributed to the AUT, not the spec window.

### Desired behavior

Correctly attribute unhandled rejections and exceptions to the spec or the AUT, do not miss handling any errors.

### Test code to reproduce

See #8221

",bug
717788621,Missing property status in the cypress.run results object,"Cypress v5.3.0

In https://github.com/cypress-io/cypress/pull/8604 I have added TypeScript field to set the result of the `cypress.run`, but did not actually set it in the results object. 

<img width=""1109"" alt=""Screen Shot 2020-10-08 at 9 50 53 PM"" src=""https://user-images.githubusercontent.com/2212006/95533134-57640980-09b0-11eb-89c9-74476f0d6295.png"">

Which affects other tools checking the status like https://github.com/bahmutov/cypress-expect/issues/7
",bug
717243926,"Test runner ""time travel"" not working with custom elements","When trying to reproduce the problem a found the real issue here :)
Previous title: ""Test runner ""time travel"" not working""

The issue is not when using react states in a specific way (as thought earlier).

### Current behavior

The issue comes from using custom elements that are added again to the DOM when hovering a command in the test runner and the ""connectedCallback"" function, that ensures the rendering, is executed again.

#### Context

We wrap our whole application in custom elements, as we have a distributed frontend architecture that loads applications during runtime and all of that applications are custom elements. That leads to the problem, that the whole application is ""reset"" to an initial state as the whole application is rendered from scratch when the custom element is loaded in the DOM.

### Desired behavior

Also save the custom elements content when creating a DOM snapshot in a way, that does not rerender the custom element when restoring the snapshot.

### Test code to reproduce

https://github.com/chbiel/chbiel-cypress-custom-element-react-bug

run `yarn start`
then `yarn cypress:open`



Previous issue:

> I actually don't know if this is a bug or something that we miss. I asked in the chat first but did not get help there so here is our observation:
> 
> We have a react application heavily rely on internal state.
> 
> When using the test runner UI, the time travel feature does not work for as the shown down snapshot is always reset to the initial state before any actions where executed (like I open the page the first time).
> 
> It seems that, when hovering a command in the test runner, the dom snapshot is loaded but react resets the application back to the initial state.
> 
> So we don't have any benefit of the ""time travel"" feature, as it does not work.
> 
> Additionally: When doing click actions for example I can see where the click happend, but the element is not shown in the loaded DOM snapshot.
> 
> As said I don't know if this is a bug, so I would appreciate your input.
> 
> ### Current behavior
> 
> When hovering a command in the test runner, the loaded DOM snapshot is not the one I would expect, but the initial DOM before executing any command.
> 
> ### Desired behavior
> 
> I see the application as it was at the point of a command, when hovering that command.
> 
> ### Test code to reproduce
> 
> I don't have reproduceable code at the moment that I can share. If requested, I will try to create a working example.
> 
> In general it should be reproduceable with any react application that manages internal state.
> 
> ### Versions
> 
> 4.12.1
> ",bug
713239326,cy.route2() doesn't work when method is used as the first parameter,"### Current behavior
When passing `POST` as the first parameter to `route2` requests are not properly intercepted.

```js
// Does not work
cy.route2('POST', `${BasePage.api_url}/events/createTemplate`).as('create_template')
cy.wait('@create_template')

// Works
cy.route2(`${BasePage.api_url}/events/createTemplate`).as('create_template')
cy.wait('@create_template')
```

### Desired behavior
Using the method parameter should work.

### Test code to reproduce
https://github.com/bhgsbatista/cypress-test-tiny/tree/route2_method_fail

### Versions
Cypress v5.3.0
Windows 10

",bug
712189989,OpenSSL errors when cached SSL certificates are corrupted,"<!-- Is this a question? Questions WILL BE CLOSED. Ask in our chat https://on.cypress.io/chat  -->

### Current behavior

There is a race condition in `https-proxy` that can cause the CA store to become corrupted if multiple Cypress processes are sharing the same appdata directory simultaneously. This causes errors like the following when visiting HTTPS websites:

```
Error: error:0b000074:X.509 certificate routines:OPENSSL_internal:KEY_VALUES_MISMATCH
Error: error:0900006e:PEM routines:OPENSSL_internal:NO_START_LINE
```

And other errors relating to corrupt/mismatched private keys and SSL certificates.

### Desired behavior

The race condition is avoided, probably with the addition of a lockfile when generating/writing CA certificates.

Note:  Cypress is not generally designed to run as multiple processes sharing a home directory.

### Workaround (Linux-only)

A workaround is to set a different `XDG_CONFIG_HOME` environment variable for each Cypress process that is running. This will cause each process to have its own CA store, eliminating the possibility of a race condition.

Example:

```shell
# assuming these are somehow run simultaneously
XDG_CONFIG_HOME=/tmp/cyhome1 cypress run...
XDG_CONFIG_HOME=/tmp/cyhome2 cypress run...
```

This may have side-effects outside of just fixing this issue, but it is the only workaround for now.",bug
711405043,Check request body using cy.route2(),"### Current behavior
When I use cy.wait('@Test') to check the request that was mocked using cy.route2(), it does not contain a request body.
![image](https://user-images.githubusercontent.com/17167472/94608365-b5d40e00-0273-11eb-98fd-16d272f2996e.png)

### Desired behavior
I expected a behavior similar to the one using cy.route().
![image](https://user-images.githubusercontent.com/17167472/94608539-e6b44300-0273-11eb-8dee-9b407209cb4e.png)


### Test code to reproduce
```js
/// <reference types=""cypress""/>

describe('Patch Test', () => {
  before(() => {
    cy.visit('https://www.test-cors.org/');
  })

  const method = 'POST';

  it('Using cy.route2()', () => {
    cy.route2(method, '**', {}).as('Route2');

    cy.get('#client_method').select(method);
    cy.get('#client_postdata').type(""test"");
    cy.get('#btnSendRequest').click();

    cy.wait('@Route2').then(req => {
      console.log(req);
      cy.wrap(req.request).its('body').should('contain', 'test');
    })
  })
  it('Using cy.route()', () => {
    cy.server();
    cy.route(method, '**', {}).as('Route');

    cy.get('#client_method').select(method);
    cy.get('#client_postdata').type(""test"");
    cy.get('#btnSendRequest').click();

    cy.wait('@Route').then(req => {
      console.log(req);
      cy.wrap(req.request).its('body').should('contain', 'test');
    })
  })
})
```

### Versions
Cypress 5.3.0
Windows 10
Chrome 85
",bug
709027266,Cypress 5.2.0 : Unable to make a connection to chrome browser,"<!-- Is this a question? Questions WILL BE CLOSED. Ask in our chat https://on.cypress.io/chat  -->

### Current behavior
cypress run fails in jenkins pipeline with the following error on Chrome:
```
Failed to connect to Chrome, retrying in 1 second (attempt 60/62)
Failed to connect to Chrome, retrying in 1 second (attempt 61/62)
Failed to connect to Chrome, retrying in 1 second (attempt 62/62)
Cypress failed to make a connection to the Chrome DevTools Protocol after retrying for 50 seconds.

This usually indicates there was a problem opening the Chrome browser.
The CDP port requested was 41142.
Error details:
error Command failed with exit code 1.
```
Note that this doesn't appear to be 100% consistent. I saw it in the past and now have been seeing it again for the last 4 days.

We had previously observed this before, and upgraded cypress version to 5.2.0. followed the steps given on issue #7450 but no luck. Seems like that issue is still open and I assume the fix is still outstanding.


### Desired behavior
The tests should kick off successfully without the chrome browser error

### Test code to reproduce
Tried the following based on the inputs from one of the users
@nids2307 try below code in Plugins/index.js its working
```js
 module.exports = (on, config) => {
  on('before:browser:launch', (browser, launchOptions) => {
    if (browser.name === 'chrome' && browser.isHeadless) {
      launchOptions.args.push('--disable-gpu');
      return launchOptions
    }
  });
}
```
### Versions
Cypress: 5.0.0 as well as 5.2.0
Browser: Chrome 83
OS: Windows 10
",bug
706223744,User is unable to re-run tests,"### Current behavior:
I run my test, it works properly
<img width=""1175"" alt=""main_run"" src=""https://user-images.githubusercontent.com/52241327/93867239-6d47ae00-fcd1-11ea-8ce6-0cb7b8bf0ac1.png"">

After the first test re-run, it throws a  **_Blocked a frame with origin ""https://app.oppizi.com"" from accessing a cross-origin frame._** error.
<img width=""1185"" alt=""first_re_run"" src=""https://user-images.githubusercontent.com/52241327/93867320-8ea89a00-fcd1-11ea-81db-20e9563feb4d.png"">


After the second test re-run, it throws **_No test found in your file_**
<img width=""1189"" alt=""second_re_run"" src=""https://user-images.githubusercontent.com/52241327/93867345-95371180-fcd1-11ea-9c95-0502fc25d045.png"">


It works only after full app reload. 
Same issue after test file was changed and saved, it can't be re-run

### Test code to reproduce
My test:

```js
describe('My First Test', () => {
    it('Gets, types and asserts', () => {
        cy.visit('https://app.oppizi.com/login')
        cy.get('#username').type('aaaaaa')
        cy.get('#password').type('qqqqqq')
        cy.get('#login-submit').click()
    })
})

```

### Versions

Version 5.2.0


",bug
705631529,Preprocessor opens another Cypress instance when bundling,"This issue happens in Cypress v5.0.0 and does not occur in v4.12.1

If you try to run Cypress tests in https://github.com/eggheadio/egghead-next then a curious thing happens: it pops a new Cypress instance while trying to bundle.

Recording: https://jumpshare.com/v/v5mfJi5QlSbsd7IpBFAb

",bug
704739560,cy.contains will throw unrecognized expression error if it tries to match against regex containing single quotation mark,"### Current behavior:

cy.contains will throw invalid expression error if you try to match a regex containing a quotation 

### Desired behavior:

cy.contains should be able to handle any valid regular expression 

### Test code to reproduce
```js
cy.visit(any_url)
expect(/\'/.test(`'`)).to.be.true  // This test will pass, demonstrating that /\'/ is a valid regular expression 
cy.contains(""div"", /\'/).should('not.exist') // This will throw unrecognized expression error
```

### Versions
Cypress 5.1.0
Mac OS Catalina
chrome 85",bug
704456850,afterEach hook is triggered after test runner was stopped.,"I can't effectively stop the interactive test runner with the stop button (black rectangle). The test stops, but the interrupted command (e.g. `cy.get()`, `cy.click()`) hits a timeout and then `afterEach` hook is triggered.

In our environment, `afterEach` hook closes the site what we are testing, so If I stop the test runner I have only some seconds (`defaultCommandTimeout`) to check the DOM elements in the debugger tools until the interrupted command times out and the site is closed. I think the test runner should stop where it is, so I can interact with the site anytime. 

For example in an environment, where there are iframes, I can't get the DOM state after the test finished, because cypress does not record it correctly. So it would be useful if I could stop the test and check the live site instead.

### Current behavior:
Stoping a `cy.get()` or `cy.click()` command will time out and trigger `afterEach` hook.

### Desired behavior:
Stoping a `cy.get()` or `cy.click()` command should not trigger `afterEach` hook, but should stop the test execution entirely.

### Test code to reproduce
There is a simple test code bellow. Since there is no item with the ID `#holy-grail` you can easily stop the test runner while it is trying to find that item. Try to interrupt the `cy.get()` command. It stops, but it will time out. I can see also the time out progress bar moving. After the timeout, afterEach hook is run and the test leaves the original site, so I can't interact with it.

```
describe('Example test.', function() {
	afterEach(function() {
		cy.visit('https://googlechrome.github.io/samples/arrows-es6/');
	});

	it('Test 1.', function() {
		cy.visit('https://googlechrome.github.io/samples/picture-in-picture/');
		
		cy.get('#holy-grail')
			.click();
	});
});
```

### Versions
cypress version: 5.1.0
browser: chromium 78.0.3904.108
OS: openSUSE Leap 15.0

",bug
704021454,Docker - Browser: 'chrome' was not found on your system or is not supported by Cypress,"cypress version 4.11

### Current behavior:

cypress run --browser chrome --headless --spec \""**/pr/*.spec.ts\"""",

Tests intermittently fails with the following. 

`Browser: 'chrome' was not found on your system or is not supported by Cypress - on docker`

This happens more frequently in azure CI services on using `cypress/browsers:node12.16.2-chrome81-ff75`. 
Workaround is to re-try the job several times.

[cypress.log](https://github.com/cypress-io/cypress/files/5242886/cypress.log)

### Desired behavior:

Tests should run on chrome. 

### Test code to reproduce

Not sure how to provide a test code. This problem is very common with the above docker image and in Azure CI. I can provide the link to the CI job if needed. 
",bug
703741146,Tested app not working in headless Chrome,"### Current behavior:

I'm facing a strange error when running tests in headless chrome with `cypress run -b chrome --headless` - Navigation bar that is lazily loaded on the page is never loaded (not even after 60 s):

![kiwi_chrome_navbar](https://user-images.githubusercontent.com/2174629/93499755-af5ca280-f913-11ea-83b2-9abcccae7ee5.gif)

The same test with the same settings passes when I remove `-b chrome --headless` so the test is executed in electron. It also works in Chrome with `cypress open`

### Desired behavior:

<!-- A clear description of what you want to happen -->

### Test code to reproduce

```
cy.visit('https://kiwi.com/en/');
cy.findByTestId('Navbar-IsReady').should('exist');
```

### Versions

5.2.0, tested also 5.1.0, happened both on localhost and CI

the config shouldn't contain anything special:

```
{
  ""baseUrl"": ""http://localhost:3000/"",
  ""numTestsKeptInMemory"": 50,
  ""video"": true,
  ""videoUploadOnPasses"": false,
  ""chromeWebSecurity"": false,
  ""retries"": {
    ""runMode"": 1,
    ""openMode"": 0
  },
  ""defaultCommandTimeout"": 15000,
  ""integrationFolder"": ""cypress/tests"",
  ""supportFile"": ""cypress/support/index.js"",
  ""pluginsFile"": ""cypress/plugins/index.js"",
  ""screenshotsFolder"": ""screenshots"",
  ""videosFolder"": ""videos"",
  ""trashAssetsBeforeRuns"": true
}
```
",bug
703567423,Video recording and Screenshots are corrupted if turn on '--auto-open-devtools-for-tabs' browser option.,"### Current behavior:
Currently I need to see console during tests run on CI.
I've turned on Developer Tool via adding browser settings:

```js
    on('before:browser:launch', (browser = {}, launchOptions) => {
        if (browser.family === 'chromium') {
            // would match no browsers in 3.x
            // will match any Chromium-based browser in 4.0.0
            // ie Chrome, Canary, Chromium, Electron, Edge (Chromium-based)
            launchOptions.args.push('--auto-open-devtools-for-tabs');
            return launchOptions
        }
    })
```
But I can not see console cos videos and screenshots does NOT record Develop Tool area. Moreover all videos and screenshots are corrupted because of opened Developer Tool.
<!-- A description including screenshots, stack traces, DEBUG logs, etc -->
Screenshot:
https://user-images.githubusercontent.com/14905626/93473054-d2785980-f8f5-11ea-9cfb-2d5fd96a9f54.png
Test Case video recording:
https://assets.cypress.io/screencasts/global/6806120f-2797-4cb1-b6b3-0f8c5a90db7c.mp4?AWSAccessKeyId=AKIAIGH7VO3KJJU4LBGQ&Expires=1600349067&Signature=inZNhBJqMV%2BaQvL1nTEr5MWgx5Q%3D&response-content-disposition=attachment%3B%20filename%3D%22cypress-video33de375a-6725-4fee-a3d0-3bb29d677dd7.mp4%22%3B&response-content-type=video%2Fmp4

### Desired behavior:
Video recording and screenshots should be made correctly.
Also it would be better to have option to record all the console logs for failed tests on CI - this way there won't be necessity to open Develop Tool for running tests on CI.
<!-- A clear description of what you want to happen -->

### Versions

<!-- Cypress, operating system, browser -->

Version 5.2.0",bug
702061378,Properties in the cypress.run result type show up as TS errors,"### Current behavior:
New project with Cypress v5.2.0 (same for v5.1.0) uses `cypress.run` to execute tests, then looks at the resolved object

```js
cypress.run(options)
.then((runResults) => {
  // see https://on.cypress.io/module-api
  if (runResults.failures) {
    console.error(runResults.message)
    process.exit(1)
  }
  ...
})
```

VSCode shows red squiggles all over

![](https://user-images.githubusercontent.com/2212006/93235085-19761b80-f74b-11ea-85d5-e2fb393848b8.png)

![](https://user-images.githubusercontent.com/2212006/93235099-1da23900-f74b-11ea-966e-e1bcfa621772.png)

![](https://user-images.githubusercontent.com/2212006/93235107-20049300-f74b-11ea-8fec-013781826b23.png)

### Desired behavior:
The resolved object has type from https://github.com/cypress-io/cypress/tree/develop/cli/types cypress-npm-api.d.ts

```
interface CypressFailedRunResult {
  failures: number
  message: string
}

run(): Promise<CypressCommandLine.CypressRunResult | CypressCommandLine.CypressFailedRunResult>
```

So I expect checking for properties from one or the other types to work

### Test code to reproduce
Repo https://github.com/bahmutov/cypress-expect
Clone
Install dependencies with `npm i`
Open the `index.js` in VSCode

### Versions
Mac, Cypress v5.2.0

",bug
696835590,cy.route2 does not automatically JSONify an empty array handler,"<!-- Is this a question? Questions WILL BE CLOSED. Ask in our chat https://on.cypress.io/chat  -->

### Current behavior:
This is not automatically JSONified:

```js
cy.route2('/favorite-fruits', [])
```

This is:

```js
cy.route2('/favorite-fruits', ['foo'])
```

### Desired behavior:
Empty arrays are automatically JSONified.

",bug
693395209,"""Webpack Compilation Error - multi"" on redirect","@jennifer-shehane Upping this again.  I've upgraded to 5.2.0 and I'm still encountering the below error.


The path in the error: ""Users/dknott/Desktop/redacted"" is the parent directory for my local Cypress project.  


_Originally posted by @dwineknott in https://github.com/cypress-io/cypress/issues/8407#issuecomment-686768513_",bug
691677416,cy.route2 routes not being matched with external URLs,"<!-- Is this a question? Questions WILL BE CLOSED. Ask in our chat https://on.cypress.io/chat  -->

First of all, thanks for the work on `cy.route2`, it looks like it's going to make a lot of things much easier to do! I've jumped in to try it out and am having some trouble with URLs that are outside of my application (ie, API requests and such).

### Current behavior:
If the application sends a request to an external URL:

```
fetch('https://example.cypress.io/example-path')
```

In the tests, when `cy.route2` is used, it does not appear to be possible to match the request.

**Specifying `path`:**

```
cy.route2({ path: '/example-path', method: 'GET' }, { fixture: 'example.json' }).as('example');
```

![image](https://user-images.githubusercontent.com/4955976/92077727-38070a80-ed7a-11ea-8b17-a55e98bb0f22.png)

**Specifying `url`:**

```
cy.route2({ url: 'https://example.cypress.io/example-path', method: 'GET' }, { fixture: 'example.json' }).as('example');
```

![image](https://user-images.githubusercontent.com/4955976/92077823-6d135d00-ed7a-11ea-8666-2ed228528316.png)

**Specifying `hostname`:**

```
cy.route2({ hostname: 'example.cypress.io', method: 'GET' }, { fixture: 'example.json' }).as('example');
```

![image](https://user-images.githubusercontent.com/4955976/92077939-a055ec00-ed7a-11ea-9902-00e3c13dabe9.png)

**Specifying `hostname` and `path`:**

```
cy.route2({ hostname: 'example.cypress.io', path: '/example-path', method: 'GET' }, { fixture: 'example.json' }).as('example');
```

![image](https://user-images.githubusercontent.com/4955976/92078010-c7142280-ed7a-11ea-90a9-c59aaa1bcc49.png)

<!-- A description including screenshots, stack traces, DEBUG logs, etc -->

### Desired behavior:
The request should be matched by the routes, and stubbed accordingly.

<!-- A clear description of what you want to happen -->

### Test code to reproduce
https://github.com/blakemann/cypress-test-tiny

<!-- If we cannot fully run the tests as provided the issue WILL BE CLOSED -->
<!-- Issues without a reproducible example WILL BE CLOSED -->

<!-- You can fork https://github.com/cypress-io/cypress-test-tiny repo, set up a failing test, then link to your fork -->

### Versions
Cypress: 5.1.0
Operating System: MacOS Catalina (10.15.6)
Browser: Chrome 85

<!-- Cypress, operating system, browser -->

",bug
691450483,Getting cross-domain access error during the test,"### Current behavior:

A test that redirects from `index.html` to another domain gets cross-domain access error

Test loads `index.html` which redirects to another domain

```js
// spec.js
/// <reference types=""cypress"" />
describe('page', () => {
  it('works', () => {
    cy.visit('index.html')
    cy.contains('h1', 'Utilities').should('exist')
  })
})
```

The index.html is
```html
<body>
  Hello there
  <script>
    setTimeout(() => {
      console.log('going to utilities')
      window.location = 'https://example.cypress.io/utilities'
    }, 1000)
  </script>
</body>
```

See the following error

![image](https://user-images.githubusercontent.com/2212006/92039692-7cc37f00-ed43-11ea-9a3e-62c3d96e18d3.png)

### Desired behavior:

Correctly wait for the new site to load

### Test code to reproduce

In https://github.com/cypress-io/cypress-test-tiny/tree/load-page

### Versions

Cypress v5.1.0

### Background

I was looking at this screenshot sent by the user trying to recreate this error

![image](https://user-images.githubusercontent.com/2212006/92040142-4b977e80-ed44-11ea-9ef6-04ac44a1a0a4.png)

and stumbled across the above error first",bug
690302736,cy.setCookie times out,"<!-- Is this a question? Questions WILL BE CLOSED. Ask in our chat https://on.cypress.io/chat  -->

### Current behavior:
when running Cypress in CI environment inside Docker, cy.setCookie in an `after()` times out consistently.

<!-- A description including screenshots, stack traces, DEBUG logs, etc -->

### Desired behavior:
As the docs say ""this should never happen""

<!-- A clear description of what you want to happen -->

### Test code to reproduce
Create a test that runs cy.setCookie() during the test, and then in an after() runs cy.setCookie with the same cookie name

<!-- If we cannot fully run the tests as provided the issue WILL BE CLOSED -->
<!-- Issues without a reproducible example WILL BE CLOSED -->

<!-- You can fork https://github.com/cypress-io/cypress-test-tiny repo, set up a failing test, then link to your fork -->

### Versions

<!-- Cypress, operating system, browser -->
",bug
688699599,.clear() isn't really an alias for .type('{selectall}{backspace}'),"<!-- Is this a question? Questions WILL BE CLOSED. Ask in our chat https://on.cypress.io/chat  -->
The `.clear()` command isn't an alias to `.type('{selectall}{backspace}')` since it doesn't behave the same. Since cypress 3.5 it's possible to type in any DOM element and if a typeable element gains focus during `.type()` then cypress continues in that one. So if you `.get()` a parent element of a typeable one, then `.clear()` should work because it's supposed to be an alias to `.type('{selectall}{backspace}')` as stated in [the docs](https://docs.cypress.io/api/commands/clear.html#Syntax).

```
cy.clear() failed because it requires a valid clearable element.

The element cleared was:

  > <div id=""search-input-wrap"" class=""on"">...</div>

A clearable element matches one of the following selectors:
  'a[href]'
  'area[href]'
  'input'
  'select'
  'textarea'
  'button'
  'iframe'
  '[tabindex]'
  '[contenteditable]'

```


### Current behavior:
`.clear()` doesn't have the same behavior as `.type('{selectall}{backspace}')`
<!-- A description including screenshots, stack traces, DEBUG logs, etc -->

### Desired behavior:
`.clear()` to behave exactly like `.type('{selectall}{backspace}')`
<!-- A clear description of what you want to happen -->

### Test code to reproduce

```js
  // Passes
  it('test .type({selectall}{backspace})', () => {
    cy.visit('https://docs.cypress.io/api/commands/clear.html#Syntax')

    cy.get('#search-input-wrap').type('clear this')

    cy.get('#search-input-wrap').type('{selectall}{backspace}').type('test')
  })


  // Fails
  it('test .clear()', () => {
    cy.visit('https://docs.cypress.io/api/commands/clear.html#Syntax')

    cy.get('#search-input-wrap').type('clear this')

    cy.get('#search-input-wrap').clear().type('test')
  })

```


<!-- If we cannot fully run the tests as provided the issue WILL BE CLOSED -->
<!-- Issues without a reproducible example WILL BE CLOSED -->

<!-- You can fork https://github.com/cypress-io/cypress-test-tiny repo, set up a failing test, then link to your fork -->

### Versions
Tested on cypress 5.0 but most likely every version since 3.5
<!-- Cypress, operating system, browser -->
",bug
688197919,App forms not loading in test runner,"@jennifer-shehane I'm facing a similar dilemma.  Our apps login and create account pages recently stopped rendering when run in Cypress.  Outside of a test run the pages load fine.

I reinstalled a fresh instance of Cypress, thinking maybe a plugin or something specific to my config was the culprit, but this hasn't resolved the issue.  If this is not an internal cypress bug, ANY guidance you can provide would be appreciated.

I see the HTML in console being returned.  It looks like the class on the element is using a class that hides the form within the test runner:

> Command:  assert
> cypress_runner.js:199982 Subject:  jQuery.fn.init [input#email.form-control]
> cypress_runner.js:199982 Message:  expected <input#email.form-control> to be visible
> cypress_runner.js:199982 Error:    AssertionError: Timed out retrying: expected '<input#email.form-control>' to be 'visible'
> 
> This element `<input#email.form-control>` is not visible because its parent `<div#v-login-form.row.hide>` has CSS property: `display: none`

Example code:

```js
describe('Smoke Test - Login Feature', () => {

     Cypress.on('uncaught:exception', (err, runnable) => {
        // returning false here prevents Cypress from
        // failing the test
        return false
      }); 

 it('Login in successfully', () => {
    cy.visit('app.songtrust.com/login/');

// header and footer load, but page content does not

});

});
```
Failing in Chrome, Electron, Firefox within the test runner.
Cypress 5.0.0
Mac OS X 10.15.6

Within the test runner:

![Screen Shot 2020-08-28 at 12 22 41 PM](https://user-images.githubusercontent.com/11638121/91591166-7c357d80-e92a-11ea-8e65-88a08c39fbe3.png)

Outside of the test runner:

![Screen Shot 2020-08-28 at 12 33 05 PM](https://user-images.githubusercontent.com/11638121/91591279-adae4900-e92a-11ea-9a45-e9d5df06c150.png)





_Originally posted by @dwineknott in https://github.com/cypress-io/cypress/issues/8428#issuecomment-682343278_",bug
688048589,experimental Fetch Polyfill - 'getReader' of undefined,"### Current behavior:
Is impossible to reproduce video contents with Shaka Player when experimentalFetchPolyfill is enabled. 
Shaka player throws the following error: 
> ERROR: Shaka Error NETWORK.HTTP_ERROR (https://storage.googleapis.com/shaka-demo-assets/angel-one/dash.mpd,TypeError: Cannot read property 'getReader' of undefined,0)

- experimentalFetchPolyfill: true
      ![KO](https://user-images.githubusercontent.com/25788837/91561788-72b51100-e93c-11ea-9f5c-288eec0788e7.png)

- experimentalFetchPolyfill: false
   ![OK](https://user-images.githubusercontent.com/25788837/91561763-6a5cd600-e93c-11ea-958c-746bde646cdc.png)

### Test code to reproduce

``` javascript
describe('Test player', () => {
  it('VOD', () => {
    cy.visit('https://shaka-player-demo.appspot.com/demo/#audiolang=it-IT;textlang=it-IT;uilang=it-IT;asset=https://storage.googleapis.com/shaka-demo-assets/angel-one/dash.mpd;panel=HOME;build=uncompiled');
    cy.wait(60000);
  });
});
```

### Versions
Cypress v5.0.0
",bug
687085783,Pages from CodeSandbox urls are blank on `cy.visit()`,"### Current behavior:

I'm trying to naviage to an app using cy.visit. The app url is *use any csb test app/. However cy.visit loads the page as a blank white page.

### Desired behavior:

The page should actually load and display items.

### Test code to reproduce

```js
describe('random test',function(){
  it('Logins in to sandbox',function(){
    cy.visit(""https://ky998.csb.app/"")
  })
})
```

<!-- You can fork https://github.com/cypress-io/cypress-test-tiny repo, set up a failing test, then link to your fork -->

### Versions

Cypress 5 , MacOS and Windows, Google Chrome, Electron and Firefox",bug
685248846,Network requests fail with 400 only in Chrome browser (not in Electron),"<!-- Is this a question? Questions WILL BE CLOSED. Ask in our chat https://on.cypress.io/chat  -->

### Current behavior:
Using cypress we are launching our application ""https://www.bigwphotos.com.au/"" in chrome browse and performing below operation:

1. Click on Canvas & Wall Decor
2. Click on first product ""12 x 18"" (30x45cm) Canvas Print""
3. Click on ""Shop Now""

We are getting redirected to page not found error ""get product error Request failed with status code 400""
![Product Not available](https://user-images.githubusercontent.com/40062322/91144891-439b6700-e6d2-11ea-930a-764548041897.JPG)
<!-- A description including screenshots, stack traces, DEBUG logs, etc -->
We are getting this only in chrome browser in electron it is executing as per desired behavior
### Desired behavior:

<!-- A clear description of what you want to happen -->
Using cypress after launching our application ""https://www.bigwphotos.com.au/"" in chrome browser and performing below operation

1. Click on Canvas & Wall Decor
2. Click on first product ""12 x 18"" (30x45cm) Canvas Print""
3. Click on ""Shop Now""

We should be redirected to image upload page
We are able to navigate to image upload manually and with other automation framework however getting blocked in cypress
![Expected](https://user-images.githubusercontent.com/40062322/91145050-7d6c6d80-e6d2-11ea-8252-56df076988c5.JPG)
### Test code to reproduce

```js
describe('My First Cypress Test', function() {
    Cypress.on('uncaught:exception', (err, runnable) => {
        // returning false here prevents Cypress from
        // failing the test
        return false
      })
    it('Visits the BigWPhotos Page and check the menu items', function() {
    //Visit the BigWPhotos Website
    cy.visit('https://www.bigwphotos.com.au/');
    //Click on Canvas&Wall decor
    cy.get("".desk-menu > :nth-child(4) > [href='/collections/canvas-wall-decor']"", { timeout: 10000 })
    .should('be.visible');
    cy.xpath('(.//a[@title=""Canvas & Wall Decor""])[1]').click({force: true});
    //(//*[@*='thumb'])[1]
    cy.xpath('(.//*[@*=""thumb""])[1]', { timeout: 10000 })
    .should('be.visible');
    cy.get("":nth-child(1) > .productGridItem > .details-container > .details > strong > .productMainLink"").click({force: true});
    cy.get('#AddToCartText', { timeout: 10000 })
    .should('be.visible');
    cy.get('#AddToCartText').click({force: true});
    cy.get('[class=""LoadingIndicator__Wrapper-hodrYc hwrwkA LoadingIndicator""]', { timeout: 10000 })
    .should('be.visible');
    cy.get('[class=""LoadingIndicator__Wrapper-hodrYc hwrwkA LoadingIndicator""]', { timeout: 10000 })
    .should('not.be.visible');
    cy.wait(10000);
})
})
```
<!-- If we cannot fully run the tests as provided the issue WILL BE CLOSED -->
<!-- Issues without a reproducible example WILL BE CLOSED -->

<!-- You can fork https://github.com/cypress-io/cypress-test-tiny repo, set up a failing test, then link to your fork -->

### Versions
Cypress 5.0
<!-- Cypress, operating system, browser -->
",bug
685005335,chromeWebSecurity setting does not take effect in Electron browser,"### Current behavior:
I make get request to external url.

```js
 .route(/documents\/9\/embed_url/, {
   url:
     ""https://casefleet-cypress-fixtures.s3.amazonaws.com/document-viewer/between/4pages/0.html"",
 })
```

![image](https://user-images.githubusercontent.com/22237897/91100537-0ef5c400-e66e-11ea-8065-e6dcf6a75a1c.png)

In Cypress 5.0 I've got error that request blocked by CORS policy.

### Desired behavior:
In previous Cypress version 4.12.1 it worked without error.

I think it can be result of updating electron from 8.3.1 to 9.0.5

### Versions
Cypress 5.0 
Electron

",bug
684983512,Experimental fetch polyfill has different prototype than webpage,"### Current behavior:

Results from fetch calls when using `experimentalFetchPolyfill` have a different prototype than `Object.prototype` in the browser context. This breaks the `isPlainObject` check in Mobx: https://github.com/mobxjs/mobx/blob/6ec6499fb8b55a17fe65f42b14d1188fd7fa1ba1/src/utils/utils.ts#L85

![image](https://user-images.githubusercontent.com/47303296/91098257-28c3e680-e62f-11ea-8beb-8256a23c54da.png)

### Desired behavior:

When running in the browser without Cypress, we can see that the fetch response behaves correctly:

```js
fetch('/test')
  .then(response => response.json())
  .then(data => Object.getPrototypeOf(data) === Object.prototype); // this evaluates to true in the browser, false in cypress
```

![image](https://user-images.githubusercontent.com/47303296/91098370-56a92b00-e62f-11ea-85ef-d423f4a01e72.png)

### Test code to reproduce

https://github.com/bhgsbatista/cypress_fetch_prototype

### Versions

Cypress: 5.0.0
Browser: Chrome 84
OS: Windows 10.0.19041 Build 19041

",bug
683636495,"Click event triggered by `.click()` has `isTrusted` prop evaluate to `false`, so click does not perform in v-select component.","<!-- Is this a question? Questions WILL BE CLOSED. Ask in our chat https://on.cypress.io/chat  -->

### Current behavior:
I am using Vue + Vuetify. I have a problem with `v-select` component. If I click on `v-select` the list opens. However, Cypress does not close it when clicking outside of this component (in the repro project, Cypress clicks on Vuetify logo but for other elements this is also not working)

![image](https://user-images.githubusercontent.com/17653648/90906039-5875b300-e3d1-11ea-97bf-e60e307b865c.png)

It does not work even if I use `cy.wait(300)` after opening the list (you can see this in the repro project)

### Desired behavior:
The list should be closed when clicking outside of it. When I click as a user the list closes but when Cypress clicks it does not close it.

### Test code to reproduce
Here is the repro project:

[cypress-vuetify-test.zip](https://github.com/cypress-io/cypress/files/5109469/cypress-vuetify-test.zip)

To run Vue.js app you need to execute:

```
npm install
npm run serve
```

then to launch Cypress you need to run:

```
npm run cypress:open
```

<!-- If we cannot fully run the tests as provided the issue WILL BE CLOSED -->
<!-- Issues without a reproducible example WILL BE CLOSED -->

<!-- You can fork https://github.com/cypress-io/cypress-test-tiny repo, set up a failing test, then link to your fork -->

### Versions
Cypress: 5.0.0
Operating system: Windows 10
Browser: Chrome  84.0.4147.135 (but on other browsers this bug is also present)
<!-- Cypress, operating system, browser -->

",bug
682862479,Cypress crashes when running against dashboard(parallel flag) - Cannot read property 'name' of undefined at runEachSpec,"<!-- Is this a question? Questions WILL BE CLOSED. Ask in our chat https://on.cypress.io/chat  -->

### Current behavior:
Reapperance of Issue https://github.com/cypress-io/cypress/issues/8259 submitted by another of our team members

This started to happen again just now, our last successfull run was
Started: Aug 20, 2020 at 04:41pm
Ended: Aug 20, 2020 at 05:03pm

When running our suit of tests with the parallel flag(even if only one machine) the first test spec fails with
```
2020-08-20T16:03:27.9480007Z Cannot read property 'name' of undefined
2020-08-20T16:03:27.9482826Z TypeError: Cannot read property 'name' of undefined
2020-08-20T16:03:27.9484088Z     at runEachSpec (C:\Users\SVCPrevIntern\AppData\Local\Cypress\Cache\5.0.0\Cypress\resources\app\packages\server\lib\modes\run.js:1232:32)
2020-08-20T16:03:27.9485293Z     at C:\Users\SVCPrevIntern\AppData\Local\Cypress\Cache\5.0.0\Cypress\resources\app\packages\server\lib\modes\run.js:416:14
2020-08-20T16:03:27.9486303Z     at tryCatcher (C:\Users\SVCPrevIntern\AppData\Local\Cypress\Cache\5.0.0\Cypress\resources\app\packages\server\node_modules\bluebird\js\release\util.js:16:23)
2020-08-20T16:03:27.9488066Z     at Promise._settlePromiseFromHandler (C:\Users\SVCPrevIntern\AppData\Local\Cypress\Cache\5.0.0\Cypress\resources\app\packages\server\node_modules\bluebird\js\release\promise.js:547:31)
2020-08-20T16:03:27.9491091Z     at Promise._settlePromise (C:\Users\SVCPrevIntern\AppData\Local\Cypress\Cache\5.0.0\Cypress\resources\app\packages\server\node_modules\bluebird\js\release\promise.js:604:18)
2020-08-20T16:03:27.9492058Z     at Promise._settlePromise0 (C:\Users\SVCPrevIntern\AppData\Local\Cypress\Cache\5.0.0\Cypress\resources\app\packages\server\node_modules\bluebird\js\release\promise.js:649:10)
2020-08-20T16:03:27.9492897Z     at Promise._settlePromises (C:\Users\SVCPrevIntern\AppData\Local\Cypress\Cache\5.0.0\Cypress\resources\app\packages\server\node_modules\bluebird\js\release\promise.js:729:18)
2020-08-20T16:03:27.9493724Z     at _drainQueueStep (C:\Users\SVCPrevIntern\AppData\Local\Cypress\Cache\5.0.0\Cypress\resources\app\packages\server\node_modules\bluebird\js\release\async.js:93:12)
2020-08-20T16:03:27.9494499Z     at _drainQueue (C:\Users\SVCPrevIntern\AppData\Local\Cypress\Cache\5.0.0\Cypress\resources\app\packages\server\node_modules\bluebird\js\release\async.js:86:9)
2020-08-20T16:03:27.9495306Z     at Async._drainQueues (C:\Users\SVCPrevIntern\AppData\Local\Cypress\Cache\5.0.0\Cypress\resources\app\packages\server\node_modules\bluebird\js\release\async.js:102:5)
2020-08-20T16:03:27.9496191Z     at Immediate.Async.drainQueues [as _onImmediate] (C:\Users\SVCPrevIntern\AppData\Local\Cypress\Cache\5.0.0\Cypress\resources\app\packages\server\node_modules\bluebird\js\release\async.js:15:14)
2020-08-20T16:03:27.9496786Z     at processImmediate (internal/timers.js:439:21)
```

### Desired behavior:

Cypress doesnt crash
### Test code to reproduce

<!-- You can fork https://github.com/cypress-io/cypress-test-tiny repo, set up a failing test, then link to your fork -->

### Versions

OS: Windows 10.0.17763
File: ./package.json
```json
{
  ""name"": ""testautomation-ia"",
  ""version"": ""1.0.0"",
  ""description"": ""testautomation"",
  ""main"": ""index.js"",
  ""devDependencies"": {
    ""@cypress/webpack-preprocessor"": ""^5.4.4"",
    ""@types/cypress-cucumber-preprocessor"": ""1.14.1"",
    ""@types/node"": ""^14.6.0"",
    ""cypress"": ""^5.0.0"",
    ""cypress-cucumber-preprocessor"": ""^2.5.4"",
    ""guid-typescript"": ""1.0.9"",
    ""mocha"": ""^7.2.0"",
    ""ts-loader"": ""^7.0.5"",
    ""typescript"": ""^3.9.7"",
    ""webpack"": ""^4.44.1""
  },
  ""author"": """",
  ""license"": ""ISC"",
  ""cypress-cucumber-preprocessor"": {
    ""cucumberJson"": {
      ""generate"": true,
      ""outputFolder"": ""cypress/results/cucumber-json"",
      ""filePrefix"": """",
      ""fileSuffix"": "".cucumber""
    },
    ""nonGlobalStepDefinitions"": true
  },
  ""dependencies"": {}
}
```
",bug
682774494,Remove .then wrap from return value of Cypress.Blob.base64StringToBlob,"<!-- Is this a question? Questions WILL BE CLOSED. Ask in our chat https://on.cypress.io/chat  -->

### Current behavior:
We added a `.then` method to the return value of `Cypress.Blob.base64StringToBlob` so we could improve the error message when a user attempts to use its old promise-returning API (see [this comment](https://github.com/abramenal/cypress-file-upload/pull/215#issuecomment-677520674)). This causes methods like `Promise.resolve` and `Promise.try` to think the return value is a `thenable`, invoking the `.then` and throwing our error. This makes it [difficult to add backwards compatibility](https://github.com/abramenal/cypress-file-upload/pull/215) without an ugly hack.

### Desired behavior:
We shouldn't add on the `.then` method so that the return value is not mistaken for a promise-returning value. This may just result in a `.then is not a function` error when using the old API, but that might not be so bad.

### Test code to reproduce
```javascript
it('uses Cypress.Blob.base64StringToBlob', () => {
  return Cypress.Promise.resolve(Cypress.Blob.base64StringToBlob(btoa('foo')))
})
```

<!-- If we cannot fully run the tests as provided the issue WILL BE CLOSED -->
<!-- Issues without a reproducible example WILL BE CLOSED -->

<!-- You can fork https://github.com/cypress-io/cypress-test-tiny repo, set up a failing test, then link to your fork -->

### Versions
Cypress 5.0.0

",bug
682655750,Webpack Compilation Error: Cannot find module - Babel dependency when `.babelrc` defines plugins,"### Current behavior:
The test doesn't start and an error message is displayed
![image](https://user-images.githubusercontent.com/700778/90767164-18280f00-e2c3-11ea-9df5-fe5702f225e2.png)

![image](https://user-images.githubusercontent.com/700778/90769073-085dfa00-e2c6-11ea-8079-d4808c155c05.png)

### Desired behavior:

Test work as they were in version 4.12

### Test code to reproduce
 ?

### Versions

Cypress 5.0 
Ubuntu 20.04",bug
682597897,Retries hangs on failed assertions,"### Current behavior:
Sometimes Cypress hangs to eternity on failed assertions while Retries functionality is active.
I described it once in this ticket:
https://github.com/Bkucera/cypress-plugin-retries/issues/64#issuecomment-675498787

Now I'm experiencing similar issue in 5.0.0 version.
It's probably a problem with `.should('contain', xxx)` assertion.

![obraz](https://user-images.githubusercontent.com/34089686/90758337-2552f700-e2df-11ea-96ca-7f417efb40d9.png)

### Test code to reproduce
<!-- If we cannot fully run the tests as provided the issue WILL BE CLOSED -->
<!-- Issues without a reproducible example WILL BE CLOSED -->

<!-- You can fork https://github.com/cypress-io/cypress-test-tiny repo, set up a failing test, then link to your fork -->

### Versions
5.0.0

",bug
681846649,Retry mechanism of 'should' can erroneously cause the arguments to .should() to be null when cy.log() in fn,"### Current behaviour:
If I want to assert an element doesn't exist in the DOM, I have the option of simply doing something like:
```js
cy.get('#notFound').should('not exist');
```

However, in the logging, this simply returns a rather crude `Expected null not to exist`. In my view, a better way of doing the assertion is:
```js
cy.get('#notFound').should((elem) => {expect(elem).to.not.exist})
```

Which produces a log of `Expected #notFound to not exist` - which is far more informative.

However, I've discovered that if I then try and do more within the 'should' block, Cypress fails, reporting that it DID expect to find the element:

```js
cy.get('#notFound').should((elem) => {expect(elem).to.not.exist; cy.log('As we thought, it is not there')})
```

This produces 'Timed out retrying: Expected to find element: #notFound , but never found it.'

Similarly, the following works:
```js
cy.get('#thisElemIsFound').should((elem) => {expect(elem).to.exist})
```

Yet the following returns 'expected null to exist'
```js
cy.get('#thisElemIsFound').should((elem) => {expect(elem).to.exist; cy.log('As we thought, it is there')})
```

### Desired behavior:

All the following statements should pass - the only difference being, the last two should produce the `cy.log` statements. In summary, it should be possible to do more than just a simple expect statement within the should block.

```js
cy.get('#notFound').should((elem) => {expect(elem).to.not.exist;})
cy.get('#thisElemIsFound').should((elem) => {expect(elem).to.exist;})
cy.get('#notFound').should((elem) => {expect(elem).to.not.exist; cy.log('As we thought, it is not there')})
cy.get('#thisElemIsFound').should((elem) => {expect(elem).to.exist; cy.log('As we thought, it is there')})
```


### Test code to reproduce

Please see above - obviously you'll need to substitute the selectors as appropriate!

### Versions

Cypress 12.1, CentOS 8, Chrome 83.",bug
681244715,v5 beta - missing test times in summary in console,"I've been trying out the latest master builds to see if I can get our tests upgraded to v5 and noticed this - found the same problem on your own builds.

Latest master branch build on windows:

https://ci.appveyor.com/project/cypress-io/cypress/builds/34714208/job/ip9ijo360b0w3ke5?fullLog=true

line 2080:
```
       Spec                                              Tests  Passing  Failing  Pending  Skipped  
  ┌────────────────────────────────────────────────────────────────────────────────────────────────┐
  │ ✔  examples\actions.spec.js                   0ms       14       14        -        -        - │
  ├────────────────────────────────────────────────────────────────────────────────────────────────┤
  │ ✔  examples\aliasing.spec.js                  0ms        2        2        -        -        - │
  ├────────────────────────────────────────────────────────────────────────────────────────────────┤
  │ ✔  examples\assertions.spec.js                0ms        9        9        -        -        - │
  ├────────────────────────────────────────────────────────────────────────────────────────────────┤
  │ ✔  examples\connectors.spec.js                0ms        8        8        -        -        - │
  ├────────────────────────────────────────────────────────────────────────────────────────────────┤
  │ ✔  examples\cookies.spec.js                   0ms        5        5        -        -        - │
  ├────────────────────────────────────────────────────────────────────────────────────────────────┤
  │ ✔  examples\cypress_api.spec.js               0ms       13       13        -        -        - │
  ├────────────────────────────────────────────────────────────────────────────────────────────────┤
  │ ✔  examples\files.spec.js                     0ms        4        4        -        -        - │
  ├────────────────────────────────────────────────────────────────────────────────────────────────┤
  │ ✔  examples\local_storage.spec.js             0ms        1        1        -        -        - │
  ├────────────────────────────────────────────────────────────────────────────────────────────────┤
  │ ✔  examples\location.spec.js                  0ms        3        3        -        -        - │
  ├────────────────────────────────────────────────────────────────────────────────────────────────┤
  │ ✔  examples\misc.spec.js                      0ms        6        6        -        -        - │
  ├────────────────────────────────────────────────────────────────────────────────────────────────┤
  │ ✔  examples\navigation.spec.js                0ms        3        3        -        -        - │
  ├────────────────────────────────────────────────────────────────────────────────────────────────┤
  │ ✔  examples\network_requests.spec.js          0ms        7        7        -        -        - │
  ├────────────────────────────────────────────────────────────────────────────────────────────────┤
  │ ✔  examples\querying.spec.js                  0ms        5        5        -        -        - │
  ├────────────────────────────────────────────────────────────────────────────────────────────────┤
  │ ✔  examples\spies_stubs_clocks.spec.js        0ms        7        7        -        -        - │
  ├────────────────────────────────────────────────────────────────────────────────────────────────┤
  │ ✔  examples\traversal.spec.js                 0ms       18       18        -        -        - │
  ├────────────────────────────────────────────────────────────────────────────────────────────────┤
  │ ✔  examples\utilities.spec.js                 0ms        6        6        -        -        - │
  ├────────────────────────────────────────────────────────────────────────────────────────────────┤
  │ ✔  examples\viewport.spec.js                  0ms        1        1        -        -        - │
  ├────────────────────────────────────────────────────────────────────────────────────────────────┤
  │ ✔  examples\waiting.spec.js                   0ms        2        2        -        -        - │
  ├────────────────────────────────────────────────────────────────────────────────────────────────┤
  │ ✔  examples\window.spec.js                    0ms        3        3        -        -        - │
  └────────────────────────────────────────────────────────────────────────────────────────────────┘
    ✔  All specs passed!                        02:26      117      117        -        -        -  
yarn test-mocha
```

Notice how the times for each individual spec are 0ms - this used to show correct, not sure when it broke, we're stuck on 4.4.1 for performance reasons.",bug
679751321,Cypress incorrectly scrolls element under other element - making it fail visibility check to click,"<!-- Is this a question? Questions WILL BE CLOSED. Ask in our chat https://on.cypress.io/chat  -->

### Current behavior:
I'm writing a test in which I navigate to this page:

![](https://user-images.githubusercontent.com/911671/90334576-9ec7ae00-df9c-11ea-85f0-e0c4b5080598.png)

and then I try to click the green **Start Workout** button. 

However, when I do `cy.get('.button').contains('Start Workout').click()`, Cypress scrolls to here:

![](https://user-images.githubusercontent.com/911671/90334609-e0585900-df9c-11ea-9477-ebb611a3e902.png)

where the button is barely visible.

So when I try to do a standard click, I get:

![](https://user-images.githubusercontent.com/911671/90334687-72f8f800-df9d-11ea-9515-bff14788fcdb.png)

I believe that this is probably due to the navbar changing size during the scroll, as can be seen from the images. However, as can be seen from the first image, no scrolling is needed to click the button.

I tried several workarounds without success, including scrolling manually before the `click`. It seems that the `click` itself is trying to scroll to the element, offsetting it from the visible area. The only workaround that worked was the following:

```js
cy.get('.button')
  .contains('Start Workout')
  .click('bottom')
```

since the bottom edge of the button is still visible.

### Desired behavior:
It would be nice to not have to click an edge of a button during tests, especially when no scrolling is necessary. If the test could pass with:

```js
cy.get('.button')
  .contains('Start Workout')
  .click()
```

that would be great.

### Test code to reproduce
Relevant test:
https://github.com/dtom90/cypress-test-tiny/blob/master/cypress/integration/activeWorkout.spec.js

### Versions
<!-- Cypress, operating system, browser -->

* `Cypress package version: 4.12.1`
* `macOS 10.15.6`
* `Google Chrome Version 84.0.4147.125`

",bug
677531403,Cypress crashes when running against dashboard(parallel flag) - Cannot read property 'name' of undefined at runEachSpec,"### Current behavior:
This has started to happen in the last couple of days, our last successfull run was 
Started: Aug 10, 2020 at 05:32pm
Ended: Aug 10, 2020 at 05:42pm


When running our suit of tests with the parallel flag(even if only one machine) the first test spec fails with 
```
 2020-08-12T08:49:11.597Z cypress:server:cypress exiting with err TypeError: Cannot read property 'name' of undefined
 451       at runEachSpec (C:\Users\frla01\AppData\Local\Cypress\Cache\4.12.1\Cypress\resources\app\packages\server\lib\modes\run.js:1219:32)
 452       at C:\Users\frla01\AppData\Local\Cypress\Cache\4.12.1\Cypress\resources\app\packages\server\lib\modes\run.js:415:14
 453       at tryCatcher (C:\Users\frla01\AppData\Local\Cypress\Cache\4.12.1\Cypress\resources\app\packages\server\node_modules\bluebird\js\release\util.js:16:23)
 454       at Promise._settlePromiseFromHandler (C:\Users\frla01\AppData\Local\Cypress\Cache\4.12.1\Cypress\resources\app\packages\server\node_modules\bluebird\js\release\promise.js:547:31)
 455       at Promise._settlePromise (C:\Users\frla01\AppData\Local\Cypress\Cache\4.12.1\Cypress\resources\app\packages\server\node_modules\bluebird\js\release\promise.js:604:18)
 456       at Promise._settlePromise0 (C:\Users\frla01\AppData\Local\Cypress\Cache\4.12.1\Cypress\resources\app\packages\server\node_modules\bluebird\js\release\promise.js:649:10)
 457       at Promise._settlePromises (C:\Users\frla01\AppData\Local\Cypress\Cache\4.12.1\Cypress\resources\app\packages\server\node_modules\bluebird\js\release\promise.js:729:18)
 458       at _drainQueueStep (C:\Users\frla01\AppData\Local\Cypress\Cache\4.12.1\Cypress\resources\app\packages\server\node_modules\bluebird\js\release\async.js:93:12)
 459       at _drainQueue (C:\Users\frla01\AppData\Local\Cypress\Cache\4.12.1\Cypress\resources\app\packages\server\node_modules\bluebird\js\release\async.js:86:9)
 460       at Async._drainQueues (C:\Users\frla01\AppData\Local\Cypress\Cache\4.12.1\Cypress\resources\app\packages\server\node_modules\bluebird\js\release\async.js:102:5)
 461       at Immediate.Async.drainQueues [as _onImmediate] (C:\Users\frla01\AppData\Local\Cypress\Cache\4.12.1\Cypress\resources\app\packages\server\node_modules\bluebird\js\release\async.js:15:14)
 462       at processImmediate (internal/timers.js:439:21)
 463   Cannot read property 'name' of undefined
```
Debug logs:
[cypress.debug.log](https://github.com/cypress-io/cypress/files/5061666/cypress.debug.log)

### Desired behavior:
Cypress doesnt crash

### Test code to reproduce

<!-- If we cannot fully run the tests as provided the issue WILL BE CLOSED -->
<!-- Issues without a reproducible example WILL BE CLOSED -->

<!-- You can fork https://github.com/cypress-io/cypress-test-tiny repo, set up a failing test, then link to your fork -->

### Versions

OS: Windows Enterprise 10 - 1809 17763.1339
File: .\package.json
```json
 {
  ""name"": ""testautomation-ia"",
  ""version"": ""1.0.0"",
  ""description"": ""testautomation"",
  ""main"": ""index.js"",
  ""devDependencies"": {
    ""@cypress/webpack-preprocessor"": ""^5.4.3"",
    ""@types/cypress-cucumber-preprocessor"": ""1.14.1"",
    ""@types/node"": ""^14.0.27"",
    ""cypress"": ""^4.12.1"",
    ""cypress-cucumber-preprocessor"": ""^2.5.4"",
    ""cypress-plugin-retries"": ""1.5.2"",
    ""guid-typescript"": ""1.0.9"",
    ""mocha"": ""^7.2.0"",
    ""ts-loader"": ""^7.0.5"",
    ""typescript"": ""^3.9.7"",
    ""webpack"": ""^4.44.1""
  },
  ""author"": """",
  ""license"": ""ISC"",
  ""cypress-cucumber-preprocessor"": {
    ""cucumberJson"": {
      ""generate"": true,
      ""outputFolder"": ""cypress/results/cucumber-json"",
      ""filePrefix"": """",
      ""fileSuffix"": "".cucumber""
    },
    ""nonGlobalStepDefinitions"": true
  },
  ""dependencies"": {}
}
```
",bug
677425279,"""Open in IDE"" button beside test/hooks in Command Log is not visible in Firefox.","<!-- Is this a question? Questions WILL BE CLOSED. Ask in our chat https://on.cypress.io/chat  -->

### Current behavior:
#### Chrome/Electron
Upon hover of hook or test, the 'Open in IDE' button appears.

![](http://g.recordit.co/jkSKpEDKwb.gif)

#### Firefox
Upon hover of hook or test, the 'Open in IDE' button does not appear. I'm using Firefox 78.0.1. I checked back to Cypress 4.10.0 when this feature was introduced and this seems to have always been an issue.

![](http://g.recordit.co/QDP0hnMIXx.gif)

### Desired behavior:
Same behavior in all browsers.

I'm quite curious now about our reporter tests - are they not run through all browsers?

### Versions
Cypress 4.12.1

",bug
762845291,Running in headless mode fails,"## Is this a bug report or a feature request?

Bug report

- version: Cypress: 4.12.1, node: 12.18.3, cypress-vue-unit-test: master (ec529fafe769df0020241253af948800b95bf28d)
- platform: macOS Catalina
- expected behavior: Running cypress in headless mode should run tests successfully

First off, I'd just like to say I think this is a fantastic project! I've previously abhorred writing component tests using vue-test-utils & vue-testing-library. This library has actually made frontend development enjoyable! So, thanks for creating this experiment - it's working really well for us so far.

We're trying to put our component tests in CI, but are having trouble running them in headless mode even on dev machines. It builds the source in webpack successfully, then just sits there for a couple of minutes before finally crashing with a pretty opaque (to me) error:

```
1) An uncaught error was detected outside of a test:
     Error: The following error originated from your test code, not from Cypress.

  > Fetching resource at '/__cypress/tests?p=cypress/support/index.ts' failed

When Cypress detects uncaught errors originating from your test code it will automatically fail the current test.

Cypress could not associate this error to any specific test.

We dynamically generated a new test to display this failure.
      at XMLHttpRequest.xhr.onerror (http://localhost:57131/__cypress/runner/cypress_runner.js:172391:14)
```

Happens with both our own project (using version 3.5.1) and in the cli-ts example in this repo on master.

If someone is able to point me in the right direction I'm happy to do some digging and try and fix this!

Cheers",bug
676887807,Cannot find unclaimed instance for spec,"<!-- Is this a question? Questions WILL BE CLOSED. Ask in our chat https://on.cypress.io/chat  -->

### Current behavior:

I got this on the CL. Run do NOT get recorded
This run will not be recorded. On the dashboard the run will be labeled as timeout.

![screenshot-dashboard cypress io-2020 08 11-15_37_47](https://user-images.githubusercontent.com/43818195/89904032-ba236980-dbe8-11ea-80d1-e32ef315f024.png)

![Screenshot (43)](https://user-images.githubusercontent.com/43818195/89904104-d0312a00-dbe8-11ea-9419-42261cfda9d4.png)

```
Warning: We encountered an error talking to our servers.

This error will not alter the exit code.

StatusCodeError: 400

{
  ""message"": ""Cannot find unclaimed instance for spec: cypress\\integration\\dev-tests\\tests_writing_off.spec.js""
}
```

### Desired behavior:

The run to get recorded

### Test code to reproduce

`cypress run --record` 
thrugth npm run 'custom script'.
With any sets of tests.

### Versions

Version 4.12.1
Windows 10
Electron 80
",bug
676795572,"Cypress doesn't respect `Cypress.config('defaultCommandTimeout', n)` set within hooks or tests","## Current behavior: 

Here is my piece of code:
```js
before(function () {
  Cypress.config(""defaultCommandTimeout"", 20000);
  cy.log(Cypress.config(""defaultCommandTimeout""));
  cy.visit(Cypress.env(""base_url""), {
    timeout: 60000
  })
  cy.get(""button[tabindex='-1']"").click();
});  
```

What I am trying to achieve is set the default command time out to 20 secs because my nextJS application takes more than the usual time during CI to load the content of the page.

Once the page is loaded, I expect Cypress to respect the timeout that I set, but it continues to wait for just 4sec which is the default time out. Refer to below screenshots.
Screenshot-1: Cypress started looking for element ""button[tabindex='-1']"" after 14.00 sec of execution
![image](https://user-images.githubusercontent.com/30796059/89890958-9592b600-dc17-11ea-9609-fa5cf55502eb.png)

Screenshot-2: Cypress threw exception that the element is not found within 4 secs (@ 19 seconds)
![image](https://user-images.githubusercontent.com/30796059/89890997-a6dbc280-dc17-11ea-8b9e-b985e6413013.png)

In the same screenshot, I have logged the timeout which is 20000 (see the log statement)

### Desired behavior:
Follow user settings.

### Test code to reproduce
Code is attached above.

<!-- You can fork https://github.com/cypress-io/cypress-test-tiny repo, set up a failing test, then link to your fork -->

### Versions
Cypress : 4.9.0

",bug
676050258,Cypress downloads a blank PDF file from the UI,"<!-- Is this a question? Questions WILL BE CLOSED. Ask in our chat https://on.cypress.io/chat  -->

### Current behavior:

<!-- A description including screenshots, stack traces, DEBUG logs, etc -->
Cypress downloads a blank PDF


### Desired behavior:

<!-- A clear description of what you want to happen -->
Cypress should download the same PDF as downloaded manually 


### Test code to reproduce

<!-- If we cannot fully run the tests as provided the issue WILL BE CLOSED -->
<!-- Issues without a reproducible example WILL BE CLOSED -->
Complete reproducible code with ReadMe is uploaded here: **_https://github.com/abhidp/cypress-pdf-download_**

Tests will run against the url: **_https://receipts.uat-slyp.com.au/WRA-ba8511d6f86fcd488cc335a356ccadd2d37f1c30_**


Instructions:
- clone this repo : `git clone https://github.com/abhidp/cypress-pdf-download.git`
- install dependencies: `npm install`
- open Cypress runner : `npm run cy:open`
- choose Chrome as the browser
- execute test : `pdfExport.spec.js`
- `Test#1` and `Test#3` will pass
- `Test#2` will fail because the downloaded PDF file is blank which is what this issue is all about

Problem: 

When the above steps are executed in Cypress, it downloads a blank PDF file:  `/cypress/downloads/SlypReceipt.pdf`
When manually downloaded, you get the correct PDF file: `/cypress/downloads/SlypReceipt_Working.pdf`

Actual Result: Cypress downloads a blank PDF
Expected Result: Cypress should download the same PDF as downloaded manually 

Replication steps to download the PDF manually:
- navigate to the above url
- click on the Kebab menu (three vertical dots) at the top right corner of the page 
![image](https://user-images.githubusercontent.com/30851622/89775609-8b0aea80-db4b-11ea-8621-348d2f7cb12d.png)
- click on `Export as PDF` option and save it to your local disk 

| PDF downloaded by Cypress   |   PDF downloaded manually |
| :---: | :---: |
|![image](https://user-images.githubusercontent.com/30851622/89774985-37e46800-db4a-11ea-91aa-25d24ac3a5a8.png) | ![image](https://user-images.githubusercontent.com/30851622/89774996-40d53980-db4a-11ea-8a0f-fc5ecd411d80.png) |
<!-- You can fork https://github.com/cypress-io/cypress-test-tiny repo, set up a failing test, then link to your fork -->

### Versions

<!-- Cypress, operating system, browser -->

Macbook Pro: 
```
ProductName:    Mac OS X
ProductVersion: 10.15.5
BuildVersion:   19F101
```
Cypress: `4.12.1`

Browser: 
```
Google Chrome is up to date
Version 84.0.4147.105 (Official Build) (64-bit)
```",bug
673672248,"""Cannot set property 'err' of undefined"" error occurs in place of other errors during automatic test-reruns on file save (4.12.1).","Current behavior:
This is a reopen of https://github.com/cypress-io/cypress/issues/7874, since the issue is not fixed after upgrading to 4.12.1. The behavior is the same, but the test code branch is different and this can be reproduced at least 50% of the time.

When running tests locally through cypress open by saving files (forcing a re-run), any failures occurred during the run can trigger this message:

```
The following error originated from your application code, not from Cypress.

  > Cannot set property 'err' of undefined

When Cypress detects uncaught errors originating from your application it will automatically fail the current test.

This behavior is configurable, and you can choose to turn this off by listening to the uncaught:exception event. Learn more
```

Desired behavior:
The test fails with the normal readable stack trace.

Test code to reproduce
https://github.com/primitiveconcept/ludumdare46/tree/cypress/err-of-undefined-4-12-1/client

Run `npm run cy:dev` for server + Cypress
Run the `infostealer.spec.ts` spec
Save the `infostealer.spec.ts` while the test is running. Note that 50% of the time, this error occurs, and 50% of the time, the test is cut short and passes when it should fail. This may or may not be caused by a separate issue.

Versions
Cypress versions: Can reproduce on 4.12.1. Cannot reproduce on 4.5.0. Other versions are unstable for various reasons on the example project.
OS: MacOS + Windows
Browser: Chrome + Electron",bug
672018372,Cannot find module 'tslib' on fresh installation,"<!-- Is this a question? Questions WILL BE CLOSED. Ask in our chat https://on.cypress.io/chat  -->

### Current behavior:
On a fresh install and launch (`yarn run cypress open`) I am receiving the following:
<!-- A description including screenshots, stack traces, DEBUG logs, etc -->

```
Message: Cannot find module 'tslib'
Require stack:
- /Users/Alex/Library/Caches/Cypress/4.11.0/Cypress.app/Contents/Resources/app/packages/reporter/lib/resolve-dist.js
- /Users/Alex/Library/Caches/Cypress/4.11.0/Cypress.app/Contents/Resources/app/packages/server/lib/controllers/reporter.js
- /Users/Alex/Library/Caches/Cypress/4.11.0/Cypress.app/Contents/Resources/app/packages/server/lib/routes.js
- /Users/Alex/Library/Caches/Cypress/4.11.0/Cypress.app/Contents/Resources/app/packages/server/lib/server.js
- /Users/Alex/Library/Caches/Cypress/4.11.0/Cypress.app/Contents/Resources/app/packages/server/lib/project.js
- /Users/Alex/Library/Caches/Cypress/4.11.0/Cypress.app/Contents/Resources/app/packages/server/lib/gui/events.js
- /Users/Alex/Library/Caches/Cypress/4.11.0/Cypress.app/Contents/Resources/app/packages/server/lib/modes/interactive.js
- /Users/Alex/Library/Caches/Cypress/4.11.0/Cypress.app/Contents/Resources/app/packages/server/lib/modes/index.js
- /Users/Alex/Library/Caches/Cypress/4.11.0/Cypress.app/Contents/Resources/app/packages/server/lib/cypress.js
- /Users/Alex/Library/Caches/Cypress/4.11.0/Cypress.app/Contents/Resources/app/packages/server/index.js
- /Users/Alex/Library/Caches/Cypress/4.11.0/Cypress.app/Contents/Resources/app/index.js
- 

Stack trace:
Error: Cannot find module 'tslib'
Require stack:
- /Users/Alex/Library/Caches/Cypress/4.11.0/Cypress.app/Contents/Resources/app/packages/reporter/lib/resolve-dist.js
- /Users/Alex/Library/Caches/Cypress/4.11.0/Cypress.app/Contents/Resources/app/packages/server/lib/controllers/reporter.js
- /Users/Alex/Library/Caches/Cypress/4.11.0/Cypress.app/Contents/Resources/app/packages/server/lib/routes.js
- /Users/Alex/Library/Caches/Cypress/4.11.0/Cypress.app/Contents/Resources/app/packages/server/lib/server.js
- /Users/Alex/Library/Caches/Cypress/4.11.0/Cypress.app/Contents/Resources/app/packages/server/lib/project.js
- /Users/Alex/Library/Caches/Cypress/4.11.0/Cypress.app/Contents/Resources/app/packages/server/lib/gui/events.js
- /Users/Alex/Library/Caches/Cypress/4.11.0/Cypress.app/Contents/Resources/app/packages/server/lib/modes/interactive.js
- /Users/Alex/Library/Caches/Cypress/4.11.0/Cypress.app/Contents/Resources/app/packages/server/lib/modes/index.js
- /Users/Alex/Library/Caches/Cypress/4.11.0/Cypress.app/Contents/Resources/app/packages/server/lib/cypress.js
- /Users/Alex/Library/Caches/Cypress/4.11.0/Cypress.app/Contents/Resources/app/packages/server/index.js
- /Users/Alex/Library/Caches/Cypress/4.11.0/Cypress.app/Contents/Resources/app/index.js
- 
    at Module._resolveFilename (internal/modules/cjs/loader.js:798:15)
    at Function../lib/common/reset-search-paths.ts.Module._resolveFilename (electron/js2c/browser_init.js:7632:16)
    at Module._load (internal/modules/cjs/loader.js:691:27)
    at Module._load (electron/js2c/asar.js:717:26)
    at Function.Module._load (electron/js2c/asar.js:717:26)
    at Function.Module._load (/Users/Alex/Library/Caches/Cypress/4.11.0/Cypress.app/Contents/Resources/app/packages/server/lib/override_require.js:18:25)
    at Module.require (internal/modules/cjs/loader.js:853:19)
    at require (internal/modules/cjs/helpers.js:74:18)
    at Object.<anonymous> (/Users/Alex/Library/Caches/Cypress/4.11.0/Cypress.app/Contents/Resources/app/packages/reporter/lib/resolve-dist.js:2:15)
    at Module._compile (internal/modules/cjs/loader.js:968:30)
    at Module.m._compile (/Users/Alex/Library/Caches/Cypress/4.11.0/Cypress.app/Contents/Resources/app/packages/server/node_modules/ts-node/src/index.ts:536:23)
    at Module._extensions..js (internal/modules/cjs/loader.js:986:10)
    at Object.require.extensions.<computed> [as .js] (/Users/Alex/Library/Caches/Cypress/4.11.0/Cypress.app/Contents/Resources/app/packages/server/node_modules/ts-node/src/index.ts:539:12)
    at Module.load (internal/modules/cjs/loader.js:816:32)
    at Module._load (internal/modules/cjs/loader.js:728:14)
    at Module._load (electron/js2c/asar.js:717:26)
    at Function.Module._load (electron/js2c/asar.js:717:26)
    at Function.Module._load (/Users/Alex/Library/Caches/Cypress/4.11.0/Cypress.app/Contents/Resources/app/packages/server/lib/override_require.js:18:25)
    at Module.require (internal/modules/cjs/loader.js:853:19)
    at require (internal/modules/cjs/helpers.js:74:18)
    at Object.<anonymous> (/Users/Alex/Library/Caches/Cypress/4.11.0/Cypress.app/Contents/Resources/app/packages/server/lib/controllers/reporter.js:2:18)
    at Module._compile (internal/modules/cjs/loader.js:968:30)
    at Module.m._compile (/Users/Alex/Library/Caches/Cypress/4.11.0/Cypress.app/Contents/Resources/app/packages/server/node_modules/ts-node/src/index.ts:536:23)
    at Module._extensions..js (internal/modules/cjs/loader.js:986:10)
    at Object.require.extensions.<computed> [as .js] (/Users/Alex/Library/Caches/Cypress/4.11.0/Cypress.app/Contents/Resources/app/packages/server/node_modules/ts-node/src/index.ts:539:12)
    at Module.load (internal/modules/cjs/loader.js:816:32)
    at Module._load (internal/modules/cjs/loader.js:728:14)
    at Module._load (electron/js2c/asar.js:717:26)
    at Function.Module._load (electron/js2c/asar.js:717:26)
    at Function.Module._load (/Users/Alex/Library/Caches/Cypress/4.11.0/Cypress.app/Contents/Resources/app/packages/server/lib/override_require.js:18:25)
    at Module.require (internal/modules/cjs/loader.js:853:19)
    at require (internal/modules/cjs/helpers.js:74:18)
    at Object.<anonymous> (/Users/Alex/Library/Caches/Cypress/4.11.0/Cypress.app/Contents/Resources/app/packages/server/lib/routes.js:9:18)
    at Module._compile (internal/modules/cjs/loader.js:968:30)
    at Module.m._compile (/Users/Alex/Library/Caches/Cypress/4.11.0/Cypress.app/Contents/Resources/app/packages/server/node_modules/ts-node/src/index.ts:536:23)
    at Module._extensions..js (internal/modules/cjs/loader.js:986:10)
    at Object.require.extensions.<computed> [as .js] (/Users/Alex/Library/Caches/Cypress/4.11.0/Cypress.app/Contents/Resources/app/packages/server/node_modules/ts-node/src/index.ts:539:12)
    at Module.load (internal/modules/cjs/loader.js:816:32)
    at Module._load (internal/modules/cjs/loader.js:728:14)
    at Module._load (electron/js2c/asar.js:717:26)
    at Function.Module._load (electron/js2c/asar.js:717:26)
    at Function.Module._load (/Users/Alex/Library/Caches/Cypress/4.11.0/Cypress.app/Contents/Resources/app/packages/server/lib/override_require.js:18:25)
    at Module.require (internal/modules/cjs/loader.js:853:19)
    at require (internal/modules/cjs/helpers.js:74:18)
    at Server.createRoutes (/Users/Alex/Library/Caches/Cypress/4.11.0/Cypress.app/Contents/Resources/app/packages/server/lib/server.js:174:12)
    at /Users/Alex/Library/Caches/Cypress/4.11.0/Cypress.app/Contents/Resources/app/packages/server/lib/server.js:220:12
    at tryCatcher (/Users/Alex/Library/Caches/Cypress/4.11.0/Cypress.app/Contents/Resources/app/packages/server/node_modules/bluebird/js/release/util.js:16:23)
    at Function.Promise.attempt.Promise.try (/Users/Alex/Library/Caches/Cypress/4.11.0/Cypress.app/Contents/Resources/app/packages/server/node_modules/bluebird/js/release/method.js:39:29)
    at Server.open (/Users/Alex/Library/Caches/Cypress/4.11.0/Cypress.app/Contents/Resources/app/packages/server/lib/server.js:195:23)
    at /Users/Alex/Library/Caches/Cypress/4.11.0/Cypress.app/Contents/Resources/app/packages/server/lib/project.js:135:26
    at tryCatcher (/Users/Alex/Library/Caches/Cypress/4.11.0/Cypress.app/Contents/Resources/app/packages/server/node_modules/bluebird/js/release/util.js:16:23)
    at Promise._settlePromiseFromHandler (/Users/Alex/Library/Caches/Cypress/4.11.0/Cypress.app/Contents/Resources/app/packages/server/node_modules/bluebird/js/release/promise.js:547:31)
    at Promise._settlePromise (/Users/Alex/Library/Caches/Cypress/4.11.0/Cypress.app/Contents/Resources/app/packages/server/node_modules/bluebird/js/release/promise.js:604:18)
    at Promise._settlePromise0 (/Users/Alex/Library/Caches/Cypress/4.11.0/Cypress.app/Contents/Resources/app/packages/server/node_modules/bluebird/js/release/promise.js:649:10)
    at Promise._settlePromises (/Users/Alex/Library/Caches/Cypress/4.11.0/Cypress.app/Contents/Resources/app/packages/server/node_modules/bluebird/js/release/promise.js:729:18)
    at _drainQueueStep (/Users/Alex/Library/Caches/Cypress/4.11.0/Cypress.app/Contents/Resources/app/packages/server/node_modules/bluebird/js/release/async.js:93:12)
    at _drainQueue (/Users/Alex/Library/Caches/Cypress/4.11.0/Cypress.app/Contents/Resources/app/packages/server/node_modules/bluebird/js/release/async.js:86:9)
    at Async._drainQueues (/Users/Alex/Library/Caches/Cypress/4.11.0/Cypress.app/Contents/Resources/app/packages/server/node_modules/bluebird/js/release/async.js:102:5)
    at Immediate.Async.drainQueues [as _onImmediate] (/Users/Alex/Library/Caches/Cypress/4.11.0/Cypress.app/Contents/Resources/app/packages/server/node_modules/bluebird/js/release/async.js:15:14)
    at processImmediate (internal/timers.js:439:21)
```

![image](https://user-images.githubusercontent.com/5206906/89179143-0b977d00-d587-11ea-93db-0ce5cf0fd126.png)

### Desired behavior:
I expected to be met with the Cypress test runner.

### Test code to reproduce
```
yarn add cypress
yarn run cypress open
```

<!-- If we cannot fully run the tests as provided the issue WILL BE CLOSED -->
<!-- Issues without a reproducible example WILL BE CLOSED -->

<!-- You can fork https://github.com/cypress-io/cypress-test-tiny repo, set up a failing test, then link to your fork -->

### Versions
Cypress 4.11.0
macOS Catalina 10.15.5 Beta

<!-- Cypress, operating system, browser -->

",bug
669947949,Testing on jira cloud website hangs trying to load page,"<!-- Is this a question? Questions WILL BE CLOSED. Ask in our chat https://on.cypress.io/chat  -->

### Current behavior:

Trying to test any addon for jira cloud. 
A lot of errors visible in console, check screenshots below.
Errors may be connected to @jennifer-shehane issue: https://github.com/cypress-io/cypress/issues/1436, I found the same `fn of undefined` visible in logs.

Jira Cloud is using iframes to display addons, so there may be the source of errors. I had to disable web security and use ignore x headers plugin for log in.
In sources I found potential fixes https://github.com/cypress-io/cypress/blob/6960f7cd78c9d730ed2d595faf5dc0a06d524270/packages/proxy/lib/http/util/regex-rewriter.ts#L8. 
![result](https://user-images.githubusercontent.com/6080725/89050691-6ea0ce00-d353-11ea-9e9a-427d280d4a32.png)
![console](https://user-images.githubusercontent.com/6080725/89050747-80827100-d353-11ea-98d6-8c4df0176302.png)

<!-- A description including screenshots, stack traces, DEBUG logs, etc -->

### Desired behavior:
Jira cloud renders addons.

<!-- A clear description of what you want to happen -->

### Test code to reproduce

Ready to use example in https://github.com/galczo5/cypress-jira-cloud

<!-- If we cannot fully run the tests as provided the issue WILL BE CLOSED -->
<!-- Issues without a reproducible example WILL BE CLOSED -->

<!-- You can fork https://github.com/cypress-io/cypress-test-tiny repo, set up a failing test, then link to your fork -->

### Versions

Cypress: 4.11.0
Chromium: 83
Tested on Pop OS and MacOS, same result
<!-- Cypress, operating system, browser -->
",bug
667411836,"iFrame elements that focus, when calling `.type()` are actually blurred (when Test Runner is not focused)","### Current behavior:
Currently if you load a page that has an iFrame, and that iFrame has an input that you programmatically `focus`, attempting to focus via Cypress testing causes the input to blur instead. 

### Desired behavior:
When focusing on an input that is already focused, a blur should not occur; it should remain focused. 

### Test code to reproduce
https://github.com/cypress-io/cypress-test-tiny/pull/61

### Versions
macOS Catalina, version 10.15.5
Chrome version 84.0.4147.89
Cypress package version: 4.10.0
Cypress binary version: 4.10.0

",bug
666018657,Error [ERR_REQUIRE_ESM]: Must use import to load ES Module error thrown,"### Current behavior:
We're trying to update Cypress from 4.5.0 to >= 4.6.0 but we encountered into a problem

```
Error [ERR_REQUIRE_ESM]: Must use import to load ES Module: /Users/nitzannashi/zattoo/web/projects/common/cypress/plugins/index.js
require() of ES modules is not supported.
require() of /Users/nitzannashi/zattoo/web/projects/common/cypress/plugins/index.js from /Users/nitzannashi/zattoo/web/projects/common/cypress/plugins/index.cjs is an ES module file as it is a .js file whose nearest parent package.json contains ""type"": ""module"" which defines all .js files in that package scope as ES modules.
Instead rename index.js to end in .cjs, change the requiring code to use import(), or remove ""type"": ""module"" from /Users/nitzannashi/zattoo/web/package.json.

    at Module._extensions..js (internal/modules/cjs/loader.js:1216:13)
    at Object.require.extensions.<computed> [as .js] (/Users/nitzannashi/Library/Caches/Cypress/4.7.0/Cypress.app/Contents/Resources/app/packages/server/node_modules/ts-node/src/index.ts:539:12)
    at Module.load (internal/modules/cjs/loader.js:1049:32)
    at Function.Module._load (internal/modules/cjs/loader.js:937:14)
    at Module.require (internal/modules/cjs/loader.js:1089:19)
    at require (internal/modules/cjs/helpers.js:73:18)
    at /Users/nitzannashi/zattoo/web/projects/common/cypress/plugins/index.cjs:22:54
    at processTicksAndRejections (internal/process/task_queues.js:97:5)
```

My setup is a little bit different from the usual one, I have a index.cjs and index.js, cypress.json config is as follow:
```json
    ""nodeVersion"": ""system"",
    ""pluginsFile"": ""projects/common/cypress/plugins/index.cjs"",
```

plugins/index.cjs
```js
module.exports = (...args) => {
    return import('./index.js').then((mod) => {
        return mod.default(...args);
    });
};
```

plugins/index.js
```js
import snapshotPlugin from 'cypress-image-snapshot/plugin.js';
import retriesPlugin from 'cypress-plugin-retries/lib/plugin.js';
import webpack from '@cypress/webpack-preprocessor/index.js';

const plugins = async (on, config) => {
    ....
}

export default plugins;
```

package.json as `""type"": ""module"",` but I do not understand why cypress should care about it.

Furthermore I tried to update `@cypress/webpack-preprocessor` from `4.1.3` -> `5.4.0` with modification to `index.js` but no changes.
I'm not sure if it's a cypress issue or cypress/webpack-preprocessor issue but it's a blocker for me to update cypress


### Desired behavior:
Cypress is loaded as expected and working

### Versions
 `>= 4.6.0`
",bug
663714029,"exception: Whoops, there is no test to run when setting `window.top.location`","<!-- Is this a question? Questions WILL BE CLOSED. Ask in our chat https://on.cypress.io/chat  -->
when run visit https://weex.kaola.com/activity/pages/cosmetic.html?spm=a2v0d.b27995055.icon.1, it's crash, Whoops, there is no test to run.

case: 

```js      
cy.viewport(1024, 768);
cy.visit('https://m.kaola.com/');

cy.wait(1000);
cy.get('div.closeBtn').click();

cy.wait(1000);
cy.get('a:nth-child(1) > img.icon').click();

cy.visit('https://weex.kaola.com/activity/pages/cosmetic.html?spm=a2v0d.b27995055.icon.1');
```


### Current behavior:

<!-- A description including screenshots, stack traces, DEBUG logs, etc -->

### Desired behavior:

<!-- A clear description of what you want to happen -->

### Test code to reproduce

<!-- If we cannot fully run the tests as provided the issue WILL BE CLOSED -->
<!-- Issues without a reproducible example WILL BE CLOSED -->

<!-- You can fork https://github.com/cypress-io/cypress-test-tiny repo, set up a failing test, then link to your fork -->

### Versions

<!-- Cypress, operating system, browser -->
cypress: 4.10.0
system: mac
browser: chrome 83",bug
662969387,"<object type=""application/pdf"" /> and <iframe /> not showing PDF in Chrome headless mode","<!-- Is this a question? Questions WILL BE CLOSED. Ask in our chat https://on.cypress.io/chat  -->

### Test code to reproduce

I have the following code in the app which renders a PDF document using Chrome's built-in  PDF renderer.

```html
<object 
  type=""application/pdf""
  data=""http://www.africau.edu/images/default/sample.pdf""
  width=""100%""
  test-id=""embedded-preview""
  style=""height: calc(100vh - 120px);""
>
   Document preview
</object>
```

### Current behavior:

When running through the cypress app everything works fine. But, when running using `cypress run --browser chrome --headless` or `cypress run --browser chrome` the test fails and later checking the video, I see that the PDF is not rendered. Instead, for the headless mode it shows the alternative text (`Document preview` string in the above case) and for the headed mode nothing is shown.

### Desired behavior:

I want a PDF to be rendered when running the tests using `cypress run` same as how it gets rendered when using ""cypress open"".


### Versions

Cypress 4.9.0
Google Chrome, Version 84.0.4147.89 (Official Build) (64-bit)
OS: Ubuntu 20.04, 5.4.0-40-generic #44-Ubuntu",bug
662366922,AST rewriting not adding closing script tag when string is too long,"<!-- Is this a question? Questions WILL BE CLOSED. Ask in our chat https://on.cypress.io/chat  -->

### Current behavior:
The following test case, with `experimentalSourceRewriting` turned on, will not properly render the page. (It doesn't properly render the page without it either, see #1068)

```javascript
  it('can open office online', () => {
    cy.visit('https://www.office.com/launch/excel?ms.officeurl=webapps&auth=2');

    cy.contains('Sign in').should('be', 'visible');
  });
```

It looks like when the source is being rewritten, something is causing the closing `</script>` tag to be omitted. When this tag is omitted, the rest of the page goes missing as well.

Here's what the rewritten response looks like:

![Screen Shot 2020-07-20 at 6 32 38 PM](https://user-images.githubusercontent.com/7033952/87995503-aee38f00-cabd-11ea-91b2-071054e99d27.png)

Here's the actual response:

![Screen Shot 2020-07-20 at 6 32 58 PM](https://user-images.githubusercontent.com/7033952/87995509-b145e900-cabd-11ea-8c96-25e801d6d120.png)

From some initial investigations it appears that this is a bug caused by the length of the script.

",bug
659563935,Mocking a route with an empty response body doesn't show the XHR call as being stubbed,"### Current behavior:
Mocking a route with an empty response body

```js
cy.route('/sockjs-node/**', '').as('nodeSock');
```

incorrectly shows the XHR call not being stubbed:

![](https://user-images.githubusercontent.com/2589135/87823479-4f208600-c828-11ea-887e-f8b1fe5786dd.png)

Mocking the response body with a non-falsy value does produce the correct outcome:

```js
cy.route('/sockjs-node/**', '1').as('nodeSock');
```

![](https://user-images.githubusercontent.com/2589135/87823575-7f682480-c828-11ea-9d37-fe1ff325f008.png)

**Note: the request IS marked as stubbed in the Console in both cases:

![](https://user-images.githubusercontent.com/2589135/87824070-72980080-c829-11ea-9c63-ec43d27c278c.png)

### Desired behavior:
Both examples should show the call as `(xhr stub)` in the test runner.

### Test code to reproduce
1. Mock any route with an empty response body.
1. Observe the mocked XHR call note being shown as stubbed.

### Versions
Cypress@4.10, node 12.16.3, macOS 10.15.5

",bug
659204587,Cypress can not work with @emotion/babel-preset-css-prop,"<!-- Is this a question? Questions WILL BE CLOSED. Ask in our chat https://on.cypress.io/chat  -->

### Current behavior:

<!-- A description including screenshots, stack traces, DEBUG logs, etc -->

```sh
cypress_runner.js:197677 ReferenceError: The following error originated from your test code, not from Cypress.

  > exports is not defined

When Cypress detects uncaught errors originating from your test code it will automatically fail the current test.

Cypress could not associate this error to any specific test.

We dynamically generated a new test to display this failure.

Check your console for the stack trace or click this message to see where it originated from.
    at Module../components/button/index.tsx (http://localhost:58578/__cypress/tests?p=components/button/button.spec.tsx:979:1)
    at __webpack_require__ (http://localhost:58578/__cypress/tests?p=components/button/button.spec.tsx:20:30)
    at Module../components/button/button.spec.tsx (http://localhost:58578/__cypress/tests?p=components/button/button.spec.tsx:186:38)
    at __webpack_require__ (http://localhost:58578/__cypress/tests?p=components/button/button.spec.tsx:20:30)
    at Object.0 (http://localhost:58578/__cypress/tests?p=components/button/button.spec.tsx:32458:18)
    at __webpack_require__ (http://localhost:58578/__cypress/tests?p=components/button/button.spec.tsx:20:30)
    at eval (http://localhost:58578/__cypress/tests?p=components/button/button.spec.tsx:84:18)
    at eval (http://localhost:58578/__cypress/tests?p=components/button/button.spec.tsx:87:10)
    at eval (<anonymous>)
From previous event:
    at Object.runScripts (http://localhost:58578/__cypress/runner/cypress_runner.js:173622:28)
    at $Cypress.onSpecWindow (http://localhost:58578/__cypress/runner/cypress_runner.js:163788:20)
```


### Desired behavior:

No error.

### Test code to reproduce

Go to https://github.com/mervinjin/cypress-test-tiny, clone it and run: 
```sh
yarn && yarn cypress:open
```

then, select `index.spec.tsx`.

<!-- If we cannot fully run the tests as provided the issue WILL BE CLOSED -->
<!-- Issues without a reproducible example WILL BE CLOSED -->

<!-- You can fork https://github.com/cypress-io/cypress-test-tiny repo, set up a failing test, then link to your fork -->

### Versions

cypress: `^4.10.0`

<!-- Cypress, operating system, browser -->
",bug
658944980,`Cannot read property '__error' of null` error thrown when providing `null.json` to `cy.fixture()`,"### Current behavior:
When passing a file containing `null` content to `cy.fixture()`, an error is thrown: `Cannot read property '__error' of null`

### Desired behavior:
Should read in `null.json` file as this is valid.

### Test code to reproduce
```js
it('works when fx in route', () => {
  cy.visit('https://example.cypress.io/commands/aliasing')
  cy.server()
  cy.route('GET', 'comments/*', 'fx:null.json').as('getComment')
  cy.get('.network-btn').click()
  cy.wait('@getComment').its('status').should('eq', 200)
})

it('works with non-null json', () => {
  cy.fixture(""user.json"")
})

it('fails with application error', () => {
  cy.fixture(""null.json"")
})
```

![](https://user-images.githubusercontent.com/1271364/87757809-4da78b80-c831-11ea-9f45-bdd05cd2882e.png)

### Versions
4.10.0 (I thought this may have been a regression, but it appears to not be).

",bug
658663682,Cypress and Yarn 2 PNP support,"<!-- Is this a question? Questions WILL BE CLOSED. Ask in our chat https://on.cypress.io/chat  -->

### Current behavior:

In Yarn 2 monorepo I have a package `a` and tests in package `b`.

When I do

```js
// b/cypress/plugins/index
module.exports = require('a/src/cypress/plugins');
```

It works as expected.

But

```js
// a/cypress/commands/index
require('a/src/cypress/commands');
```

Fails with error:

```
Oops...we found an error preparing this test file:

  /Users/xxx/b/cypress/support/index.js

The error was:

Error: Cannot find module 'a/src/cypress/support' from '/Users/xxx/b/cypress/support'
```

Looks like Yarn's Plug'n'play file `.pnp.js` is not present in second (commands) context.

### Desired behavior:

Require of monorepo packages should work.
",bug
658343395,Setting per-test environment variables does not merge with per-suite envs & leaks to next test,"Cypress v4.10.0

Reproduction https://github.com/cypress-io/cypress-example-recipes recipe examples/server-communication__env-variables spec file

The test sets per-suite environment variables and per-test environment variables.

```js
context('Suite env variables', {
  env: {
    suiteApi: 'https://staging.dev',
    commonFlag: 'suite',
  },
}, () => {
  it('has all environment variables', () => {
    expect(Cypress.env('suiteApi')).to.equal('https://staging.dev')
  })

  // NOTE: does not work, seems test variables override
  // the suite variables but in a weird way (even after commenting out and
  // reloading the old variable is still there!)
  it.only('has test-specific env variables', {
    env: {
      testFlag: 42,
      commonFlag: 'test',
    },
  }, () => {
    expect(Cypress.env('testFlag'), 'test level variable').to.equal(42)
    expect(Cypress.env('commonFlag'), 'test overrides suite').to.equal('test')
    expect(Cypress.env('suiteApi'), 'suite level variable').to.equal('https://staging.dev')
  })
})
```

I expect the final `Cypress.env` object to have the variables from both the suite and the test itself

But it does not have suite variables

<img width=""1278"" alt=""Screen Shot 2020-07-16 at 12 08 57 PM"" src=""https://user-images.githubusercontent.com/2212006/87695522-955ce300-c75d-11ea-8f76-03da5801c891.png"">
",bug
657797423,headless screenshots can't show error line with relevant file,"run by cypress test runner:

<img width=""537"" alt=""截屏2020-07-16 上午10 35 11"" src=""https://user-images.githubusercontent.com/22906174/87620233-9afffc00-c750-11ea-83da-b44dfaaefa49.png"">

I can see assert error with relevant file.

run by headless:

<img width=""395"" alt=""截屏2020-07-16 上午10 35 21"" src=""https://user-images.githubusercontent.com/22906174/87620247-a3583700-c750-11ea-89b2-f44bc7edd5f7.png"">

screenshots only get assert error without relevant error file.


### Versions

Cypress 4.10.0

",bug
657561988,remote-debugging-port cannot be set using ELECTRON_EXTRA_LAUNCH_ARGS,"### Current behavior:
When `set ELECTRON_EXTRA_LAUNCH_ARGS=--remote-debugging-port 40500` is used then nothing happens

**BUT**

When I change environment.js to use `appendSwitch` instead, it works:

`app.commandLine.appendSwitch('remote-debugging-port', '40500')`

### Desired behavior:
I can set option via environment variable

### Test code to reproduce
```
set ELECTRON_EXTRA_LAUNCH_ARGS=--remote-debugging-port 40500
cypress open
```

Cypress should output:
`DevTools listening on ws://127.0.0.1:40500/devtools/browser/<UUID>`

### Versions
Windows 10, Cypress 4.10.0, using builtin Electron in Headed mode

",bug
657043433,Range Error :Maximum call stack size exceeded when calling scrollIntoView on shadow DOM el,"I have application with lit-html web component. When button is clicked on a test bed html, dialog (lit-html web component) appears with ok button. I am trying to hover over it. Since no solutions of hover work for me, i tried out ""cypress-nhover"": ""1.0.0"",

```js
cy.get('dialog').get('.ok-button', { includeShadowDom: true }).nhover()
```

It creates an error

```
get  .ok-button 
scrollIntoView {log: false}
RangeError
Maximum call stack size exceeded

View stack trace
 Print to console
    at Sizzle (http://localhost:8002/__cypress/runner/cypress_runner.js:85876:27)
    at Function.Sizzle.matches (http://localhost:8002/__cypress/runner/cypress_runner.js:86505:10)
    at Function.jQuery.filter (http://localhost:8002/__cypress/runner/cypress_runner.js:87883:22)
    at winnow (http://localhost:8002/__cypress/runner/cypress_runner.js:87866:22)
    at jQuery.fn.init.is (http://localhost:8002/__cypress/runner/cypress_runner.js:87919:13)
    at findScrollableParent (http://localhost:8002/__cypress/runner/cypress_runner.js:151206:16)
    at findScrollableParent (http://localhost:8002/__cypress/runner/cypress_runner.js:151214:11)
    at findScrollableParent (http://localhost:8002/__cypress/runner/cypress_runner.js:151214:11)
    at findScrollableParent (http://localhost:8002/__cypress/runner/cypress_runner.js:151214:11)
    at findScrollableParent (http://localhost:8002/__cypress/runner/cypress_runner.js:151214:11)
    at findScrollableParent (http://localhost:8002/__cypress/runner/cypress_runner.js:151214:11)
    at findScrollableParent (http://localhost:8002/__cypress/runner/cypress_runner.js:151214:11)
    at findScrollableParent (http://localhost:8002/__cypress/runner/cypress_runner.js:151214:11)
    at findScrollableParent (http://localhost:8002/__cypress/runner/cypress_runner.js:151214:11)
    at findScrollableParent (http://localhost:8002/__cypress/runner/cypress_runner.js:151214:11)
```

",bug
656613965,Pop up does not show up,"### Current behavior:

I am practicing automation with Cypress on http://automationpractice.com

On the page http://automationpractice.com/index.php?id_product=1&controller=product when Cypress clicks on element with selector '#bigpic' nothing happens.
![image](https://user-images.githubusercontent.com/14077302/87430208-8f47f480-c5ed-11ea-964c-672ff54d3152.png)

When I click the element manually, the pop up is shown.

![image](https://user-images.githubusercontent.com/14077302/87430334-bbfc0c00-c5ed-11ea-96e8-7cc7e0dfff5d.png)

### Desired behavior:

After click on '#bigpic' the pop-up is displayed

### Test code to reproduce

```js
context('Full size', () => {
        beforeEach(() => {
            cy.visit('http://automationpractice.com/index.php?id_product=1&controller=product')
        })

        it('Show full size', () => {
            cy.get('#bigpic').click()
        })
    })
```

### Versions

cypress 4.8.0,
Chrome 83, Firefox 77
Windows 8.1",bug
656341387,Cypress hangs when minimizing headed Chrome browser during `cy.screenshot()`,"### Current behavior: 

During `cypress run` or `cypress open`, if you minimize the headed Chrome browser before the screenshot command is run, Cypress hangs forever.

This does *not* happen in Firefox or Electron headed.

### Desired behavior:

Cypress shouldn't hang regardless of minimized state of browser. 

### Test code to reproduce

```html
<html>
<body style=""background: linear-gradient(yellow, blue, red);"">
</body>
</html>
```

```js
it('Take a screenshot', () => {
  cy.visit('index.html')
  cy.screenshot()
})
```

```
cypress run --browser chrome -headed
```

After running the command above, instantly minimize the Chrome browser. Cypress will hang.

```
cypress open
```

After running the command above, instantly minimize the Chrome browser. Cypress will hang. If you open back up the browser, it will show the screenshot timed out. 

<img width=""563"" alt=""Screen Shot 2020-07-14 at 12 08 48 PM"" src=""https://user-images.githubusercontent.com/1271364/87388483-e7b9ca80-c5ca-11ea-809b-259d62ec1a09.png"">


### Versions

Cypress 4.10.0
",bug
656095185,Hitting TypeError: Cannot read property 'browser' of undefined and other errors,"Cypress v4.10.0 and `develop` branch

* cloned https://github.com/bahmutov/cypress-react-unit-test (I have seen these bugs happen in other projects too)
* installed dependencies there (`yarn`)
* build the files (`yarn build`)
* opened project from `cypress` monorepo

```
$ yarn dev --project ~/git/cypress-react-unit-test
```

* opened a spec, for example `cypress/component/advanced/mocking-axios/1-users.spec.js`

The spec runs fine (I suggest keeping DevTools open)

![](https://user-images.githubusercontent.com/2212006/87346362-90125500-c51f-11ea-95b3-2e3078942128.png)

* now hit the ""Run All Tests"" button multiple times quickly

![](https://user-images.githubusercontent.com/2212006/87346432-af10e700-c51f-11ea-83e8-8941cb6d7871.png)

And get pretty quickly to errors in the DevTools, sometimes the tests are hanging, sometimes they fail

## first error: normalizeAll
![](https://user-images.githubusercontent.com/2212006/87346523-cea80f80-c51f-11ea-85f3-aeb944573ad0.png)

Code

![](https://user-images.githubusercontent.com/2212006/87346631-e7b0c080-c51f-11ea-9ed8-2c395f8d3114.png)

## second error: stop
![](https://user-images.githubusercontent.com/2212006/87346695-feefae00-c51f-11ea-8be0-cfa632a3a562.png)

## third error: Cannot read property 'browser' of undefined
![](https://user-images.githubusercontent.com/2212006/87346821-2e061f80-c520-11ea-9f0e-efaf440a8029.png)

Code

![](https://user-images.githubusercontent.com/2212006/87346838-352d2d80-c520-11ea-9a1f-be7ffd92cf5b.png)

",bug
656089466,Screenshot replicates top of image if element extends past top of viewport,"<!-- Is this a question? Questions WILL BE CLOSED. Ask in our chat https://on.cypress.io/chat  -->

### Current behavior:

Calling screenshot on an element that is scaled to be larger than the viewport produces a screenshot that is not reflective of what the user actually sees. It properly cuts off at the bottom of the screen, but duplicates parts of the screen at the top.

Here's an example:

```html
<html>
<body>
<main style=""transform: scaleY(10); background: linear-gradient(yellow, blue, red); height: 50vh; transition: 10s;""></main>
</body>
</html>

```

```javascript
it('screenshots element', () => {
  cy.visit('fixtures/index.html')
  cy.get('main').screenshot()
})
```

The resulting screenshot looks like this:

<img src=""https://user-images.githubusercontent.com/7033952/87345707-70c6f800-c51e-11ea-9a32-3486feb4b290.png"" width=""300px"" />

### Desired behavior:

Calling `screenshot()` should produce the correct screenshot. Currently, with this test case calling `cy.screenshot()` (the full page screenshot) will produce the correct screenshot that appears as follows. Calling screenshot on `main` should produce a similar result (without padding):

<img src=""https://user-images.githubusercontent.com/7033952/87344954-488ac980-c51d-11ea-872f-7348dda6337c.png"" width=""300px"" />",bug
654352110,ENAMETOOLONG crash due to infinite nested folders Cypress spec folders,"### Current behavior:

Cypress is arbitrary crashes when running: `npx cypress open` 
with the following message:
```
GET /app/login 200 4.624 ms - -
[Error: ENAMETOOLONG: name too long, stat 'C:\dev\wss-app-fe\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e'] {
  errno: -4064,
  code: 'ENAMETOOLONG',
  syscall: 'stat',
  path: 'C:\\dev\\wss-app-fe\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e\\specs\\tests\\e2e'
}
Error: ENAMETOOLONG: name too long, stat 'C:\dev\wss-app-fe\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e\specs\tests\e2e'
```
In the AppDatra all.log I can see:

```
{""level"":""info"",""message"":""getting user"",""timestamp"":""2020-06-25T13:09:48.587Z""}
{""level"":""info"",""message"":""getting user"",""timestamp"":""2020-06-25T17:56:43.467Z""}
{""error"":""ffmpeg exited with code 1: pipe:0: Invalid data found when processing input\n"",""stack"":""Error: ffmpeg exited with code 1: pipe:0: Invalid data found when processing input\n\n    at ChildProcess.<anonymous> (C:\\Users\\RonenMalka\\AppData\\Local\\Cypress\\Cache\\4.9.0\\Cypress\\resources\\app\\packages\\server\\node_modules\\fluent-ffmpeg\\lib\\processor.js:182:22)\n    at ChildProcess.emit (events.js:210:5)\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:272:12)"",""type"":""server"",""level"":""info"",""message"":""caught error"",""timestamp"":""2020-06-25T20:55:58.045Z""}
{""level"":""info"",""message"":""getting user"",""timestamp"":""2020-06-25T20:55:58.202Z""}
{""error"":""ffmpeg exited with code 1: pipe:0: Invalid data found when processing input\n"",""stack"":""Error: ffmpeg exited with code 1: pipe:0: Invalid data found when processing input\n\n    at ChildProcess.<anonymous> (C:\\Users\\RonenMalka\\AppData\\Local\\Cypress\\Cache\\4.9.0\\Cypress\\resources\\app\\packages\\server\\node_modules\\fluent-ffmpeg\\lib\\processor.js:182:22)\n    at ChildProcess.emit (events.js:210:5)\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:272:12)"",""type"":""server"",""level"":""info"",""message"":""caught error"",""timestamp"":""2020-06-25T21:00:31.894Z""}
{""level"":""info"",""message"":""getting user"",""timestamp"":""2020-06-25T21:00:31.978Z""}
{""level"":""info"",""message"":""getting user"",""timestamp"":""2020-06-28T07:30:34.929Z""}
{""level"":""info"",""message"":""getting user"",""timestamp"":""2020-06-28T07:41:17.816Z""}
{""level"":""info"",""message"":""getting user"",""timestamp"":""2020-06-28T08:49:39.422Z""}
{""level"":""info"",""message"":""getting user"",""timestamp"":""2020-06-28T08:51:06.631Z""}
{""error"":""ENAMETOOLONG: name too long, stat 'C:\\dev\\wss-app-fe\\tests\\e2e\\specs\\tests...
```



### Desired behavior:

Should not crush...

### Test code to reproduce

N/A


### Versions

4.10.0

I can run my tests several times before it crashes.
This started when upgrade to 4.10.0. No changes to the tests since 4.9.0.
",bug
652881198,TypeError: Cannot read property 'replace' of undefined at stripCustomProtocol,"<!-- Is this a question? Questions WILL BE CLOSED. Ask in our chat https://on.cypress.io/chat  -->

When my automated script lands on a new page, the script fails and when I print the error to console, I get the error in the subject line.

<!-- A description including screenshots, stack traces, DEBUG logs, etc -->
![image](https://user-images.githubusercontent.com/57271211/86870746-924b5e00-c09e-11ea-9eb1-d856bd3a1f99.png)


### Desired behavior:

For the test to continue on and finish successfully like it has in the past.

### Test code to reproduce

```js
describe('Edit a job', () => {
  beforeEach(() => {
    Cypress.on('window:before:load', (win: any) => { win.usabilla_live = win.usabilla_live || function () { }; });

  });
  it('Edit a job Subscriptions', function () {
    const env = Cypress.env();
    cy.clearCookies();
    Cypress.config('60000');
    Cypress.config('60000');

    cy.request({
      method: ""POST"",
      url: ""https://www.dice.com//app/manage-jobs/active/1?pageSize=25&order=job_mod_date_desc/ajaxLogin"",
      body: {
        username: 'essamtest2@dice.com',
        password: 'xxxxxxxx'
      },
      headers: {
        Accept: ""application/json"",
        ""Content-Type"": ""application/x-www-form-urlencoded""
      }
    });
cy.visit('https://www.dice.com//app/manage-jobs/active/1?pageSize=25&order=job_mod_date_desc');

    cy.wait(10000);

    cy.get('body').then(($body) => {

      if ($body.find('.usabilla__overlay > iframe').length == 0) {
        //cy.wait(1000);
        cy.log('usabilla not found');
        cy.log('inside if');
      } else {
        cy.get("".usabilla__overlay > iframe"").then(frame => {
          const iframe = frame.contents();
          const close = iframe.find(""#close"");
          cy.wrap(close).click();
        });
      }
    });
  }
  pageSize = 25 & order=job_mod_date_desc');

  cy.get('[data-cy=active]').click();
  cy.get('.job-list-item:first > .mx-auto > .ml-1 > .w-100').click();
  cy.get('.col-md-4 > .actions-contianer > .btn-secondary').click();
  cy.get('.border-bottom > :nth-child(1) > .btn').click();
```

<!-- You can fork https://github.com/cypress-io/cypress-test-tiny repo, set up a failing test, then link to your fork -->

### Versions

Cypress version: 4.10.0, Window 10.
",bug
652788505,Timeout progress bar reset when hooks collapsed,"<!-- Is this a question? Questions WILL BE CLOSED. Ask in our chat https://on.cypress.io/chat  -->

### Current behavior:
The timeout progress bar will not maintain state when a hook is collapsed and then reopened. This also occurs for opening and closing suites, but not tests (closing a test actually prevents the content from rendering in the DOM, rather than just hiding it).

![ezgif-6-7b5bfe0add82](https://user-images.githubusercontent.com/7033952/86860732-68d90500-c093-11ea-8d26-a5d2cf6d2671.gif)

### Desired behavior:
The progress bar should reflect the actual progress made and continue to progress as if it was never opened or closed (the same thing that happens with test).

### Test code to reproduce
Any failing test

",bug
652326827,cy.visit times out when experimentalSourceRewriting is enabled in app with react-router,"<!-- Is this a question? Questions WILL BE CLOSED. Ask in our chat https://on.cypress.io/chat  -->

### Current behavior:

<!-- A description including screenshots, stack traces, DEBUG logs, etc -->

Enabling the `experimentalSourceRewriting` setting breaks tests for a React app with `react-router` (https://reactrouter.com). Any test with a `cy.visit` runs for several seconds before timing out:

```js
describe('page', () => {
  it('works', () => {
    cy.visit('http://localhost:3000/')
  })
})
```

![Screen Shot 2020-07-07 at 8 12 57 AM](https://user-images.githubusercontent.com/584/86786538-bf115e00-c029-11ea-8322-c54c72e2774c.png)

**Investigation**

It looks like the rewrite changes the code in history.js:

```js
function createLocation(path, state, key, currentLocation) {
  var location;

  if (typeof path === 'string') {
    // Two-arg form: push(path, state)
    location = parsePath(path); // THIS LINE GETS REWRITTEN TO gobalThis.Cypress.XXXX = parsePath(path);
    location.state = state; // Because of rewrite location will be undefined here...
  } else {

...
```

**Stacktrace**

```
    at createLocation (http://localhost:3000/static/js/0.chunk.js:2424:21)
    at getDOMLocation (http://localhost:3000/static/js/0.chunk.js:2643:13)
    at createBrowserHistory (http://localhost:3000/static/js/0.chunk.js:2707:26)
    at new BrowserRouter (http://localhost:3000/static/js/0.chunk.js:33553:90)
    at constructClassInstance (http://localhost:3000/static/js/0.chunk.js:19294:12)
    at updateClassComponent (http://localhost:3000/static/js/0.chunk.js:23432:10)
    at beginWork (http://localhost:3000/static/js/0.chunk.js:24902:21)
    at HTMLUnknownElement.callCallback (http://localhost:3000/static/js/0.chunk.js:6581:19)
    at Object.invokeGuardedCallbackDev (http://localhost:3000/static/js/0.chunk.js:6630:21)
    at invokeGuardedCallback (http://localhost:3000/static/js/0.chunk.js:6683:36)
    at beginWork$1 (http://localhost:3000/static/js/0.chunk.js:29444:12)
    at performUnitOfWork (http://localhost:3000/static/js/0.chunk.js:28411:17)
    at workLoopSync (http://localhost:3000/static/js/0.chunk.js:28384:27)
    at performSyncWorkOnRoot (http://localhost:3000/static/js/0.chunk.js:28002:14)
    at scheduleUpdateOnFiber (http://localhost:3000/static/js/0.chunk.js:27434:12)
    at updateContainer (http://localhost:3000/static/js/0.chunk.js:30583:8)
    at <unknown> (http://localhost:3000/static/js/0.chunk.js:30966:12)
    at unbatchedUpdates (http://localhost:3000/static/js/0.chunk.js:28152:17)
    at legacyRenderSubtreeIntoContainer (http://localhost:3000/static/js/0.chunk.js:30965:10)
    at Object.render (http://localhost:3000/static/js/0.chunk.js:31048:15)
    at Module../src/index.js (http://localhost:3000/static/js/main.chunk.js:203:51)
    at __webpack_require__ (http://localhost:3000/static/js/bundle.js:785:31)
    at fn (http://localhost:3000/static/js/bundle.js:151:21)
    at Object.1 (http://localhost:3000/static/js/main.chunk.js:230:19)
    at __webpack_require__ (http://localhost:3000/static/js/bundle.js:785:31)
    at checkDeferredModules (http://localhost:3000/static/js/bundle.js:46:24)
    at Array.webpackJsonpCallback [as push] (http://localhost:3000/static/js/bundle.js:33:20)
    at <unknown> (http://localhost:3000/static/js/main.chunk.js:1:88)
From previous event:
    at run (http://localhost:3000/__cypress/runner/cypress_runner.js:167273:20)
    at $Cy.cy.<computed> [as visit] (http://localhost:3000/__cypress/runner/cypress_runner.js:167725:12)
    at Context.runnable.fn (http://localhost:3000/__cypress/runner/cypress_runner.js:167950:22)
    at callFn (http://localhost:3000/__cypress/runner/cypress_runner.js:103279:22)
    at Test.../driver/node_modules/mocha/lib/runnable.js.Runnable.run (http://localhost:3000/__cypress/runner/cypress_runner.js:103266:8)
    at <unknown> (http://localhost:3000/__cypress/runner/cypress_runner.js:173107:29)
From previous event:
    at Object.onRunnableRun (http://localhost:3000/__cypress/runner/cypress_runner.js:173095:21)
    at $Cypress.action (http://localhost:3000/__cypress/runner/cypress_runner.js:163946:62)
    at Test.Runnable.run (http://localhost:3000/__cypress/runner/cypress_runner.js:171720:14)
    at Runner.../driver/node_modules/mocha/lib/runner.js.Runner.runTest (http://localhost:3000/__cypress/runner/cypress_runner.js:103938:11)
    at <unknown> (http://localhost:3000/__cypress/runner/cypress_runner.js:104064:13)
    at next (http://localhost:3000/__cypress/runner/cypress_runner.js:103847:15)
    at <unknown> (http://localhost:3000/__cypress/runner/cypress_runner.js:103857:8)
    at next (http://localhost:3000/__cypress/runner/cypress_runner.js:103759:15)
    at <unknown> (http://localhost:3000/__cypress/runner/cypress_runner.js:103825:6)
    at timeslice (http://localhost:3000/__cypress/runner/cypress_runner.js:97751:28)
```

### Desired behavior:

<!-- A clear description of what you want to happen -->

A React app with react-router can be tested with `experimentalSourceRewriting` turned on. I think the experiment fixes another issue I have in my application (not showcased in linked cypress-test-tiny fork).

It's unclear to me if the rewrite is being too aggressive and should leave the code in history.js alone, or if it's not aggressive enough and it should be rewriting all the `location` references :) 

### Test code to reproduce

<!-- If we cannot fully run the tests as provided the issue WILL BE CLOSED -->
<!-- Issues without a reproducible example WILL BE CLOSED -->

<!-- You can fork https://github.com/cypress-io/cypress-test-tiny repo, set up a failing test, then link to your fork -->

https://github.com/ludo/cypress-test-tiny/tree/react-router-source-rewriting-issue

```
# Starts React app with react-router @ localhost:3000
yarn run react-scripts start

# Start Cypress
yarn run cypress open
```

### Versions

<!-- Cypress, operating system, browser -->

* Cypress 4.9.0
* Browser: probably any, but tested in Chrome 83 and Firefox Nightly 80.
* OS: macOS",bug
650674092,Timeout progress indicator for cy.wait is incorrect if timeout option is not passed,"<!-- Is this a question? Questions WILL BE CLOSED. Ask in our chat https://on.cypress.io/chat  -->

### Current behavior:
When calling `cy.wait` without passing a `timeout` option, the timeout progress bar will default to the length of a normal command rather than the default timeout for `cy.wait`.

![ezgif-6-621a66abf4bc](https://user-images.githubusercontent.com/7033952/86484037-4b1e3f80-bd23-11ea-8d69-f2090db03b3a.gif)

### Desired behavior:
The progress bar should reflect the actual timeout for the command, which is `requestTimeout` or `responseTimeout`.

### Test code to reproduce
Cypress test:

```javascript
describe('Long request', () => {
  it('Succeeds', () => {

    cy.server();
    cy.route('/api').as('api');

    cy.visit('/');
    cy.wait(""@api"");

    cy.contains(""API response"");
  });
});
```

Server (Express):

```javascript
app.get('/api', async function (req, res) {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      res.status(200).send('API response');
      resolve();
      },
    34000);
  })
});
```

",bug
650253854,"""Cannot set property 'err' of undefined"" error occurs in place of other errors during automatic test-reruns on file save.","### Current behavior:
When running tests locally through `cypress open`, and when interrupting tests by saving files (forcing a re-run), any failures occurred during the run can trigger this message:

```
The following error originated from your application code, not from Cypress.

  > Cannot set property 'err' of undefined

When Cypress detects uncaught errors originating from your application it will automatically fail the current test.

This behavior is configurable, and you can choose to turn this off by listening to the uncaught:exception event. Learn more
```

The error is not really originating from the application; it's occurring within `hookFailed` at https://github.com/cypress-io/cypress/blob/4cfcae28f097e013ffe7dc7419905eccf1022709/packages/driver/src/cypress/runner.js#L526. Both `getTest()` and `getTestFromHookOrFindTest(hook)` end up returning `undefined`.

I've seen this on two very different projects.

* At work, which is a custom server + Webpack setup, webpack/React, running on MacOS.
* At home, on a personal project running Next.js, running on Windows (Powershell). This project is linked below.

### Desired behavior:
The test fails with the normal readable stack trace.

### Test code to reproduce
This is easily reproducible on this project (created a branch with a failing spec):
https://github.com/primitiveconcept/ludumdare46/tree/cypress/err-of-undefined/client

* Run `npm run cy:dev` for server + Cypress
* Run the `filesystem.spec.ts` spec
* Save the `filesystem.spec.ts` while the test is running. Reproduces around 25% of the time, may require a few tries.

If needed, I can try to come up with a minimal reproduction, but this isn't a very complex project. The server isn't required for the tests.

### Versions
<!-- Cypress, operating system, browser -->

Cypress versions: Can reproduce on 4.9.0. Cannot reproduce on 4.5.0. Other versions are unstable for various reasons on the example project. At work, this started occurring on 4.6.0.
OS: MacOS + Windows
Browser: Chrome + Electron

",bug
649691699,Click coordinate is inaccurately drawn when clicking on el within iframe with global parent defined.,"### Current behavior: 

This actually requires the fix from https://github.com/cypress-io/cypress/pull/7862 before it's evident (without this fix the click throws Illegal Invocation error). 

When you click on an element within an iframe that has a global parent defined, the click coordinates are not drawn in the correct spot. 

#### Without parent definition

<img width=""665"" alt=""Screen Shot 2020-07-02 at 1 30 37 PM"" src=""https://user-images.githubusercontent.com/1271364/86327353-2b2a4580-bc69-11ea-8526-932d1ef0880b.png"">


#### With parent definition

<img width=""658"" alt=""Screen Shot 2020-07-02 at 1 30 51 PM"" src=""https://user-images.githubusercontent.com/1271364/86327369-341b1700-bc69-11ea-929d-fdc5b8a80001.png"">


This is due to `autFrame.scrollY` and `autFrame.scrollX` being undefined here:

https://github.com/cypress-io/cypress/blob/develop/packages/driver/src/dom/coordinates.js#L122:L122

Since it's grabbing the wrong `window.parent` and setting it as the `autFrame` here

https://github.com/cypress-io/cypress/blob/develop/packages/driver/src/dom/coordinates.js#L78:L78

### Desired behavior:

The click coordinates should be drawn correctly whether there is a global `parent` defined or not.

### Test code to reproduce

`iframe.html`

```html
<html>
<body>
  <div class=""foo"">Foo</div>
  <script>
    // if I change this var name to anything else
    // or comment out this line
    // the coords are drawn correctly
    var parent = document.querySelector("".foo"")
  </script>
</body>
</html>
```

`index.html`

```html
<html>
<body>
<iframe src=""iframe.html""></iframe>
</body>
</html>
```

```js
it('visit', () => {
  cy.visit('index.html')
  cy.get('iframe:first')
    .then(($iframe) => {
      // cypress does not wrap this as a DOM element (does not wrap in jquery)
      cy.wrap($iframe.first().contents().find('body'))
    })
    .within(() => {
      cy.get('.foo')
        .click()
    })
})
```

### Versions

Cypress 4.9.0 + fix from https://github.com/cypress-io/cypress/pull/7862
",bug
648713783,Actions in Cypress cause Failed to execute 'getComputedStyle' on 'Window': parameter 1 is not of type 'Element',"### Current behavior:
When using Cypress to click through the [Norwegian BankID test page](https://www.bankid.no/privat/los-mitt-bankid-problem/test-din-bankid---multidokumentsignering/) (the most commonly used electronic identification system in Norway) it's not possible to type in the input fields within the iframes without using `{ force: true }`. The iframe is cross-origin, so we have disabled `chromeWebSecurity` in `cypress.json`. It's worth noting that the input field is inside an iframe which itself is inside an iframe, where the inner iframe is from the source csfe.bankid.no and the outer is from the source tools.bankid.no.

When using `{ force: true }` it still does not emit all the events that a proper user keyboard action would, as the website behaves differently than when manually typing in the input field. When manually typing, the form validator is run which enables form submit, but this does not happen when typing using Cypress and `cy.type`. If trying to type without `{ force: true }` we get an error saying `Timed out retrying: Failed to execute 'getComputedStyle' on 'Window': parameter 1 is not of type 'Element'.`.

![image](https://user-images.githubusercontent.com/3830142/86209838-b2958d00-bb73-11ea-8faa-c2d1a546cfd9.png)

### Desired behavior:
Using `cy.type` (either with or without `{ force: true }`) leads to the same result as when a user would type into the field. That is, the validator runs and the submit is enabled.

### Test code to reproduce
- I have forked the cypress-test-tiny repo to make a reproducible example: https://github.com/torkjels/cypress-test-tiny.
- Run the tests non-headless in Chrome using `npm run cypress:open`.
- There are 4 tests, and the only one that runs green is the one that pauses to allow for a user keyboard action. This suggests that there are some event(s)/information that `cy.type` doesn't emit to the iframe which get dispatched on normal user interaction.

### Versions
Cypress: 4.9.0
Operating system: RHEL 7.8
Browser: Chrome 83
",bug
647519033,Bug: experimentalFetchPolyfill doesn't handle new Request API,"<!-- Is this a question? Questions WILL BE CLOSED. Ask in our chat https://on.cypress.io/chat  -->

### Current behavior:

When constructing a request using fetch's new experimental polyfill and the `new Request` API, we send `[object Request]` in the URL's path. When the experimental polyfill is off, we correctly stringify the URL's path.

<!-- A description including screenshots, stack traces, DEBUG logs, etc -->

![Screen Shot 2020-06-29 at 12 36 16 PM](https://user-images.githubusercontent.com/2801156/86032744-d1761100-ba05-11ea-8bb6-a3d6f7969740.png)

![Screen Shot 2020-06-29 at 12 41 22 PM](https://user-images.githubusercontent.com/2801156/86032774-ddfa6980-ba05-11ea-8a17-fc3d59a79d5f.png)



### Desired behavior:

<!-- A clear description of what you want to happen -->

Should behave like XHR would when dealing with the `new Request` API

### Test code to reproduce

<!-- If we cannot fully run the tests as provided the issue WILL BE CLOSED -->
<!-- Issues without a reproducible example WILL BE CLOSED -->

<!-- You can fork https://github.com/cypress-io/cypress-test-tiny repo, set up a failing test, then link to your fork -->

In https://github.com/cypress-io/cypress-test-tiny/tree/query-string if you change the `ajax.html` fixture to use an [example from MDN's site](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch) then you'll see the above screenshot.

```js
const myHeaders = new Headers();

const myRequest = new Request('flowers.jpg?size=300', {
  method: 'GET',
  headers: myHeaders,
  mode: 'cors',
  cache: 'default',
});

fetch(myRequest)
  .then(()) => console.log(...arguments))
```

### Versions

<!-- Cypress, operating system, browser -->
",bug
647453092,Value on window object evaluates different inside and outside of Cypress,"### Current behaviour:

When visiting the page `https://share.vidyard.com/watch/nHEcBjJ9sHdD1mgfezkTmf` in Chrome launched via Cypress and executing the statement `window.vidyardEmbed.api.getPlayersByUUID('nHEcBjJ9sHdD1mgfezkTmf')[0].ready()` in the browser console, the output value is `false`.

### Desired behavior:

The output value should be `true`. This is what happens if you navigate to the page and execute the same statement in the console in Chrome launched normally (outside a Cypress test). The behaviour inside Cypress should mirror the behaviour outside of Cypress.

### Test code to reproduce

```js
context('Cypress Issue', function() {
  beforeEach(function () {
    cy.visit('https://share.vidyard.com/watch/nHEcBjJ9sHdD1mgfezkTmf?')
    cy.window().its('vidyardEmbed.api').invoke('getPlayersByUUID', 'nHEcBjJ9sHdD1mgfezkTmf').its('0._ready').should('be.true')
  })

  it('Test', function () {

  })
})
```

![image](https://user-images.githubusercontent.com/62152998/86035423-5400cf80-ba0a-11ea-9705-673557f183ae.png)

### Versions

Cypress Version: 4.4.1
Chrome Version: 83.0.4103.116
OS Version: macOS 10.14.6
",bug
646658253,cy.tick() works in Firefox but not Chrome or Electron for setInterval,"<!-- Is this a question? Questions WILL BE CLOSED. Ask in our chat https://on.cypress.io/chat  -->

### Current behavior:
Tick doesn't trigger setTimeout or setInterval in chrome or electron, but works fine in firefox

In Chrome:
![image](https://user-images.githubusercontent.com/10728145/85919949-8de5a080-b867-11ea-881b-30f40a2e781b.png)

In Firefox:
![image](https://user-images.githubusercontent.com/10728145/85919941-70b0d200-b867-11ea-9e83-b13efd50037c.png)

<!-- A description including screenshots, stack traces, DEBUG logs, etc -->

### Desired behavior:
Tick should trigger setInterval in all browsers
<!-- A clear description of what you want to happen -->

### Test code to reproduce
Simple, full test case: https://github.com/joejknowles/timethings/tree/07780e302de7d81df33f7aff37a023f35fffc4f7

Files with test code: https://github.com/joejknowles/timethings/commit/07780e302de7d81df33f7aff37a023f35fffc4f7
File with app code: https://github.com/joejknowles/timethings/blob/07780e302de7d81df33f7aff37a023f35fffc4f7/src/App.js#L41

The app code is fully functional, you can see it here: https://timethings.xyz/
And the tests pass if they use ""cy.wait(4000)"" instead of tick, but obviously that makes really slow tests. I've tried longer tick times, multiple tick calls etc. and can't get it to work in chrome. Verified that setInterval is called in my app, but setInterval never calls the callback function in chrome whenever cy.clock() is set.
<!-- If we cannot fully run the tests as provided the issue WILL BE CLOSED -->
<!-- Issues without a reproducible example WILL BE CLOSED -->

<!-- You can fork https://github.com/cypress-io/cypress-test-tiny repo, set up a failing test, then link to your fork -->

### Versions

Cypress: 4.9.0
Windows 10
Chrome 83, Firefox 72, Electron 80

<!-- Cypress, operating system, browser -->
",bug
646274226,experimental fetch polyfill locks a site visit,"Cypress v4.9.0 with experimental fetch polyfill ""true""

```js
it('hangs forever', () => {
  cy.visit('https://one.clappia.com/', { timeout: 10000 })
  cy.get('#loginform > div:nth-child(8) > div > div > button').should('be.visible')
})
```

Note: the site has a redirect and bunch of canceled ajax calls normally, maybe there is something that locks up XMLHttpRequest polyfill?

<img width=""1440"" alt=""Screen Shot 2020-06-26 at 8 46 40 AM"" src=""https://user-images.githubusercontent.com/2212006/85863818-b00cef00-b791-11ea-995d-9b94c991b2b4.png"">
",bug
644327048,Bug: Cypress hangs when detecting element visibility with Shadow DOM enabled,"<!-- Is this a question? Questions WILL BE CLOSED. Ask in our chat https://on.cypress.io/chat  -->

### Current behavior:

<!-- A description including screenshots, stack traces, DEBUG logs, etc -->

It is the same or similar as #7679 (fixed in #7692), except this is _with_ `experimentalShadowDomSupport: true` and using Ionic (which heavily uses Shadow DOM).

Essentially when Cypress attempts to detect visibility of an Ionic component where there's a modal backdrop visible, it seems to go into an endless loop of that same find element code path.

**Note:** Also, notice how it thinks the `ion-button` is invisible. I think this is a separate regression/issue because I've seen this in other tests for Ionic popovers/toasts where it thinks it's not visible when they really are.

### Desired behavior:

<!-- A clear description of what you want to happen -->
Interacting with Ionic components shouldn't cause Cypress to hang.

I think that `while` loop may be due for a ""max loop"" check because it seems like we really don't want Cypress to totally hang under any circumstances. For example, this bug is causing my CI to generate 7GB video files, unless I force-stop the build/workflow.

### Test code to reproduce

<!-- If we cannot fully run the tests as provided the issue WILL BE CLOSED -->
<!-- Issues without a reproducible example WILL BE CLOSED -->

<!-- You can fork https://github.com/cypress-io/cypress-test-tiny repo, set up a failing test, then link to your fork -->

https://github.com/kamranayub/junk-bug-cypress-ionic-hang

1. `npm install`
2. `npm run cypress:open`
3. Run the spec
4. Notice how Cypress hangs when the popover is shown

It tests against this URL: https://ionic-react-demo.stackblitz.io/app/account and clicks the top right button, then tries to detect visibility.

### Versions

<!-- Cypress, operating system, browser -->
- Cypress 4.9.0
- Chrome 83
- Windows 10

### Workaround

I think I can safely disable the experiment and rewrite my tests that were using `.shadow()`. 4.7.0 works with the experiment disabled. 4.8.0 had the other regression with clicking specifically. ",bug
642124837,Element highlights not visible on certain position:absolute elements,"Element dom highlights can render underneath `position:absolute` and `fixed` elements due to the outer highlight container not having `position: absolute` and a high `z-index`

",bug
640638962,Bug:  Modifying the `Cypress.SelectorPlayground.defaults - selectorPriority` breaks the Selector Playground,"### Current behavior:
Modifying the `Cypress.SelectorPlayground.defaults` in the `support/index.js` file breaks the Selector Playground in the GUI.

### Desired behavior:
To be able to modify/add to the `selectorPriority` list and still use the Selector Playground.

### Test code to reproduce

If you modify the `cypress/support/index.js` file with this:
```js
Cypress.SelectorPlayground.defaults({
  selectorPriority: [
    ""data-qa"",
    ""data-test"",
    ""data-cy"",
    ""id"",
    ""class"",
    ""name"",
    ""tag"",
    ""attributes"",
    ""nth-child"",
  ],
});
```

The selector playground is broken and doesn't work at all.

When I comment this block of code out, the Selector Playground works normally.

This issue helped me figure out where to modify the selectorPriority: 
[7606](https://github.com/cypress-io/cypress/issues/7606
)
### Versions
Cypress 4.7.0 and 4.8.0, MacOS, Chrome

",bug
640563980,"empty --project """" string crashes Cypress NPM CLI","4.8.0 and develop

```
~/git/cypress on develop
$ yarn dev --project ''
yarn run v1.22.4
$ node ./scripts/start.js --project ''
s.indexOf is not a function
TypeError: s.indexOf is not a function
    at hasStrayEndQuote (/Users/gleb/git/cypress/packages/server/lib/util/args.js:20:21)
    at normalizeBackslash (/Users/gleb/git/cypress/packages/server/lib/util/args.js:30:7)
    at /Users/gleb/git/cypress/packages/server/lib/util/args.js:47:27
    at Array.forEach (<anonymous>)
    at normalizeBackslashes (/Users/gleb/git/cypress/packages/server/lib/util/args.js:45:18)
    at Object.toObject (/Users/gleb/git/cypress/packages/server/lib/util/args.js:277:15)
    at Object.start (/Users/gleb/git/cypress/packages/server/lib/cypress.js:117:27)
    at launchOrFork (/Users/gleb/git/cypress/packages/server/index.js:49:45)
    at Object.<anonymous> (/Users/gleb/git/cypress/packages/server/index.js:52:1)
    at Module._compile (internal/modules/cjs/loader.js:1158:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1178:10)
    at Module.load (internal/modules/cjs/loader.js:1002:32)
    at Function.Module._load (internal/modules/cjs/loader.js:901:14)
    at Module.require (internal/modules/cjs/loader.js:1044:19)
    at require (internal/modules/cjs/helpers.js:77:18)
    at Object.<anonymous> (/Users/gleb/git/cypress/scripts/start.js:1:1)
    at Module._compile (internal/modules/cjs/loader.js:1158:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1178:10)
    at Module.load (internal/modules/cjs/loader.js:1002:32)
    at Function.Module._load (internal/modules/cjs/loader.js:901:14)
    at Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:74:12)
    at internal/main/run_main_module.js:18:47
error Command failed with exit code 1.
info Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.
```

Similarly, when using Cypress NPM module API

```
const cypress = require('cypress')
cypress.run({
  project: ''
})
// crash
```

The empty string params are common when interfacing with other systems, like github actions https://github.com/cypress-io/github-action/pull/163",bug
640507601,Type-Command needs force-option on Inputs in ShadowDOM,"<!-- Is this a question? Questions WILL BE CLOSED. Ask in our chat https://on.cypress.io/chat  -->

### Current behavior:

Calling  type on an inout in the ShadowDOM throws an error and seems to be called on the wrong element:
```
cy.type() failed because it requires a valid typeable element.

The element typed into was:

  > <webcomponent-lightdom></webcomponent-lightdom>

```

### Desired behavior:

type-command should work on inputs in ShadowDOM just as it does on inputs in LightDOM

### Test code to reproduce
DOM:

```html
<webcomponent-lightdom>
  #shadow-root
    <webcomponent-with-input>
      #shadow-root
        <input type=""text"" />
    <webcomponent-with-input>
</webcomponent-lightdom>
```

Test:
```javascript
// Finds element but fails on type
cy.get('webcomponent-lightdom').get('input', { includeShadowDom: true }).type('test');

// Works, if you don't have to wait for actionability
cy.get('webcomponent-lightdom').get('input', { includeShadowDom: true }).type('test', {force: true});
```

",bug
640011630,An assertion log will be inserted as a child when outside of a parent command,"<!-- Is this a question? Questions WILL BE CLOSED. Ask in our chat https://on.cypress.io/chat  -->

### Current behavior:

When a `before` or `beforeEach` hooks that end with a `.then` chained to a `cy.visit`, an assertion in the following test, if not wrapped inside a command, will display as a child.

### Desired behavior:

Said assertion should be displayed as a parent, as it does not have a parent.

### Test code to reproduce

```js
before(() => {
  cy.visit(...).then(...)
})

it('expects', () => {
  expect(true).to.be.true
})
```

Notice green dash on left side of assert, indicating that the log is a child:

![Screen Shot 2020-06-17 at 12 51 53 AM](https://user-images.githubusercontent.com/7033952/84856479-d06fd780-b034-11ea-8dd3-6e9b98ea7eb8.png)
",bug
639947980,Intermediate assertions should not log when using `expect(...)` syntax,"<!-- Is this a question? Questions WILL BE CLOSED. Ask in our chat https://on.cypress.io/chat  -->

### Behavior:

When using `expect(...)` syntax, intermediate assertions should not log. They DON’T log when using the `.should(...)` command but THEY DO log when using an `expect(...)`. The intention of this is for the behavior to be the same in both situations. Suppressing the intermediate assertion is the correct behavior.


<img width=""575"" alt=""Screen Shot 2020-06-16 at 4 01 44 PM"" src=""https://user-images.githubusercontent.com/7033952/84824038-510ae580-afed-11ea-9bdd-5e89b4ff6527.png"">

<img width=""580"" alt=""Screen Shot 2020-06-16 at 4 01 28 PM"" src=""https://user-images.githubusercontent.com/7033952/84824045-549e6c80-afed-11ea-8fb5-f6adfbecbb44.png"">
",bug
639746450,Audit usage of `on('exit')` to propagate exits + fix buggy usages,"<!-- Is this a question? Questions WILL BE CLOSED. Ask in our chat https://on.cypress.io/chat  -->

### Current behavior:

The codebase has an unknown number of usages of this pattern:

https://github.com/cypress-io/cypress/blob/34dad271d91b64e3b059af37de302ae6c57cd0cd/packages/server/lib/util/node_options.ts#L66-L68

This is problematic - in the event of a forced exit due to a signal (eg SIGKILL), the `exit` callback will be invoked with `(code = undefined, signal = 'SIGKILL')`, which will cause the parent process to exit successfully instead of with an error code.

This has the effect of making crashes much harder to detect and debug in some cases.

### Desired behavior:

Eliminate this pattern from our code base

",bug
639665045,Click on table cell inside a contenteditable element does not behave as expected,"### Current behavior:

When clicking a table cell, the table cell is not focused / not the active element so that when I type, the text is not put into the table cell but outside of it.

### Desired behavior:

When clicking a table cell I expect the table cell to be focused and set as the active element so that when I type text, the table cell will be filled with text.

<!-- A clear description of what you want to happen -->

Create this html file:
```html
<!DOCTYPE html>
<html>
<body>
  <div contenteditable=""true"" style=""border: 1px solid black; width: 300px;"">
      <table style=""border: 1px solid black; width: 300px;"">
          <tr style=""border: 1px solid black"">
            <td style=""border: 1px solid black""></td>
            <td style=""border: 1px solid black""></td>
            <td style=""border: 1px solid black""></td>
          </tr>
          <tr style=""border: 1px solid black"">
            <td style=""border: 1px solid black""></td>
            <td style=""border: 1px solid black""></td>
            <td style=""border: 1px solid black""></td>
          </tr>
          <tr style=""border: 1px solid black"">
            <td style=""border: 1px solid black""></td>
            <td style=""border: 1px solid black""></td>
            <td style=""border: 1px solid black""></td>
          </tr>
      </table>
  </div>
</body>
</html>
```

Create testcase:
```js
it('should type inside of the table cell', () => {
      cy.visit('./cypress/integration/example.html');
      cy.get('table tbody tr td').eq(2).click().type('dummy text');
});
```

Run the testcase to reproduce the issue.

### Versions

os: OSX 10.15.4
browser: Chrome 83.0.4103.106
cypress: 4.8.0
",bug
639345904,Stack trace log (failed line number) printed in `cypress run`  is different from the stack trace in `cypress open`,"### Current behavior:
1. when run a cypress script on terminal with command: `./node_modules/.bin/cypress run --port 3019 --browser chrome --config testFiles=myCypressPath/cypress/test/20200426172648.js`
  I can get stack trace printed in terminal like:
![image](https://user-images.githubusercontent.com/6068277/84728960-2147e780-afc5-11ea-845f-671f038d8cb9.png)
  We can see that the log indicates the failed line number is in line 24, which is not correct
1. in the meanwhile when I run it with `cypress open`, it indicates that the failed line number is 31 which is correct:
![image](https://user-images.githubusercontent.com/6068277/84729135-8b608c80-afc5-11ea-9085-24c59bf0cd32.png)

### Desired behavior:
how can I get correct stack trace on ternimal? I am using some automation framework to automate cypress scripts and parse the stack trace log to get failed line number

### Test code to reproduce
```js
var test1 = ""http://argo-ui.oss-cn-beijing.aliyuncs.com/test.js"";
var test2 = ""http://argo-ui.oss-cn-beijing.aliyuncs.com/test (2).js"";
var test4 = 111111;
describe('test_name', function() {

 it('what_it_does', function() {

    cy.viewport(1024, 768)

    cy.setCookie('currentRegionId', 'test')
    cy.wait(4000)
 
    cy.visit('https://test.com')
cy.clickText('尊敬的用户');
cy.wait(3000)
    cy.wait(1000)
    cy.visit('https://test.com')

    cy.wait(1000)
 
    cy.get('li.J_submenu_edasAppManage > div.el-submenu__title > div:nth-child(1) > div').click()
 
    cy.wait(2000)
 
    cy.xpath('//div[text()=""配置管理""]').click()
 
    cy.wait(4000)
    cy.visit('https://test.com/?regionNo=test')
    
    cy.wait(2000)
    cy.getIFrameBody('.J_iframe_Contianer').xpath('//span[text()=""创建""]').click()
 
    cy.wait(2000)
 
    cy.getIFrameBody('.J_iframe_Contianer').find('#dataId').click()
 
    cy.wait(1000)
 
    cy.getIFrameBody('.J_iframe_Contianer').find('#dataId').clear().type('dfdfdfdfdfdfiiii')
 
    cy.wait(1000)
 
    cy.getIFrameBody('.J_iframe_Contianer').find('div.view-lines').click()
 
    cy.wait(2000)
 
    cy.getIFrameBody('.J_iframe_Contianer').find('textarea.inputarea').clear().type('fdfdfdfdf')
 
    cy.wait(1000)
 
    cy.getIFrameBody('.J_iframe_Contianer').find('button.next-btn-primary').click()
 
    cy.wait(1000)
 
    cy.getIFrameBody('.J_iframe_Contianer').find('div.next-dialog-footer > div > button[type=""button""].next-btn-medium').click()
 
    cy.wait(1000)
 
    cy.getIFrameBody('.J_iframe_Contianer').find('button.next-btn-normal').click()

 })
})
```

### Versions
<!-- Cypress, operating system, browser -->
Cypress: 4.7.0
operating system: MacOS Catalina 10.15.5
browser: chrome 83.0.4103.97

",bug
637608476,Devtools doesn't open in Electron when cypress is launched from console with admin rights,"### Current behavior:

When I try to run cypress from a console with admin rights and open devtools. It doesn't work.
Nothing happens on click to open devtools

### Desired behavior:

Devtools should work correctly with or without admin rights

### Test code to reproduce

1. Open console with admin rights.
2. Launch cypress with electron selected
3. Try to open devtools

### Versions
Cypress 4.4.1
Electron 80
windows 10 enterprise 1709

<!-- Cypress, operating system, browser -->
",bug
636808065,TypeError: Cannot read property 'length' of undefined when run test by cypress run,"### Current behavior:

I have testing site with shadow DOM.

```javascript
it('test', () => {
  cy
    .get('div[class=""oneAppNavContainer""]')
    .find('one-appnav')
    .find('span[title=""          Config""]', {includeShadowDom: true})
    .contains('          Config');
});
```

It's code work correctly when I use cypress open.

<img width=""381"" alt=""Screenshot 2020-06-11 at 10 53 53"" src=""https://user-images.githubusercontent.com/61824066/84360504-d7c95800-abd2-11ea-9c90-41accd64c64e.png"">

But not work when I use cypress run.

```
TypeError: Cannot read property 'length' of undefined
    at superMatcher (https://example.com/__cypress/runner/cypress_runner.js:86701:17)
    at Sizzle.select (https://example.com/__cypress/runner/cypress_runner.js:86897:44)
    at Function.Sizzle [as find] (https://example.com/__cypress/runner/cypress_runner.js:85065:9)
    at jQuery.fn.init.find (https://example.com/__cypress/runner/cypress_runner.js:87096:11)
    at find (https://example.com/__cypress/runner/cypress_runner.js:153939:31)
    at getEl (https://example.com/__cypress/runner/cypress_runner.js:154030:18)
    at getElements (https://example.com/__cypress/runner/cypress_runner.js:154058:17)
    at Context.<anonymous> (https://example.com/__cypress/runner/cypress_runner.js:154082:14)
    at Context.<anonymous> (https://example.com/__cypress/runner/cypress_runner.js:163288:21)
    at https://example.com/__cypress/runner/cypress_runner.js:162724:15
    at tryCatcher (https://example.com/__cypress/runner/cypress_runner.js:10161:23)
    at Promise._settlePromiseFromHandler (https://example.com/__cypress/runner/cypress_runner.js:8096:31)
    at Promise._settlePromise (https://example.com/__cypress/runner/cypress_runner.js:8153:18)
    at Promise._settlePromiseCtx (https://example.com/__cypress/runner/cypress_runner.js:8190:10)
    at _drainQueueStep (https://example.com/__cypress/runner/cypress_runner.js:4872:12)
```

### Desired behavior:

What I do wrong?
### Versions

Cypress: 4.8.0
Chrome Canary 85
",bug
636677181,"Page Load takes a long time time to finish when ""experimentalSourceRewriting"" is set to true.","<!-- Is this a question? Questions WILL BE CLOSED. Ask in our chat https://on.cypress.io/chat  -->

### Current behavior:

Whenever I set ""experimentalSourceRewriting"" to true in my Env Config, Page Load keeps on loading after signing in to the page even though in the Browser window, The page has loaded completely. 

![image](https://user-images.githubusercontent.com/65379921/84338768-89668a00-abcf-11ea-918b-a1e394a1604e.png)


This will eventually time out and will stop the testing and will not proceed the next steps of the testing.

<!-- A description including screenshots, stack traces, DEBUG logs, etc -->

### Desired behavior:

Page Load will complete and proceed to the other steps.
<!-- A clear description of what you want to happen -->

### Test code to reproduce
```js
it('Add Valid Company Details with Required Fields only', () => {
  var Companyname = chance.company()
  cy.log(Companyname)

  Cypress.on('window:before:load', (win) => {
    Object.defineProperty(win, 'self', {
      get: () => {
        return window.top
      }
    })
  })

  cy.login()
  cy.wait(5000)
  cy.visit('/admin/insites/#/crm/add-company', { timeout: 60000 })
  cy.reload()
  cy.log(Companyname)
  cy.get('.large-4:nth-child(2) > .hydrated > .ins-input-wrap > .ins-sw-in > .input-wrap > .ins-form-field').type(Companyname)
  cy.get('.ins-button-options-wrap > .button-wrap > .ins-button > div > .btn__label').click()
})
```

Please note that I am using Chance.js to generate Strings and created a Custom Command for the whole login process.

<!-- If we cannot fully run the tests as provided the issue WILL BE CLOSED -->
<!-- Issues without a reproducible example WILL BE CLOSED -->

<!-- You can fork https://github.com/cypress-io/cypress-test-tiny repo, set up a failing test, then link to your fork -->

### Versions

Cypress 4.8, Mac OS Catalina, Chrome Version 83.0.4103.61
<!-- Cypress, operating system, browser -->
",bug
636379380,WebSocket connection to x failed: Connection closed before receiving a handshake response,"### Current behavior:
When I try to run a spec ...
![image](https://user-images.githubusercontent.com/1001186/84289717-20393500-ab43-11ea-8477-234580fb800f.png)
... it opens a new blank window
![image](https://user-images.githubusercontent.com/1001186/84289782-347d3200-ab43-11ea-93b1-f5ab61895097.png)

<details><summary>output on the command-line</summary><p>

```
$ npx cypress open
It looks like this is your first time using Cypress: 4.8.0

  ✔  Verified Cypress! /home/abez/.cache/Cypress/4.8.0/Cypress

Opening Cypress...
GET /__/ 200 9.443 ms - -
GET /__cypress/runner/cypress_runner.css 200 4.412 ms - -
GET /__cypress/runner/cypress_runner.js 200 2.161 ms - -
[3269539:0610/173428.752972:INFO:CONSOLE(182674)] ""WebSocket connection to 'ws://localhost:35577/__socket.io/?EIO=3&transport=websocket' failed: Connection closed before receiving a handshake response"", source: http://localhost:35577/__cypress/runner/cypress_runner.js (182674)
[3269539:0610/173430.345438:INFO:CONSOLE(182674)] ""WebSocket connection to 'ws://localhost:35577/__socket.io/?EIO=3&transport=websocket' failed: Connection closed before receiving a handshake response"", source: http://localhost:35577/__cypress/runner/cypress_runner.js (182674)
[3269539:0610/173432.210929:INFO:CONSOLE(182674)] ""WebSocket connection to 'ws://localhost:35577/__socket.io/?EIO=3&transport=websocket' failed: Connection closed before receiving a handshake response"", source: http://localhost:35577/__cypress/runner/cypress_runner.js (182674)
[3269539:0610/173437.732077:INFO:CONSOLE(182674)] ""WebSocket connection to 'ws://localhost:35577/__socket.io/?EIO=3&transport=websocket' failed: Connection closed before receiving a handshake response"", source: http://localhost:35577/__cypress/runner/cypress_runner.js (182674)
```

</p></details>
<details><summary>debug-log</summary><p>

```
$ DEBUG=cypress:* npx cypress open
  cypress:cli:cli cli starts with arguments [""/home/abez/.nvm/versions/node/v12.13.0/bin/node"",""/home/abez/projects/ps/corona-shop/node_modules/.bin/cypress"",""open""] +0ms
  cypress:cli NODE_OPTIONS is not set +0ms
  cypress:cli:cli program parsing arguments +2ms
  cypress:cli:cli opening Cypress +0ms
  cypress:cli parsed cli options {} +45ms
  cypress:cli opening from options {""project"":""/home/abez/projects/ps/corona-shop""} +0ms
  cypress:cli command line arguments [""--project"",""/home/abez/projects/ps/corona-shop""] +0ms
  cypress:cli verifying Cypress app +0ms
  cypress:cli checking environment variables +0ms
  cypress:cli checking if executable exists /home/abez/.cache/Cypress/4.8.0/Cypress/Cypress +2ms
  cypress:cli Binary is executable? : true +1ms
  cypress:cli binaryDir is  /home/abez/.cache/Cypress/4.8.0/Cypress +1ms
  cypress:cli Reading binary package.json from: /home/abez/.cache/Cypress/4.8.0/Cypress/resources/app/package.json +0ms
  cypress:cli Found binary version 4.8.0 installed in: /home/abez/.cache/Cypress/4.8.0/Cypress +2ms
  cypress:cli { verified: true } +2ms
  cypress:cli is Verified ? true +1ms
  cypress:cli DISPLAY environment variable is set to :0 on Linux
  cypress:cli Assuming this DISPLAY points at working X11 server,
  cypress:cli Cypress will not spawn own Xvfb
  cypress:cli
  cypress:cli NOTE: if the X11 server is NOT working, Cypress will exit without explanation,
  cypress:cli   see https://github.com/cypress-io/cypress/issues/4034
  cypress:cli Solution: Unset the DISPLAY variable and try again:
  cypress:cli   DISPLAY= npx cypress run ... +0ms
  cypress:cli needs to start own Xvfb? false +0ms
  cypress:cli spawning, should retry on display problem? true +0ms
  cypress:cli passing DISPLAY :0 +3ms
  cypress:cli spawning Cypress with executable: /home/abez/.cache/Cypress/4.8.0/Cypress/Cypress +0ms
  cypress:cli spawn args [ '--no-sandbox', '--', '--project', '/home/abez/projects/ps/corona-shop', '--cwd', '/home/abez/projects/ps/corona-shop' ] { detached: false, stdio: 'inherit' } +0ms
  cypress:ts Running without ts-node hook in environment ""production"" +0ms
  cypress:server:appdata path: /home/abez/.config/Cypress/cy/production/browsers +0ms
  cypress:server:util:node_options NODE_OPTIONS check passed, not forking { NODE_OPTIONS: '--max-http-header-size=1048576 --http-parser=legacy' } +0ms
  cypress:server:util:node_options restoring NODE_OPTIONS { NODE_OPTIONS: '--max-http-header-size=1048576 --http-parser=legacy', ORIGINAL_NODE_OPTIONS: undefined } +1ms
  cypress:server:cypress starting cypress with argv [ '/home/abez/.cache/Cypress/4.8.0/Cypress/Cypress', '--no-sandbox', '--', '--project', '/home/abez/projects/ps/corona-shop', '--cwd', '/home/abez/projects/ps/corona-shop' ] +0ms
  cypress:server:args argv array: [ '/home/abez/.cache/Cypress/4.8.0/Cypress/Cypress', '--no-sandbox', '--project', '/home/abez/projects/ps/corona-shop', '--cwd', '/home/abez/projects/ps/corona-shop' ] +0ms
  cypress:server:args argv parsed: { _: [ '/home/abez/.cache/Cypress/4.8.0/Cypress/Cypress' ], sandbox: false, project: '/home/abez/projects/ps/corona-shop', cwd: '/home/abez/projects/ps/corona-shop', invokedFromCli: true } +3ms
  cypress:server:util:proxy found proxy environment variables {} +0ms
  cypress:server:args options { _: [ '/home/abez/.cache/Cypress/4.8.0/Cypress/Cypress' ], sandbox: false, project: '/home/abez/projects/ps/corona-shop', cwd: '/home/abez/projects/ps/corona-shop', invokedFromCli: true, config: {} } +1ms
  cypress:server:args argv options: { _: [ '/home/abez/.cache/Cypress/4.8.0/Cypress/Cypress' ], sandbox: false, project: '/home/abez/projects/ps/corona-shop', cwd: '/home/abez/projects/ps/corona-shop', invokedFromCli: true, config: {}, projectRoot: '/home/abez/projects/ps/corona-shop' } +0ms
  cypress:server:cypress from argv [ '/home/abez/.cache/Cypress/4.8.0/Cypress/Cypress', '--no-sandbox', '--project', '/home/abez/projects/ps/corona-shop', '--cwd', '/home/abez/projects/ps/corona-shop' ] got options { _: [ '/home/abez/.cache/Cypress/4.8.0/Cypress/Cypress' ], sandbox: false, project: '/home/abez/projects/ps/corona-shop', cwd: '/home/abez/projects/ps/corona-shop', invokedFromCli: true, config: {}, projectRoot: '/home/abez/projects/ps/corona-shop' } +5ms
  cypress:server:appdata path: /home/abez/.config/Cypress/cy/production +202ms
  cypress:server:cypress starting in mode interactive with options { _: [ '/home/abez/.cache/Cypress/4.8.0/Cypress/Cypress' ], sandbox: false, project: '/home/abez/projects/ps/corona-shop', cwd: '/home/abez/projects/ps/corona-shop', invokedFromCli: true, config: {}, projectRoot: '/home/abez/projects/ps/corona-shop' } +79ms
  cypress:server:cypress running Electron currently +1ms
  cypress:server:appdata path: /home/abez/.config/Cypress/cy/production +86ms
  cypress:server:appdata path: /home/abez/.config/Cypress/cy/production/cache +274ms
  cypress:server:util:process_profiler current & mean memory and CPU usage by process group:
  cypress:server:util:process_profiler ┌─────────┬───────────────────┬──────────────┬────────────────────┬────────────┬────────────────┬──────────┬──────────────┬─────────────┐
  cypress:server:util:process_profiler │ (index) │       group       │ processCount │        pids        │ cpuPercent │ meanCpuPercent │ memRssMb │ meanMemRssMb │ maxMemRssMb │
  cypress:server:util:process_profiler ├─────────┼───────────────────┼──────────────┼────────────────────┼────────────┼────────────────┼──────────┼──────────────┼─────────────┤
  cypress:server:util:process_profiler │    0    │     'cypress'     │      1       │     '3306223'      │     0      │       0        │  147.06  │    147.06    │   147.06    │
  cypress:server:util:process_profiler │    1    │ 'electron-shared' │      1       │     '3306226'      │     0      │       0        │  42.42   │    42.42     │    42.42    │
  cypress:server:util:process_profiler │    2    │      'other'      │      2       │ '3306378, 3306380' │     0      │       0        │   3.64   │     3.64     │    3.64     │
  cypress:server:util:process_profiler │    3    │      'TOTAL'      │      4       │        '-'         │     0      │       0        │  193.11  │    193.11    │   193.11    │
  cypress:server:util:process_profiler └─────────┴───────────────────┴──────────────┴────────────────────┴────────────┴────────────────┴──────────┴──────────────┴─────────────┘ +0ms
  cypress:server:saved_state making saved state from /home/abez/.cache/Cypress/4.8.0/Cypress/resources/app/packages/server +0ms
  cypress:server:saved_state for project path /home/abez/projects/ps/corona-shop +0ms
  cypress:server:saved_state state path for project /home/abez/projects/ps/corona-shop +3ms
  cypress:server:appdata path: /home/abez/.config/Cypress/cy/production/projects/corona-shop-54ce75d806b65d12f0f32381071cff6e/state.json +2s
  cypress:server:saved_state full state path /home/abez/.config/Cypress/cy/production/projects/corona-shop-54ce75d806b65d12f0f32381071cff6e/state.json +3ms
  cypress:server:saved_state making new state file around /home/abez/.config/Cypress/cy/production/projects/corona-shop-54ce75d806b65d12f0f32381071cff6e/state.json +0ms
  cypress:server:file get values from /home/abez/.config/Cypress/cy/production/projects/corona-shop-54ce75d806b65d12f0f32381071cff6e/state.json +0ms
  cypress:server:file attempt to get lock on /home/abez/.config/Cypress/cy/production/projects/corona-shop-54ce75d806b65d12f0f32381071cff6e/state.json +2ms
  cypress:server:file getting lock succeeded or failed for /home/abez/.config/Cypress/cy/production/projects/corona-shop-54ce75d806b65d12f0f32381071cff6e/state.json +3ms
  cypress:server:file read /home/abez/.config/Cypress/cy/production/projects/corona-shop-54ce75d806b65d12f0f32381071cff6e/state.json +0ms
  cypress:server:file read succeeded or failed for /home/abez/.config/Cypress/cy/production/projects/corona-shop-54ce75d806b65d12f0f32381071cff6e/state.json +3ms
  cypress:server:file attempt to unlock /home/abez/.config/Cypress/cy/production/projects/corona-shop-54ce75d806b65d12f0f32381071cff6e/state.json +0ms
  cypress:server:file unlock succeeded or failed for /home/abez/.config/Cypress/cy/production/projects/corona-shop-54ce75d806b65d12f0f32381071cff6e/state.json +1ms
  cypress:server:windows creating electron window with options { backgroundColor: '#dfe2e4', width: 800, height: 550, minWidth: 458, minHeight: 400, x: null, y: null, type: 'INDEX', devTools: false, trackState: { width: 'appWidth', height: 'appHeight', x: 'appX', y: 'appY', devTools: 'isAppDevToolsOpen' }, onBlur: [Function: onBlur], onFocus: [Function: onFocus], onClose: [Function: onClose], show: true, frame: true, transparent: false, icon: NativeImage {}, webPreferences: { preload: '/home/abez/.cache/Cypress/4.8.0/Cypress/resources/app/packages/server/lib/ipc/ipc.js', partition: null, webSecurity: false, nodeIntegration: false, backgroundThrottling: false, backgroundColor: '#dfe2e4', transparent: false }, url: 'file:///home/abez/.cache/Cypress/4.8.0/Cypress/resources/app/packages/desktop-gui/dist/index.html', contextMenu: false, recordFrameRate: null, onCrashed: [Function: onCrashed], onNewWindow: [Function: onNewWindow] } +0ms
  cypress:server:events got request for event: on:menu:clicked, undefined +0ms
  cypress:server:events got request for event: get:options, undefined +0ms
  cypress:server:events got request for event: get:current:user, undefined +1ms
  cypress:server:file get values from /home/abez/.config/Cypress/cy/production/cache +445ms
  cypress:server:file attempt to get lock on /home/abez/.config/Cypress/cy/production/cache +0ms
  cypress:server:events sending ipc data { type: 'get:options', data: { id: 0.4251909171563961, data: { _: [Array], sandbox: false, project: '/home/abez/projects/ps/corona-shop', cwd: '/home/abez/projects/ps/corona-shop', invokedFromCli: true, config: {}, projectRoot: '/home/abez/projects/ps/corona-shop', onFocusTests: null, os: 'linux', version: '4.8.0' } }, originalData: { id: 0.4251909171563961, data: { _: [Array], sandbox: false, project: '/home/abez/projects/ps/corona-shop', cwd: '/home/abez/projects/ps/corona-shop', invokedFromCli: true, config: {}, projectRoot: '/home/abez/projects/ps/corona-shop', onFocusTests: [Function: onFocusTests], os: 'linux', version: '4.8.0' } } } +3ms
  cypress:server:file getting lock succeeded or failed for /home/abez/.config/Cypress/cy/production/cache +3ms
  cypress:server:file read /home/abez/.config/Cypress/cy/production/cache +0ms
  cypress:server:file read succeeded or failed for /home/abez/.config/Cypress/cy/production/cache +0ms
  cypress:server:file attempt to unlock /home/abez/.config/Cypress/cy/production/cache +1ms
  cypress:server:file unlock succeeded or failed for /home/abez/.config/Cypress/cy/production/cache +0ms
  cypress:server:events sending ipc data { type: 'get:current:user', data: { id: 0.49348347618289545, data: {} }, originalData: { id: 0.49348347618289545, data: {} } } +2ms
  cypress:server:events got request for event: on:focus:tests, undefined +16ms
  cypress:server:events got request for event: on:spec:changed, undefined +1ms
  cypress:server:events got request for event: on:config:changed, undefined +0ms
  cypress:server:events got request for event: on:project:error, undefined +0ms
  cypress:server:events got request for event: on:project:warning, undefined +0ms
  cypress:server:events got request for event: open:project, '/home/abez/projects/ps/corona-shop' +0ms
  cypress:server:events open:project +0ms
  cypress:server:browsers getAllBrowsersWith { nameOrPath: undefined } +0ms
  cypress:server:browsers:utils getBrowsers +0ms
  cypress:launcher detecting if the following browsers are present [ { name: 'chrome', family: 'chromium', channel: 'stable', displayName: 'Chrome', versionRegex: /Google Chrome (\S+)/m, binary: [ 'google-chrome', 'chrome', 'google-chrome-stable' ] }, { name: 'chromium', family: 'chromium', channel: 'stable', displayName: 'Chromium', versionRegex: /Chromium (\S+)/m, binary: [ 'chromium-browser', 'chromium' ] }, { name: 'chrome', family: 'chromium', channel: 'canary', displayName: 'Canary', versionRegex: /Google Chrome Canary (\S+)/m, binary: 'google-chrome-canary' }, { name: 'firefox', family: 'firefox', channel: 'stable', displayName: 'Firefox', info: 'Firefox support is currently in beta! You can help us continue to improve the Cypress + Firefox experience by [reporting any issues you find](https://on.cypress.io/new-issue).', versionRegex: /^Mozilla Firefox ([^\sab]+)$/m, binary: 'firefox' }, { name: 'firefox', family: 'firefox', channel: 'dev', displayName: 'Firefox Developer Edition', info: 'Firefox support is currently in beta! You can help us continue to improve the Cypress + Firefox experience by [reporting any issues you find](https://on.cypress.io/new-issue).', versionRegex: /^Mozilla Firefox (\S+b\S*)$/m, binary: [ 'firefox-developer-edition', 'firefox' ] }, { name: 'firefox', family: 'firefox', channel: 'nightly', displayName: 'Firefox Nightly', info: 'Firefox support is currently in beta! You can help us continue to improve the Cypress + Firefox experience by [reporting any issues you find](https://on.cypress.io/new-issue).', versionRegex: /^Mozilla Firefox (\S+a\S*)$/m, binary: [ 'firefox-nightly', 'firefox-trunk' ] }, { name: 'edge', family: 'chromium', channel: 'stable', displayName: 'Edge', versionRegex: /Microsoft Edge (\S+)/m, binary: 'edge' }, { name: 'edge', family: 'chromium', channel: 'canary', displayName: 'Edge Canary', versionRegex: /Microsoft Edge Canary (\S+)/m, binary: 'edge-canary' }, { name: 'edge', family: 'chromium', channel: 'beta', displayName: 'Edge Beta', versionRegex: /Microsoft Edge Beta (\S+)/m, binary: 'edge-beta' }, { name: 'edge', family: 'chromium', channel: 'dev', displayName: 'Edge Dev', versionRegex: /Microsoft Edge Dev (\S+)/m, binary: 'edge-dev' } ] +0ms
  cypress:launcher checking one browser chrome +4ms
  cypress:launcher looking up chrome on linux platform +0ms
  cypress:launcher finding version string using command ""google-chrome --version"" +0ms
  cypress:launcher checking one browser chrome +14ms
  cypress:launcher looking up chrome on linux platform +0ms
  cypress:launcher finding version string using command ""chrome --version"" +1ms
  cypress:launcher checking one browser chrome +23ms
  cypress:launcher looking up chrome on linux platform +0ms
  cypress:launcher finding version string using command ""google-chrome-stable --version"" +0ms
  cypress:server:events got request for event: updater:check, undefined +64ms
  cypress:server:updater checking for new version of Cypress. current version is 4.8.0 +0ms
  cypress:launcher Received error detecting browser binary: ""chrome"" with error: spawn chrome ENOENT +41ms
  cypress:launcher browser chrome not installed +2ms
  cypress:network:agent addRequest called { isHttps: true, href: 'https://download.cypress.io/desktop.json' } +0ms
  cypress:network:connect beginning getAddress { hostname: 'download.cypress.io', port: 443 } +0ms
  cypress:network:connect got addresses { hostname: 'download.cypress.io', port: 443, addresses: [ { address: '172.67.69.12', family: 4 }, { address: '104.26.7.176', family: 4 }, { address: '104.26.6.176', family: 4 }, { address: '2606:4700:20::ac43:450c', family: 6 }, { address: '2606:4700:20::681a:7b0', family: 6 }, { address: '2606:4700:20::681a:6b0', family: 6 } ] } +8ms
  cypress:launcher stdout: ""Google Chrome 83.0.4103.97"" +43ms
  cypress:launcher setting major version for {""name"":""chrome"",""family"":""chromium"",""channel"":""stable"",""displayName"":""Chrome"",""version"":""83.0.4103.97"",""path"":""google-chrome""} +1ms
  cypress:launcher browser chrome version 83.0.4103.97 major version 83 +0ms
  cypress:network:agent got family { family: 6, href: 'https://download.cypress.io/desktop.json' } +40ms
  cypress:launcher stdout: ""Google Chrome 83.0.4103.97"" +36ms
  cypress:launcher setting major version for {""name"":""chrome"",""family"":""chromium"",""channel"":""stable"",""displayName"":""Chrome"",""version"":""83.0.4103.97"",""path"":""google-chrome-stable""} +1ms
  cypress:launcher browser chrome version 83.0.4103.97 major version 83 +0ms
  cypress:launcher checking one browser chromium +0ms
  cypress:launcher looking up chromium on linux platform +0ms
  cypress:launcher finding version string using command ""chromium-browser --version"" +0ms
  cypress:launcher checking one browser chromium +13ms
  cypress:launcher looking up chromium on linux platform +0ms
  cypress:launcher finding version string using command ""chromium --version"" +0ms
  cypress:launcher Received error detecting browser binary: ""chromium-browser"" with error: spawn chromium-browser ENOENT +16ms
  cypress:launcher Received error detecting browser binary: ""chromium"" with error: spawn chromium ENOENT +0ms
  cypress:launcher browser chromium not installed +1ms
  cypress:launcher browser chromium not installed +0ms
  cypress:launcher checking one browser chrome +0ms
  cypress:launcher looking up chrome on linux platform +0ms
  cypress:launcher finding version string using command ""google-chrome-canary --version"" +0ms
  cypress:launcher Received error detecting browser binary: ""google-chrome-canary"" with error: spawn google-chrome-canary ENOENT +17ms
  cypress:launcher browser chrome not installed +0ms
  cypress:launcher checking one browser firefox +0ms
  cypress:launcher looking up firefox on linux platform +0ms
  cypress:launcher finding version string using command ""firefox --version"" +0ms
  cypress:launcher stdout: ""Mozilla Firefox 77.0.1"" +85ms
  cypress:launcher setting major version for {""name"":""firefox"",""family"":""firefox"",""channel"":""stable"",""displayName"":""Firefox"",""version"":""77.0.1"",""path"":""firefox"",""info"":""Firefox support is currently in beta! You can help us continue to improve the Cypress + Firefox experience by [reporting any issues you find](https://on.cypress.io/new-issue).""} +0ms
  cypress:launcher browser firefox version 77.0.1 major version 77 +0ms
  cypress:launcher checking one browser firefox +1ms
  cypress:launcher looking up firefox on linux platform +0ms
  cypress:launcher finding version string using command ""firefox-developer-edition --version"" +0ms
  cypress:launcher checking one browser firefox +18ms
  cypress:launcher looking up firefox on linux platform +1ms
  cypress:launcher finding version string using command ""firefox --version"" +0ms
  cypress:launcher Received error detecting browser binary: ""firefox-developer-edition"" with error: spawn firefox-developer-edition ENOENT +29ms
  cypress:launcher browser firefox not installed +1ms
  cypress:launcher stdout: ""Mozilla Firefox 77.0.1"" +85ms
  cypress:launcher Could not extract version from stdout using regex: { stdout: 'Mozilla Firefox 77.0.1', versionRegex: /^Mozilla Firefox (\S+b\S*)$/m } +1ms
  cypress:launcher Received error detecting browser binary: ""firefox"" with error: Browser not installed: firefox +1ms
  cypress:launcher browser firefox not installed +0ms
  cypress:launcher checking one browser firefox +0ms
  cypress:launcher looking up firefox on linux platform +0ms
  cypress:launcher finding version string using command ""firefox-nightly --version"" +0ms
  cypress:launcher checking one browser firefox +21ms
  cypress:launcher looking up firefox on linux platform +1ms
  cypress:launcher finding version string using command ""firefox-trunk --version"" +0ms
  cypress:launcher Received error detecting browser binary: ""firefox-nightly"" with error: spawn firefox-nightly ENOENT +15ms
  cypress:launcher Received error detecting browser binary: ""firefox-trunk"" with error: spawn firefox-trunk ENOENT +0ms
  cypress:launcher browser firefox not installed +1ms
  cypress:launcher browser firefox not installed +0ms
  cypress:launcher checking one browser edge +0ms
  cypress:launcher looking up edge on linux platform +0ms
  cypress:launcher finding version string using command ""edge --version"" +0ms
  cypress:launcher Received error detecting browser binary: ""edge"" with error: spawn edge ENOENT +26ms
  cypress:launcher browser edge not installed +1ms
  cypress:launcher checking one browser edge +0ms
  cypress:launcher looking up edge on linux platform +1ms
  cypress:launcher finding version string using command ""edge-canary --version"" +0ms
  cypress:server:updater latest version of Cypress is: 4.8.0 +459ms
  cypress:server:updater new version of Cypress does not exist +0ms
  cypress:server:events sending ipc data { type: 'updater:check', data: { id: 0.19920282151458935, data: false }, originalData: { id: 0.19920282151458935, data: false } } +460ms
  cypress:launcher Received error detecting browser binary: ""edge-canary"" with error: spawn edge-canary ENOENT +24ms
  cypress:launcher browser edge not installed +0ms
  cypress:launcher checking one browser edge +0ms
  cypress:launcher looking up edge on linux platform +1ms
  cypress:launcher finding version string using command ""edge-beta --version"" +0ms
  cypress:launcher Received error detecting browser binary: ""edge-beta"" with error: spawn edge-beta ENOENT +28ms
  cypress:launcher browser edge not installed +1ms
  cypress:launcher checking one browser edge +1ms
  cypress:launcher looking up edge on linux platform +0ms
  cypress:launcher finding version string using command ""edge-dev --version"" +0ms
  cypress:launcher Received error detecting browser binary: ""edge-dev"" with error: spawn edge-dev ENOENT +27ms
  cypress:launcher browser edge not installed +1ms
  cypress:server:browsers:utils found browsers { browsers: [ { name: 'chrome', family: 'chromium', channel: 'stable', displayName: 'Chrome', version: '83.0.4103.97', path: 'google-chrome', majorVersion: 83 }, { name: 'firefox', family: 'firefox', channel: 'stable', displayName: 'Firefox', version: '77.0.1', path: 'firefox', info: 'Firefox support is currently in beta! You can help us continue to improve the Cypress + Firefox experience by [reporting any issues you find](https://on.cypress.io/new-issue).', majorVersion: 77 } ] } +587ms
  cypress:server:browsers:utils adding Electron browser { name: 'electron', channel: 'stable', family: 'chromium', displayName: 'Electron', version: '80.0.3987.165', path: '', majorVersion: 80, info: 'Electron is the default browser that comes with Cypress. This is the default browser that runs in headless mode. Selecting this browser is useful when debugging. The version number indicates the underlying Chromium version that Electron uses.' } +1ms
  cypress:server:events setting found 3 browsers on the config +69ms
  cypress:server:open_project open_project create /home/abez/projects/ps/corona-shop +0ms
  cypress:server:open_project and options { onFocusTests: [Function: onFocusTests], onSpecChanged: [Function: onSpecChanged], onSettingsChanged: [Function: onSettingsChanged], onError: [Function: onError], onWarning: [Function: onWarning] } +1ms
  cypress:server:project Project created /home/abez/projects/ps/corona-shop +0ms
  cypress:server:open_project opening project /home/abez/projects/ps/corona-shop +0ms
  cypress:server:open_project and options { browsers: [ { name: 'chrome', family: 'chromium', channel: 'stable', displayName: 'Chrome', version: '83.0.4103.97', path: 'google-chrome', majorVersion: 83 }, { name: 'firefox', family: 'firefox', channel: 'stable', displayName: 'Firefox', version: '77.0.1', path: 'firefox', info: 'Firefox support is currently in beta! You can help us continue to improve the Cypress + Firefox experience by [reporting any issues you find](https://on.cypress.io/new-issue).', majorVersion: 77 }, { name: 'electron', channel: 'stable', family: 'chromium', displayName: 'Electron', version: '80.0.3987.165', path: '', majorVersion: 80, info: 'Electron is the default browser that comes with Cypress. This is the default browser that runs in headless mode. Selecting this browser is useful when debugging. The version number indicates the underlying Chromium version that Electron uses.' } ], onFocusTests: [Function: onFocusTests], onSpecChanged: [Function: onSpecChanged], onSettingsChanged: [Function: onSettingsChanged], onError: [Function: onError], onWarning: [Function: onWarning], onReloadBrowser: [Function: onReloadBrowser] } +1ms
  cypress:server:project opening project instance /home/abez/projects/ps/corona-shop +1ms
  cypress:server:project project open options { browsers: [ { name: 'chrome', family: 'chromium', channel: 'stable', displayName: 'Chrome', version: '83.0.4103.97', path: 'google-chrome', majorVersion: 83 }, { name: 'firefox', family: 'firefox', channel: 'stable', displayName: 'Firefox', version: '77.0.1', path: 'firefox', info: 'Firefox support is currently in beta! You can help us continue to improve the Cypress + Firefox experience by [reporting any issues you find](https://on.cypress.io/new-issue).', majorVersion: 77 }, { name: 'electron', channel: 'stable', family: 'chromium', displayName: 'Electron', version: '80.0.3987.165', path: '', majorVersion: 80, info: 'Electron is the default browser that comes with Cypress. This is the default browser that runs in headless mode. Selecting this browser is useful when debugging. The version number indicates the underlying Chromium version that Electron uses.' } ], onFocusTests: [Function: onFocusTests], onSpecChanged: [Function: onSpecChanged], onSettingsChanged: [Function: onSettingsChanged], onError: [Function: onError], onWarning: [Function: onWarning], onReloadBrowser: [Function: onReloadBrowser] } +1ms
  cypress:server:project project options { browsers: [ { name: 'chrome', family: 'chromium', channel: 'stable', displayName: 'Chrome', version: '83.0.4103.97', path: 'google-chrome', majorVersion: 83 }, { name: 'firefox', family: 'firefox', channel: 'stable', displayName: 'Firefox', version: '77.0.1', path: 'firefox', info: 'Firefox support is currently in beta! You can help us continue to improve the Cypress + Firefox experience by [reporting any issues you find](https://on.cypress.io/new-issue).', majorVersion: 77 }, { name: 'electron', channel: 'stable', family: 'chromium', displayName: 'Electron', version: '80.0.3987.165', path: '', majorVersion: 80, info: 'Electron is the default browser that comes with Cypress. This is the default browser that runs in headless mode. Selecting this browser is useful when debugging. The version number indicates the underlying Chromium version that Electron uses.' } ], onFocusTests: [Function: onFocusTests], onSpecChanged: [Function: onSpecChanged], onSettingsChanged: [Function: onSettingsChanged], onError: [Function: onError], onWarning: [Function: onWarning], onReloadBrowser: [Function: onReloadBrowser], report: false } +1ms
  cypress:server:config setting config object +0ms
  cypress:server:config config is {} +0ms
  cypress:server:config merged config with options, got { envFile: {}, projectRoot: '/home/abez/projects/ps/corona-shop', projectName: 'corona-shop', report: false, browsers: [ { name: 'chrome', family: 'chromium', channel: 'stable', displayName: 'Chrome', version: '83.0.4103.97', path: 'google-chrome', majorVersion: 83 }, { name: 'firefox', family: 'firefox', channel: 'stable', displayName: 'Firefox', version: '77.0.1', path: 'firefox', info: 'Firefox support is currently in beta! You can help us continue to improve the Cypress + Firefox experience by [reporting any issues you find](https://on.cypress.io/new-issue).', majorVersion: 77 }, { name: 'electron', channel: 'stable', family: 'chromium', displayName: 'Electron', version: '80.0.3987.165', path: '', majorVersion: 80, info: 'Electron is the default browser that comes with Cypress. This is the default browser that runs in headless mode. Selecting this browser is useful when debugging. The version number indicates the underlying Chromium version that Electron uses.' } ] } +1ms
  cypress:server:config using CYPRESS_INTERNAL_ENV production +5ms
  cypress:server:config resolved config is { value: [ { name: 'chrome', family: 'chromium', channel: 'stable', displayName: 'Chrome', version: '83.0.4103.97', path: 'google-chrome', majorVersion: 83 }, { name: 'firefox', family: 'firefox', channel: 'stable', displayName: 'Firefox', version: '77.0.1', path: 'firefox', info: 'Firefox support is currently in beta! You can help us continue to improve the Cypress + Firefox experience by [reporting any issues you find](https://on.cypress.io/new-issue).', majorVersion: 77 }, { name: 'electron', channel: 'stable', family: 'chromium', displayName: 'Electron', version: '80.0.3987.165', path: '', majorVersion: 80, info: 'Electron is the default browser that comes with Cypress. This is the default browser that runs in headless mode. Selecting this browser is useful when debugging. The version number indicates the underlying Chromium version that Electron uses.' } ], from: 'default' } +3ms
  cypress:server:validation browsers [ { name: 'chrome', family: 'chromium', channel: 'stable', displayName: 'Chrome', version: '83.0.4103.97', path: 'google-chrome', majorVersion: 83 }, { name: 'firefox', family: 'firefox', channel: 'stable', displayName: 'Firefox', version: '77.0.1', path: 'firefox', info: 'Firefox support is currently in beta! You can help us continue to improve the Cypress + Firefox experience by [reporting any issues you find](https://on.cypress.io/new-issue).', majorVersion: 77 }, { name: 'electron', channel: 'stable', family: 'chromium', displayName: 'Electron', version: '80.0.3987.165', path: '', majorVersion: 80, info: 'Electron is the default browser that comes with Cypress. This is the default browser that runs in headless mode. Selecting this browser is useful when debugging. The version number indicates the underlying Chromium version that Electron uses.' } ] +0ms
  cypress:server:config setting support file /home/abez/projects/ps/corona-shop/cypress/support +3ms
  cypress:server:config for project root /home/abez/projects/ps/corona-shop +1ms
  cypress:server:config resolved support file /home/abez/projects/ps/corona-shop/cypress/support/index.js +1ms
  cypress:server:config set support folder /home/abez/projects/ps/corona-shop/cypress/support +1ms
  cypress:server:config setting plugins file /home/abez/projects/ps/corona-shop/cypress/plugins +0ms
  cypress:server:config for project root /home/abez/projects/ps/corona-shop +0ms
  cypress:server:config set pluginsFile to /home/abez/projects/ps/corona-shop/cypress/plugins/index.js +1ms
  cypress:server:config set scaffold paths +1ms
  cypress:server:scaffold scaffolded files [""cypress/integration/examples/actions.spec.js"",""cypress/integration/examples/aliasing.spec.js"",""cypress/integration/examples/assertions.spec.js"",""cypress/integration/examples/connectors.spec.js"",""cypress/integration/examples/cookies.spec.js"",""cypress/integration/examples/cypress_api.spec.js"",""cypress/integration/examples/files.spec.js"",""cypress/integration/examples/local_storage.spec.js"",""cypress/integration/examples/location.spec.js"",""cypress/integration/examples/misc.spec.js"",""cypress/integration/examples/navigation.spec.js"",""cypress/integration/examples/network_requests.spec.js"",""cypress/integration/examples/querying.spec.js"",""cypress/integration/examples/spies_stubs_clocks.spec.js"",""cypress/integration/examples/traversal.spec.js"",""cypress/integration/examples/utilities.spec.js"",""cypress/integration/examples/viewport.spec.js"",""cypress/integration/examples/waiting.spec.js"",""cypress/integration/examples/window.spec.js"",""cypress/fixtures/example.json"",""cypress/support/commands.js"",""cypress/support/index.js"",""cypress/plugins/index.js""] +0ms
  cypress:server:config got file tree +6ms
  cypress:server:project get saved state +31ms
  cypress:server:saved_state making saved state from /home/abez/.cache/Cypress/4.8.0/Cypress/resources/app/packages/server +1s
  cypress:server:saved_state for project path /home/abez/projects/ps/corona-shop +1ms
  cypress:server:saved_state state path for project /home/abez/projects/ps/corona-shop +0ms
  cypress:server:appdata path: /home/abez/.config/Cypress/cy/production/projects/corona-shop-54ce75d806b65d12f0f32381071cff6e/state.json +1s
  cypress:server:saved_state full state path /home/abez/.config/Cypress/cy/production/projects/corona-shop-54ce75d806b65d12f0f32381071cff6e/state.json +1ms
  cypress:server:file get values from /home/abez/.config/Cypress/cy/production/projects/corona-shop-54ce75d806b65d12f0f32381071cff6e/state.json +647ms
  cypress:server:file attempt to get lock on /home/abez/.config/Cypress/cy/production/projects/corona-shop-54ce75d806b65d12f0f32381071cff6e/state.json +0ms
  cypress:server:file getting lock succeeded or failed for /home/abez/.config/Cypress/cy/production/projects/corona-shop-54ce75d806b65d12f0f32381071cff6e/state.json +1ms
  cypress:server:file read /home/abez/.config/Cypress/cy/production/projects/corona-shop-54ce75d806b65d12f0f32381071cff6e/state.json +0ms
  cypress:server:file read succeeded or failed for /home/abez/.config/Cypress/cy/production/projects/corona-shop-54ce75d806b65d12f0f32381071cff6e/state.json +1ms
  cypress:server:file attempt to unlock /home/abez/.config/Cypress/cy/production/projects/corona-shop-54ce75d806b65d12f0f32381071cff6e/state.json +0ms
  cypress:server:file unlock succeeded or failed for /home/abez/.config/Cypress/cy/production/projects/corona-shop-54ce75d806b65d12f0f32381071cff6e/state.json +0ms
  cypress:server:scaffold determine if new project by globbing files in { integrationFolder: '/home/abez/projects/ps/corona-shop/cypress/integration' } +9ms
  cypress:server:scaffold found 19 files in folder /home/abez/projects/ps/corona-shop/cypress/integration +42ms
  cypress:server:scaffold determine if we should scaffold: +0ms
  cypress:server:scaffold - empty? false +1ms
  cypress:server:scaffold - different number of files? false +1ms
  cypress:server:scaffold - different file names? false +0ms
  cypress:server:scaffold - same sizes? true +5ms
  cypress:server:scaffold untouched scaffold true modal closed true +0ms
  cypress:server:project scaffolding with plugins file /home/abez/projects/ps/corona-shop/cypress/plugins/index.js +55ms
  cypress:server:scaffold plugins folder /home/abez/projects/ps/corona-shop/cypress/plugins +1ms
  cypress:server:scaffold verify scaffolding in /home/abez/projects/ps/corona-shop/cypress/plugins +5ms
  cypress:server:scaffold folder /home/abez/projects/ps/corona-shop/cypress/plugins already exists +1ms
  cypress:server:project typescript doesn't exist. ts-node setup failed. +8ms
  cypress:server:project error message Cannot find module 'typescript' from '/home/abez/projects/ps/corona-shop' +0ms
  cypress:server:plugins plugins.init /home/abez/projects/ps/corona-shop/cypress/plugins/index.js +0ms
  cypress:server:plugins forking to run /home/abez/.cache/Cypress/4.8.0/Cypress/resources/app/packages/server/lib/plugins/child/index.js +0ms
  cypress:server:plugins:child pluginsFile: /home/abez/projects/ps/corona-shop/cypress/plugins/index.js +0ms
  cypress:server:plugins:child project root: /home/abez/projects/ps/corona-shop +1ms
  cypress:server:plugins:child typescript doesn't exist. ts-node setup failed. +3ms
  cypress:server:plugins:child error message: Cannot find module 'typescript' from '/home/abez/projects/ps/corona-shop' +0ms
  cypress:server:plugins:child require pluginsFile +0ms
  cypress:server:plugins:child plugins load file ""/home/abez/projects/ps/corona-shop/cypress/plugins/index.js"" +2ms
  cypress:server:plugins:child passing config { animationDistanceThreshold: 5, fileServerFolder: '/home/abez/projects/ps/corona-shop', baseUrl: null, fixturesFolder: '/home/abez/projects/ps/corona-shop/cypress/fixtures', blacklistHosts: null, chromeWebSecurity: true, modifyObstructiveCode: true, integrationFolder: '/home/abez/projects/ps/corona-shop/cypress/integration', env: {}, pluginsFile: '/home/abez/projects/ps/corona-shop/cypress/plugins/index.js', hosts: null, screenshotsFolder: '/home/abez/projects/ps/corona-shop/cypress/screenshots', numTestsKeptInMemory: 50, supportFile: '/home/abez/projects/ps/corona-shop/cypress/support/index.js', port: null, supportFolder: '/home/abez/projects/ps/corona-shop/cypress/support', projectId: null, videosFolder: '/home/abez/projects/ps/corona-shop/cypress/videos', reporter: 'spec', reporterOptions: null, ignoreTestFiles: '*.hot-update.js', testFiles: '**/*.*', defaultCommandTimeout: 4000, trashAssetsBeforeRuns: true, execTimeout: 60000, userAgent: null, pageLoadTimeout: 60000, viewportWidth: 1000, requestTimeout: 5000, viewportHeight: 660, responseTimeout: 30000, video: true, taskTimeout: 60000, videoCompression: 32, videoUploadOnPasses: true, watchForFileChanges: true, waitForAnimations: true, resolvedNodeVersion: '12.13.0', nodeVersion: 'default', firefoxGcInterval: { runMode: 1, openMode: null }, componentFolder: '/home/abez/projects/ps/corona-shop/cypress/component', browsers: [ { name: 'chrome', family: 'chromium', channel: 'stable', displayName: 'Chrome', version: '83.0.4103.97', path: 'google-chrome', majorVersion: 83 }, { name: 'firefox', family: 'firefox', channel: 'stable', displayName: 'Firefox', version: '77.0.1', path: 'firefox', info: 'Firefox support is currently in beta! You can help us continue to improve the Cypress + Firefox experience by [reporting any issues you find](https://on.cypress.io/new-issue).', majorVersion: 77 }, { name: 'electron', channel: 'stable', family: 'chromium', displayName: 'Electron', version: '80.0.3987.165', path: '', majorVersion: 80, info: 'Electron is the default browser that comes with Cypress. This is the default browser that runs in headless mode. Selecting this browser is useful when debugging. The version number indicates the underlying Chromium version that Electron uses.' } ], experimentalGetCookiesSameSite: false, experimentalSourceRewriting: false, experimentalComponentTesting: false, experimentalShadowDomSupport: false, projectRoot: '/home/abez/projects/ps/corona-shop', configFile: '/home/abez/projects/ps/corona-shop/cypress.json' } +0ms
  cypress:server:plugins:child run plugins function +2ms
  cypress:server:plugins:child register event _get:task:body with id 0 +1ms
  cypress:server:plugins:child register event _get:task:keys with id 1 +0ms
  cypress:server:plugins:child run plugins function +0ms
  cypress:server:plugins:child plugins file successfully loaded +1ms
  cypress:server:plugins register plugins process event _get:task:body with id 0 +261ms
  cypress:server:plugins register event '_get:task:body' +1ms
  cypress:server:plugins register plugins process event _get:task:keys with id 1 +0ms
  cypress:server:plugins register event '_get:task:keys' +0ms
  cypress:server:plugins resolving with new config null +0ms
  cypress:server:project plugin config yielded: null +263ms
  cypress:server:config updateWithPluginValues { cfg: { projectRoot: '/home/abez/projects/ps/corona-shop', projectName: 'corona-shop', report: false, browsers: [ [Object], [Object], [Object] ], port: null, hosts: null, morgan: true, baseUrl: null, socketId: null, projectId: null, userAgent: null, isTextTerminal: false, reporter: 'spec', reporterOptions: null, blacklistHosts: null, clientRoute: '/__/', xhrRoute: '/xhrs/', socketIoRoute: '/__socket.io', socketIoCookie: '__socket.io', reporterRoute: '/__cypress/reporter', ignoreTestFiles: '*.hot-update.js', testFiles: '**/*.*', defaultCommandTimeout: 4000, requestTimeout: 5000, responseTimeout: 30000, pageLoadTimeout: 60000, execTimeout: 60000, taskTimeout: 60000, video: true, videoCompression: 32, videoUploadOnPasses: true, modifyObstructiveCode: true, chromeWebSecurity: true, waitForAnimations: true, animationDistanceThreshold: 5, numTestsKeptInMemory: 50, watchForFileChanges: true, trashAssetsBeforeRuns: true, autoOpen: false, viewportWidth: 1000, viewportHeight: 660, fileServerFolder: '/home/abez/projects/ps/corona-shop', videosFolder: '/home/abez/projects/ps/corona-shop/cypress/videos', supportFile: '/home/abez/projects/ps/corona-shop/cypress/support/index.js', fixturesFolder: '/home/abez/projects/ps/corona-shop/cypress/fixtures', integrationFolder: '/home/abez/projects/ps/corona-shop/cypress/integration', screenshotsFolder: '/home/abez/projects/ps/corona-shop/cypress/screenshots', namespace: '__cypress', pluginsFile: '/home/abez/projects/ps/corona-shop/cypress/plugins/index.js', nodeVersion: 'default', configFile: 'cypress.json', firefoxGcInterval: { runMode: 1, openMode: null }, javascripts: [], experimentalComponentTesting: false, componentFolder: '/home/abez/projects/ps/corona-shop/cypress/component', experimentalGetCookiesSameSite: false, experimentalSourceRewriting: false, experimentalShadowDomSupport: false, env: {}, cypressEnv: 'production', resolved: { animationDistanceThreshold: [Object], fileServerFolder: [Object], baseUrl: [Object], fixturesFolder: [Object], blacklistHosts: [Object], chromeWebSecurity: [Object], modifyObstructiveCode: [Object], integrationFolder: [Object], env: {}, pluginsFile: [Object], hosts: [Object], screenshotsFolder: [Object], numTestsKeptInMemory: [Object], supportFile: [Object], port: [Object], projectId: [Object], videosFolder: [Object], reporter: [Object], reporterOptions: [Object], ignoreTestFiles: [Object], testFiles: [Object], defaultCommandTimeout: [Object], trashAssetsBeforeRuns: [Object], execTimeout: [Object], userAgent: [Object], pageLoadTimeout: [Object], viewportWidth: [Object], requestTimeout: [Object], viewportHeight: [Object], responseTimeout: [Object], video: [Object], taskTimeout: [Object], videoCompression: [Object], videoUploadOnPasses: [Object], watchForFileChanges: [Object], waitForAnimations: [Object], nodeVersion: [Object], firefoxGcInterval: [Object], componentFolder: [Object], browsers: [Object], experimentalGetCookiesSameSite: [Object], experimentalSourceRewriting: [Object], experimentalComponentTesting: [Object], experimentalShadowDomSupport: [Object] }, parentTestsFolder: '/home/abez/projects/ps/corona-shop/cypress', parentTestsFolderDisplay: 'corona-shop/cypress', supportFolder: '/home/abez/projects/ps/corona-shop/cypress/support', integrationExampleName: 'examples', integrationExamplePath: '/home/abez/projects/ps/corona-shop/cypress/integration/examples', scaffoldedFiles: [ [Object] ], resolvedNodeVersion: '12.13.0', state: { showedOnBoardingModal: true }, isNewProject: false }, overrides: {} } +327ms
  cypress:server:config config diffs null +2ms
  cypress:server:config merged config object { projectRoot: '/home/abez/projects/ps/corona-shop', projectName: 'corona-shop', report: false, browsers: [ { name: 'chrome', family: 'chromium', channel: 'stable', displayName: 'Chrome', version: '83.0.4103.97', path: 'google-chrome', majorVersion: 83 }, { name: 'firefox', family: 'firefox', channel: 'stable', displayName: 'Firefox', version: '77.0.1', path: 'firefox', info: 'Firefox support is currently in beta! You can help us continue to improve the Cypress + Firefox experience by [reporting any issues you find](https://on.cypress.io/new-issue).', majorVersion: 77 }, { name: 'electron', channel: 'stable', family: 'chromium', displayName: 'Electron', version: '80.0.3987.165', path: '', majorVersion: 80, info: 'Electron is the default browser that comes with Cypress. This is the default browser that runs in headless mode. Selecting this browser is useful when debugging. The version number indicates the underlying Chromium version that Electron uses.' } ], port: null, hosts: null, morgan: true, baseUrl: null, socketId: null, projectId: null, userAgent: null, isTextTerminal: false, reporter: 'spec', reporterOptions: null, blacklistHosts: null, clientRoute: '/__/', xhrRoute: '/xhrs/', socketIoRoute: '/__socket.io', socketIoCookie: '__socket.io', reporterRoute: '/__cypress/reporter', ignoreTestFiles: '*.hot-update.js', testFiles: '**/*.*', defaultCommandTimeout: 4000, requestTimeout: 5000, responseTimeout: 30000, pageLoadTimeout: 60000, execTimeout: 60000, taskTimeout: 60000, video: true, videoCompression: 32, videoUploadOnPasses: true, modifyObstructiveCode: true, chromeWebSecurity: true, waitForAnimations: true, animationDistanceThreshold: 5, numTestsKeptInMemory: 50, watchForFileChanges: true, trashAssetsBeforeRuns: true, autoOpen: false, viewportWidth: 1000, viewportHeight: 660, fileServerFolder: '/home/abez/projects/ps/corona-shop', videosFolder: '/home/abez/projects/ps/corona-shop/cypress/videos', supportFile: '/home/abez/projects/ps/corona-shop/cypress/support/index.js', fixturesFolder: '/home/abez/projects/ps/corona-shop/cypress/fixtures', integrationFolder: '/home/abez/projects/ps/corona-shop/cypress/integration', screenshotsFolder: '/home/abez/projects/ps/corona-shop/cypress/screenshots', namespace: '__cypress', pluginsFile: '/home/abez/projects/ps/corona-shop/cypress/plugins/index.js', nodeVersion: 'default', configFile: 'cypress.json', firefoxGcInterval: { runMode: 1, openMode: null }, javascripts: [], experimentalComponentTesting: false, componentFolder: '/home/abez/projects/ps/corona-shop/cypress/component', experimentalGetCookiesSameSite: false, experimentalSourceRewriting: false, experimentalShadowDomSupport: false, env: {}, cypressEnv: 'production', resolved: { animationDistanceThreshold: { value: 5, from: 'default' }, fileServerFolder: { value: '', from: 'default' }, baseUrl: { value: null, from: 'default' }, fixturesFolder: { value: 'cypress/fixtures', from: 'default' }, blacklistHosts: { value: null, from: 'default' }, chromeWebSecurity: { value: true, from: 'default' }, modifyObstructiveCode: { value: true, from: 'default' }, integrationFolder: { value: 'cypress/integration', from: 'default' }, env: {}, pluginsFile: { value: 'cypress/plugins', from: 'default' }, hosts: { value: null, from: 'default' }, screenshotsFolder: { value: 'cypress/screenshots', from: 'default' }, numTestsKeptInMemory: { value: 50, from: 'default' }, supportFile: { value: 'cypress/support', from: 'default' }, port: { value: null, from: 'default' }, projectId: { value: null, from: 'default' }, videosFolder: { value: 'cypress/videos', from: 'default' }, reporter: { value: 'spec', from: 'default' }, reporterOptions: { value: null, from: 'default' }, ignoreTestFiles: { value: '*.hot-update.js', from: 'default' }, testFiles: { value: '**/*.*', from: 'default' }, defaultCommandTimeout: { value: 4000, from: 'default' }, trashAssetsBeforeRuns: { value: true, from: 'default' }, execTimeout: { value: 60000, from: 'default' }, userAgent: { value: null, from: 'default' }, pageLoadTimeout: { value: 60000, from: 'default' }, viewportWidth: { value: 1000, from: 'default' }, requestTimeout: { value: 5000, from: 'default' }, viewportHeight: { value: 660, from: 'default' }, responseTimeout: { value: 30000, from: 'default' }, video: { value: true, from: 'default' }, taskTimeout: { value: 60000, from: 'default' }, videoCompression: { value: 32, from: 'default' }, videoUploadOnPasses: { value: true, from: 'default' }, watchForFileChanges: { value: true, from: 'default' }, waitForAnimations: { value: true, from: 'default' }, nodeVersion: { value: 'default', from: 'default' }, firefoxGcInterval: { value: [Object], from: 'default' }, componentFolder: { value: 'cypress/component', from: 'default' }, browsers: { value: [Array], from: 'default' }, experimentalGetCookiesSameSite: { value: false, from: 'default' }, experimentalSourceRewriting: { value: false, from: 'default' }, experimentalComponentTesting: { value: false, from: 'default' }, experimentalShadowDomSupport: { value: false, from: 'default' } }, parentTestsFolder: '/home/abez/projects/ps/corona-shop/cypress', parentTestsFolderDisplay: 'corona-shop/cypress', supportFolder: '/home/abez/projects/ps/corona-shop/cypress/support', integrationExampleName: 'examples', integrationExamplePath: '/home/abez/projects/ps/corona-shop/cypress/integration/examples', scaffoldedFiles: [ { name: 'cypress', children: [Array] } ], resolvedNodeVersion: '12.13.0', state: { showedOnBoardingModal: true }, isNewProject: false } +1ms
  cypress:server:config merged plugins config { projectRoot: '/home/abez/projects/ps/corona-shop', projectName: 'corona-shop', report: false, browsers: [ { name: 'chrome', family: 'chromium', channel: 'stable', displayName: 'Chrome', version: '83.0.4103.97', path: 'google-chrome', majorVersion: 83 }, { name: 'firefox', family: 'firefox', channel: 'stable', displayName: 'Firefox', version: '77.0.1', path: 'firefox', info: 'Firefox support is currently in beta! You can help us continue to improve the Cypress + Firefox experience by [reporting any issues you find](https://on.cypress.io/new-issue).', majorVersion: 77 }, { name: 'electron', channel: 'stable', family: 'chromium', displayName: 'Electron', version: '80.0.3987.165', path: '', majorVersion: 80, info: 'Electron is the default browser that comes with Cypress. This is the default browser that runs in headless mode. Selecting this browser is useful when debugging. The version number indicates the underlying Chromium version that Electron uses.' } ], port: null, hosts: null, morgan: true, baseUrl: null, socketId: null, projectId: null, userAgent: null, isTextTerminal: false, reporter: 'spec', reporterOptions: null, blacklistHosts: null, clientRoute: '/__/', xhrRoute: '/xhrs/', socketIoRoute: '/__socket.io', socketIoCookie: '__socket.io', reporterRoute: '/__cypress/reporter', ignoreTestFiles: '*.hot-update.js', testFiles: '**/*.*', defaultCommandTimeout: 4000, requestTimeout: 5000, responseTimeout: 30000, pageLoadTimeout: 60000, execTimeout: 60000, taskTimeout: 60000, video: true, videoCompression: 32, videoUploadOnPasses: true, modifyObstructiveCode: true, chromeWebSecurity: true, waitForAnimations: true, animationDistanceThreshold: 5, numTestsKeptInMemory: 50, watchForFileChanges: true, trashAssetsBeforeRuns: true, autoOpen: false, viewportWidth: 1000, viewportHeight: 660, fileServerFolder: '/home/abez/projects/ps/corona-shop', videosFolder: '/home/abez/projects/ps/corona-shop/cypress/videos', supportFile: '/home/abez/projects/ps/corona-shop/cypress/support/index.js', fixturesFolder: '/home/abez/projects/ps/corona-shop/cypress/fixtures', integrationFolder: '/home/abez/projects/ps/corona-shop/cypress/integration', screenshotsFolder: '/home/abez/projects/ps/corona-shop/cypress/screenshots', namespace: '__cypress', pluginsFile: '/home/abez/projects/ps/corona-shop/cypress/plugins/index.js', nodeVersion: 'default', configFile: 'cypress.json', firefoxGcInterval: { runMode: 1, openMode: null }, javascripts: [], experimentalComponentTesting: false, componentFolder: '/home/abez/projects/ps/corona-shop/cypress/component', experimentalGetCookiesSameSite: false, experimentalSourceRewriting: false, experimentalShadowDomSupport: false, env: {}, cypressEnv: 'production', resolved: { animationDistanceThreshold: { value: 5, from: 'default' }, fileServerFolder: { value: '', from: 'default' }, baseUrl: { value: null, from: 'default' }, fixturesFolder: { value: 'cypress/fixtures', from: 'default' }, blacklistHosts: { value: null, from: 'default' }, chromeWebSecurity: { value: true, from: 'default' }, modifyObstructiveCode: { value: true, from: 'default' }, integrationFolder: { value: 'cypress/integration', from: 'default' }, env: {}, pluginsFile: { value: 'cypress/plugins', from: 'default' }, hosts: { value: null, from: 'default' }, screenshotsFolder: { value: 'cypress/screenshots', from: 'default' }, numTestsKeptInMemory: { value: 50, from: 'default' }, supportFile: { value: 'cypress/support', from: 'default' }, port: { value: null, from: 'default' }, projectId: { value: null, from: 'default' }, videosFolder: { value: 'cypress/videos', from: 'default' }, reporter: { value: 'spec', from: 'default' }, reporterOptions: { value: null, from: 'default' }, ignoreTestFiles: { value: '*.hot-update.js', from: 'default' }, testFiles: { value: '**/*.*', from: 'default' }, defaultCommandTimeout: { value: 4000, from: 'default' }, trashAssetsBeforeRuns: { value: true, from: 'default' }, execTimeout: { value: 60000, from: 'default' }, userAgent: { value: null, from: 'default' }, pageLoadTimeout: { value: 60000, from: 'default' }, viewportWidth: { value: 1000, from: 'default' }, requestTimeout: { value: 5000, from: 'default' }, viewportHeight: { value: 660, from: 'default' }, responseTimeout: { value: 30000, from: 'default' }, video: { value: true, from: 'default' }, taskTimeout: { value: 60000, from: 'default' }, videoCompression: { value: 32, from: 'default' }, videoUploadOnPasses: { value: true, from: 'default' }, watchForFileChanges: { value: true, from: 'default' }, waitForAnimations: { value: true, from: 'default' }, nodeVersion: { value: 'default', from: 'default' }, firefoxGcInterval: { value: [Object], from: 'default' }, componentFolder: { value: 'cypress/component', from: 'default' }, browsers: { value: [Array], from: 'default' }, experimentalGetCookiesSameSite: { value: false, from: 'default' }, experimentalSourceRewriting: { value: false, from: 'default' }, experimentalComponentTesting: { value: false, from: 'default' }, experimentalShadowDomSupport: { value: false, from: 'default' } }, parentTestsFolder: '/home/abez/projects/ps/corona-shop/cypress', parentTestsFolderDisplay: 'corona-shop/cypress', supportFolder: '/home/abez/projects/ps/corona-shop/cypress/support', integrationExampleName: 'examples', integrationExamplePath: '/home/abez/projects/ps/corona-shop/cypress/integration/examples', scaffoldedFiles: [ { name: 'cypress', children: [Array] } ], resolvedNodeVersion: '12.13.0', state: { showedOnBoardingModal: true }, isNewProject: false } +2ms
  cypress:server:project updated config: { projectRoot: '/home/abez/projects/ps/corona-shop', projectName: 'corona-shop', report: false, browsers: [ { name: 'chrome', family: 'chromium', channel: 'stable', displayName: 'Chrome', version: '83.0.4103.97', path: 'google-chrome', majorVersion: 83 }, { name: 'firefox', family: 'firefox', channel: 'stable', displayName: 'Firefox', version: '77.0.1', path: 'firefox', info: 'Firefox support is currently in beta! You can help us continue to improve the Cypress + Firefox experience by [reporting any issues you find](https://on.cypress.io/new-issue).', majorVersion: 77 }, { name: 'electron', channel: 'stable', family: 'chromium', displayName: 'Electron', version: '80.0.3987.165', path: '', majorVersion: 80, info: 'Electron is the default browser that comes with Cypress. This is the default browser that runs in headless mode. Selecting this browser is useful when debugging. The version number indicates the underlying Chromium version that Electron uses.' } ], port: null, hosts: null, morgan: true, baseUrl: null, socketId: null, projectId: null, userAgent: null, isTextTerminal: false, reporter: 'spec', reporterOptions: null, blacklistHosts: null, clientRoute: '/__/', xhrRoute: '/xhrs/', socketIoRoute: '/__socket.io', socketIoCookie: '__socket.io', reporterRoute: '/__cypress/reporter', ignoreTestFiles: '*.hot-update.js', testFiles: '**/*.*', defaultCommandTimeout: 4000, requestTimeout: 5000, responseTimeout: 30000, pageLoadTimeout: 60000, execTimeout: 60000, taskTimeout: 60000, video: true, videoCompression: 32, videoUploadOnPasses: true, modifyObstructiveCode: true, chromeWebSecurity: true, waitForAnimations: true, animationDistanceThreshold: 5, numTestsKeptInMemory: 50, watchForFileChanges: true, trashAssetsBeforeRuns: true, autoOpen: false, viewportWidth: 1000, viewportHeight: 660, fileServerFolder: '/home/abez/projects/ps/corona-shop', videosFolder: '/home/abez/projects/ps/corona-shop/cypress/videos', supportFile: '/home/abez/projects/ps/corona-shop/cypress/support/index.js', fixturesFolder: '/home/abez/projects/ps/corona-shop/cypress/fixtures', integrationFolder: '/home/abez/projects/ps/corona-shop/cypress/integration', screenshotsFolder: '/home/abez/projects/ps/corona-shop/cypress/screenshots', namespace: '__cypress', pluginsFile: '/home/abez/projects/ps/corona-shop/cypress/plugins/index.js', nodeVersion: 'default', configFile: 'cypress.json', firefoxGcInterval: { runMode: 1, openMode: null }, javascripts: [], experimentalComponentTesting: false, componentFolder: '/home/abez/projects/ps/corona-shop/cypress/component', experimentalGetCookiesSameSite: false, experimentalSourceRewriting: false, experimentalShadowDomSupport: false, env: {}, cypressEnv: 'production', resolved: { animationDistanceThreshold: { value: 5, from: 'default' }, fileServerFolder: { value: '', from: 'default' }, baseUrl: { value: null, from: 'default' }, fixturesFolder: { value: 'cypress/fixtures', from: 'default' }, blacklistHosts: { value: null, from: 'default' }, chromeWebSecurity: { value: true, from: 'default' }, modifyObstructiveCode: { value: true, from: 'default' }, integrationFolder: { value: 'cypress/integration', from: 'default' }, env: {}, pluginsFile: { value: 'cypress/plugins', from: 'default' }, hosts: { value: null, from: 'default' }, screenshotsFolder: { value: 'cypress/screenshots', from: 'default' }, numTestsKeptInMemory: { value: 50, from: 'default' }, supportFile: { value: 'cypress/support', from: 'default' }, port: { value: null, from: 'default' }, projectId: { value: null, from: 'default' }, videosFolder: { value: 'cypress/videos', from: 'default' }, reporter: { value: 'spec', from: 'default' }, reporterOptions: { value: null, from: 'default' }, ignoreTestFiles: { value: '*.hot-update.js', from: 'default' }, testFiles: { value: '**/*.*', from: 'default' }, defaultCommandTimeout: { value: 4000, from: 'default' }, trashAssetsBeforeRuns: { value: true, from: 'default' }, execTimeout: { value: 60000, from: 'default' }, userAgent: { value: null, from: 'default' }, pageLoadTimeout: { value: 60000, from: 'default' }, viewportWidth: { value: 1000, from: 'default' }, requestTimeout: { value: 5000, from: 'default' }, viewportHeight: { value: 660, from: 'default' }, responseTimeout: { value: 30000, from: 'default' }, video: { value: true, from: 'default' }, taskTimeout: { value: 60000, from: 'default' }, videoCompression: { value: 32, from: 'default' }, videoUploadOnPasses: { value: true, from: 'default' }, watchForFileChanges: { value: true, from: 'default' }, waitForAnimations: { value: true, from: 'default' }, nodeVersion: { value: 'default', from: 'default' }, firefoxGcInterval: { value: [Object], from: 'default' }, componentFolder: { value: 'cypress/component', from: 'default' }, browsers: { value: [Array], from: 'default' }, experimentalGetCookiesSameSite: { value: false, from: 'default' }, experimentalSourceRewriting: { value: false, from: 'default' }, experimentalComponentTesting: { value: false, from: 'default' }, experimentalShadowDomSupport: { value: false, from: 'default' } }, parentTestsFolder: '/home/abez/projects/ps/corona-shop/cypress', parentTestsFolderDisplay: 'corona-shop/cypress', supportFolder: '/home/abez/projects/ps/corona-shop/cypress/support', integrationExampleName: 'examples', integrationExamplePath: '/home/abez/projects/ps/corona-shop/cypress/integration/examples', scaffoldedFiles: [ { name: 'cypress', children: [Array] } ], resolvedNodeVersion: '12.13.0', state: { showedOnBoardingModal: true }, isNewProject: false } +8ms
  cypress:server:server server open +0ms
  cypress:server:server Server listening on  { address: '127.0.0.1', family: 'IPv4', port: 42795 } +54ms
  cypress:server:appdata path: /home/abez/.config/Cypress/cy/production/proxy +391ms
  cypress:https-proxy:ca checking CA version { actualVersion: 1, CA_VERSION: 1 } +0ms
  cypress:https-proxy Created SNI HTTPS Proxy Server { port: 42773 } +0ms
  cypress:server:server Setting remoteAuth undefined +22ms
  cypress:server:server Setting remoteOrigin http://localhost:42795 +1ms
  cypress:server:server Setting remoteStrategy file +0ms
  cypress:server:server Setting remoteHostAndPort null +0ms
  cypress:server:server Setting remoteDocDomain localhost +0ms
  cypress:server:server Setting remoteFileServer http://localhost:32851 +0ms
  cypress:server:server Getting remote state: { auth: undefined, props: null, origin: 'http://localhost:42795', strategy: 'file', visiting: undefined, domainName: 'localhost', fileServer: 'http://localhost:32851' } +0ms
  cypress:server:project project config: { projectRoot: '/home/abez/projects/ps/corona-shop', projectName: 'corona-shop', report: false, browsers: [ { name: 'chrome', family: 'chromium', channel: 'stable', displayName: 'Chrome', version: '83.0.4103.97', path: 'google-chrome', majorVersion: 83 }, { name: 'firefox', family: 'firefox', channel: 'stable', displayName: 'Firefox', version: '77.0.1', path: 'firefox', info: 'Firefox support is currently in beta! You can help us continue to improve the Cypress + Firefox experience by [reporting any issues you find](https://on.cypress.io/new-issue).', majorVersion: 77 }, { name: 'electron', channel: 'stable', family: 'chromium', displayName: 'Electron', version: '80.0.3987.165', path: '', majorVersion: 80, info: 'Electron is the default browser that comes with Cypress. This is the default browser that runs in headless mode. Selecting this browser is useful when debugging. The version number indicates the underlying Chromium version that Electron uses.' } ], port: 42795, hosts: null, morgan: true, baseUrl: null, socketId: null, projectId: null, userAgent: null, isTextTerminal: false, reporter: 'spec', reporterOptions: null, blacklistHosts: null, clientRoute: '/__/', xhrRoute: '/xhrs/', socketIoRoute: '/__socket.io', socketIoCookie: '__socket.io', reporterRoute: '/__cypress/reporter', ignoreTestFiles: '*.hot-update.js', testFiles: '**/*.*', defaultCommandTimeout: 4000, requestTimeout: 5000, responseTimeout: 30000, pageLoadTimeout: 60000, execTimeout: 60000, taskTimeout: 60000, video: true, videoCompression: 32, videoUploadOnPasses: true, modifyObstructiveCode: true, chromeWebSecurity: true, waitForAnimations: true, animationDistanceThreshold: 5, numTestsKeptInMemory: 50, watchForFileChanges: true, trashAssetsBeforeRuns: true, autoOpen: false, viewportWidth: 1000, viewportHeight: 660, fileServerFolder: '/home/abez/projects/ps/corona-shop', videosFolder: '/home/abez/projects/ps/corona-shop/cypress/videos', supportFile: '/home/abez/projects/ps/corona-shop/cypress/support/index.js', fixturesFolder: '/home/abez/projects/ps/corona-shop/cypress/fixtures', integrationFolder: '/home/abez/projects/ps/corona-shop/cypress/integration', screenshotsFolder: '/home/abez/projects/ps/corona-shop/cypress/screenshots', namespace: '__cypress', pluginsFile: '/home/abez/projects/ps/corona-shop/cypress/plugins/index.js', nodeVersion: 'default', configFile: 'cypress.json', firefoxGcInterval: { runMode: 1, openMode: null }, javascripts: [], experimentalComponentTesting: false, componentFolder: '/home/abez/projects/ps/corona-shop/cypress/component', experimentalGetCookiesSameSite: false, experimentalSourceRewriting: false, experimentalShadowDomSupport: false, env: {}, cypressEnv: 'production', parentTestsFolder: '/home/abez/projects/ps/corona-shop/cypress', parentTestsFolderDisplay: 'corona-shop/cypress', supportFolder: '/home/abez/projects/ps/corona-shop/cypress/support', integrationExampleName: 'examples', integrationExamplePath: '/home/abez/projects/ps/corona-shop/cypress/integration/examples', scaffoldedFiles: [ { name: 'cypress', children: [Array] } ], resolvedNodeVersion: '12.13.0', state: { showedOnBoardingModal: true }, isNewProject: false, proxyUrl: 'http://localhost:42795', browserUrl: 'http://localhost:42795/__/', reporterUrl: 'http://localhost:42795/__cypress/reporter', xhrUrl: '__cypress/xhrs/' } +81ms
  cypress:server:project watch settings files +1ms
  cypress:server:project scaffolding project /home/abez/projects/ps/corona-shop +19ms
  cypress:server:scaffold support folder /home/abez/projects/ps/corona-shop/cypress/support, support file /home/abez/projects/ps/corona-shop/cypress/support/index.js +374ms
  cypress:server:scaffold verify scaffolding in /home/abez/projects/ps/corona-shop/cypress/support +0ms
  cypress:server:project scaffold flags { isTextTerminal: false, CYPRESS_INTERNAL_FORCE_SCAFFOLD: undefined } +1ms
  cypress:server:project will scaffold integration and fixtures folder +0ms
  cypress:server:scaffold integration folder /home/abez/projects/ps/corona-shop/cypress/integration +1ms
  cypress:server:scaffold verify scaffolding in /home/abez/projects/ps/corona-shop/cypress/integration +0ms
  cypress:server:scaffold fixture folder /home/abez/projects/ps/corona-shop/cypress/fixtures +0ms
  cypress:server:scaffold verify scaffolding in /home/abez/projects/ps/corona-shop/cypress/fixtures +0ms
  cypress:server:scaffold folder /home/abez/projects/ps/corona-shop/cypress/support already exists +1ms
  cypress:server:scaffold folder /home/abez/projects/ps/corona-shop/cypress/integration already exists +0ms
  cypress:server:scaffold folder /home/abez/projects/ps/corona-shop/cypress/fixtures already exists +0ms
  cypress:server:project attempt watch plugins file: /home/abez/projects/ps/corona-shop/cypress/plugins/index.js +1ms
  cypress:server:project plugins file found? true +4ms
  cypress:server:project watch plugins file +0ms
  cypress:server:project project has config { projectRoot: '/home/abez/projects/ps/corona-shop', projectName: 'corona-shop', report: false, browsers: [ { name: 'chrome', family: 'chromium', channel: 'stable', displayName: 'Chrome', version: '83.0.4103.97', path: 'google-chrome', majorVersion: 83 }, { name: 'firefox', family: 'firefox', channel: 'stable', displayName: 'Firefox', version: '77.0.1', path: 'firefox', info: 'Firefox support is currently in beta! You can help us continue to improve the Cypress + Firefox experience by [reporting any issues you find](https://on.cypress.io/new-issue).', majorVersion: 77 }, { name: 'electron', channel: 'stable', family: 'chromium', displayName: 'Electron', version: '80.0.3987.165', path: '', majorVersion: 80, info: 'Electron is the default browser that comes with Cypress. This is the default browser that runs in headless mode. Selecting this browser is useful when debugging. The version number indicates the underlying Chromium version that Electron uses.' } ], port: 42795, hosts: null, morgan: true, baseUrl: null, socketId: null, projectId: null, userAgent: null, isTextTerminal: false, reporter: 'spec', reporterOptions: null, blacklistHosts: null, clientRoute: '/__/', xhrRoute: '/xhrs/', socketIoRoute: '/__socket.io', socketIoCookie: '__socket.io', reporterRoute: '/__cypress/reporter', ignoreTestFiles: '*.hot-update.js', testFiles: '**/*.*', defaultCommandTimeout: 4000, requestTimeout: 5000, responseTimeout: 30000, pageLoadTimeout: 60000, execTimeout: 60000, taskTimeout: 60000, video: true, videoCompression: 32, videoUploadOnPasses: true, modifyObstructiveCode: true, chromeWebSecurity: true, waitForAnimations: true, animationDistanceThreshold: 5, numTestsKeptInMemory: 50, watchForFileChanges: true, trashAssetsBeforeRuns: true, autoOpen: false, viewportWidth: 1000, viewportHeight: 660, fileServerFolder: '/home/abez/projects/ps/corona-shop', videosFolder: '/home/abez/projects/ps/corona-shop/cypress/videos', supportFile: '/home/abez/projects/ps/corona-shop/cypress/support/index.js', fixturesFolder: '/home/abez/projects/ps/corona-shop/cypress/fixtures', integrationFolder: '/home/abez/projects/ps/corona-shop/cypress/integration', screenshotsFolder: '/home/abez/projects/ps/corona-shop/cypress/screenshots', namespace: '__cypress', pluginsFile: '/home/abez/projects/ps/corona-shop/cypress/plugins/index.js', nodeVersion: 'default', configFile: 'cypress.json', firefoxGcInterval: { runMode: 1, openMode: null }, javascripts: [], experimentalComponentTesting: false, componentFolder: '/home/abez/projects/ps/corona-shop/cypress/component', experimentalGetCookiesSameSite: false, experimentalSourceRewriting: false, experimentalShadowDomSupport: false, env: {}, cypressEnv: 'production', resolved: { animationDistanceThreshold: { value: 5, from: 'default' }, fileServerFolder: { value: '', from: 'default' }, baseUrl: { value: null, from: 'default' }, fixturesFolder: { value: 'cypress/fixtures', from: 'default' }, blacklistHosts: { value: null, from: 'default' }, chromeWebSecurity: { value: true, from: 'default' }, modifyObstructiveCode: { value: true, from: 'default' }, integrationFolder: { value: 'cypress/integration', from: 'default' }, env: {}, pluginsFile: { value: 'cypress/plugins', from: 'default' }, hosts: { value: null, from: 'default' }, screenshotsFolder: { value: 'cypress/screenshots', from: 'default' }, numTestsKeptInMemory: { value: 50, from: 'default' }, supportFile: { value: 'cypress/support', from: 'default' }, port: { value: null, from: 'default' }, projectId: { value: null, from: 'default' }, videosFolder: { value: 'cypress/videos', from: 'default' }, reporter: { value: 'spec', from: 'default' }, reporterOptions: { value: null, from: 'default' }, ignoreTestFiles: { value: '*.hot-update.js', from: 'default' }, testFiles: { value: '**/*.*', from: 'default' }, defaultCommandTimeout: { value: 4000, from: 'default' }, trashAssetsBeforeRuns: { value: true, from: 'default' }, execTimeout: { value: 60000, from: 'default' }, userAgent: { value: null, from: 'default' }, pageLoadTimeout: { value: 60000, from: 'default' }, viewportWidth: { value: 1000, from: 'default' }, requestTimeout: { value: 5000, from: 'default' }, viewportHeight: { value: 660, from: 'default' }, responseTimeout: { value: 30000, from: 'default' }, video: { value: true, from: 'default' }, taskTimeout: { value: 60000, from: 'default' }, videoCompression: { value: 32, from: 'default' }, videoUploadOnPasses: { value: true, from: 'default' }, watchForFileChanges: { value: true, from: 'default' }, waitForAnimations: { value: true, from: 'default' }, nodeVersion: { value: 'default', from: 'default' }, firefoxGcInterval: { value: [Object], from: 'default' }, componentFolder: { value: 'cypress/component', from: 'default' }, browsers: { value: [Array], from: 'default' }, experimentalGetCookiesSameSite: { value: false, from: 'default' }, experimentalSourceRewriting: { value: false, from: 'default' }, experimentalComponentTesting: { value: false, from: 'default' }, experimentalShadowDomSupport: { value: false, from: 'default' } }, parentTestsFolder: '/home/abez/projects/ps/corona-shop/cypress', parentTestsFolderDisplay: 'corona-shop/cypress', supportFolder: '/home/abez/projects/ps/corona-shop/cypress/support', integrationExampleName: 'examples', integrationExamplePath: '/home/abez/projects/ps/corona-shop/cypress/integration/examples', scaffoldedFiles: [ { name: 'cypress', children: [Array] } ], resolvedNodeVersion: '12.13.0', state: { showedOnBoardingModal: true }, isNewProject: false, proxyUrl: 'http://localhost:42795', browserUrl: 'http://localhost:42795/__/', reporterUrl: 'http://localhost:42795/__cypress/reporter', xhrUrl: '__cypress/xhrs/' } +26ms
  cypress:server:events sending ipc data { type: 'open:project', data: { id: 0.22242776900585004, data: { projectRoot: '/home/abez/projects/ps/corona-shop', projectName: 'corona-shop', report: false, browsers: [Array], port: 42795, hosts: null, morgan: true, baseUrl: null, socketId: null, projectId: null, userAgent: null, isTextTerminal: false, reporter: 'spec', reporterOptions: null, blacklistHosts: null, clientRoute: '/__/', xhrRoute: '/xhrs/', socketIoRoute: '/__socket.io', socketIoCookie: '__socket.io', reporterRoute: '/__cypress/reporter', ignoreTestFiles: '*.hot-update.js', testFiles: '**/*.*', defaultCommandTimeout: 4000, requestTimeout: 5000, responseTimeout: 30000, pageLoadTimeout: 60000, execTimeout: 60000, taskTimeout: 60000, video: true, videoCompression: 32, videoUploadOnPasses: true, modifyObstructiveCode: true, chromeWebSecurity: true, waitForAnimations: true, animationDistanceThreshold: 5, numTestsKeptInMemory: 50, watchForFileChanges: true, trashAssetsBeforeRuns: true, autoOpen: false, viewportWidth: 1000, viewportHeight: 660, fileServerFolder: '/home/abez/projects/ps/corona-shop', videosFolder: '/home/abez/projects/ps/corona-shop/cypress/videos', supportFile: '/home/abez/projects/ps/corona-shop/cypress/support/index.js', fixturesFolder: '/home/abez/projects/ps/corona-shop/cypress/fixtures', integrationFolder: '/home/abez/projects/ps/corona-shop/cypress/integration', screenshotsFolder: '/home/abez/projects/ps/corona-shop/cypress/screenshots', namespace: '__cypress', pluginsFile: '/home/abez/projects/ps/corona-shop/cypress/plugins/index.js', nodeVersion: 'default', configFile: 'cypress.json', firefoxGcInterval: [Object], javascripts: [], experimentalComponentTesting: false, componentFolder: '/home/abez/projects/ps/corona-shop/cypress/component', experimentalGetCookiesSameSite: false, experimentalSourceRewriting: false, experimentalShadowDomSupport: false, env: {}, cypressEnv: 'production', resolved: [Object], parentTestsFolder: '/home/abez/projects/ps/corona-shop/cypress', parentTestsFolderDisplay: 'corona-shop/cypress', supportFolder: '/home/abez/projects/ps/corona-shop/cypress/support', integrationExampleName: 'examples', integrationExamplePath: '/home/abez/projects/ps/corona-shop/cypress/integration/examples', scaffoldedFiles: [Array], resolvedNodeVersion: '12.13.0', state: [Object], isNewProject: false, proxyUrl: 'http://localhost:42795', browserUrl: 'http://localhost:42795/__/', reporterUrl: 'http://localhost:42795/__cypress/reporter', xhrUrl: '__cypress/xhrs/' } }, originalData: { id: 0.22242776900585004, data: { projectRoot: '/home/abez/projects/ps/corona-shop', projectName: 'corona-shop', report: false, browsers: [Array], port: 42795, hosts: null, morgan: true, baseUrl: null, socketId: null, projectId: null, userAgent: null, isTextTerminal: false, reporter: 'spec', reporterOptions: null, blacklistHosts: null, clientRoute: '/__/', xhrRoute: '/xhrs/', socketIoRoute: '/__socket.io', socketIoCookie: '__socket.io', reporterRoute: '/__cypress/reporter', ignoreTestFiles: '*.hot-update.js', testFiles: '**/*.*', defaultCommandTimeout: 4000, requestTimeout: 5000, responseTimeout: 30000, pageLoadTimeout: 60000, execTimeout: 60000, taskTimeout: 60000, video: true, videoCompression: 32, videoUploadOnPasses: true, modifyObstructiveCode: true, chromeWebSecurity: true, waitForAnimations: true, animationDistanceThreshold: 5, numTestsKeptInMemory: 50, watchForFileChanges: true, trashAssetsBeforeRuns: true, autoOpen: false, viewportWidth: 1000, viewportHeight: 660, fileServerFolder: '/home/abez/projects/ps/corona-shop', videosFolder: '/home/abez/projects/ps/corona-shop/cypress/videos', supportFile: '/home/abez/projects/ps/corona-shop/cypress/support/index.js', fixturesFolder: '/home/abez/projects/ps/corona-shop/cypress/fixtures', integrationFolder: '/home/abez/projects/ps/corona-shop/cypress/integration', screenshotsFolder: '/home/abez/projects/ps/corona-shop/cypress/screenshots', namespace: '__cypress', pluginsFile: '/home/abez/projects/ps/corona-shop/cypress/plugins/index.js', nodeVersion: 'default', configFile: 'cypress.json', firefoxGcInterval: [Object], javascripts: [], experimentalComponentTesting: false, componentFolder: '/home/abez/projects/ps/corona-shop/cypress/component', experimentalGetCookiesSameSite: false, experimentalSourceRewriting: false, experimentalShadowDomSupport: false, env: {}, cypressEnv: 'production', resolved: [Object], parentTestsFolder: '/home/abez/projects/ps/corona-shop/cypress', parentTestsFolderDisplay: 'corona-shop/cypress', supportFolder: '/home/abez/projects/ps/corona-shop/cypress/support', integrationExampleName: 'examples', integrationExamplePath: '/home/abez/projects/ps/corona-shop/cypress/integration/examples', scaffoldedFiles: [Array], resolvedNodeVersion: '12.13.0', state: [Object], isNewProject: false, proxyUrl: 'http://localhost:42795', browserUrl: 'http://localhost:42795/__/', reporterUrl: 'http://localhost:42795/__cypress/reporter', xhrUrl: '__cypress/xhrs/' } } } +510ms
  cypress:server:events got request for event: get:specs, undefined +19ms
  cypress:server:open_project check for spec updates +528ms
  cypress:server:project project has config { projectRoot: '/home/abez/projects/ps/corona-shop', projectName: 'corona-shop', report: false, browsers: [ { name: 'chrome', family: 'chromium', channel: 'stable', displayName: 'Chrome', version: '83.0.4103.97', path: 'google-chrome', majorVersion: 83 }, { name: 'firefox', family: 'firefox', channel: 'stable', displayName: 'Firefox', version: '77.0.1', path: 'firefox', info: 'Firefox support is currently in beta! You can help us continue to improve the Cypress + Firefox experience by [reporting any issues you find](https://on.cypress.io/new-issue).', majorVersion: 77 }, { name: 'electron', channel: 'stable', family: 'chromium', displayName: 'Electron', version: '80.0.3987.165', path: '', majorVersion: 80, info: 'Electron is the default browser that comes with Cypress. This is the default browser that runs in headless mode. Selecting this browser is useful when debugging. The version number indicates the underlying Chromium version that Electron uses.' } ], port: 42795, hosts: null, morgan: true, baseUrl: null, socketId: null, projectId: null, userAgent: null, isTextTerminal: false, reporter: 'spec', reporterOptions: null, blacklistHosts: null, clientRoute: '/__/', xhrRoute: '/xhrs/', socketIoRoute: '/__socket.io', socketIoCookie: '__socket.io', reporterRoute: '/__cypress/reporter', ignoreTestFiles: '*.hot-update.js', testFiles: '**/*.*', defaultCommandTimeout: 4000, requestTimeout: 5000, responseTimeout: 30000, pageLoadTimeout: 60000, execTimeout: 60000, taskTimeout: 60000, video: true, videoCompression: 32, videoUploadOnPasses: true, modifyObstructiveCode: true, chromeWebSecurity: true, waitForAnimations: true, animationDistanceThreshold: 5, numTestsKeptInMemory: 50, watchForFileChanges: true, trashAssetsBeforeRuns: true, autoOpen: false, viewportWidth: 1000, viewportHeight: 660, fileServerFolder: '/home/abez/projects/ps/corona-shop', videosFolder: '/home/abez/projects/ps/corona-shop/cypress/videos', supportFile: '/home/abez/projects/ps/corona-shop/cypress/support/index.js', fixturesFolder: '/home/abez/projects/ps/corona-shop/cypress/fixtures', integrationFolder: '/home/abez/projects/ps/corona-shop/cypress/integration', screenshotsFolder: '/home/abez/projects/ps/corona-shop/cypress/screenshots', namespace: '__cypress', pluginsFile: '/home/abez/projects/ps/corona-shop/cypress/plugins/index.js', nodeVersion: 'default', configFile: 'cypress.json', firefoxGcInterval: { runMode: 1, openMode: null }, javascripts: [], experimentalComponentTesting: false, componentFolder: '/home/abez/projects/ps/corona-shop/cypress/component', experimentalGetCookiesSameSite: false, experimentalSourceRewriting: false, experimentalShadowDomSupport: false, env: {}, cypressEnv: 'production', resolved: { animationDistanceThreshold: { value: 5, from: 'default' }, fileServerFolder: { value: '', from: 'default' }, baseUrl: { value: null, from: 'default' }, fixturesFolder: { value: 'cypress/fixtures', from: 'default' }, blacklistHosts: { value: null, from: 'default' }, chromeWebSecurity: { value: true, from: 'default' }, modifyObstructiveCode: { value: true, from: 'default' }, integrationFolder: { value: 'cypress/integration', from: 'default' }, env: {}, pluginsFile: { value: 'cypress/plugins', from: 'default' }, hosts: { value: null, from: 'default' }, screenshotsFolder: { value: 'cypress/screenshots', from: 'default' }, numTestsKeptInMemory: { value: 50, from: 'default' }, supportFile: { value: 'cypress/support', from: 'default' }, port: { value: null, from: 'default' }, projectId: { value: null, from: 'default' }, videosFolder: { value: 'cypress/videos', from: 'default' }, reporter: { value: 'spec', from: 'default' }, reporterOptions: { value: null, from: 'default' }, ignoreTestFiles: { value: '*.hot-update.js', from: 'default' }, testFiles: { value: '**/*.*', from: 'default' }, defaultCommandTimeout: { value: 4000, from: 'default' }, trashAssetsBeforeRuns: { value: true, from: 'default' }, execTimeout: { value: 60000, from: 'default' }, userAgent: { value: null, from: 'default' }, pageLoadTimeout: { value: 60000, from: 'default' }, viewportWidth: { value: 1000, from: 'default' }, requestTimeout: { value: 5000, from: 'default' }, viewportHeight: { value: 660, from: 'default' }, responseTimeout: { value: 30000, from: 'default' }, video: { value: true, from: 'default' }, taskTimeout: { value: 60000, from: 'default' }, videoCompression: { value: 32, from: 'default' }, videoUploadOnPasses: { value: true, from: 'default' }, watchForFileChanges: { value: true, from: 'default' }, waitForAnimations: { value: true, from: 'default' }, nodeVersion: { value: 'default', from: 'default' }, firefoxGcInterval: { value: [Object], from: 'default' }, componentFolder: { value: 'cypress/component', from: 'default' }, browsers: { value: [Array], from: 'default' }, experimentalGetCookiesSameSite: { value: false, from: 'default' }, experimentalSourceRewriting: { value: false, from: 'default' }, experimentalComponentTesting: { value: false, from: 'default' }, experimentalShadowDomSupport: { value: false, from: 'default' } }, parentTestsFolder: '/home/abez/projects/ps/corona-shop/cypress', parentTestsFolderDisplay: 'corona-shop/cypress', supportFolder: '/home/abez/projects/ps/corona-shop/cypress/support', integrationExampleName: 'examples', integrationExamplePath: '/home/abez/projects/ps/corona-shop/cypress/integration/examples', scaffoldedFiles: [ { name: 'cypress', children: [Array] } ], resolvedNodeVersion: '12.13.0', state: { showedOnBoardingModal: true }, isNewProject: false, proxyUrl: 'http://localhost:42795', browserUrl: 'http://localhost:42795/__/', reporterUrl: 'http://localhost:42795/__cypress/reporter', xhrUrl: '__cypress/xhrs/' } +28ms
  cypress:server:open_project createSpecWatch component testing enabled false +4ms
  cypress:server:open_project watching integration test files: **/*.* in /home/abez/projects/ps/corona-shop/cypress/integration +0ms
  cypress:server:specs experimentalComponentTesting false +0ms
  cypress:server:specs looking for test specs in the folder: /home/abez/projects/ps/corona-shop/cypress/integration +0ms
  cypress:server:specs there is no spec pattern +0ms
  cypress:server:specs globbing test files ""**/*.*"" +1ms
  cypress:server:specs glob options { sort: true, absolute: true, nodir: true, cwd: '/home/abez/projects/ps/corona-shop/cypress/integration', ignore: [ '/home/abez/projects/ps/corona-shop/cypress/support/index.js', '/home/abez/projects/ps/corona-shop/cypress/fixtures/**/*' ] } +0ms
  cypress:server:events got request for event: get:project:status, { id: undefined, path: '/home/abez/projects/ps/corona-shop' } +14ms
  cypress:server:project get project status for client id undefined at path /home/abez/projects/ps/corona-shop +13ms
  cypress:server:project no project id +0ms
  cypress:server:events sending ipc data { type: 'get:project:status', data: { id: 0.559541387289995, data: { id: undefined, path: '/home/abez/projects/ps/corona-shop', state: 'VALID' } }, originalData: { id: 0.559541387289995, data: { id: undefined, path: '/home/abez/projects/ps/corona-shop', state: 'VALID' } } } +2ms
  cypress:server:specs [
  cypress:server:specs   '/home/abez/projects/ps/corona-shop/cypress/integration/examples/actions.spec.js',
  cypress:server:specs   '/home/abez/projects/ps/corona-shop/cypress/integration/examples/aliasing.spec.js',
  cypress:server:specs   '/home/abez/projects/ps/corona-shop/cypress/integration/examples/assertions.spec.js',
  cypress:server:specs   '/home/abez/projects/ps/corona-shop/cypress/integration/examples/connectors.spec.js',
  cypress:server:specs   '/home/abez/projects/ps/corona-shop/cypress/integration/examples/cookies.spec.js',
  cypress:server:specs   '/home/abez/projects/ps/corona-shop/cypress/integration/examples/cypress_api.spec.js',
  cypress:server:specs   '/home/abez/projects/ps/corona-shop/cypress/integration/examples/files.spec.js',
  cypress:server:specs   '/home/abez/projects/ps/corona-shop/cypress/integration/examples/local_storage.spec.js',
  cypress:server:specs   '/home/abez/projects/ps/corona-shop/cypress/integration/examples/location.spec.js',
  cypress:server:specs   '/home/abez/projects/ps/corona-shop/cypress/integration/examples/misc.spec.js',
  cypress:server:specs   '/home/abez/projects/ps/corona-shop/cypress/integration/examples/navigation.spec.js',
  cypress:server:specs   '/home/abez/projects/ps/corona-shop/cypress/integration/examples/network_requests.spec.js',
  cypress:server:specs   '/home/abez/projects/ps/corona-shop/cypress/integration/examples/querying.spec.js',
  cypress:server:specs   '/home/abez/projects/ps/corona-shop/cypress/integration/examples/spies_stubs_clocks.spec.js',
  cypress:server:specs   '/home/abez/projects/ps/corona-shop/cypress/integration/examples/traversal.spec.js',
  cypress:server:specs   '/home/abez/projects/ps/corona-shop/cypress/integration/examples/utilities.spec.js',
  cypress:server:specs   '/home/abez/projects/ps/corona-shop/cypress/integration/examples/viewport.spec.js',
  cypress:server:specs   '/home/abez/projects/ps/corona-shop/cypress/integration/examples/waiting.spec.js',
  cypress:server:specs   '/home/abez/projects/ps/corona-shop/cypress/integration/examples/window.spec.js'
  cypress:server:specs ] +16ms
  cypress:server:specs found spec file /home/abez/projects/ps/corona-shop/cypress/integration/examples/actions.spec.js +4ms
  cypress:server:specs found spec file /home/abez/projects/ps/corona-shop/cypress/integration/examples/aliasing.spec.js +0ms
  cypress:server:specs found spec file /home/abez/projects/ps/corona-shop/cypress/integration/examples/assertions.spec.js +0ms
  cypress:server:specs found spec file /home/abez/projects/ps/corona-shop/cypress/integration/examples/connectors.spec.js +1ms
  cypress:server:specs found spec file /home/abez/projects/ps/corona-shop/cypress/integration/examples/cookies.spec.js +0ms
  cypress:server:specs found spec file /home/abez/projects/ps/corona-shop/cypress/integration/examples/cypress_api.spec.js +0ms
  cypress:server:specs found spec file /home/abez/projects/ps/corona-shop/cypress/integration/examples/files.spec.js +0ms
  cypress:server:specs found spec file /home/abez/projects/ps/corona-shop/cypress/integration/examples/local_storage.spec.js +0ms
  cypress:server:specs found spec file /home/abez/projects/ps/corona-shop/cypress/integration/examples/location.spec.js +0ms
  cypress:server:specs found spec file /home/abez/projects/ps/corona-shop/cypress/integration/examples/misc.spec.js +0ms
  cypress:server:specs found spec file /home/abez/projects/ps/corona-shop/cypress/integration/examples/navigation.spec.js +1ms
  cypress:server:specs found spec file /home/abez/projects/ps/corona-shop/cypress/integration/examples/network_requests.spec.js +0ms
  cypress:server:specs found spec file /home/abez/projects/ps/corona-shop/cypress/integration/examples/querying.spec.js +0ms
  cypress:server:specs found spec file /home/abez/projects/ps/corona-shop/cypress/integration/examples/spies_stubs_clocks.spec.js +0ms
  cypress:server:specs found spec file /home/abez/projects/ps/corona-shop/cypress/integration/examples/traversal.spec.js +0ms
  cypress:server:specs found spec file /home/abez/projects/ps/corona-shop/cypress/integration/examples/utilities.spec.js +0ms
  cypress:server:specs found spec file /home/abez/projects/ps/corona-shop/cypress/integration/examples/viewport.spec.js +0ms
  cypress:server:specs found spec file /home/abez/projects/ps/corona-shop/cypress/integration/examples/waiting.spec.js +1ms
  cypress:server:specs found spec file /home/abez/projects/ps/corona-shop/cypress/integration/examples/window.spec.js +0ms
  cypress:server:specs found 19 spec files: [ { name: 'examples/actions.spec.js', relative: 'cypress/integration/examples/actions.spec.js', absolute: '/home/abez/projects/ps/corona-shop/cypress/integration/examples/actions.spec.js' }, { name: 'examples/aliasing.spec.js', relative: 'cypress/integration/examples/aliasing.spec.js', absolute: '/home/abez/projects/ps/corona-shop/cypress/integration/examples/aliasing.spec.js' }, { name: 'examples/assertions.spec.js', relative: 'cypress/integration/examples/assertions.spec.js', absolute: '/home/abez/projects/ps/corona-shop/cypress/integration/examples/assertions.spec.js' }, { name: 'examples/connectors.spec.js', relative: 'cypress/integration/examples/connectors.spec.js', absolute: '/home/abez/projects/ps/corona-shop/cypress/integration/examples/connectors.spec.js' }, { name: 'examples/cookies.spec.js', relative: 'cypress/integration/examples/cookies.spec.js', absolute: '/home/abez/projects/ps/corona-shop/cypress/integration/examples/cookies.spec.js' }, { name: 'examples/cypress_api.spec.js', relative: 'cypress/integration/examples/cypress_api.spec.js', absolute: '/home/abez/projects/ps/corona-shop/cypress/integration/examples/cypress_api.spec.js' }, { name: 'examples/files.spec.js', relative: 'cypress/integration/examples/files.spec.js', absolute: '/home/abez/projects/ps/corona-shop/cypress/integration/examples/files.spec.js' }, { name: 'examples/local_storage.spec.js', relative: 'cypress/integration/examples/local_storage.spec.js', absolute: '/home/abez/projects/ps/corona-shop/cypress/integration/examples/local_storage.spec.js' }, { name: 'examples/location.spec.js', relative: 'cypress/integration/examples/location.spec.js', absolute: '/home/abez/projects/ps/corona-shop/cypress/integration/examples/location.spec.js' }, { name: 'examples/misc.spec.js', relative: 'cypress/integration/examples/misc.spec.js', absolute: '/home/abez/projects/ps/corona-shop/cypress/integration/examples/misc.spec.js' }, { name: 'examples/navigation.spec.js', relative: 'cypress/integration/examples/navigation.spec.js', absolute: '/home/abez/projects/ps/corona-shop/cypress/integration/examples/navigation.spec.js' }, { name: 'examples/network_requests.spec.js', relative: 'cypress/integration/examples/network_requests.spec.js', absolute: '/home/abez/projects/ps/corona-shop/cypress/integration/examples/network_requests.spec.js' }, { name: 'examples/querying.spec.js', relative: 'cypress/integration/examples/querying.spec.js', absolute: '/home/abez/projects/ps/corona-shop/cypress/integration/examples/querying.spec.js' }, { name: 'examples/spies_stubs_clocks.spec.js', relative: 'cypress/integration/examples/spies_stubs_clocks.spec.js', absolute: '/home/abez/projects/ps/corona-shop/cypress/integration/examples/spies_stubs_clocks.spec.js' }, { name: 'examples/traversal.spec.js', relative: 'cypress/integration/examples/traversal.spec.js', absolute: '/home/abez/projects/ps/corona-shop/cypress/integration/examples/traversal.spec.js' }, { name: 'examples/utilities.spec.js', relative: 'cypress/integration/examples/utilities.spec.js', absolute: '/home/abez/projects/ps/corona-shop/cypress/integration/examples/utilities.spec.js' }, { name: 'examples/viewport.spec.js', relative: 'cypress/integration/examples/viewport.spec.js', absolute: '/home/abez/projects/ps/corona-shop/cypress/integration/examples/viewport.spec.js' }, { name: 'examples/waiting.spec.js', relative: 'cypress/integration/examples/waiting.spec.js', absolute: '/home/abez/projects/ps/corona-shop/cypress/integration/examples/waiting.spec.js' }, { name: 'examples/window.spec.js', relative: 'cypress/integration/examples/window.spec.js', absolute: '/home/abez/projects/ps/corona-shop/cypress/integration/examples/window.spec.js' } ] +3ms
┌─────────────────────────────────────────────────────────┬─────────────┐
│ relative                                                │ specType    │
├─────────────────────────────────────────────────────────┼─────────────┤
│ cypress/integration/examples/actions.spec.js            │ integration │
├─────────────────────────────────────────────────────────┼─────────────┤
│ cypress/integration/examples/aliasing.spec.js           │ integration │
├─────────────────────────────────────────────────────────┼─────────────┤
│ cypress/integration/examples/assertions.spec.js         │ integration │
├─────────────────────────────────────────────────────────┼─────────────┤
│ cypress/integration/examples/connectors.spec.js         │ integration │
├─────────────────────────────────────────────────────────┼─────────────┤
│ cypress/integration/examples/cookies.spec.js            │ integration │
├─────────────────────────────────────────────────────────┼─────────────┤
│ cypress/integration/examples/cypress_api.spec.js        │ integration │
├─────────────────────────────────────────────────────────┼─────────────┤
│ cypress/integration/examples/files.spec.js              │ integration │
├─────────────────────────────────────────────────────────┼─────────────┤
│ cypress/integration/examples/local_storage.spec.js      │ integration │
├─────────────────────────────────────────────────────────┼─────────────┤
│ cypress/integration/examples/location.spec.js           │ integration │
├─────────────────────────────────────────────────────────┼─────────────┤
│ cypress/integration/examples/misc.spec.js               │ integration │
├─────────────────────────────────────────────────────────┼─────────────┤
│ cypress/integration/examples/navigation.spec.js         │ integration │
├─────────────────────────────────────────────────────────┼─────────────┤
│ cypress/integration/examples/network_requests.spec.js   │ integration │
├─────────────────────────────────────────────────────────┼─────────────┤
│ cypress/integration/examples/querying.spec.js           │ integration │
├─────────────────────────────────────────────────────────┼─────────────┤
│ cypress/integration/examples/spies_stubs_clocks.spec.js │ integration │
├─────────────────────────────────────────────────────────┼─────────────┤
│ cypress/integration/examples/traversal.spec.js          │ integration │
├─────────────────────────────────────────────────────────┼─────────────┤
│ cypress/integration/examples/utilities.spec.js          │ integration │
├─────────────────────────────────────────────────────────┼─────────────┤
│ cypress/integration/examples/viewport.spec.js           │ integration │
├─────────────────────────────────────────────────────────┼─────────────┤
│ cypress/integration/examples/waiting.spec.js            │ integration │
├─────────────────────────────────────────────────────────┼─────────────┤
│ cypress/integration/examples/window.spec.js             │ integration │
└─────────────────────────────────────────────────────────┴─────────────┘
  cypress:server:open_project found 19 specs using spec pattern '**/*.*': [ 'examples/actions.spec.js', 'examples/aliasing.spec.js', 'examples/assertions.spec.js', 'examples/connectors.spec.js', 'examples/cookies.spec.js', 'examples/cypress_api.spec.js', 'examples/files.spec.js', 'examples/local_storage.spec.js', 'examples/location.spec.js', 'examples/misc.spec.js', 'examples/navigation.spec.js', 'examples/network_requests.spec.js', 'examples/querying.spec.js', 'examples/spies_stubs_clocks.spec.js', 'examples/traversal.spec.js', 'examples/utilities.spec.js', 'examples/viewport.spec.js', 'examples/waiting.spec.js', 'examples/window.spec.js' ] +61ms
  cypress:server:events sending ipc data { type: 'get:specs', data: { id: 0.8997367528987941, data: { integration: [Array] } }, originalData: { id: 0.8997367528987941, data: { integration: [Array] } } } +52ms
  cypress:server:events got request for event: close:browser, undefined +5s
  cypress:server:events sending ipc data { type: 'close:browser', data: { id: 0.6904071391719404, data: undefined }, originalData: { id: 0.6904071391719404, data: undefined } } +2ms
  cypress:server:events got request for event: launch:browser, { browser: { displayName: 'Electron', name: 'electron', family: 'chromium', channel: 'stable', version: '80.0.3987.165', path: '', profilePath: undefined, majorVersion: 80, info: 'Electron is the default browser that comes with Cypress. This is the default browser that runs in headless mode. Selecting this browser is useful when debugging. The version number indicates the underlying Chromium version that Electron uses.', custom: undefined, warning: undefined, isChosen: true }, spec: { name: 'examples/actions.spec.js', absolute: '/home/abez/projects/ps/corona-shop/cypress/integration/examples/actions.spec.js', relative: 'cypress/integration/examples/actions.spec.js' }, specType: 'integration', relative: 'cypress/integration/examples/actions.spec.js' } +25ms
  cypress:server:events launching browser for 'integration' spec: { name: 'examples/actions.spec.js', absolute: '/home/abez/projects/ps/corona-shop/cypress/integration/examples/actions.spec.js', relative: 'cypress/integration/examples/actions.spec.js' } +0ms
  cypress:server:open_project resetting project state, preparing to launch browser electron for spec { name: 'examples/actions.spec.js', absolute: '/home/abez/projects/ps/corona-shop/cypress/integration/examples/actions.spec.js', relative: 'cypress/integration/examples/actions.spec.js', specType: 'integration' } options { projectRoot: '/home/abez/projects/ps/corona-shop', onBrowserOpen: [Function: onBrowserOpen], onBrowserClose: [Function: onBrowserClose] } +5s
  cypress:server:project resetting project instance /home/abez/projects/ps/corona-shop +5s
  cypress:proxy:http:util:buffers resetting buffers +0ms
  cypress:server:server Setting remoteAuth undefined +5s
  cypress:server:server Setting remoteOrigin http://localhost:42795 +0ms
  cypress:server:server Setting remoteStrategy file +0ms
  cypress:server:server Setting remoteHostAndPort null +0ms
  cypress:server:server Setting remoteDocDomain localhost +0ms
  cypress:server:server Setting remoteFileServer http://localhost:32851 +0ms
  cypress:server:server Getting remote state: { auth: undefined, props: null, origin: 'http://localhost:42795', strategy: 'file', visiting: undefined, domainName: 'localhost', fileServer: 'http://localhost:32851' } +0ms
  cypress:server:project project has config { projectRoot: '/home/abez/projects/ps/corona-shop', projectName: 'corona-shop', report: false, browsers: [ { name: 'chrome', family: 'chromium', channel: 'stable', displayName: 'Chrome', version: '83.0.4103.97', path: 'google-chrome', majorVersion: 83 }, { name: 'firefox', family: 'firefox', channel: 'stable', displayName: 'Firefox', version: '77.0.1', path: 'firefox', info: 'Firefox support is currently in beta! You can help us continue to improve the Cypress + Firefox experience by [reporting any issues you find](https://on.cypress.io/new-issue).', majorVersion: 77 }, { name: 'electron', channel: 'stable', family: 'chromium', displayName: 'Electron', version: '80.0.3987.165', path: '', majorVersion: 80, info: 'Electron is the default browser that comes with Cypress. This is the default browser that runs in headless mode. Selecting this browser is useful when debugging. The version number indicates the underlying Chromium version that Electron uses.' } ], port: 42795, hosts: null, morgan: true, baseUrl: null, socketId: null, projectId: null, userAgent: null, isTextTerminal: false, reporter: 'spec', reporterOptions: null, blacklistHosts: null, clientRoute: '/__/', xhrRoute: '/xhrs/', socketIoRoute: '/__socket.io', socketIoCookie: '__socket.io', reporterRoute: '/__cypress/reporter', ignoreTestFiles: '*.hot-update.js', testFiles: '**/*.*', defaultCommandTimeout: 4000, requestTimeout: 5000, responseTimeout: 30000, pageLoadTimeout: 60000, execTimeout: 60000, taskTimeout: 60000, video: true, videoCompression: 32, videoUploadOnPasses: true, modifyObstructiveCode: true, chromeWebSecurity: true, waitForAnimations: true, animationDistanceThreshold: 5, numTestsKeptInMemory: 50, watchForFileChanges: true, trashAssetsBeforeRuns: true, autoOpen: false, viewportWidth: 1000, viewportHeight: 660, fileServerFolder: '/home/abez/projects/ps/corona-shop', videosFolder: '/home/abez/projects/ps/corona-shop/cypress/videos', supportFile: '/home/abez/projects/ps/corona-shop/cypress/support/index.js', fixturesFolder: '/home/abez/projects/ps/corona-shop/cypress/fixtures', integrationFolder: '/home/abez/projects/ps/corona-shop/cypress/integration', screenshotsFolder: '/home/abez/projects/ps/corona-shop/cypress/screenshots', namespace: '__cypress', pluginsFile: '/home/abez/projects/ps/corona-shop/cypress/plugins/index.js', nodeVersion: 'default', configFile: 'cypress.json', firefoxGcInterval: { runMode: 1, openMode: null }, javascripts: [], experimentalComponentTesting: false, componentFolder: '/home/abez/projects/ps/corona-shop/cypress/component', experimentalGetCookiesSameSite: false, experimentalSourceRewriting: false, experimentalShadowDomSupport: false, env: {}, cypressEnv: 'production', resolved: { animationDistanceThreshold: { value: 5, from: 'default' }, fileServerFolder: { value: '', from: 'default' }, baseUrl: { value: null, from: 'default' }, fixturesFolder: { value: 'cypress/fixtures', from: 'default' }, blacklistHosts: { value: null, from: 'default' }, chromeWebSecurity: { value: true, from: 'default' }, modifyObstructiveCode: { value: true, from: 'default' }, integrationFolder: { value: 'cypress/integration', from: 'default' }, env: {}, pluginsFile: { value: 'cypress/plugins', from: 'default' }, hosts: { value: null, from: 'default' }, screenshotsFolder: { value: 'cypress/screenshots', from: 'default' }, numTestsKeptInMemory: { value: 50, from: 'default' }, supportFile: { value: 'cypress/support', from: 'default' }, port: { value: null, from: 'default' }, projectId: { value: null, from: 'default' }, videosFolder: { value: 'cypress/videos', from: 'default' }, reporter: { value: 'spec', from: 'default' }, reporterOptions: { value: null, from: 'default' }, ignoreTestFiles: { value: '*.hot-update.js', from: 'default' }, testFiles: { value: '**/*.*', from: 'default' }, defaultCommandTimeout: { value: 4000, from: 'default' }, trashAssetsBeforeRuns: { value: true, from: 'default' }, execTimeout: { value: 60000, from: 'default' }, userAgent: { value: null, from: 'default' }, pageLoadTimeout: { value: 60000, from: 'default' }, viewportWidth: { value: 1000, from: 'default' }, requestTimeout: { value: 5000, from: 'default' }, viewportHeight: { value: 660, from: 'default' }, responseTimeout: { value: 30000, from: 'default' }, video: { value: true, from: 'default' }, taskTimeout: { value: 60000, from: 'default' }, videoCompression: { value: 32, from: 'default' }, videoUploadOnPasses: { value: true, from: 'default' }, watchForFileChanges: { value: true, from: 'default' }, waitForAnimations: { value: true, from: 'default' }, nodeVersion: { value: 'default', from: 'default' }, firefoxGcInterval: { value: [Object], from: 'default' }, componentFolder: { value: 'cypress/component', from: 'default' }, browsers: { value: [Array], from: 'default' }, experimentalGetCookiesSameSite: { value: false, from: 'default' }, experimentalSourceRewriting: { value: false, from: 'default' }, experimentalComponentTesting: { value: false, from: 'default' }, experimentalShadowDomSupport: { value: false, from: 'default' } }, parentTestsFolder: '/home/abez/projects/ps/corona-shop/cypress', parentTestsFolderDisplay: 'corona-shop/cypress', supportFolder: '/home/abez/projects/ps/corona-shop/cypress/support', integrationExampleName: 'examples', integrationExamplePath: '/home/abez/projects/ps/corona-shop/cypress/integration/examples', scaffoldedFiles: [ { name: 'cypress', children: [Array] } ], resolvedNodeVersion: '12.13.0', state: { showedOnBoardingModal: true }, isNewProject: false, proxyUrl: 'http://localhost:42795', browserUrl: 'http://localhost:42795/__/', reporterUrl: 'http://localhost:42795/__cypress/reporter', xhrUrl: '__cypress/xhrs/' } +3ms
  cypress:server:project prefixed path for spec { pathToSpec: '/home/abez/projects/ps/corona-shop/cypress/integration/examples/actions.spec.js', type: 'integration', url: '/integration/examples/actions.spec.js' } +5ms
  cypress:server:project return path to spec { specType: 'integration', absoluteSpecPath: '/home/abez/projects/ps/corona-shop/cypress/integration/examples/actions.spec.js', prefixedPath: '/integration/examples/actions.spec.js', url: 'http://localhost:42795/__/#/tests/integration/examples/actions.spec.js' } +1ms
  cypress:server:open_project open project url http://localhost:42795/__/#/tests/integration/examples/actions.spec.js +10ms
  cypress:server:project project has config { projectRoot: '/home/abez/projects/ps/corona-shop', projectName: 'corona-shop', report: false, browsers: [ { name: 'chrome', family: 'chromium', channel: 'stable', displayName: 'Chrome', version: '83.0.4103.97', path: 'google-chrome', majorVersion: 83 }, { name: 'firefox', family: 'firefox', channel: 'stable', displayName: 'Firefox', version: '77.0.1', path: 'firefox', info: 'Firefox support is currently in beta! You can help us continue to improve the Cypress + Firefox experience by [reporting any issues you find](https://on.cypress.io/new-issue).', majorVersion: 77 }, { name: 'electron', channel: 'stable', family: 'chromium', displayName: 'Electron', version: '80.0.3987.165', path: '', majorVersion: 80, info: 'Electron is the default browser that comes with Cypress. This is the default browser that runs in headless mode. Selecting this browser is useful when debugging. The version number indicates the underlying Chromium version that Electron uses.' } ], port: 42795, hosts: null, morgan: true, baseUrl: null, socketId: null, projectId: null, userAgent: null, isTextTerminal: false, reporter: 'spec', reporterOptions: null, blacklistHosts: null, clientRoute: '/__/', xhrRoute: '/xhrs/', socketIoRoute: '/__socket.io', socketIoCookie: '__socket.io', reporterRoute: '/__cypress/reporter', ignoreTestFiles: '*.hot-update.js', testFiles: '**/*.*', defaultCommandTimeout: 4000, requestTimeout: 5000, responseTimeout: 30000, pageLoadTimeout: 60000, execTimeout: 60000, taskTimeout: 60000, video: true, videoCompression: 32, videoUploadOnPasses: true, modifyObstructiveCode: true, chromeWebSecurity: true, waitForAnimations: true, animationDistanceThreshold: 5, numTestsKeptInMemory: 50, watchForFileChanges: true, trashAssetsBeforeRuns: true, autoOpen: false, viewportWidth: 1000, viewportHeight: 660, fileServerFolder: '/home/abez/projects/ps/corona-shop', videosFolder: '/home/abez/projects/ps/corona-shop/cypress/videos', supportFile: '/home/abez/projects/ps/corona-shop/cypress/support/index.js', fixturesFolder: '/home/abez/projects/ps/corona-shop/cypress/fixtures', integrationFolder: '/home/abez/projects/ps/corona-shop/cypress/integration', screenshotsFolder: '/home/abez/projects/ps/corona-shop/cypress/screenshots', namespace: '__cypress', pluginsFile: '/home/abez/projects/ps/corona-shop/cypress/plugins/index.js', nodeVersion: 'default', configFile: 'cypress.json', firefoxGcInterval: { runMode: 1, openMode: null }, javascripts: [], experimentalComponentTesting: false, componentFolder: '/home/abez/projects/ps/corona-shop/cypress/component', experimentalGetCookiesSameSite: false, experimentalSourceRewriting: false, experimentalShadowDomSupport: false, env: {}, cypressEnv: 'production', resolved: { animationDistanceThreshold: { value: 5, from: 'default' }, fileServerFolder: { value: '', from: 'default' }, baseUrl: { value: null, from: 'default' }, fixturesFolder: { value: 'cypress/fixtures', from: 'default' }, blacklistHosts: { value: null, from: 'default' }, chromeWebSecurity: { value: true, from: 'default' }, modifyObstructiveCode: { value: true, from: 'default' }, integrationFolder: { value: 'cypress/integration', from: 'default' }, env: {}, pluginsFile: { value: 'cypress/plugins', from: 'default' }, hosts: { value: null, from: 'default' }, screenshotsFolder: { value: 'cypress/screenshots', from: 'default' }, numTestsKeptInMemory: { value: 50, from: 'default' }, supportFile: { value: 'cypress/support', from: 'default' }, port: { value: null, from: 'default' }, projectId: { value: null, from: 'default' }, videosFolder: { value: 'cypress/videos', from: 'default' }, reporter: { value: 'spec', from: 'default' }, reporterOptions: { value: null, from: 'default' }, ignoreTestFiles: { value: '*.hot-update.js', from: 'default' }, testFiles: { value: '**/*.*', from: 'default' }, defaultCommandTimeout: { value: 4000, from: 'default' }, trashAssetsBeforeRuns: { value: true, from: 'default' }, execTimeout: { value: 60000, from: 'default' }, userAgent: { value: null, from: 'default' }, pageLoadTimeout: { value: 60000, from: 'default' }, viewportWidth: { value: 1000, from: 'default' }, requestTimeout: { value: 5000, from: 'default' }, viewportHeight: { value: 660, from: 'default' }, responseTimeout: { value: 30000, from: 'default' }, video: { value: true, from: 'default' }, taskTimeout: { value: 60000, from: 'default' }, videoCompression: { value: 32, from: 'default' }, videoUploadOnPasses: { value: true, from: 'default' }, watchForFileChanges: { value: true, from: 'default' }, waitForAnimations: { value: true, from: 'default' }, nodeVersion: { value: 'default', from: 'default' }, firefoxGcInterval: { value: [Object], from: 'default' }, componentFolder: { value: 'cypress/component', from: 'default' }, browsers: { value: [Array], from: 'default' }, experimentalGetCookiesSameSite: { value: false, from: 'default' }, experimentalSourceRewriting: { value: false, from: 'default' }, experimentalComponentTesting: { value: false, from: 'default' }, experimentalShadowDomSupport: { value: false, from: 'default' } }, parentTestsFolder: '/home/abez/projects/ps/corona-shop/cypress', parentTestsFolderDisplay: 'corona-shop/cypress', supportFolder: '/home/abez/projects/ps/corona-shop/cypress/support', integrationExampleName: 'examples', integrationExamplePath: '/home/abez/projects/ps/corona-shop/cypress/integration/examples', scaffoldedFiles: [ { name: 'cypress', children: [Array] } ], resolvedNodeVersion: '12.13.0', state: { showedOnBoardingModal: true }, isNewProject: false, proxyUrl: 'http://localhost:42795', browserUrl: 'http://localhost:42795/__/', reporterUrl: 'http://localhost:42795/__cypress/reporter', xhrUrl: '__cypress/xhrs/' } +0ms
  cypress:server:open_project launching browser: { displayName: 'Electron', name: 'electron', family: 'chromium', channel: 'stable', version: '80.0.3987.165', path: '', profilePath: undefined, majorVersion: 80, info: 'Electron is the default browser that comes with Cypress. This is the default browser that runs in headless mode. Selecting this browser is useful when debugging. The version number indicates the underlying Chromium version that Electron uses.', custom: undefined, warning: undefined, isChosen: true, isHeaded: true, isHeadless: false }, spec: cypress/integration/examples/actions.spec.js +2ms
  cypress:server:browsers getBrowserLauncher { browser: { displayName: 'Electron', name: 'electron', family: 'chromium', channel: 'stable', version: '80.0.3987.165', path: '', profilePath: undefined, majorVersion: 80, info: 'Electron is the default browser that comes with Cypress. This is the default browser that runs in headless mode. Selecting this browser is useful when debugging. The version number indicates the underlying Chromium version that Electron uses.', custom: undefined, warning: undefined, isChosen: true, isHeaded: true, isHeadless: false } } +6s
  cypress:server:browsers opening browser { displayName: 'Electron', name: 'electron', family: 'chromium', channel: 'stable', version: '80.0.3987.165', path: '', profilePath: undefined, majorVersion: 80, info: 'Electron is the default browser that comes with Cypress. This is the default browser that runs in headless mode. Selecting this browser is useful when debugging. The version number indicates the underlying Chromium version that Electron uses.', custom: undefined, warning: undefined, isChosen: true, isHeaded: true, isHeadless: false } +3ms
  cypress:server:browsers:electron open { browser: { displayName: 'Electron', name: 'electron', family: 'chromium', channel: 'stable', version: '80.0.3987.165', path: '', profilePath: undefined, majorVersion: 80, info: 'Electron is the default browser that comes with Cypress. This is the default browser that runs in headless mode. Selecting this browser is useful when debugging. The version number indicates the underlying Chromium version that Electron uses.', custom: undefined, warning: undefined, isChosen: true, isHeaded: true, isHeadless: false }, url: 'http://localhost:42795/__/#/tests/integration/examples/actions.spec.js' } +0ms
  cypress:server:saved_state making saved state from /home/abez/.cache/Cypress/4.8.0/Cypress/resources/app/packages/server +5s
  cypress:server:saved_state for project path /home/abez/projects/ps/corona-shop +0ms
  cypress:server:saved_state state path for project /home/abez/projects/ps/corona-shop +0ms
  cypress:server:appdata path: /home/abez/.config/Cypress/cy/production/projects/corona-shop-54ce75d806b65d12f0f32381071cff6e/state.json +5s
  cypress:server:saved_state full state path /home/abez/.config/Cypress/cy/production/projects/corona-shop-54ce75d806b65d12f0f32381071cff6e/state.json +0ms
  cypress:server:file get values from /home/abez/.config/Cypress/cy/production/projects/corona-shop-54ce75d806b65d12f0f32381071cff6e/state.json +5s
  cypress:server:file attempt to get lock on /home/abez/.config/Cypress/cy/production/projects/corona-shop-54ce75d806b65d12f0f32381071cff6e/state.json +0ms
  cypress:server:file getting lock succeeded or failed for /home/abez/.config/Cypress/cy/production/projects/corona-shop-54ce75d806b65d12f0f32381071cff6e/state.json +1ms
  cypress:server:file read /home/abez/.config/Cypress/cy/production/projects/corona-shop-54ce75d806b65d12f0f32381071cff6e/state.json +0ms
  cypress:server:file read succeeded or failed for /home/abez/.config/Cypress/cy/production/projects/corona-shop-54ce75d806b65d12f0f32381071cff6e/state.json +1ms
  cypress:server:file attempt to unlock /home/abez/.config/Cypress/cy/production/projects/corona-shop-54ce75d806b65d12f0f32381071cff6e/state.json +0ms
  cypress:server:file unlock succeeded or failed for /home/abez/.config/Cypress/cy/production/projects/corona-shop-54ce75d806b65d12f0f32381071cff6e/state.json +0ms
  cypress:server:browsers:electron received saved state { showedOnBoardingModal: true } +3ms
  cypress:server:browsers:electron browser window options { projectRoot: '/home/abez/projects/ps/corona-shop', browsers: [ { name: 'chrome', family: 'chromium', channel: 'stable', displayName: 'Chrome', version: '83.0.4103.97', path: 'google-chrome', majorVersion: 83 }, { name: 'firefox', family: 'firefox', channel: 'stable', displayName: 'Firefox', version: '77.0.1', path: 'firefox', info: 'Firefox support is currently in beta! You can help us continue to improve the Cypress + Firefox experience by [reporting any issues you find](https://on.cypress.io/new-issue).', majorVersion: 77 }, { name: 'electron', channel: 'stable', family: 'chromium', displayName: 'Electron', version: '80.0.3987.165', path: '', majorVersion: 80, info: 'Electron is the default browser that comes with Cypress. This is the default browser that runs in headless mode. Selecting this browser is useful when debugging. The version number indicates the underlying Chromium version that Electron uses.' } ], proxyUrl: 'http://localhost:42795', userAgent: null, proxyServer: 'http://localhost:42795', socketIoRoute: '/__socket.io', chromeWebSecurity: true, url: 'http://localhost:42795/__/#/tests/integration/examples/actions.spec.js', isTextTerminal: false, browser: { displayName: 'Electron', name: 'electron', family: 'chromium', channel: 'stable', version: '80.0.3987.165', path: '', profilePath: undefined, majorVersion: 80, info: 'Electron is the default browser that comes with Cypress. This is the default browser that runs in headless mode. Selecting this browser is useful when debugging. The version number indicates the underlying Chromium version that Electron uses.', custom: undefined, warning: undefined, isChosen: true, isHeaded: true, isHeadless: false }, x: null, y: null, width: 1280, height: 720, devTools: false, minWidth: 100, minHeight: 100, contextMenu: true, partition: 'persist:interactive', trackState: { width: 'browserWidth', height: 'browserHeight', x: 'browserX', y: 'browserY', devTools: 'isBrowserDevToolsOpen' }, show: true, frame: true, recordFrameRate: null, webPreferences: { partition: null, webSecurity: true, nodeIntegration: false, backgroundThrottling: false } } +2ms
  cypress:server:plugins plugin event registered? { event: 'before:browser:launch', isRegistered: false } +5s
  cypress:server:browsers:electron launching browser window to url: http://localhost:42795/__/#/tests/integration/examples/actions.spec.js +2ms
  cypress:server:windows removing all electron extensions [] +6s
  cypress:server:browsers:electron debugger attached +16ms
  cypress:server:browsers:electron debugger: sending Browser.getVersion with params undefined +0ms
  cypress:server:browsers:electron clearing cache +0ms
  cypress:server:browsers:electron debugger: received response to Browser.getVersion: { jsVersion: '8.0.426.27', product: 'Chrome/80.0.3987.165', protocolVersion: '1.3', revision: '@e5b6ab1e501c0d609fdc717c00413f388cccad50', userAgent: 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Cypress/4.8.0 Chrome/80.0.3987.165 Electron/8.3.1 Safari/537.36' } +1ms
  cypress:server:routes Serving Cypress front-end by requested URL: /__/ +0ms
  cypress:server:server Getting remote state: { auth: undefined, props: null, origin: 'http://localhost:42795', strategy: 'file', visiting: undefined, domainName: 'localhost', fileServer: 'http://localhost:32851' } +68ms
  cypress:server:runner serving runner index.html with config { version: '4.8.0', platform: 'linux', arch: 'x64', projectName: 'corona-shop' } +0ms
  cypress:server:runner env object has the following keys:  +0ms
GET /__/ 200 8.641 ms - -
GET /__cypress/runner/cypress_runner.css 200 4.429 ms - -
GET /__cypress/runner/cypress_runner.js 200 2.249 ms - -
  cypress:server:server Got CONNECT request from localhost:42795 +698ms
  cypress:https-proxy Writing browserSocket connection headers { url: 'localhost:42795', headLength: 0, headers: { host: 'localhost:42795', 'proxy-connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Cypress/4.8.0 Chrome/80.0.3987.165 Electron/8.3.1 Safari/537.36' } } +6s
  cypress:https-proxy Got first head bytes { url: 'localhost:42795', head: 'GET /__socket.io/?EIO=3&transport=websocket HTTP/1.1\r\nHost: loca' } +1ms
  cypress:server:server HTTPS request does not match URL: https://localhost:42795 with props: null +1ms
  cypress:https-proxy Making connection to localhost:42795 +1ms
  cypress:https-proxy getting proxy URL { port: 42795, serverPort: 42795, sniPort: 42773, url: 'https://localhost:42795' } +0ms
  cypress:network:connect received error on connect, retrying { iteration: 0, delay: 0, err: Error: connect ECONNREFUSED 192.168.128.3:42795     at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1128:14) { errno: 'ECONNREFUSED', code: 'ECONNREFUSED', syscall: 'connect', address: '192.168.128.3', port: 42795 } } +7s
  cypress:network:connect received error on connect, retrying { iteration: 1, delay: 100, err: Error: connect ECONNREFUSED 192.168.128.3:42795     at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1128:14) { errno: 'ECONNREFUSED', code: 'ECONNREFUSED', syscall: 'connect', address: '192.168.128.3', port: 42795 } } +3ms
  cypress:server:browsers:electron debugger: enable Console and Network +756ms
  cypress:server:browsers:electron debugger: sending Console.enable with params undefined +0ms
  cypress:server:browsers:electron debugger: received response to Console.enable: {} +19ms
  cypress:server:browsers:electron maybe recording video { onScreencastFrame: undefined } +0ms
  cypress:server:browsers browser opened +802ms
  cypress:network:connect received error on connect, retrying { iteration: 2, delay: 200, err: Error: connect ECONNREFUSED 192.168.128.3:42795     at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1128:14) { errno: 'ECONNREFUSED', code: 'ECONNREFUSED', syscall: 'connect', address: '192.168.128.3', port: 42795 } } +102ms
  cypress:network:connect received error on connect, retrying { iteration: 3, delay: 200, err: Error: connect ECONNREFUSED 192.168.128.3:42795     at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1128:14) { errno: 'ECONNREFUSED', code: 'ECONNREFUSED', syscall: 'connect', address: '192.168.128.3', port: 42795 } } +203ms
  cypress:network:connect retries exhausted, bubbling up error { iteration: 4, err: Error: connect ECONNREFUSED 192.168.128.3:42795     at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1128:14) { errno: 'ECONNREFUSED', code: 'ECONNREFUSED', syscall: 'connect', address: '192.168.128.3', port: 42795 } } +204ms
  cypress:https-proxy received upstreamSocket callback for request { port: '42795', hostname: 'localhost', err: Error: connect ECONNREFUSED 192.168.128.3:42795     at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1128:14) { errno: 'ECONNREFUSED', code: 'ECONNREFUSED', syscall: 'connect', address: '192.168.128.3', port: 42795 } } +514ms
  cypress:https-proxy received error on client browserSocket { err: Error: connect ECONNREFUSED 192.168.128.3:42795     at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1128:14) { errno: 'ECONNREFUSED', code: 'ECONNREFUSED', syscall: 'connect', address: '192.168.128.3', port: 42795 }, url: 'localhost:42795' } +2ms
[3306223:0610/175331.519263:INFO:CONSOLE(182674)] ""WebSocket connection to 'ws://localhost:42795/__socket.io/?EIO=3&transport=websocket' failed: Connection closed before receiving a handshake response"", source: http://localhost:42795/__cypress/runner/cypress_runner.js (182674)
  cypress:server:events sending ipc data { type: 'launch:browser', data: { id: 0.7822078427966872, data: { browserOpened: true } }, originalData: { id: 0.7822078427966872, data: { browserOpened: true } } } +2s
  cypress:server:server Got CONNECT request from localhost:42795 +2s
  cypress:https-proxy Writing browserSocket connection headers { url: 'localhost:42795', headLength: 0, headers: { host: 'localhost:42795', 'proxy-connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Cypress/4.8.0 Chrome/80.0.3987.165 Electron/8.3.1 Safari/537.36' } } +1s
  cypress:https-proxy Got first head bytes { url: 'localhost:42795', head: 'GET /__socket.io/?EIO=3&transport=websocket HTTP/1.1\r\nHost: loca' } +3ms
  cypress:server:server HTTPS request does not match URL: https://localhost:42795 with props: null +3ms
  cypress:https-proxy Making connection to localhost:42795 +1ms
  cypress:https-proxy getting proxy URL { port: 42795, serverPort: 42795, sniPort: 42773, url: 'https://localhost:42795' } +0ms
  cypress:network:connect received error on connect, retrying { iteration: 0, delay: 0, err: Error: connect ECONNREFUSED 192.168.128.3:42795     at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1128:14) { errno: 'ECONNREFUSED', code: 'ECONNREFUSED', syscall: 'connect', address: '192.168.128.3', port: 42795 } } +1s
  cypress:network:connect received error on connect, retrying { iteration: 1, delay: 100, err: Error: connect ECONNREFUSED 192.168.128.3:42795     at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1128:14) { errno: 'ECONNREFUSED', code: 'ECONNREFUSED', syscall: 'connect', address: '192.168.128.3', port: 42795 } } +4ms
  cypress:network:connect received error on connect, retrying { iteration: 2, delay: 200, err: Error: connect ECONNREFUSED 192.168.128.3:42795     at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1128:14) { errno: 'ECONNREFUSED', code: 'ECONNREFUSED', syscall: 'connect', address: '192.168.128.3', port: 42795 } } +103ms
  cypress:network:connect received error on connect, retrying { iteration: 3, delay: 200, err: Error: connect ECONNREFUSED 192.168.128.3:42795     at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1128:14) { errno: 'ECONNREFUSED', code: 'ECONNREFUSED', syscall: 'connect', address: '192.168.128.3', port: 42795 } } +202ms
  cypress:network:connect retries exhausted, bubbling up error { iteration: 4, err: Error: connect ECONNREFUSED 192.168.128.3:42795     at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1128:14) { errno: 'ECONNREFUSED', code: 'ECONNREFUSED', syscall: 'connect', address: '192.168.128.3', port: 42795 } } +203ms
  cypress:https-proxy received upstreamSocket callback for request { port: '42795', hostname: 'localhost', err: Error: connect ECONNREFUSED 192.168.128.3:42795     at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1128:14) { errno: 'ECONNREFUSED', code: 'ECONNREFUSED', syscall: 'connect', address: '192.168.128.3', port: 42795 } } +515ms
  cypress:https-proxy received error on client browserSocket { err: Error: connect ECONNREFUSED 192.168.128.3:42795     at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1128:14) { errno: 'ECONNREFUSED', code: 'ECONNREFUSED', syscall: 'connect', address: '192.168.128.3', port: 42795 }, url: 'localhost:42795' } +0ms
[3306223:0610/175333.214901:INFO:CONSOLE(182674)] ""WebSocket connection to 'ws://localhost:42795/__socket.io/?EIO=3&transport=websocket' failed: Connection closed before receiving a handshake response"", source: http://localhost:42795/__cypress/runner/cypress_runner.js (182674)
  cypress:server:util:process_profiler current & mean memory and CPU usage by process group:
  cypress:server:util:process_profiler ┌─────────┬───────────────────┬──────────────┬─────────────────────────────┬────────────┬────────────────┬──────────┬──────────────┬─────────────┐
  cypress:server:util:process_profiler │ (index) │       group       │ processCount │            pids             │ cpuPercent │ meanCpuPercent │ memRssMb │ meanMemRssMb │ maxMemRssMb │
  cypress:server:util:process_profiler ├─────────┼───────────────────┼──────────────┼─────────────────────────────┼────────────┼────────────────┼──────────┼──────────────┼─────────────┤
  cypress:server:util:process_profiler │    0    │     'cypress'     │      1       │          '3306223'          │    3.5     │      1.75      │  268.84  │    207.95    │   268.84    │
  cypress:server:util:process_profiler │    1    │ 'electron-shared' │      3       │ '3306226, 3306396, 3306682' │     0      │       0        │  172.52  │    107.47    │   172.52    │
  cypress:server:util:process_profiler │    2    │    'Electron'     │      1       │          '3307141'          │     0      │       0        │  149.81  │    149.81    │   149.81    │
  cypress:server:util:process_profiler │    3    │   'desktop-gui'   │      1       │          '3306919'          │     0      │       0        │  127.2   │    127.2     │    127.2    │
  cypress:server:util:process_profiler │    4    │     'plugin'      │      1       │          '3307032'          │     0      │       0        │  69.79   │    69.79     │    69.79    │
  cypress:server:util:process_profiler │    5    │      'other'      │      2       │     '3307221, 3307222'      │     0      │       0        │   3.67   │     3.66     │    3.67     │
  cypress:server:util:process_profiler │    6    │      'TOTAL'      │      9       │             '-'             │    3.5     │      1.75      │  791.82  │    492.47    │   791.82    │
  cypress:server:util:process_profiler └─────────┴───────────────────┴──────────────┴─────────────────────────────┴────────────┴────────────────┴──────────┴──────────────┴─────────────┘ +10s
  cypress:server:events got request for event: get:project:status, { id: undefined, path: '/home/abez/projects/ps/corona-shop' } +3s
  cypress:server:project get project status for client id undefined at path /home/abez/projects/ps/corona-shop +5s
  cypress:server:project no project id +0ms
  cypress:server:events sending ipc data { type: 'get:project:status', data: { id: 0.29377582096748456, data: { id: undefined, path: '/home/abez/projects/ps/corona-shop', state: 'VALID' } }, originalData: { id: 0.29377582096748456, data: { id: undefined, path: '/home/abez/projects/ps/corona-shop', state: 'VALID' } } } +1ms
  cypress:server:server Got CONNECT request from localhost:42795 +3s
  cypress:https-proxy Writing browserSocket connection headers { url: 'localhost:42795', headLength: 0, headers: { host: 'localhost:42795', 'proxy-connection': 'keep-alive', 'user-agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Cypress/4.8.0 Chrome/80.0.3987.165 Electron/8.3.1 Safari/537.36' } } +2s
  cypress:https-proxy Got first head bytes { url: 'localhost:42795', head: 'GET /__socket.io/?EIO=3&transport=websocket HTTP/1.1\r\nHost: loca' } +1ms
  cypress:server:server HTTPS request does not match URL: https://localhost:42795 with props: null +3ms
  cypress:https-proxy Making connection to localhost:42795 +1ms
  cypress:https-proxy getting proxy URL { port: 42795, serverPort: 42795, sniPort: 42773, url: 'https://localhost:42795' } +0ms
  cypress:network:connect received error on connect, retrying { iteration: 0, delay: 0, err: Error: connect ECONNREFUSED 192.168.128.3:42795     at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1128:14) { errno: 'ECONNREFUSED', code: 'ECONNREFUSED', syscall: 'connect', address: '192.168.128.3', port: 42795 } } +2s
  cypress:network:connect received error on connect, retrying { iteration: 1, delay: 100, err: Error: connect ECONNREFUSED 192.168.128.3:42795     at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1128:14) { errno: 'ECONNREFUSED', code: 'ECONNREFUSED', syscall: 'connect', address: '192.168.128.3', port: 42795 } } +4ms
  cypress:network:connect received error on connect, retrying { iteration: 2, delay: 200, err: Error: connect ECONNREFUSED 192.168.128.3:42795     at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1128:14) { errno: 'ECONNREFUSED', code: 'ECONNREFUSED', syscall: 'connect', address: '192.168.128.3', port: 42795 } } +104ms
  cypress:network:connect received error on connect, retrying { iteration: 3, delay: 200, err: Error: connect ECONNREFUSED 192.168.128.3:42795     at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1128:14) { errno: 'ECONNREFUSED', code: 'ECONNREFUSED', syscall: 'connect', address: '192.168.128.3', port: 42795 } } +202ms
  cypress:network:connect retries exhausted, bubbling up error { iteration: 4, err: Error: connect ECONNREFUSED 192.168.128.3:42795     at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1128:14) { errno: 'ECONNREFUSED', code: 'ECONNREFUSED', syscall: 'connect', address: '192.168.128.3', port: 42795 } } +204ms
  cypress:https-proxy received upstreamSocket callback for request { port: '42795', hostname: 'localhost', err: Error: connect ECONNREFUSED 192.168.128.3:42795     at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1128:14) { errno: 'ECONNREFUSED', code: 'ECONNREFUSED', syscall: 'connect', address: '192.168.128.3', port: 42795 } } +517ms
  cypress:https-proxy received error on client browserSocket { err: Error: connect ECONNREFUSED 192.168.128.3:42795     at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1128:14) { errno: 'ECONNREFUSED', code: 'ECONNREFUSED', syscall: 'connect', address: '192.168.128.3', port: 42795 }, url: 'localhost:42795' } +1ms
[3306223:0610/175336.134802:INFO:CONSOLE(182674)] ""WebSocket connection to 'ws://localhost:42795/__socket.io/?EIO=3&transport=websocket' failed: Connection closed before receiving a handshake response"", source: http://localhost:42795/__cypress/runner/cypress_runner.js (182674)
  cypress:server:browsers:electron close fired on the BrowserWindow { browserWindowUrl: 'http://localhost:42795/__/#/tests/integration/examples/actions.spec.js' } +7s
  cypress:server:browsers:electron closed event fired +35ms
  cypress:server:windows removing all electron extensions [] +8s
  cypress:server:events sending ipc data { type: 'launch:browser', data: { id: 0.7822078427966872, data: { browserClosed: true } }, originalData: { id: 0.7822078427966872, data: { browserClosed: true } } } +3s
  cypress:server:browsers:electron debugger detached due to { reason: 'target closed' } +11ms
  cypress:cli child event fired { event: 'exit', code: 0, signal: null } +19s
  cypress:cli child event fired { event: 'close', code: 0, signal: null } +1ms
```

</p></details>

It does also not work with Chrome and Firefox, see the logs:

<details><summary>Chrome</summary><p>

**Title:** Error launching browser

**Message:** Cypress failed to make a connection to the Chrome DevTools Protocol after retrying for 50 seconds.

This usually indicates there was a problem opening the Chrome browser.

The CDP port requested was <span class=""ansi-yellow-fg"">45857</span>.

Error details:

Error: connect ECONNREFUSED 192.168.128.3:45857
    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1128:14)


**Stack trace:**
```
Error: Cypress failed to make a connection to the Chrome DevTools Protocol after retrying for 50 seconds.

This usually indicates there was a problem opening the Chrome browser.

The CDP port requested was [33m45857[39m.

Error details:

Error: connect ECONNREFUSED 192.168.128.3:45857
    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1128:14)

    at get (/home/abez/.cache/Cypress/4.8.0/Cypress/resources/app/packages/server/lib/errors.js:1035:15)
    at Object.throwErr [as throw] (/home/abez/.cache/Cypress/4.8.0/Cypress/resources/app/packages/server/lib/errors.js:1053:9)
    at /home/abez/.cache/Cypress/4.8.0/Cypress/resources/app/packages/server/lib/browsers/protocol.js:105:21
    at tryCatcher (/home/abez/.cache/Cypress/4.8.0/Cypress/resources/app/packages/server/node_modules/bluebird/js/release/util.js:16:23)
    at Promise._settlePromiseFromHandler (/home/abez/.cache/Cypress/4.8.0/Cypress/resources/app/packages/server/node_modules/bluebird/js/release/promise.js:547:31)
    at Promise._settlePromise (/home/abez/.cache/Cypress/4.8.0/Cypress/resources/app/packages/server/node_modules/bluebird/js/release/promise.js:604:18)
    at Promise._settlePromise0 (/home/abez/.cache/Cypress/4.8.0/Cypress/resources/app/packages/server/node_modules/bluebird/js/release/promise.js:649:10)
    at Promise._settlePromises (/home/abez/.cache/Cypress/4.8.0/Cypress/resources/app/packages/server/node_modules/bluebird/js/release/promise.js:725:18)
    at _drainQueueStep (/home/abez/.cache/Cypress/4.8.0/Cypress/resources/app/packages/server/node_modules/bluebird/js/release/async.js:93:12)
    at _drainQueue (/home/abez/.cache/Cypress/4.8.0/Cypress/resources/app/packages/server/node_modules/bluebird/js/release/async.js:86:9)
    at Async._drainQueues (/home/abez/.cache/Cypress/4.8.0/Cypress/resources/app/packages/server/node_modules/bluebird/js/release/async.js:102:5)
    at Immediate.Async.drainQueues [as _onImmediate] (/home/abez/.cache/Cypress/4.8.0/Cypress/resources/app/packages/server/node_modules/bluebird/js/release/async.js:15:14)
    at processImmediate (internal/timers.js:439:21)

```

</p></details>

<details><summary>Firefox</summary><p>

**Title:** Error launching browser

**Message:** Cypress failed to make a connection to Firefox.

This usually indicates there was a problem opening the Firefox browser.

Error details:

Error: Cypress could not connect to Firefox.

An unexpected error was received from Marionette connection:

Error: cannot open socket

To avoid this error, ensure that there are no other instances of Firefox launched by Cypress running.
    at Object.get (/home/abez/.cache/Cypress/4.8.0/Cypress/resources/app/packages/server/lib/errors.js:1035:15)
    at /home/abez/.cache/Cypress/4.8.0/Cypress/resources/app/packages/server/lib/browsers/firefox-util.js:279:47


**Stack trace:**
```
Error: Cypress failed to make a connection to Firefox.

This usually indicates there was a problem opening the Firefox browser.

Error details:

Error: Cypress could not connect to Firefox.

An unexpected error was received from Marionette connection:

Error: cannot open socket

To avoid this error, ensure that there are no other instances of Firefox launched by Cypress running.
    at Object.get (/home/abez/.cache/Cypress/4.8.0/Cypress/resources/app/packages/server/lib/errors.js:1035:15)
    at /home/abez/.cache/Cypress/4.8.0/Cypress/resources/app/packages/server/lib/browsers/firefox-util.js:279:47

    at get (/home/abez/.cache/Cypress/4.8.0/Cypress/resources/app/packages/server/lib/errors.js:1035:15)
    at Object.throwErr [as throw] (/home/abez/.cache/Cypress/4.8.0/Cypress/resources/app/packages/server/lib/errors.js:1053:9)
    at /home/abez/.cache/Cypress/4.8.0/Cypress/resources/app/packages/server/lib/browsers/firefox.js:397:41
    at tryCatcher (/home/abez/.cache/Cypress/4.8.0/Cypress/resources/app/packages/server/node_modules/bluebird/js/release/util.js:16:23)
    at Promise._settlePromiseFromHandler (/home/abez/.cache/Cypress/4.8.0/Cypress/resources/app/packages/server/node_modules/bluebird/js/release/promise.js:547:31)
    at Promise._settlePromise (/home/abez/.cache/Cypress/4.8.0/Cypress/resources/app/packages/server/node_modules/bluebird/js/release/promise.js:604:18)
    at Promise._settlePromise0 (/home/abez/.cache/Cypress/4.8.0/Cypress/resources/app/packages/server/node_modules/bluebird/js/release/promise.js:649:10)
    at Promise._settlePromises (/home/abez/.cache/Cypress/4.8.0/Cypress/resources/app/packages/server/node_modules/bluebird/js/release/promise.js:725:18)
    at _drainQueueStep (/home/abez/.cache/Cypress/4.8.0/Cypress/resources/app/packages/server/node_modules/bluebird/js/release/async.js:93:12)
    at _drainQueue (/home/abez/.cache/Cypress/4.8.0/Cypress/resources/app/packages/server/node_modules/bluebird/js/release/async.js:86:9)
    at Async._drainQueues (/home/abez/.cache/Cypress/4.8.0/Cypress/resources/app/packages/server/node_modules/bluebird/js/release/async.js:102:5)
    at Immediate.Async.drainQueues [as _onImmediate] (/home/abez/.cache/Cypress/4.8.0/Cypress/resources/app/packages/server/node_modules/bluebird/js/release/async.js:15:14)
    at processImmediate (internal/timers.js:439:21)

```

</p></details>

### Desired behavior:

I want to run the example tests shipped with cypress out of the box.

### Test code to reproduce

It failed with every example shipped with cypress, I just add the `window.spec.js` here, since it's the smallest file

<details><summary>window.spec.js</summary><p>

```js
/// <reference types=""cypress"" />

context('Window', () => {
  beforeEach(() => {
    cy.visit('https://example.cypress.io/commands/window')
  })

  it('cy.window() - get the global window object', () => {
    // https://on.cypress.io/window
    cy.window().should('have.property', 'top')
  })

  it('cy.document() - get the document object', () => {
    // https://on.cypress.io/document
    cy.document().should('have.property', 'charset').and('eq', 'UTF-8')
  })

  it('cy.title() - get the title', () => {
    // https://on.cypress.io/title
    cy.title().should('include', 'Kitchen Sink')
  })
})

```

</p></details>

### Versions

Cypress: 3.8.3 -  4.8.0
operating system: 
```
$ lsb_release -a
LSB Version:    core-11.1.0ubuntu2-noarch:printing-11.1.0ubuntu2-noarch:security-11.1.0ubuntu2-noarch
Distributor ID: Ubuntu
Description:    Ubuntu 20.04 LTS
Release:        20.04
Codename:       focal
```
browsers: Chrome 83, Firefox 77, Electron 80
",bug
635181089,Test configuration object ignored for viewportHeight and viewportWidth,"### Current behavior:
Testrunner browser window does not respect viewportWidth and viewportHeight configuration passed in via a configuration object to the test or suite function as the second argument.

Your test checks if config object get's the value, which it does.
https://github.com/cypress-io/cypress/commit/4cfcae28f097e013ffe7dc7419905eccf1022709#diff-8a1bc60bd20378ff06f1cd550ab21defR59

But the testrunner browser window does not get resized.

![Screenshot 2020-06-09 at 09 37 24 (2)](https://user-images.githubusercontent.com/574203/84119676-ff82b980-aa34-11ea-93bd-a86383975954.png)

### Desired behavior:
Testrunner browser window should respect viewportWidth and viewportHeight passed in via a configuration object to the test or suite function as the second argument.

### Test code to reproduce
```js
describe('demo.planfred.com …', {
  viewportHeight: 800,
  viewportWidth: 400,
  baseUrl: 'https://demo.planfred.com/'
}, () => {
  it('test', () => {
    cy
      .visit('https://demo.planfred.com/')
  })
})

```

### Versions
4.8.0

Should work in 4.8.0 according to feature issue https://github.com/cypress-io/cypress/issues/7167

",bug
634325106,Infinite redirection - iframe-request-id,"Hello,

### Current behavior:
When I reach my site I am redirected to the Microsoft SSO. Then redirection url is:
Here is the test I do:

```js
describe('My test', function() {
    it(""Test"", function() {        
        cy.visit('https://xxx.azurewebsites.net/')
    })
})
```

Here is the result:

>https://xxx.azurewebsites.net/ -> 
302: https://xxx.azurewebsites.net/ExternalAuthentication/RequestSignIn?ReturnUrl=%2f -> 
302: https://login.microsoftonline.com/23607e6f-fd24-4c0b-9e41-c306ddc8797d/oauth2/authorize?client_id=0fc318c4-3278-4202-987c-50e28572997f&response_type=code%20id_token&scope=openid%20email&state=OpenIdConnect.AuthenticationProperties%3DdoobUiEYSeE8bSExgmxZzeY1Oe-YVhxeZ5uDeMP8gcSAjxdpUZdoo7KKhSgIpCyRcAlDegiAVCN2xJY2JcAihQX7Zdsa07Ui31ugjkw3Wqha5Ap7duFIYngrC-cQCD7-hr3kTzOBly5ROPcDksBm82wfBDpXuC5oam3PK16fHjQ&response_mode=form_post&nonce=637271965613375015.MTY0NGI1YWItZTYzMC00MmNhLTg5YzQtZmM2MjhmMTI2OTUxNTMwNWQ4NmYtY2E0ZC00MzEyLWFkN2MtMjIwZGIxNmQxYzAw&x-client-SKU=ID_NET461&x-client-ver=5.3.0.0


But when he execute the redirection the parameter ""iframe-request-id"" is added a lot of times into the url like this:

>https://login.microsoftonline.com/23607e6f-fd24-4c0b-9e41-c306ddc8797d/oauth2/authorize?client_id=0fc318c4-3278-4202-987c-50e28572997f&response_type=code%20id_token&scope=openid%20email&state=OpenIdConnect.AuthenticationProperties%3DdoobUiEYSeE8bSExgmxZzeY1Oe-YVhxeZ5uDeMP8gcSAjxdpUZdoo7KKhSgIpCyRcAlDegiAVCN2xJY2JcAihQX7Zdsa07Ui31ugjkw3Wqha5Ap7duFIYngrC-cQCD7-hr3kTzOBly5ROPcDksBm82wfBDpXuC5oam3PK16fHjQ&response_mode=form_post&nonce=637271965613375015.MTY0NGI1YWItZTYzMC00MmNhLTg5YzQtZmM2MjhmMTI2OTUxNTMwNWQ4NmYtY2E0ZC00MzEyLWFkN2MtMjIwZGIxNmQxYzAw&x-client-SKU=ID_NET461&x-client-ver=5.3.0.0&sso_reload=true&iframe-request-id=2110c8d5-1b5f-40b9-9d4b-9b739e254500&iframe-request-id=f8d21cc8-d148-4642-ba48-d2635e0d4900&iframe-request-id=19191f2a-3226-441b-be90-3c3aebfa2400&iframe-request-id=f6601a14-1e86-42e7-bc1e-0b89873d2500&iframe-request-id=f6601a14-1e86-42e7-bc1e-0b89993d2500&iframe-request-id=19191f2a-3226-441b-be90-3c3a0afb2400&iframe-request-id=7ed73dd1-cd74-4b1c-960d-9396ab942500&iframe-request-id=c37b638c-8f47-4faa-b77e-19d0e0c42100&iframe-request-id=e218aa1a-6b44-422d-8e61-a2602d2a2500&iframe-request-id=36079590-dbcf-4328-a2ea-ce6806cc2400&iframe-request-id=53ae748c-2fbc-47e5-85c2-39a895cf2300&iframe-request-id=fd4ab547-6539-4035-9674-6b1399af4b00&iframe-request-id=55d896c8-4c7b-4fdc-8069-02c158314a00&iframe-request-id=29ba60ad-8951-41d0-b508-68638c962200&iframe-request-id=15cfae6e-6089-434c-9013-f9c49d464800&iframe-request-id=17eb00d7-da47-4d10-ad1d-ee18d0432100&iframe-request-id=1bdd0fac-c618-48e0-943d-037438322200&iframe-request-id=703cc2e7-9f1e-4f69-999e-b3b176fe2100&iframe-request-id=98636631-4c90-418a-a51e-a5db16fa2400&iframe-request-id=72b76507-e14c-4efb-866f-3099759e4a00&iframe-request-id=9d73c809-c8a1-4913-a7e4-dd175aa62300&iframe-request-id=c143bb6d-6aa0-4cbb-9071-2ee2fb914600&iframe-request-id=118dbaa0-9be1-4f3a-9e32-553d73042200&iframe-request-id=17eb00d7-da47-4d10-ad1d-ee184f442100&iframe-request-id=f9daed9d-8c8a-46c4-b4b6-c881b5132400&iframe-request-id=03ef5887-6347-44b4-9e88-9e8db7704500&iframe-request-id=471d9b4d-b12d-422a-8be7-79d8afa42000&iframe-request-id=9d73c809-c8a1-4913-a7e4-dd17c7a62300&iframe-request-id=f327100a-a2cf-4d07-a133-878690d52300&iframe-request-id=f4ab63c0-0a55-4184-bbb8-5c9df5ef2400&iframe-request-id=f327100a-a2cf-4d07-a133-8786afd52300&iframe-request-id=19191f2a-3226-441b-be90-3c3af5fb2400&iframe-request-id=53ae748c-2fbc-47e5-85c2-39a8f8d02300&iframe-request-id=c511406a-9d2f-4c4e-b398-8a57fe422200&iframe-request-id=17eb00d7-da47-4d10-ad1d-ee18f4442100&iframe-request-id=4c0b9edc-444f-4fe7-8e35-a6da5d882300&iframe-request-id=c143bb6d-6aa0-4cbb-9071-2ee2b9934600&iframe-request-id=98636631-4c90-418a-a51e-a5db38fb2400&iframe-request-id=0c9b24d2-cd62-4443-9691-fdf707922100&iframe-request-id=f30eba9a-b9d0-4e1b-839e-d7a901ac2400&iframe-request-id=03ef5887-6347-44b4-9e88-9e8d85724500&iframe-request-id=03ef5887-6347-44b4-9e88-9e8d9f724500&iframe-request-id=b2143b17-814a-45ff-9b36-31c6fe5e2200&iframe-request-id=9de5bbd4-91b7-4471-bc76-602756662300&iframe-request-id=565c635b-2e76-4de7-be3a-ab3594174800&iframe-request-id=918d966d-098c-44dd-879f-0a663b584e00&iframe-request-id=5b5cd7aa-3659-485b-a409-00d53a6e2300&iframe-request-id=4b24ce6d-1575-4855-beaa-a2078ccb2600&iframe-request-id=c143bb6d-6aa0-4cbb-9071-2ee236954600&iframe-request-id=4b24ce6d-1575-4855-beaa-a207b0cb2600&iframe-request-id=1b50bd75-414b-4565-84d8-2ebc0b042400&iframe-request-id=5b5cd7aa-3659-485b-a409-00d59c6e2300&iframe-request-id=ee2931ba-96f3-495e-a71a-0258c6dd2500&iframe-request-id=31c37004-23c2-4a1f-9c0f-f70403d92400&iframe-request-id=118dbaa0-9be1-4f3a-9e32-553d70062200&iframe-request-id=fd4ab547-6539-4035-9674-6b1394b44b00&iframe-request-id=72b76507-e14c-4efb-866f-3099c0a24a00&iframe-request-id=9de5bbd4-91b7-4471-bc76-60272b672300&iframe-request-id=159033ab-70ea-4505-adf0-0245493f2500&iframe-request-id=d72aaa1e-947c-47f3-909d-66e16f1b2100&iframe-request-id=36079590-dbcf-4328-a2ea-ce68c4ce2400&iframe-request-id=796a4ea8-e60d-4e4b-88e1-a941a15d4500&iframe-request-id=25279ce2-a08f-4a6d-8a9a-54550db42000&iframe-request-id=687a4853-671d-48a3-941d-c8733b022600&iframe-request-id=2110c8d5-1b5f-40b9-9d4b-9b73352c4500&iframe-request-id=21f23f8c-816b-40a5-a04b-5ea37aa52300&iframe-request-id=ad39e6e8-fc1d-4f9c-af58-ba1a38ba2500&iframe-request-id=0c9b24d2-cd62-4443-9691-fdf713932100&iframe-request-id=c31018c5-1ced-4391-b4db-5d68c1122100&iframe-request-id=98636631-4c90-418a-a51e-a5db0ffd2400&iframe-request-id=703cc2e7-9f1e-4f69-999e-b3b120012200&iframe-request-id=8295f167-5bfa-47f5-89c1-ae297f3b4a00&iframe-request-id=21c9addd-2078-4596-a75a-dc31f82a2500&iframe-request-id=8295f167-5bfa-47f5-89c1-ae29c33b4a00&iframe-request-id=fd4ab547-6539-4035-9674-6b13f7b64b00&iframe-request-id=d79ab296-2a17-4906-b061-3612fb132600&iframe-request-id=f9daed9d-8c8a-46c4-b4b6-c88156162400&iframe-request-id=467c117f-fcaf-477c-84f3-ea45b56c2200&iframe-request-id=22b25878-437c-4542-a247-f5fc98f52400&iframe-request-id=1cceec53-acb6-49ae-917b-ac2890f52200&iframe-request-id=565c635b-2e76-4de7-be3a-ab352c1b4800&iframe-request-id=8201b6e0-abe6-4990-ae8b-a918cae82200&iframe-request-id=d72aaa1e-947c-47f3-909d-66e1971c2100&iframe-request-id=3426097d-3d42-4add-8377-8729ba822000&iframe-request-id=c37b638c-8f47-4faa-b77e-19d01ac92100&iframe-request-id=36e588f5-3749-4819-a262-aad710b94800&iframe-request-id=7ed73dd1-cd74-4b1c-960d-93965d992500&iframe-request-id=471d9b4d-b12d-422a-8be7-79d8d7a72000&iframe-request-id=be2a2384-2fc1-4d22-8538-92a3c1412200&iframe-request-id=ec6376de-1f4e-48fd-818a-f5bc173d4a00&iframe-request-id=f9daed9d-8c8a-46c4-b4b6-c881ef162400&iframe-request-id=918d966d-098c-44dd-879f-0a66bc5b4e00&iframe-request-id=62fcffb3-cb52-492a-b0f0-a5b54aeb2100&iframe-request-id=74e07568-33b4-4aa1-acaa-9ac415782300&iframe-request-id=ee2931ba-96f3-495e-a71a-025845e02500&iframe-request-id=af5cc0d6-6e3e-4b47-bfec-67a4fbc02100&iframe-request-id=9d73c809-c8a1-4913-a7e4-dd1789aa2300&iframe-request-id=d446f3b4-080c-4c1d-910f-e5b07e1e2100&iframe-request-id=7ed73dd1-cd74-4b1c-960d-93961a9a2500&iframe-request-id=04d89448-bed5-4f8f-9416-7862488c2100&iframe-request-id=e8b0c534-54cb-4df4-ad2b-17b1c77f2400&iframe-request-id=06225faa-2977-43f6-8817-be80d7002400&iframe-request-id=53ae748c-2fbc-47e5-85c2-39a864d42300&iframe-request-id=b308fa71-f451-4c7e-8e73-42a8b9d62600&iframe-request-id=dd7c5e6c-f5df-4272-a257-44bb7a682200&iframe-request-id=31c37004-23c2-4a1f-9c0f-f704b9da2400&iframe-request-id=72b76507-e14c-4efb-866f-3099dfa74a00&iframe-request-id=e14ff635-8803-4f00-8c8d-bce2d75e4a00&iframe-request-id=62fcffb3-cb52-492a-b0f0-a5b549ec2100&iframe-request-id=62fcffb3-cb52-492a-b0f0-a5b55cec2100&iframe-request-id=f47b4a22-0382-41a0-be95-e36243ae2400&iframe-request-id=025bdc1a-ac1d-48a1-805d-c25c8cec2100&iframe-request-id=c37b638c-8f47-4faa-b77e-19d006cb2100&iframe-request-id=918d966d-098c-44dd-879f-0a66a25e4e00&iframe-request-id=f327100a-a2cf-4d07-a133-878693da2300&iframe-request-id=f9b1305d-d6d0-4ec7-843c-1398d64a2300&iframe-request-id=fe8cd32f-f219-4c8a-8caa-331f991f2200&iframe-request-id=b689af28-7302-4fb7-afc5-884f03a02500&iframe-request-id=620a77b0-ccb4-4cc9-98d2-e140d8c62400&iframe-request-id=687a4853-671d-48a3-941d-c8730a052600&iframe-request-id=c37b638c-8f47-4faa-b77e-19d09bcb2100&iframe-request-id=bcbc957d-4e4a-4915-8e26-ae1b22db2300&iframe-request-id=78d5fd24-f953-4e8a-adb8-86cbe4312300&iframe-request-id=5b5cd7aa-3659-485b-a409-00d53c732300&iframe-request-id=17eb00d7-da47-4d10-ad1d-ee18654a2100&iframe-request-id=9d73c809-c8a1-4913-a7e4-dd17f7ac2300&iframe-request-id=2d6058c6-d9bd-4628-9d4f-af31ad2d2500&iframe-request-id=5b5cd7aa-3659-485b-a409-00d585732300&iframe-request-id=f8d21cc8-d148-4642-ba48-d2637e1c4900&iframe-request-id=fd4ab547-6539-4035-9674-6b1327be4b00&iframe-request-id=7ac71a9a-fc21-4b85-b9ed-f4c7bffb1f00&iframe-request-id=620a77b0-ccb4-4cc9-98d2-e140acc72400&iframe-request-id=687a4853-671d-48a3-941d-c873e4052600&iframe-request-id=75b48176-b00f-4053-92b8-2a42cf632300&iframe-request-id=a10efbda-1cda-4319-a5d9-9f9df5fa4600&iframe-request-id=1bdd0fac-c618-48e0-943d-037457382200&iframe-request-id=f8d21cc8-d148-4642-ba48-d263821d4900&iframe-request-id=7ed73dd1-cd74-4b1c-960d-9396c79c2500&iframe-request-id=7050e7a9-7f49-4e4d-9c01-2bd23c572500&iframe-request-id=f47b4a22-0382-41a0-be95-e36210b02400&iframe-request-id=36079590-dbcf-4328-a2ea-ce6817d32400&iframe-request-id=81cc5179-bf9b-4447-9643-66d09c572300&iframe-request-id=18746c26-a12f-4338-9ff5-4c8752d62100&iframe-request-id=873636c7-5548-451f-a223-49f819dc2200&iframe-request-id=02aa3bdb-8348-4e2c-ae53-3907bb0b2200&iframe-request-id=15cfae6e-6089-434c-9013-f9c433564800&iframe-request-id=a10efbda-1cda-4319-a5d9-9f9d3ffc4600&iframe-request-id=36079590-dbcf-4328-a2ea-ce685fd32400&iframe-request-id=703cc2e7-9f1e-4f69-999e-b3b146052200&iframe-request-id=2c760c0d-03d6-419a-9074-a10171c42100&iframe-request-id=d446f3b4-080c-4c1d-910f-e5b031222100&iframe-request-id=ccf5c200-b961-4751-97f1-0eb718662100&iframe-request-id=9a5bcde2-70ae-43e2-8d28-efde1bec2100&iframe-request-id=565c635b-2e76-4de7-be3a-ab35a5234800&iframe-request-id=2110c8d5-1b5f-40b9-9d4b-9b7363354500&iframe-request-id=b689af28-7302-4fb7-afc5-884f69a22500&iframe-request-id=04d89448-bed5-4f8f-9416-786215902100&iframe-request-id=f8d21cc8-d148-4642-ba48-d263771f4900&iframe-request-id=918d966d-098c-44dd-879f-0a662a644e00&iframe-request-id=25279ce2-a08f-4a6d-8a9a-545528b82000&iframe-request-id=fd4ab547-6539-4035-9674-6b13a9c14b00&iframe-request-id=c08f81f8-01a8-4374-ba96-e31f47f22400&iframe-request-id=78d5fd24-f953-4e8a-adb8-86cb24342300&iframe-request-id=a10efbda-1cda-4319-a5d9-9f9ddafd4600&iframe-request-id=aff17f59-eadd-4d94-84c3-b1c3df522300&iframe-request-id=620a77b0-ccb4-4cc9-98d2-e14060c92400&iframe-request-id=b2143b17-814a-45ff-9b36-31c6e7632200&iframe-request-id=555314ca-486b-4578-91c5-1754a2622200&iframe-request-id=687a4853-671d-48a3-941d-c8738d072600&iframe-request-id=69dd4beb-fbd5-4790-9b5a-19db6d712600&iframe-request-id=ad39e6e8-fc1d-4f9c-af58-ba1a18bf2500&iframe-request-id=75b48176-b00f-4053-92b8-2a42a5652300&iframe-request-id=18746c26-a12f-4338-9ff5-4c878cd72100&iframe-request-id=c08f81f8-01a8-4374-ba96-e31fb0f22400&iframe-request-id=c8a14b69-6786-493d-b952-6a4c623c2100&iframe-request-id=2a1f5885-b6f6-45f8-912b-91f1eaa82300&iframe-request-id=19191f2a-3226-441b-be90-3c3a7b032500&iframe-request-id=15cfae6e-6089-434c-9013-f9c4d4584800&iframe-request-id=21f23f8c-816b-40a5-a04b-5ea349ab2300&iframe-request-id=796a4ea8-e60d-4e4b-88e1-a941c7684500&iframe-request-id=918d966d-098c-44dd-879f-0a665a654e00&iframe-request-id=36e588f5-3749-4819-a262-aad7d8c24800&iframe-request-id=ad39e6e8-fc1d-4f9c-af58-ba1a71bf2500&iframe-request-id=f8f5c33f-2a1c-450c-b1d0-851f03422400&iframe-request-id=f9b1305d-d6d0-4ec7-843c-1398014e2300&iframe-request-id=ad39e6e8-fc1d-4f9c-af58-ba1a8fbf2500&iframe-request-id=ec6376de-1f4e-48fd-818a-f5bcbb464a00&iframe-request-id=a9c2409e-6e91-4d6d-ac91-1f165cc92100&iframe-request-id=5fe85a50-8537-4c2b-810f-3b668cca4900&iframe-request-id=bcbc957d-4e4a-4915-8e26-ae1b66de2300&iframe-request-id=4b24ce6d-1575-4855-beaa-a207a5d22600&iframe-request-id=169852a8-37b7-492b-b4f8-acbcdcc92400&iframe-request-id=c6d7eef8-8356-4831-9260-19db54d52400&iframe-request-id=2e02f94b-7c5d-43d8-bc81-96223df72200&iframe-request-id=7ac71a9a-fc21-4b85-b9ed-f4c73ffe1f00&iframe-request-id=565c635b-2e76-4de7-be3a-ab35d6254800&iframe-request-id=50e02f58-7600-44fd-ac70-3d292cca2200&iframe-request-id=688c511f-42d0-400f-acbc-5fd340da2000&iframe-request-id=159033ab-70ea-4505-adf0-0245c0452500&iframe-request-id=f5b98b83-2aaf-45ae-b96c-2e094c7f2300&iframe-request-id=a6fed54c-9841-47ea-8d60-165401742400&iframe-request-id=03ef5887-6347-44b4-9e88-9e8d78814500&iframe-request-id=fd4ab547-6539-4035-9674-6b1381c44b00&iframe-request-id=118dbaa0-9be1-4f3a-9e32-553de00a2200&iframe-request-id=387be16d-c922-497e-97de-725d60062700&iframe-request-id=5f900d14-3a09-47af-902d-bfd153ef2300&iframe-request-id=96954203-9f85-471e-bf52-65a598db2500&iframe-request-id=703cc2e7-9f1e-4f69-999e-b3b138072200&iframe-request-id=159033ab-70ea-4505-adf0-024520462500&iframe-request-id=e218aa1a-6b44-422d-8e61-a26068342500&iframe-request-id=7ac71a9a-fc21-4b85-b9ed-f4c7a4fe1f00&iframe-request-id=81481020-f2d7-4e38-a333-354a05602500&iframe-request-id=fd4ab547-6539-4035-9674-6b1332c54b00&iframe-request-id=c37b638c-8f47-4faa-b77e-19d038cf2100&iframe-request-id=471d9b4d-b12d-422a-8be7-79d802ad2000&iframe-request-id=b2143b17-814a-45ff-9b36-31c622652200&iframe-request-id=8100015b-5a63-4449-a105-ff547ffe2400&iframe-request-id=36e588f5-3749-4819-a262-aad798c54800&iframe-request-id=55d896c8-4c7b-4fdc-8069-02c1d7444a00&iframe-request-id=03ef5887-6347-44b4-9e88-9e8d87824500&iframe-request-id=64e08d81-2b5a-4b93-99f1-50673dc24e00&iframe-request-id=9acd2632-c16b-4adf-be08-c8a023bb2300&iframe-request-id=8295f167-5bfa-47f5-89c1-ae2911494a00&iframe-request-id=1b50bd75-414b-4565-84d8-2ebc1c0c2400&iframe-request-id=5b5cd7aa-3659-485b-a409-00d521782300&iframe-request-id=8df228c8-1f60-4501-ab6a-05ad74202500&iframe-request-id=19191f2a-3226-441b-be90-3c3a01052500&iframe-request-id=703cc2e7-9f1e-4f69-999e-b3b1c7072200&iframe-request-id=31c37004-23c2-4a1f-9c0f-f7047add2400&iframe-request-id=36e588f5-3749-4819-a262-aad79ac64800&iframe-request-id=f064d3c3-a121-4616-b0a1-07624d3b2800&iframe-request-id=03ef5887-6347-44b4-9e88-9e8d7b834500&iframe-request-id=74e07568-33b4-4aa1-acaa-9ac4697e2300&iframe-request-id=c7b0aaca-cb61-4767-9688-1991d22c2200&iframe-request-id=60bffd28-35fe-446b-9976-a31fa0452400&iframe-request-id=aed88e00-4ce7-4afd-b193-b3301b5f2400&iframe-request-id=36079590-dbcf-4328-a2ea-ce6814d62400&iframe-request-id=03ef5887-6347-44b4-9e88-9e8df5834500&iframe-request-id=92ffcc31-333c-4671-b090-91d5d2a32100&iframe-request-id=f6601a14-1e86-42e7-bc1e-0b896f482500&iframe-request-id=31c37004-23c2-4a1f-9c0f-f704cfdd2400&iframe-request-id=e218aa1a-6b44-422d-8e61-a2607a352500&iframe-request-id=5fe85a50-8537-4c2b-810f-3b6690cd4900&iframe-request-id=7050e7a9-7f49-4e4d-9c01-2bd2005b2500&iframe-request-id=c511406a-9d2f-4c4e-b398-8a57004a2200&iframe-request-id=5b5cd7aa-3659-485b-a409-00d5c6782300&iframe-request-id=3e0c499c-99c2-4955-8c52-996058012500&iframe-request-id=7050e7a9-7f49-4e4d-9c01-2bd2255b2500&iframe-request-id=b2143b17-814a-45ff-9b36-31c613662200&iframe-request-id=ad57c76d-223e-4966-9194-91c411642100&iframe-request-id=19191f2a-3226-441b-be90-3c3aaa052500&iframe-request-id=2c760c0d-03d6-419a-9074-a10174c72100&iframe-request-id=de934f17-8aac-42b8-8b40-89bb9c432300&iframe-request-id=9acd2632-c16b-4adf-be08-c8a023bc2300&iframe-request-id=cb6707bb-2a76-405a-b035-868a8bb72300&iframe-request-id=04ebbf20-d4ca-469e-8e73-1e4502aa2100&iframe-request-id=823b6c5f-e13a-4caa-87f6-eef249262600&iframe-request-id=f8d21cc8-d148-4642-ba48-d26361254900&iframe-request-id=c511406a-9d2f-4c4e-b398-8a57824a2200&iframe-request-id=69c07b40-a49e-4261-a556-b18a617a2300&iframe-request-id=18746c26-a12f-4338-9ff5-4c875eda2100&iframe-request-id=59448121-1025-4ae9-ba61-52a0b8952200&iframe-request-id=2110c8d5-1b5f-40b9-9d4b-9b73023c4500&iframe-request-id=15cfae6e-6089-434c-9013-f9c4775e4800&iframe-request-id=b689af28-7302-4fb7-afc5-884fdfa52500&iframe-request-id=03ef5887-6347-44b4-9e88-9e8d7d864500&iframe-request-id=2110c8d5-1b5f-40b9-9d4b-9b73fc3c4500&iframe-request-id=4c0b9edc-444f-4fe7-8e35-a6da86922300&iframe-request-id=a6fed54c-9841-47ea-8d60-165495762400&iframe-request-id=ccf5c200-b961-4751-97f1-0eb7b36a2100&iframe-request-id=98636631-4c90-418a-a51e-a5db1f072500&iframe-request-id=62fcffb3-cb52-492a-b0f0-a5b571f32100&iframe-request-id=caf1ce06-f01b-4aa4-9528-1585f0134f00&iframe-request-id=620a77b0-ccb4-4cc9-98d2-e140cfcd2400&iframe-request-id=a6fed54c-9841-47ea-8d60-165418772400&iframe-request-id=f8d21cc8-d148-4642-ba48-d263c6284900&iframe-request-id=92ffcc31-333c-4671-b090-91d529a62100&iframe-request-id=435c002a-cee3-42b9-a023-ff8117f02400&iframe-request-id=44197ff1-9a64-4680-af4d-c708c1702400&iframe-request-id=36e588f5-3749-4819-a262-aad7c9cb4800&iframe-request-id=78d5fd24-f953-4e8a-adb8-86cb71382300&iframe-request-id=fd4ab547-6539-4035-9674-6b1369cb4b00&iframe-request-id=de934f17-8aac-42b8-8b40-89bbd9452300&iframe-request-id=873636c7-5548-451f-a223-49f88ae22200&iframe-request-id=64e08d81-2b5a-4b93-99f1-50672cc94e00&iframe-request-id=118dbaa0-9be1-4f3a-9e32-553df40e2200&iframe-request-id=8295f167-5bfa-47f5-89c1-ae29ce504a00&iframe-request-id=a9c2409e-6e91-4d6d-ac91-1f1607ce2100&iframe-request-id=ec6376de-1f4e-48fd-818a-f5bcc44f4a00&iframe-request-id=66202194-07e1-483c-9640-3e8f54642400&iframe-request-id=4b24ce6d-1575-4855-beaa-a20740d82600&iframe-request-id=565c635b-2e76-4de7-be3a-ab35c82e4800&iframe-request-id=2c760c0d-03d6-419a-9074-a10139ca2100&iframe-request-id=f8f5c33f-2a1c-450c-b1d0-851f30472400&iframe-request-id=471d9b4d-b12d-422a-8be7-79d88eb12000&iframe-request-id=9d73c809-c8a1-4913-a7e4-dd179bb42300&iframe-request-id=f920903e-5b7f-4add-838c-94b020f12600&iframe-request-id=025bdc1a-ac1d-48a1-805d-c25cccf52100&iframe-request-id=4b24ce6d-1575-4855-beaa-a20719d92600&iframe-request-id=03ef5887-6347-44b4-9e88-9e8d458d4500&iframe-request-id=511e72f1-3bea-48ea-bad3-ba77a3962500&iframe-request-id=c143bb6d-6aa0-4cbb-9071-2ee2a7ad4600&iframe-request-id=796a4ea8-e60d-4e4b-88e1-a9417f744500&iframe-request-id=f8f5c33f-2a1c-450c-b1d0-851f6e482400&iframe-request-id=471d9b4d-b12d-422a-8be7-79d8a1b22000&iframe-request-id=c143bb6d-6aa0-4cbb-9071-2ee264ae4600&iframe-request-id=8295f167-5bfa-47f5-89c1-ae2927554a00&iframe-request-id=b689af28-7302-4fb7-afc5-884fabaa2500&iframe-request-id=b689af28-7302-4fb7-afc5-884fcaaa2500&iframe-request-id=4c0b9edc-444f-4fe7-8e35-a6da46962300&iframe-request-id=5de56627-cebc-4f0b-b1d9-6ec6177d2300&iframe-request-id=03ef5887-6347-44b4-9e88-9e8d2a904500&iframe-request-id=31c37004-23c2-4a1f-9c0f-f704dfe32400&iframe-request-id=f1741bb2-3dc4-483e-954b-f4738f9e2000&iframe-request-id=6d97efc0-16df-44f7-81fd-8ccbed6b2300&iframe-request-id=72b76507-e14c-4efb-866f-3099d8c24a00&iframe-request-id=8100015b-5a63-4449-a105-ff54d5062500&iframe-request-id=c31018c5-1ced-4391-b4db-5d68f71f2100&iframe-request-id=d9c7f804-f241-4a12-bcf3-274cfb242300&iframe-request-id=471d9b4d-b12d-422a-8be7-79d889b42000&iframe-request-id=be43d34f-2b1f-4882-970f-d72ddb982500&iframe-request-id=69c07b40-a49e-4261-a556-b18aa3802300&iframe-request-id=3a90d30c-5019-4f48-a80d-c38943fa2300&iframe-request-id=a10efbda-1cda-4319-a5d9-9f9d82104700&iframe-request-id=74e07568-33b4-4aa1-acaa-9ac4fc862300&iframe-request-id=f8d21cc8-d148-4642-ba48-d263e1334900&iframe-request-id=5de56627-cebc-4f0b-b1d9-6ec6317f2300&iframe-request-id=c143bb6d-6aa0-4cbb-9071-2ee2ccb44600&iframe-request-id=caf1ce06-f01b-4aa4-9528-15850e214f00&iframe-request-id=ccf5c200-b961-4751-97f1-0eb75c722100&iframe-request-id=118dbaa0-9be1-4f3a-9e32-553d17142200&iframe-request-id=1bdd0fac-c618-48e0-943d-037463432200&iframe-request-id=025bdc1a-ac1d-48a1-805d-c25cdffa2100&iframe-request-id=7050e7a9-7f49-4e4d-9c01-2bd215652500&iframe-request-id=4c0b9edc-444f-4fe7-8e35-a6da109a2300&iframe-request-id=9d73c809-c8a1-4913-a7e4-dd175ab92300&iframe-request-id=e14ff635-8803-4f00-8c8d-bce2b97d4a00&iframe-request-id=19191f2a-3226-441b-be90-3c3a2b102500&iframe-request-id=b308fa71-f451-4c7e-8e73-42a8e6e62600&iframe-request-id=15cfae6e-6089-434c-9013-f9c49f704800&iframe-request-id=a80270db-70c0-46e1-a989-245b4cec2500&iframe-request-id=9acd2632-c16b-4adf-be08-c8a0f5c52300&iframe-request-id=d446f3b4-080c-4c1d-910f-e5b0b32f2100&iframe-request-id=72b76507-e14c-4efb-866f-30997cca4a00&iframe-request-id=78d5fd24-f953-4e8a-adb8-86cbf3402300&iframe-request-id=9d73c809-c8a1-4913-a7e4-dd1791ba2300&iframe-request-id=31c37004-23c2-4a1f-9c0f-f704c4e82400&iframe-request-id=620a77b0-ccb4-4cc9-98d2-e1409dd62400&iframe-request-id=5fe85a50-8537-4c2b-810f-3b66c3e24900&iframe-request-id=9acd2632-c16b-4adf-be08-c8a01fc72300&iframe-request-id=387be16d-c922-497e-97de-725df0112700&iframe-request-id=19191f2a-3226-441b-be90-3c3a40122500&iframe-request-id=04ebbf20-d4ca-469e-8e73-1e45e3b42100&iframe-request-id=1e74dc06-efcf-4c96-b4f3-6c750afa2200&iframe-request-id=1cceec53-acb6-49ae-917b-ac2830072300&iframe-request-id=f4ab63c0-0a55-4184-bbb8-5c9dc4062500&iframe-request-id=0c9b24d2-cd62-4443-9691-fdf7dba32100&iframe-request-id=36e588f5-3749-4819-a262-aad716df4800&iframe-request-id=4b24ce6d-1575-4855-beaa-a20779e12600&iframe-request-id=9a5bcde2-70ae-43e2-8d28-efdea4fb2100&iframe-request-id=4b24ce6d-1575-4855-beaa-a207aee12600&iframe-request-id=f327100a-a2cf-4d07-a133-878675eb2300&iframe-request-id=96954203-9f85-471e-bf52-65a559e92500


I have also tried the same script manually and also with pupeteers but it doesn't do the same behavior.

### Desired behavior:
Do not add the iframe-request-id more than once

### Test code to reproduce
```js
describe('My test', function() {
    it(""Infinite loop"", function() {
        // Act
        cy.visit('https://login.microsoftonline.com/23607e6f-fd24-4c0b-9e41-c306ddc8797d/oauth2/authorize?client_id=0fc318c4-3278-4202-987c-50e28572997f&response_type=code%20id_token&scope=openid%20email&state=OpenIdConnect.AuthenticationProperties%3DOatbR0i7VI4e6Bqo1RW58TICukayFI3ru8zYqP5ZQ-ImwkrykGttkoqoNRuCG0vrWIcL_Wcy7dVsXX_IScX6gMJb87hjSF6p6q69bBq4DaEdDLs65MglMQoTin1MENV7lLpJa7-xONMh7cvNfro-RJDidS8d77u_m9PmxtzFFxI&response_mode=form_post&nonce=637271967926669562.Y2Y1MDljYzktOWU1MC00NGQ3LWJkMTMtN2QwMTc3NGY3MWQzZDhmNDIyZmYtOTFiYy00MDlkLWJlMjMtMmE3NTEzODNmOTBl&x-client-SKU=ID_NET461&x-client-ver=5.3.0.0')
    })
})
```

### Versions

Cypress: 4.7.0
operating system: Windows 10
browser: Chrome 83
",bug
628454451,Specs named with spaces have malformed stacks and no code frames for errors,"<!-- Is this a question? Questions WILL BE CLOSED. Ask in our chat https://on.cypress.io/chat  -->

### Current behavior:

If a test fails or there is an error in a spec that has a space in its name, the following issues occur:

- The error stack does not point to the user code as it should
  - This also makes it impossible to open in IDE
- The stack line has `undefined:NaN` instead of `<line>:<column>` (_edit (7/9/20): only happens in `develop`_)
- The code frame does not display

![Screen Shot 2020-06-01 at 9 51 52 AM](https://user-images.githubusercontent.com/1157043/83415720-8b6d6380-a3ed-11ea-92fe-9fb08752342d.png)


### Desired behavior:

Errors should display properly regardless of file naming conventions.

### Test code to reproduce

- Create a spec file with a space in its name (e.g. `cypress/integration/with space_spec.js`)
- Make it fail

```javascript
it('fails', () => {
  expect('actual').to.equal('expected')
})
```

### Versions

Cypress 4.6.0+
",bug
627843449,AUT navigates to Cypress runner upon page navigation.,"**Use Cypress version 4.5.0 to reproduce. Later versions are currently blocked by**(https://github.com/cypress-io/cypress/issues/7518)

This simple tests consists of:
- Logging in
- Visiting specific page with a form
- Filing out required fields and submitting

Upon submission of the form, a page redirect happens and a series of uncaught errors fire. However, when the form is cancelled, the page redirect still happens, but without the errors.

Here's the code for both scenarios. The one where the error happens by submitting the form, and the one where everything is ok when canceling the form

```js
it('Example With Errors',() => {
    cy.request('POST', '/Auth/Login', { username: 'cydemoadmin', password: 'Test1@#$%' })
    cy.visit('/#/Settings/business-units/Add')
    cy.get('[type=submit]').should('be.visible')

    cy.get('[name=Name]').type('TestBU8') //Change value after one use. You can just increase number
    cy.get('[name=OfficialName]').type('TestBU8') //Change value after one use. You can just increase number
    cy.get('[name=Email]').type('asdf2sdfsdf@ggmaill.com')
    cy.get('[name=PhoneNumber]').type('8185556767')
    cy.get('[type=submit]').click()
  })

  it('Example Without Errors',() => {
    cy.request('POST', '/Auth/Login', { username: 'cydemoadmin', password: 'Test1@#$%' })
    cy.visit('/#/Settings/business-units/Add')
    cy.get('[type=submit]').should('be.visible')
    cy.get('.btn-link.muted').click()
  })
```

Here's the stack trace
<img width=""1895"" alt=""exception"" src=""https://user-images.githubusercontent.com/32462093/83340617-46331f80-a28f-11ea-87ee-fcea62a2b378.png"">
<img width=""1889"" alt=""noException"" src=""https://user-images.githubusercontent.com/32462093/83340620-492e1000-a28f-11ea-9606-9ff116a90377.png"">


There seems to be a weird URL mutation happening for the scenario where the exceptions happen",bug
627373458,cy.visit() passes but no content loads,"<!-- Is this a question? Questions WILL BE CLOSED. Ask in our chat https://on.cypress.io/chat  -->

### Current behavior:

Im fairly new to cypress but have been slowly working on it, the issue I have is that when I try to visit my company's website in production (www.jwine.com) I get an issue, cypress ""passes"" the cy.visit test but no content is ever loaded. We have a dev site, similar to the site in production (acc.jwine.com) which it loads fine and able to do testing but we want to be able to do simple tests in our site.

When I check the logs, there is an issue with initialNavigation. At this point im not sure if its a configuration issue. Been looking without any luck. 

<img width=""1400"" alt=""Screen Shot 2020-05-29 at 8 48 16 AM"" src=""https://user-images.githubusercontent.com/44122116/83279099-6d072e00-a189-11ea-8d4a-66cbea47f243.png"">

<!-- A description including screenshots, stack traces, DEBUG logs, etc -->

<img width=""1408"" alt=""Screen Shot 2020-05-29 at 8 48 59 AM"" src=""https://user-images.githubusercontent.com/44122116/83279143-8314ee80-a189-11ea-9ba4-3fda4406c8d8.png"">

### Desired behavior:

<!-- A clear description of what you want to happen -->

The page to load correctly in order to be able to test the site.

### Test code to reproduce

<img width=""424"" alt=""Screen Shot 2020-05-29 at 8 49 50 AM"" src=""https://user-images.githubusercontent.com/44122116/83279183-958f2800-a189-11ea-9fae-8ec7d358eef6.png"">


<img width=""341"" alt=""Screen Shot 2020-05-29 at 8 49 29 AM"" src=""https://user-images.githubusercontent.com/44122116/83279197-99bb4580-a189-11ea-8e88-6f4d3a6d138c.png"">

<!-- If we cannot fully run the tests as provided the issue WILL BE CLOSED -->
<!-- Issues without a reproducible example WILL BE CLOSED -->

<!-- You can fork https://github.com/cypress-io/cypress-test-tiny repo, set up a failing test, then link to your fork -->

### Versions

<!-- Cypress, operating system, browser -->

Cypress 4.7.0
macOS mojave 10.14.6
",bug
627329746,"""Error: Missing JS for source map rewrite"" with experimentalSourceRewriting","<!-- Is this a question? Questions WILL BE CLOSED. Ask in our chat https://on.cypress.io/chat  -->

### Current behavior:

Some sites crash Cypress with `experimentalSourceRewriting` enabled + devtools open with this error:

```
GET /__cypress/source-maps/4.1.map 500 6.953 ms - 10
Error: Missing JS for source map rewrite
    at DeferredSourceMapCache.<anonymous> (/Users/jennifer/Library/Caches/Cypress/4.6.0/Cypress.app/Contents/Resources/app/packages/rewriter/lib/deferred-source-map-cache.js:151:35)
```

### Desired behavior:

If this is a valid error, prevent it from happening; otherwise, make it propagate properly to the sourcemap request and not crash the process.


",bug
626571772,Mocha done errors don't display stack trace or code frame,"<!-- Is this a question? Questions WILL BE CLOSED. Ask in our chat https://on.cypress.io/chat  -->

### Current behavior:

When Mocha throws an error because the `done` callback is called twice or doesn't get called before the timeout, the error does not show the stack trace or a code frame with links to the calling code.

![Screen Shot 2020-05-28 at 10 38 19 AM](https://user-images.githubusercontent.com/1157043/83156256-2f929a00-a0d0-11ea-88aa-b59086cb0a8f.png)

![Screen Shot 2020-05-28 at 10 39 11 AM](https://user-images.githubusercontent.com/1157043/83156276-328d8a80-a0d0-11ea-860a-57f2ddf0fdce.png)

### Desired behavior:

Such errors should display the stack trace and a code frame pointing to the call site.

### Test code to reproduce

```javascript
it('calls done twice', (done) => {
  done()
  done()
})
```

```javascript
it('done timeout', (done) => {
})
```

### Versions

Cypress 4.6.0+
",bug
626529355,Errors thrown in fail handler don't show stack trace or code frame,"<!-- Is this a question? Questions WILL BE CLOSED. Ask in our chat https://on.cypress.io/chat  -->

### Current behavior:

If there's a failing expectation or exception in a `fail` handler, the error does not show the stack trace or a code frame with links to the calling code.

![Screen Shot 2020-05-28 at 9 52 35 AM](https://user-images.githubusercontent.com/1157043/83150458-497cae80-a0c9-11ea-8a38-457c1dfee2a6.png)

### Desired behavior:

Such errors should display the stack trace and a code frame pointing to the call site.

### Test code to reproduce

```javascript
it('throws error in fail handler', () => {
  cy.on('fail', () => {
    foo.bar() // could also be a failed assertion
  })

  cy.get('#does-not-exist', { timeout: 1 })
})
```

### Versions

Cypress 4.6.0+
",bug
626307724,Errors show code frame to preview with garbage characters.,"
<img width=""422"" alt=""截屏2020-05-28下午3 54 00"" src=""https://user-images.githubusercontent.com/22906174/83115286-bc534d00-a0fc-11ea-9257-8736bc943240.png"">

<img width=""332"" alt=""截屏2020-05-28下午3 54 23"" src=""https://user-images.githubusercontent.com/22906174/83115293-be1d1080-a0fc-11ea-992d-73dcaccd3a24.png"">

file encoding=utf-8

### Versions
Cypress 4.7.0
MacOS 10.15.2
Chrome 83.0.4103.61",bug
623694776,Mac/Jenkins: Cypress needs a logged in user to run headless tests,"### Current behavior:

Our Jenkins is started through _LaunchDaemons_ as some specific user, which is not logged in, and therefore has no running windowserver (`SystemUIServer`, or however this thing is called nowadays).

Jenkins then launches `cypress run`, which fails with:
```
_RegisterApplication(), FAILED TO establish the default connection to the WindowServer, _CGSDefaultConnection() is NULL.
```

and later on:
```
BrowserWindow.getExtensions is not a function
TypeError: BrowserWindow.getExtensions is not a function
    at Object.removeAllExtensions (/Users/Shared/Jenkins/Library/Caches/Cypress/4.4.0/Cypress.app/Contents/Resources/app/packages/server/lib/gui/windows.js:77:41)
...
```

This is the [full log file](https://gist.githubusercontent.com/marc-guenther/40716a70691b8328beb361c307544469/raw/5d3a6d7973a12f878622ff1d4c48cc557d102a89/jenkins.log).

I also noticed, when I am on my local machine, and do a `cypress run`, it pops up a Dock icon, which only has a main menu with a single _Quit_ item, and points to `~/Library/Caches/Cypress/4.6.0/Cypress.app`. I guess it shouldn't do that either.

### Workarounds

I found two workarounds:
- I switched from Electron to Chromium, and at least Chromium runs the tests, but cannot record vidoes.
- I logged in as the Jenkins user in the Console via Screen Sharing. Now Electron runs fine and does record videous. It also puts its icon into the Dock.

### Desired behavior:

Cypress and Electron should not require a UI when running in headless mode.

### To reproduce

- a Mac with two user accounts
- login as user A
- In Terminal: `sudo su - B`
- as user B, run `cypress run`

Strangely enough, in this case, simply logging in a user B as well does NOT fix the problem.

### Versions

This applies to at least 4.40 - 4.6.0.

EDIT: 3.4.1 also does this, so this is NOT related to #7393",bug
622997775,Error: could not find CRI target (Cypress 4.6.0),"### Current behavior:

`cypress run` fails with the following error on Chrome:

```
Cypress failed to make a connection to the Chrome DevTools Protocol after retrying for 50 seconds.

This usually indicates there was a problem opening the Chrome browser.

The CDP port requested was 26359.

Error details:

Error: could not find CRI target
    at lazyAssLogic (C:\Users\user\AppData\Local\Cypress\Cache\4.6.0\Cypress\resources\app\packages\server\node_modules\lazy-ass\index.js:110:14)
    at Object.lazyAss (C:\Users\user\AppData\Local\Cypress\Cache\4.6.0\Cypress\resources\app\packages\server\node_modules\lazy-ass\index.js:115:28)
    at findStartPage (C:\Users\user\AppData\Local\Cypress\Cache\4.6.0\Cypress\resources\app\packages\server\lib\browsers\protocol.js:56:23)
```

Full log is also attached.

Note that this doesn't appear to be 100% consistent. With the below example I am seeing this maybe 25% of the time.

We had previously observed this before, and upgraded to both 3.8.3 as a result of: https://github.com/cypress-io/cypress/issues/6053

Then more recently, upgraded to 4.6.0 as a result of: https://github.com/cypress-io/cypress/issues/6518

Still observing on 4.6.0 as below though

### Desired behavior:

Execution should not fail in this manner.

### Test code to reproduce

1. Clone https://github.com/stevejefferies/cypress-test-tiny
2. Run `cypress:run` as defined in package.json e.g. `npm run cypress:run`

### Versions

Cypress: 4.6.0
Browser: Chrome 83
OS: Windows 10

### Debug Log
[debug_log.txt](https://github.com/cypress-io/cypress/files/4666528/debug_log.txt)
",bug
622983794,"Warning for 'integrity' attribute, unknown error while trying to verify integrity with `experimentalSourceRewriting` on","**Test code to reproduce the issue**

```js
it('fails to pass SRI', function () {
  cy.visit('https://mail.protonmail.com/login')
})
```

**Current behavior:**

When running Cypress against the site, resources on the page are immediately blocked due to invalid hashes and Cypress crashing. 

**Console error:**

<img width=""518"" alt=""Screenshot 2020-05-21 at 16 38 21"" src=""https://user-images.githubusercontent.com/33432009/82636943-6b2eef00-9c0c-11ea-9479-b4a1b7974e04.png"">


**Versions:**

Cypress 4.6.0
Chrome 81.0.4044.138 
macOS Catalina 10.15.13



[cypress-crash-log.txt](https://github.com/cypress-io/cypress/files/4667031/cypress-crash-log.txt)
",bug
622384220,Redirect adds `__` within directory path when `experimentalSourceRewriting` is on,"<!-- Is this a question? Questions WILL BE CLOSED. Ask in our chat https://on.cypress.io/chat  -->

### Current behavior:

Current behavior:
When I login through the normal browser then I am able to log in.
But when running from cypress test runner the directory path is missing from URL.

The Cypress Test Runner redirects to: `http://:8084/__/branchHome.html`

![image](https://user-images.githubusercontent.com/26091432/82546735-396b4900-9b76-11ea-9358-62819d9d5097.png)

I have added below after there was a comment on my previous same bug still it didn't worked.

The previous bug raised: #5569

![image](https://user-images.githubusercontent.com/26091432/82548265-b0094600-9b78-11ea-837f-4ac97fba5bd0.png)

My cypress.json file:

![image](https://user-images.githubusercontent.com/26091432/82548592-2a39ca80-9b79-11ea-8aa1-635ae918ecf1.png)


### Desired behavior:

The Cypress Test Runner should redirect to : http://:8084//branchHome.html 

### Test code to reproduce

Below is the code:

```js
cy.visit(""http://<ip>:8084/<directory>"")
cy.get(""#login"").click()
cy.get(""input[value='Organization']"").click()
cy.get(""#username"").type('<User name provided>')
cy.get(""#pwd"").type('<password provided>')
cy.get(""#login"").click()
```

### Versions

Cypress Version : 4.6.0
Operating System: Windows 10
Browser : Chrome 81 / Electron 80
",bug
620803690,cy.contains() reruns previous commands when re-querying an alias ,"### Current behavior:

Preconditions:
* an element is located using `cy.contains()` invoked off the `cy` object and saved as `@alias`
* the element is recreated by the application under test

If the test tries to retrieve the element using `cy.get('@alias')`, the whole chain is executed again as expected (starting with `cy.contains()`). The `cy.contains()` works fine and finds the element in the whole document.

However, if there were some querying commands before `cy.contains()`, they seem to interfere with the alias querying procedure. For instance, the alias query fails if the query command _preceding to `contains`_ does not succeed. Please see the reproduction example for more clarity

### Desired behavior:

When invoked off the `cy` object, the `contains` command should not depend in any way on the precedent command.

### Test code to reproduce

Reproduction repo:
https://github.com/kokovtsev/cypress-repro-cy.contains/blob/master/cypress/integration/examples/contains.spec.js

Application under test:
https://codesandbox.io/s/gracious-newton-q4913?file=/src/App.js

### Versions

Windows 10 x64, Cypress 4.5.0, Electron 80/Chrome 81/Firefox 76

### See also
Might be related to:
* `.each` changes scope for next dual-command (like `cy.contains()`) #4921",bug
620447596,Cross-origin error happening on same domain after click event adds same page anchor,"### Current behavior:

Is not possible to continue with the test execution after getting error message:
```
Cypress detected a cross origin error happened on page load:
  > Blocked a frame with origin ""http://automationpractice.com"" from accessing a cross-origin frame.
Before the page load, you were bound to the origin policy:
  > http://automationpractice.com
```
This is happening when I click the create account button with a valid email (non-registered) in the email address field after visiting the site http://automationpractice.com/index.php?controller=authentication&back=my-account.

This event is not redirecting user to any new domain, actually it doesn't seem any redirection is made instead it looks like a page anchor from the same page is added to the url, loading new content in the same page and showing/hiding a few elements from the page layout.

If `chromeWebSecurity: false` is added to the the `cypress.json` file the issue continues. No error message is displayed but instead after the same event is triggered a blank page is loaded instead  blocking the test entirely.

### Desired behavior:

Cypress should be able to continue with the following step without showing the cross-origin error for this particular case.

### Test code to reproduce

1. Set up a new cypress project
2. Add a new javascript file with any desired name to the integration folder, with the following code:
```js
describe('Create Account', () => {
    it('Visit Store Website', () => {
        cy.visit('http://automationpractice.com/index.php?controller=authentication&back=my-account')
    })

    it('Add Email to create a new account', () => {
        cy.xpath('//input[@id=""email_create""]').type('faketest_1@faketestexample.com')
        cy.xpath('//form[@id=""create-account_form""]').submit()
    })

    it('Add personal information', () => {
        cy.get('.uniform-id_gender1').click()
        cy.get('.customer_firstname').type('First')
        cy.get('.customer_lastname').type('Last')
        cy.get('.passwd').type('whatever123')
        cy.get('.days').select('2')
        cy.get('.months').select('10')
        cy.get('.years').select('1985')
    })
})
```
3. Run the test from the cypress UI runner `npx cypress open`
4. Noticed the described issue

### Versions

* node version 12.16.3 
* npm version 6.14.4
```
""devDependencies"": {
    ""cypress"": ""^4.5.0"",
    ""cypress-xpath"": ""^1.4.0""
  }
```

### Attachments
![Screen Shot 2020-05-18 at 2 07 26 PM](https://user-images.githubusercontent.com/7740467/82250481-26a40a80-9911-11ea-9396-894e8f1e631e.png)",bug
620031957,"Getting blank page in cypress UI ,after running 2-3 steps of my test cases.","### Current behavior: 

Getting blank page in cypress UI ,after running 2-3 steps of my test cases.

<!-- A description including screenshots, stack traces, DEBUG logs, etc -->

### Desired behavior: 

before 15th May 2020 it was working fine

<!-- A clear description of what you want to happen -->

### Test code to reproduce

<!-- If we cannot fully run the tests as provided the issue WILL BE CLOSED -->I can't provide you with my code due to company policy 
<!-- Issues without a reproducible example WILL BE CLOSED -->this issue seems to be with many people [around](url)
![20200517_002521](https://user-images.githubusercontent.com/52884861/82194685-c8375600-9929-11ea-8abe-f04fcf06a16c.jpg)

<!-- You can fork https://github.com/cypress-io/cypress-test-tiny repo, set up a failing test, then link to your fork -->

### Versions 

cypress **version 3.8.3**

<!-- Cypress, operating system, browser -->Electron
",bug
619015794,`cy.fixture()` timed out waiting `60000ms` to receive large fixture files.,"When I run tests, sometimes it fails with such an error =>

![image](https://user-images.githubusercontent.com/40005510/82061336-3d5c1e80-96d1-11ea-89e9-35d3955ed18c.png)

This is my code:

```javascript
before(() => {
  cy.fixture(""monitors/monitorsTestIds.json"").then((data) => {
    testIds = data;
  });
  cy.fixture(""monitors/monitorsHelpIds.json"").then((data) => {
    monitorsHelpIds = data.activeFan;
  });
  cy.fixture(""monitors/activeMonitors/monitorsData.json"").then((data) => {
    fanActiveMonitorData = data.activeFan;
    generalInfo = data.generalInfo;

    cy.deleteMonitorIfExistsAPI(fanActiveMonitorData.defaultMonitorConfig.name, generalInfo.monitorActiveType);
  });
  cy.fixture(""monitors/activeMonitors/ciscoSnmpObjects.json"").then((data) => {
    snmpObjects = data;
  });
  cy.fixture(""monitors/activeMonitors/device.json"").then((data) => {
    mimicDevice = data;
  }).then(() => {
    let networkAddress = mimicDevice.templates[0].interfaces[0].networkAddress;
    cy.deleteDevicesIfExist(networkAddress);
    cy.initMimic(networkAddress, mibs, ifName).then((agentNumber) => {
      Cypress.env('fanTestAgentNumber', agentNumber);
    });
  });
  cy.patch_request(Cypress.env('baseApiUrl') + deviceTemplateUrl, deviceTemplatePath, Cypress.env('token')).then((response) => {
    Cypress.env('deviceIdToBeTested', response.responseBody.data.idMap[0].resultId);
  });
});
```

Maybe I'm doing something wrong or could you please help me to overcome this issue ?

",bug
617142102,"Click function does not respect coordinates (x, y) if they are 0","<!-- Is this a question? Questions WILL BE CLOSED. Ask in our chat https://on.cypress.io/chat  -->

### Current behavior:

`cy.click` will not respect either coordinate option if it is passed as 0. This is because a truthy comparison is used to set the default option, when it should really check if it is a finite number.

This issue is most likely present on right click and double click as well.

### Desired behavior:

`x` and `y` parameters can be 0 and the function will behave as it does for all other number values (and click the top left of the element).

### Test code to reproduce

```javascript
it('can specify x and/or y to be 0', () => {
  const $btn = $('<button id=""click-button"">clicking button</button>')
  .prependTo(cy.$$('body'))

  const position = $btn.offset()

  cy.on('log:changed', (log, attr) => {
    if (log.name === 'click' && attr._emittedAttrs.coords) {
      const args = attr._emittedAttrs.message.split(', ').map((i) => parseInt(i))
      const coords = attr._emittedAttrs.coords

      expect(coords.x).to.equal(coords.left)
      expect(coords.y).to.equal(coords.top)
      expect(coords.x).to.equal(position.left + args[0])
      expect(coords.y).to.equal(position.top + args[1])
    }
  })

  cy.get('#click-button').click(2, 2)
  cy.get('#click-button').click(0, 0)
  cy.get('#click-button').click(0, 2)
  cy.get('#click-button').click(2, 0)
})
```
",bug
615954062,Error file paths can't be opened in IDE when using webpack protocol,"<!-- Is this a question? Questions WILL BE CLOSED. Ask in our chat https://on.cypress.io/chat  -->

### Current behavior:

If using a webpack protocol for files (e.g. `webpack:///`), when an error is displayed, the file can't be opened in one's IDE.

<img width=""1158"" alt=""Screen Shot 2020-05-11 at 9 59 25 AM"" src=""https://user-images.githubusercontent.com/1157043/81576892-ce9c5f80-9376-11ea-97d9-fd1fbab46627.png"">


### Desired behavior:

Files can be opened even when using a webpack protocol to serve them.

### Test code to reproduce

This issue is reproducible within the [`code-frame-webpack-link-issue`](https://github.com/cypress-io/cypress-realworld-app/tree/code-frame-webpack-link-issue) branch of the `cypress-realworld-app` which uses TS spec files and uses `@cypress/webpack-preprocessor`.

1. Clone `https://github.com/cypress-io/cypress-realworld-app.git`
2. Check out [`code-frame-webpack-link-issue`](https://github.com/cypress-io/cypress-realworld-app/tree/code-frame-webpack-link-issue)  branch.
3. `yarn`
4. `yarn start`
5. Run [`new-transaction.spec.ts`](https://github.com/cypress-io/cypress-realworld-app/blob/code-frame-webpack-link-issue/cypress/tests/ui/new-transaction.spec.ts) which already has `.only` on at test for reproduction.


### Versions

Cypress: 4.6.0-prerelease (`develop` branch)

",bug
614743590,"cy.wait() does not resolve when the XHR contains static resource-like text in the XHR's query params or hash (like `.js`, `.html`, `.css`)","### Current behavior:

Discovered this while trying to test for ad requests for my employer. When a URL with file extension, like .html, and a question mark (for a query string parameter) is visited, the request that is listened for is no longer detected. Remove the question mark, and the request is detected.

### Desired behavior:

Before promoting a build in production, we test the build using a query-string parameter, so the wish is for this to work when a query-string parameter is present in the visited URL.

### Test code to reproduce

```js
describe(""Oregon Live Ads"", () => {
  it(""test cy.route()"", () => {
    cy.viewport(1500, 1024);

    Cypress.on('uncaught:exception', () => {
      return false;
    });

    cy.server();

    cy.route({
      url: /gampad\/ads\?/,
    }).as(""waitForAd"");

    cy.visit(
      ""https://www.oregonlive.com/news/2019/12/vaping-related-lung-illness-epidemic-has-likely-peaked-feds-say.html""
      , {qs: {answer: ""42""}}  // When this is commented out, the test passes.
    );

    cy.wait(""@waitForAd"").then((req) => {
      expect(true).to.equal(true);
    });
  });
});
```
### Versions

<!-- Cypress, operating system, browser -->
Cypress Version: Cypress 4.2.0
OS: MacOS Catalina 10.15.2
Browser: Default Chrome browser that is built into Cypress
",bug
614342542,URL scheme not considered when deciding if origin has changed or not,"### Current behavior:

1. `cy.visit('http://apple.com')`
2. Observe that `https://apple.com` is loaded in the AUT iframe via 301.
3. Observe that Cypress is still running at `http://apple.com/__/...`.

This can cause issues when trying to read from the AUT from Cypress, or vice versa. ""Illegal invocation"" errors can occur.

### Desired behavior:

URL scheme changes should be accounted for and Cypress should always be on the exact same schema+host+port as the AUT (at least, during a cy.visit)
",bug
614147819,Cypress stdout undefined in upzip.js in unziptool during installation,"### Current behavior:
Unzip.js fails
<!-- A description including screenshots, stack traces, DEBUG logs, etc -->
```
/mnt/c/Users/foob/node_modules/cypress/lib/tasks/unzip.js:130
          sp.stdout.on('data', function (data) {
                    ^

TypeError: Cannot read property 'on' of undefined
    at unzipWithUnzipTool (/mnt/c/Users/foob/node_modules/cypress/lib/tasks/unzip.js:130:21)
```
### Desired behavior:
I'd like this to be able to unzip.

### Versions

OS: Windows 10 Running WSL Ubuntu 18.04
Node: 10.20.1
npm: 6.9.0
Cypress: 3.8.3
<!-- Cypress, operating system, browser -->
",bug
613484817,Bundling wrong file initially when doing component tests,"Cypress v4.5.0

I used https://github.com/bahmutov/cypress-react-unit-test/ and ran

```
DEBUG=cypress:webpack npm run cy:open
```

and noticed when clicking on a component spec that it is asking to bundle `GET /__cypress/iframes/component/basic/counter-set-state/counter-spec.js` but then I see the following error messages

```
  cypress:webpack get /Users/gleb/git/cypress-react-unit-test/cypress/integration/component/basic/counter-set-state/counter-spec.js +16s
  cypress:webpack webpackOptions: { resolve: { alias: { react: '/Users/gleb/git/cypress-react-unit-test/node_modules/react' } }, mode: 'development', stats: 'verbose', module: { rules: [ [Object], [Object], [Object] ] } } +1ms
  cypress:webpack watchOptions: {} +0ms
  cypress:webpack input: /Users/gleb/git/cypress-react-unit-test/cypress/integration/component/basic/counter-set-state/counter-spec.js +1ms
  cypress:webpack output: /Users/gleb/Library/Application Support/Cypress/cy/production/projects/cypress-react-unit-test-3d4057e937d798d828e0b355d0057df4/bundles/cypress/integration/component/basic/counter-set-state/counter-spec.js +0ms
  cypress:webpack watching +145ms
  cypress:webpack compile /Users/gleb/git/cypress-react-unit-test/cypress/integration/component/basic/counter-set-state/counter-spec.js +2ms
  cypress:webpack get /Users/gleb/git/cypress-react-unit-test/cypress/support/index.js +17ms
  cypress:webpack webpackOptions: { resolve: { alias: { react: '/Users/gleb/git/cypress-react-unit-test/node_modules/react' } }, mode: 'development', stats: 'verbose', module: { rules: [ [Object], [Object], [Object] ] }, entry: [ '/Users/gleb/git/cypress-react-unit-test/cypress/integration/component/basic/counter-set-state/counter-spec.js' ], output: { path: '/Users/gleb/Library/Application Support/Cypress/cy/production/projects/cypress-react-unit-test-3d4057e937d798d828e0b355d0057df4/bundles/cypress/integration/component/basic/counter-set-state', filename: 'counter-spec.js' }, devtool: 'inline-source-map' } +0ms
  cypress:webpack watchOptions: {} +1ms
  cypress:webpack input: /Users/gleb/git/cypress-react-unit-test/cypress/support/index.js +0ms
  cypress:webpack output: /Users/gleb/Library/Application Support/Cypress/cy/production/projects/cypress-react-unit-test-3d4057e937d798d828e0b355d0057df4/bundles/cypress/support/index.js +0ms
  cypress:webpack watching +4ms
  cypress:webpack compile /Users/gleb/git/cypress-react-unit-test/cypress/support/index.js +0ms
  cypress:webpack get /Users/gleb/git/cypress-react-unit-test/cypress/component/basic/counter-set-state/counter-spec.js +5ms
  cypress:webpack webpackOptions: { resolve: { alias: { react: '/Users/gleb/git/cypress-react-unit-test/node_modules/react' } }, mode: 'development', stats: 'verbose', module: { rules: [ [Object], [Object], [Object] ] }, entry: [ '/Users/gleb/git/cypress-react-unit-test/cypress/support/index.js' ], output: { path: '/Users/gleb/Library/Application Support/Cypress/cy/production/projects/cypress-react-unit-test-3d4057e937d798d828e0b355d0057df4/bundles/cypress/support', filename: 'index.js' }, devtool: 'inline-source-map' } +0ms
  cypress:webpack watchOptions: {} +0ms
  cypress:webpack input: /Users/gleb/git/cypress-react-unit-test/cypress/component/basic/counter-set-state/counter-spec.js +0ms
  cypress:webpack output: /Users/gleb/Library/Application Support/Cypress/cy/production/projects/cypress-react-unit-test-3d4057e937d798d828e0b355d0057df4/bundles/cypress/component/basic/counter-set-state/counter-spec.js +1ms
  cypress:webpack watching +2ms
  cypress:webpack compile /Users/gleb/git/cypress-react-unit-test/cypress/component/basic/counter-set-state/counter-spec.js +0ms
  cypress:webpack stats had error(s) +138ms
  cypress:webpack errored bundling /Users/gleb/Library/Application Support/Cypress/cy/production/projects/cypress-react-unit-test-3d4057e937d798d828e0b355d0057df4/bundles/cypress/integration/component/basic/counter-set-state/counter-spec.js Webpack Compilation Error
multi ./cypress/integration/component/basic/counter-set-state/counter-spec.js
Module not found: Error: Can't resolve '/Users/gleb/git/cypress-react-unit-test/cypress/integration/component/basic/counter-set-state/counter-spec.js' in '/Users/gleb/git/cypress-react-unit-test'
resolve '/Users/gleb/git/cypress-react-unit-test/cypress/integration/component/basic/counter-set-state/counter-spec.js' in '/Users/gleb/git/cypress-react-unit-test'
  using description file: /Users/gleb/git/cypress-react-unit-test/package.json (relative path: .)
    Field 'browser' doesn't contain a valid alias configuration
    using description file: /Users/gleb/git/cypress-react-unit-test/package.json (relative path: ./cypress/integration/component/basic/counter-set-state/counter-spec.js)
      no extension
        Field 'browser' doesn't contain a valid alias configuration
        /Users/gleb/git/cypress-react-unit-test/cypress/integration/component/basic/counter-set-state/counter-spec.js doesn't exist
      .wasm
        Field 'browser' doesn't contain a valid alias configuration
        /Users/gleb/git/cypress-react-unit-test/cypress/integration/component/basic/counter-set-state/counter-spec.js.wasm doesn't exist
      .mjs
        Field 'browser' doesn't contain a valid alias configuration
        /Users/gleb/git/cypress-react-unit-test/cypress/integration/component/basic/counter-set-state/counter-spec.js.mjs doesn't exist
      .js
        Field 'browser' doesn't contain a valid alias configuration
        /Users/gleb/git/cypress-react-unit-test/cypress/integration/component/basic/counter-set-state/counter-spec.js.js doesn't exist
      .json
        Field 'browser' doesn't contain a valid alias configuration
        /Users/gleb/git/cypress-react-unit-test/cypress/integration/component/basic/counter-set-state/counter-spec.js.json doesn't exist
      as directory
        /Users/gleb/git/cypress-react-unit-test/cypress/integration/component/basic/counter-set-state/counter-spec.js doesn't exist
[/Users/gleb/git/cypress-react-unit-test/cypress/integration/component/basic/counter-set-state/counter-spec.js]
[/Users/gleb/git/cypress-react-unit-test/cypress/integration/component/basic/counter-set-state/counter-spec.js.wasm]
[/Users/gleb/git/cypress-react-unit-test/cypress/integration/component/basic/counter-set-state/counter-spec.js.mjs]
[/Users/gleb/git/cypress-react-unit-test/cypress/integration/component/basic/counter-set-state/counter-spec.js.js]
[/Users/gleb/git/cypress-react-unit-test/cypress/integration/component/basic/counter-set-state/counter-spec.js.json]
 @ multi ./cypress/integration/component/basic/counter-set-state/counter-spec.js main[0] +1ms
```

and then it is asking to bundle again

```
GET /__cypress/tests?p=cypress/component/basic/counter-set-state/counter-spec.js-250 - - ms - -
GET /__cypress/iframes/component/basic/counter-set-state/counter-spec.js 200 0.918 ms - 787
GET /__cypress/runner/popper.js.map 404 0.649 ms - 136
  cypress:webpack get /Users/gleb/git/cypress-react-unit-test/cypress/support/index.js +409ms
  cypress:webpack already have bundle for /Users/gleb/git/cypress-react-unit-test/cypress/support/index.js +0ms
  cypress:webpack get /Users/gleb/git/cypress-react-unit-test/cypress/component/basic/counter-set-state/counter-spec.js +1ms
  cypress:webpack already have bundle for /Users/gleb/git/cypress-react-unit-test/cypress/component/basic/counter-set-state/counter-spec.js +0ms
GET /__cypress/tests?p=cypress/support/index.js-864 200 302.270 ms - -
```

So something is wrong there. It is asking for file `./cypress/integration/component/basic/counter-set-state/counter-spec.js` and it should be `./cypress/component/basic/counter-set-state/counter-spec.js` (no ""integration"" folder)

",bug
613427123,Cannot access media devices on a whitelisted custom domain on electron,"<!-- Is this a question? Questions WILL BE CLOSED. Ask in our chat https://on.cypress.io/chat  -->

### Current behavior:

Note that the flag `--unsafely-treat-insecure-origin-as-secure=http://e2e.test:8080` works properly on Chrome.


```
» npm run test

> webcam-tests@ test ~/Apps/webcam-tests
> ELECTRON_EXTRA_LAUNCH_ARGS='--unsafely-treat-insecure-origin-as-secure=http://e2e.test:8080' cypress run


====================================================================================================

  (Run Starting)

  ┌────────────────────────────────────────────────────────────────────────────────────────────────┐
  │ Cypress:    4.5.0                                                                              │
  │ Browser:    Electron 80 (headless)                                                             │
  │ Specs:      1 found (index.spec.js)                                                            │
  └────────────────────────────────────────────────────────────────────────────────────────────────┘


────────────────────────────────────────────────────────────────────────────────────────────────────

  Running:  index.spec.js                                                                   (1 of 1)


  1) should work

  0 passing (496ms)
  1 failing

  1) should work:
     Uncaught TypeError: Cannot read property 'getUserMedia' of undefined

```

### Desired behavior:

Camera access should be allowed on a whitelisted domain

### Test code to reproduce

You can reproduce the issue in this repo https://github.com/cadesalaberry/webcam-tests

### Versions

Cypress 4.5.0
MacOSX 10.15.5 Beta (19F72f)",bug
612334341,When calling `.select()` on an option that's in a disabled optgroup - does not select option,"### Current behavior:

We warn when attempting to select a disabled select or option, but not when option is within a disabled optgroup. So if you try to select an option within a disabled optgroup - it just has a `null` value. 

### Desired behavior:

If the option is within an optgroup that is disabled, the option is also disabled and should be warned. 

### Test code to reproduce

`spec.js`

```js
it('works', () => {
  cy.visit('index.html')
  cy.get('#optgroup-enabled').select('okra')
    .invoke('val').should('eq', 'okra')   // passes
  cy.get('#optgroup-disabled').select('banana')
    .invoke('val').should('eq', 'banana') // fails
})
```

`index.html`

```html
<html>
<body>
  <select id=""optgroup-enabled"">
    <optgroup label=""Veggies"">
      <option value=""okra"">Okra</option>
      <option value=""zucchini"">Zucchini</option>
    <optgroup>
  </select>
  <select id=""optgroup-disabled"">
    <optgroup label=""Fruits"" disabled>
      <option value=""banana"">Banana</option>
      <option value=""apple"">Apple</option>
    <optgroup>
  </select>
  <script>
  </script>
</body>
</html>
```

<img width=""745"" alt=""Screen Shot 2020-05-05 at 11 15 34 AM"" src=""https://user-images.githubusercontent.com/1271364/81035639-d44efc80-8ec1-11ea-80e9-41f33d3f9e48.png"">


### Versions

4.5.0
",bug
610926141,npm install --only=development crashes due to is-promise in dependency listr,"### Current behavior:

When I try to execute `npm install --only=development` command (for multi-stage build) installation crashes due to lack of runtime dependency `minimist` in cypress's postinstall stage.

It doesn't happen when it is installed alone, but I found some combinations of libraries that bring this bug to life. In this case it crashes with `@nestjs/common`.

`stacktrace`

```
> cypress@4.5.0 postinstall /node_modules/cypress
> node index.js --exec install

internal/modules/cjs/loader.js:960
  throw err;
  ^

Error: Cannot find module 'is-promise'
Require stack:
- /node_modules/listr/lib/task.js
- /node_modules/listr/index.js
- /node_modules/cypress/lib/tasks/install.js
- /node_modules/cypress/index.js
    at Function.Module._resolveFilename (internal/modules/cjs/loader.js:957:15)
    at Function.Module._load (internal/modules/cjs/loader.js:840:27)
    at Module.require (internal/modules/cjs/loader.js:1019:19)
    at require (internal/modules/cjs/helpers.js:77:18)
    at Object.<anonymous> (/node_modules/listr/lib/task.js:2:19)
    at Module._compile (internal/modules/cjs/loader.js:1133:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1153:10)
    at Module.load (internal/modules/cjs/loader.js:977:32)
    at Function.Module._load (internal/modules/cjs/loader.js:877:14)
    at Module.require (internal/modules/cjs/loader.js:1019:19)
    at require (internal/modules/cjs/helpers.js:77:18)
    at Object.<anonymous> (/node_modules/listr/index.js:3:14)
    at Module._compile (internal/modules/cjs/loader.js:1133:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1153:10)
    at Module.load (internal/modules/cjs/loader.js:977:32)
    at Function.Module._load (internal/modules/cjs/loader.js:877:14) {
  code: 'MODULE_NOT_FOUND',
  requireStack: [
    '/node_modules/listr/lib/task.js',
    '/node_modules/listr/index.js',
    '/node_modules/cypress/lib/tasks/install.js',
    '/node_modules/cypress/index.js'
  ]
}

```

### Desired behavior:

Installing cypress with `npm install --only=development` should not crash install build.

### Test code to reproduce

`Dockerfile`

```yml
FROM node:12.13-stretch AS development

WORKDIR /usr/src/app

COPY package.json ./
RUN npm install --only=development
```

`package.json`

```json
{
  ""dependencies"": {
    ""@nestjs/common"": ""^6.8.3""
  },
  ""devDependencies"": {
    ""cypress"": ""^4.1.0"",
    ""@nrwl/cypress"": ""9.2.3""
  }
}

```

### Versions

Cypress: 4.5.0",bug
609151158,`binary-release` deploy step fails setting `NEXT_DEV_VERSION`,"This step consistently fails:

https://github.com/cypress-io/cypress/blob/8c00988c2a867f8aa71d005ce99a7887210cbd98/DEPLOY.md#L162-L165

The download server manifest is updated correctly; however, there is an error when trying to update NEXT_DEV_VERSION in CI, so it has to be done manually for the time being.",bug
608940439,Number inputs that are manually focused do not respect the caret position during `cy.type()`,"### Current behavior:

I've set up a small repro app (link below) that has a button. When clicking on this button, an `<input type=""number"" value=""1"" />` is created and manually focused (by calling `focus()` on it).

In my test, I click on this button, wait for the input to show up, and then attempt to type something into this input. Instead of appending typed characters to the end of the input (where the cursor is), Cypress appends them to the beginning of the input.

### Desired behavior:

I expect the the typed character to be appended to the end of the input (where the cursor is), and the written test to pass. 

### Test code to reproduce

I've set up this repo that is a simplified version of my app and exhibits the issue:
https://github.com/madebysid/cypress-input-focus-issue

(I can fork https://github.com/cypress-io/cypress-test-tiny and set this up there instead if you prefer, but it seems very similar to what I have)

### Versions

Cypress: 4.5.0
OS: macOS
Browser: Electron

Curiously enough, the test behaves as I expect (and passes) on Cypress 3.7.0. Cypress 3.8.0+ have this issue.
",bug
608142069,Firefox randomly failing to start in CI,"<!-- Is this a question? Questions WILL BE CLOSED. Ask in our chat https://on.cypress.io/chat  -->

### Current behavior:

<!-- A description including screenshots, stack traces, DEBUG logs, etc -->
When running tests with Firefox in CI (GitHub Actions), it randomly fails to start with this error:
```
Cypress could not connect to Firefox.

An unexpected error was received from Marionette connection:

Error: cannot open socket

To avoid this error, ensure that there are no other instances of Firefox launched by Cypress running.
```

It may be linked to #6504 , but because the environment seems to be different, I think a new issue is more appropriate.

### Desired behavior:

<!-- A clear description of what you want to happen -->
Cypress runs reliably everytime.

### Test code to reproduce

<!-- If we cannot fully run the tests as provided the issue WILL BE CLOSED -->
<!-- Issues without a reproducible example WILL BE CLOSED -->

<!-- You can fork https://github.com/cypress-io/cypress-test-tiny repo, set up a failing test, then link to your fork -->

Repository: https://github.com/Seb-C/test-cypress-action
CI script: https://github.com/Seb-C/test-cypress-action/blob/master/.github/workflows/tests.yml
(all tests are the default one when we first do `cypress open` in a new project)

Runs history (showing the randomness): https://github.com/Seb-C/test-cypress-action/actions
Logs of a failed run: https://github.com/Seb-C/test-cypress-action/runs/625344325?check_suite_focus=true

### Versions

<!-- Cypress, operating system, browser -->
- GitHub actions
- Ubuntu 18.04.4 LTS
- Firefox 74.0.1
- Cypress 4.4.1",bug
607412878,Changing currentTime of HTMLVideoElement in Cypress always sets to 0 (Chrome/Electron),"### Current behavior:

In the application I am currently working on, we allow users to change the current time of a video according to a keyframe, which they can click on. Each keyframe has a corresponding timestamp, which then with a click event will set the video elements `currentTime` to this timestamp (in seconds)

I can confirm that this feature works in Firefox/Chrome browsers. 

We are using Cypress to ensure that when clicking on a keyframe, the video players `currentTime` is set correctly in the UI. 

However when trying to change the `currentTime` inside of Chrome/Electron within the Cypress environment the `currentTime` is always set to `0`. There doesn't appear to be any issues when running Cypress with Firefox. 

### Desired behavior:

When setting the `currentTime` property of a `HTMLVideoElement`. It should be set correctly, and not always to `0`. 

### Test code to reproduce

Unfortunately due to the project not being open-source, I cannot post screenshots, or code directly from the project. 

- The test should be reproducible by loading any MP4 into a html video element (I tried with a variety of different test videos found [here](https://gist.github.com/jsturgis/3b19447b304616f18657)
- Setting the `currentTime` with an on `click` event, should always set `currentTime = 0` even though the value > 0. 

Here is a Typescript code snippet of the function we're calling: 

```ts
const setTime = ({ player, begin }: { player: HTMLVideoElement, begin: number }) => {
    if (player && begin != null) {
      player.currentTime = begin;
    }
  }
```

### Versions

Cypress v4.4.1
Browsers: Chrome/Electron

",bug
607110264,Cypress 4.4.1 (4.2.0 and above) opens with blank GUI on Linux,"### Current behavior:

Following upgrade from 4.1.0 to 4.4.1 (or any version above 4.2.0), ""npx cypress open"" results in a blank grey window with no content. No particular error messages are printed to the terminal.

Older versions 4.1.0 and below still work fine, as do all other X programs such as browsers etc from the same terminal.

### Test code to reproduce

This is seen running a Linux desktop via a VNC session. Ubuntu 16.04.
",bug
606958286,The JS file that cypress got is little different with JS file gotten in chrome,"<!-- Is this a question? Questions WILL BE CLOSED. Ask in our chat https://on.cypress.io/chat  -->

### Current behavior:
visit the same page, In cypress will get an error caused by one parameter not defined
![image](https://user-images.githubusercontent.com/45580554/80302521-1babfd80-87dd-11ea-8c98-2c6dd354455d.png)

<!-- A description including screenshots, stack traces, DEBUG logs, etc -->

### Desired behavior:
Expect the cypress can visit normally
<!-- A clear description of what you want to happen -->

### Test code to reproduce

<!-- If we cannot fully run the tests as provided the issue WILL BE CLOSED -->
<!-- Issues without a reproducible example WILL BE CLOSED -->

<!-- You can fork https://github.com/cypress-io/cypress-test-tiny repo, set up a failing test, then link to your fork -->
I can not reproduce because I'm not sure this is caused by cypress or webpack or my project

### Versions

<!-- Cypress, operating system, browser -->
OS: Windows 10 1909 18363.778
Cypress: 4.3.0
Chrome: Version 81.0.4044.122 (Official Build) (64-bit)",bug
602493345,cy.visit() failed trying to load ESOCKETTIMEDOUT,"<!-- Is this a question? Questions WILL BE CLOSED. Ask in our chat https://on.cypress.io/chat  -->

### Current behavior:
```
  CypressError: cy.visit() failed trying to load:
 We attempted to make an http request to this URL but the request failed without a response.
 We received this error at the network level:
   > Error: ESOCKETTIMEDOUT
 Common situations why this would fail:
     - you don't have internet access
     - you forgot to run / boot your web server
     - your web server isn't accessible
     - you have weird network configuration settings on your computer
 The stack trace for this error is:
 Error: ESOCKETTIMEDOUT
     at ClientRequest.<anonymous> (/root/.cache/Cypress/4.2.0/Cypress/resources/app/packages/server/node_modules/request/request.js:816:19)
     at Object.onceWrapper (events.js:299:28)
     at ClientRequest.emit (events.js:210:5)
     at TLSSocket.emitRequestTimeout (_http_client.js:690:9)
     at Object.onceWrapper (events.js:299:28)
     at TLSSocket.emit (events.js:210:5)
     at TLSSocket.Socket._onTimeout (net.js:468:8)
     at listOnTimeout (internal/timers.js:531:17)
     at processTimers (internal/timers.js:475:7)
 Because this error occurred during a 'before each' hook we are skipping the remaining tests in the current suite: 'Suite Tests'
```

```yaml
image: 'cypress/base'

stages:
  - e2e

end-to-end testing:
  stage: e2e
  script:
    - npm install
    - npm test
```


### Desired behavior:

Does not start testing on gitlab, but on local machine it does works

### Test code to reproduce

Starts the tests in gitlab

<!-- You can fork https://github.com/cypress-io/cypress-test-tiny repo, set up a failing test, then link to your fork -->

### Versions

Cypress: 4.2.0
Image: cypress/base
",bug
601652401,SIGSEGV after passing all tests,"I can't comment on the original ticket because it's locked, but this bug https://github.com/cypress-io/cypress/issues/6458 still exists on 4.4.0 as of this evening

![image](https://user-images.githubusercontent.com/3586801/79524736-1e0c9b80-8016-11ea-8cd8-4ea0ec5b3c08.png)

",bug
600635539,Launch Hanging on Ubuntu when `snap` version of Chromium is installed,"<!-- Is this a question? Questions WILL BE CLOSED. Ask in our chat https://on.cypress.io/chat  -->

### Current behavior:

`cypress open` does not open Cypress.
`cypress run` just seems to hang.

Logs:
https://pastebin.com/ULZwQEj8

Snapshot of behavior and logs:
![https://files.gitter.im/cypress-io/cypress/g4g2/image.png](https://files.gitter.im/cypress-io/cypress/g4g2/image.png)

System:
![image](https://user-images.githubusercontent.com/18596813/79396536-0e3c7b00-7f74-11ea-8620-5ef578229a6e.png)

### Desired behavior:

Should be able to run tests.

### Test code to reproduce

As this is happening prior to Cypress running I don't think its anything I can give reproduction steps for.

`DEBUG=* $(npm bin)/cypress open`
`DEBUG=* $(npm bin)/cypress run`

Are the commands I am running.

### Versions

v4.3.0 and v4.4.0",bug
599727060,click does not work if an element has zero width / height element inside of it,"Cypress 4.4.0

HTML

```html
<a href='#' className='learn-more' onClick={openProjectIdHelp}>
   <i className='fas fa-info-circle'></i>{' '}
   Learn more
</a>
```

Test code

```js
cy.contains('a', 'Learn more').click()
```

The click command happens BUT it does not reach the `onClick` handler in the `a` element. 

<img width=""873"" alt=""Screen Shot 2020-04-14 at 1 01 02 PM"" src=""https://user-images.githubusercontent.com/2212006/79252710-0d122d80-7e50-11ea-94b4-4408986d1138.png"">

Seems the mouse click happens on the edge of the found element, not inside of it

<img width=""850"" alt=""Screen Shot 2020-04-14 at 1 01 58 PM"" src=""https://user-images.githubusercontent.com/2212006/79252768-21562a80-7e50-11ea-9f39-8f4625e4ec49.png"">

and thus the click event goes into parent ""div""

<img width=""1102"" alt=""Screen Shot 2020-04-14 at 1 02 23 PM"" src=""https://user-images.githubusercontent.com/2212006/79252793-303cdd00-7e50-11ea-9963-abd75d97da1e.png"">

After digging into the mouse click handlers got to `coordinates.js`

```js
const getElementPositioning = ($el) => {
  ...
  const rect = el.getClientRects()[0] || el.getBoundingClientRect()
```

For our element, `el.getClientRects()` returns _two rectangles_.

<img width=""996"" alt=""Screen Shot 2020-04-14 at 1 06 09 PM"" src=""https://user-images.githubusercontent.com/2212006/79253192-ca048a00-7e50-11ea-9261-82a7398091a6.png"">

The first rectangle is from `<i>` element with no width, the second from the text inside the `a` element.

<img width=""780"" alt=""Screen Shot 2020-04-14 at 1 07 45 PM"" src=""https://user-images.githubusercontent.com/2212006/79253321-fe784600-7e50-11ea-9a3f-2d796e17dd9c.png"">

We can recreate the behavior by putting an empty span

```html
<a href='#' className='learn-more' onClick={openProjectIdHelp}>
  <span></span>
  Learn more
</a>
```

<img width=""890"" alt=""Screen Shot 2020-04-14 at 1 09 13 PM"" src=""https://user-images.githubusercontent.com/2212006/79253464-4008f100-7e51-11ea-9761-fd957fce9ae8.png"">


## Proposal

- look at the list of returned client rectangles, not just at the first one. A simple check would be to skip the rectangles with `width:0` or `height:0`. A more robust check would be to get the coordinates and then check which element at those coordinates would receive the event. In our case, it would be parent `div`, because the first element has zero dimension.
",bug
596766621,Performance issues of the Runner when using Cypress commands on many DOM elements at once,"### Current behavior:
As QA, I want to be able to quickly validate that all images on the target page have links ('http' string inside the target attribute) to the source files.

By using the code below that includes .each() command to be able to iterate an array of ~90 links, the Cypress runner **hangs**, i.e. becomes frozen for about 20 seconds.

The time that Cypress takes to validate the assertion is in direct proportion to the number of elements in the array. E.g. if I click the _Show more_ button to fetch a new portion of VODs, Cypress will double the time.

**The block of target HTML**
Please note that mobile, tablet, desktop breakpoints have different source images per item, i.e. if there are **30** images on the page, there will be **90** checks in Cypress

![html](https://user-images.githubusercontent.com/1925186/78816858-481fe700-79a0-11ea-855d-0a6972fb89d7.png)

**Cypress hangs**
![runner hangs](https://user-images.githubusercontent.com/1925186/78816809-38a09e00-79a0-11ea-8c19-a7a564a18a45.png)

**Total execution time**
Please note that site opening takes around 3-5 seconds, all the rest is the Cypress validation
![total time](https://user-images.githubusercontent.com/1925186/78816827-3d655200-79a0-11ea-9e16-4fd6c7399857.png)

**P.S.**
The same validation in Test Cafe takes only 13 seconds but Cypres should be much faster, we all believe in that!

```js
const gridItems = await Selector('.carouselImage');
const gridCount = await gridItems.count;

for(let i=0; i<gridCount; i++){
    let src = gridItems.nth(i).find('poster-image').find('picture').find('source');
    await t.expect(src.getAttribute(""srcset"")).contains('http');
}
```

### Desired behavior:

Cypress performs the validation much faster.

### Test code to reproduce

```js
    cy.visit(
      'https://entertainment.cathaypacific.com/catalog?template=movie&parent=Movies'
    );

    cy.get('.carouselImage > poster-image > figure > picture > source').each(source => {
      cy.wrap(source)
        .invoke('attr', 'srcset')
        .should('contain', 'http');
    });
```

### Versions
Cypress: 4.3.0
OS: Ubuntu 18.04.4 LTS
Browser: Chrome 81.0.4044.92 (Official Build) (64-bit)
",bug
592681859,Cannot read property 'ownerDocument' of null,"### Current behavior:
Clicking on a chart element causes the retry to fail.

This is the error:

![image](https://user-images.githubusercontent.com/1898447/78260134-87a88800-74f5-11ea-8bdc-cf719a4bff12.png)


### Desired behavior:
The click action should work as expected. The click should select the chart in the following point:

![image](https://user-images.githubusercontent.com/1898447/78355713-1379ed00-75a6-11ea-8744-9301cc27a56a.png)


### Test code to reproduce

```javascript
context('Actions', () => {

  beforeEach(() => {
    cy.visit('https://demo.spotfire.cloud.tibco.com/spotfire/wp/analysis?file=/Public/Airbnb%20Boston%20Listings')
  })

  it('select chart value', () => {
    cy.wait(6000) // Give time for the chart to render. Ideally, this should wait on the specific HTML element.
    cy.get('div[title=""Property Type Distribution""]').parent().parent().parent().click(150, 60) // This click will fail.
  })

})
```

Second version of code to reproduce that does not rely on `cy.wait()`:

```javascript
context('Actions', () => {

  beforeEach(() => {
    cy.visit('https://demo.spotfire.cloud.tibco.com/spotfire/wp/analysis?file=/Public/Airbnb%20Boston%20Listings')
  })

  it('select chart value', () => {
    cy.get('div[title=""Property Type Distribution""]').as('chartTitle').parent().parent().parent()
      .within(el => {
        cy.get('div.sf-element-canvas-image').invoke('attr', 'sf-busy').should('eq', 'false')
        cy.wrap(el).as('chart').click(150, 60) // This click will fail.
      })
  })

})
```

### Versions
Windows 10, Chrome or Electron, any version.
```json
  ""devDependencies"": {
    ""cypress"": ""^4.3.0""
  },
```
",bug
592579233,Parse Error on URL 303 Redirection,"### Current behavior:

https://www.stage-headout.com/book/8959/checkout?date=2020-03-27&variantId=16137&pax.adult=1

This URL has a 303 redirection. Apparently, while visiting this I'm getting an 

```
cy.visit() failed trying to load:

https://www.stage-headout.com/book/8959/checkout?date=2020-03-27&variantId=16137&pax.adult=1
```

Not an appropriate stack trace or log present.

### Desired behavior:

Load page normally after redirection.

### Test code to reproduce

```js
context('Actions', () => {
    it('open_homepage', function () {
      cy.visit('https://www.stage-headout.com/book/8959/checkout?date=2020-03-27&variantId=16137&pax.adult=1')
    });
})
```

<!-- If we cannot fully run the tests as provided the issue WILL BE CLOSED -->
<!-- Issues without a reproducible example WILL BE CLOSED -->

<!-- You can fork https://github.com/cypress-io/cypress-test-tiny repo, set up a failing test, then link to your fork -->

### Versions
4.3

<!-- Cypress, operating system, browser -->
",bug
591081450,Can't pass hash values containing exponential operators to --env command line option.,"### Current behavior:
We use `--env` variable to pass some environment variables to cypress, when it's running both in headless and headed mode. 

One of the parameters is a hash (mix of numbers and characters). Surprisingly some specific hash values make cypress to fail reading this value from the command line (e.g. `769e98018`). The corresponding environment variable is not set and the `Cypress.env()` function returns with `null`.

### Desired behavior:
It should not be a problem to read a hash from the command line and put into an environment variable.

### Test code to reproduce
A simplified command line call:

```
node_modules/cypress/bin/cypress open --env WSD_VERSION_HASH=769e98018
```

Test code showing the issue:

```js
describe('Hash test.', function() {
    it('Test 1.', function() {
        expect(Cypress.env('WSD_VERSION_HASH')).to.equal('769e98018');
    });
});
```

This test fails with: 'expected null to equal 769e98018'

If I remove the 'e' character for example, then the value is read correctly.

### Versions
Cypress 4.1.0
OpenSUSE 15.1 and Ubuntu 18.04

",bug
590962315,"Cypress.io does not launch chrome on Windows 10: 'Whoops, we can't run your tests'","<!-- Is this a question? Questions WILL BE CLOSED. Ask in our chat https://on.cypress.io/chat  -->

### Current behavior:
I updated cypress from 4.2.0 to 4.3.0 and now I am not able to run my cypress tests in chrome. I get the following error message 

> **Whoops, we can't run your tests.** 
> This browser was not launched through Cypress. Tests cannot run.

I am able to run my tests in firefox, edge and electron. But not Chrome and Canary.

I tried to delete the app data so cypress could rebuild them but it did not rebuild. 
 

<!-- A description including screenshots, stack traces, DEBUG logs, etc -->
![image](https://user-images.githubusercontent.com/62933596/78011758-4de44f80-7344-11ea-9a88-843f34c0e6f4.png)

### Desired behavior:
I want to run my tests also in chrome. 

<!-- A clear description of what you want to happen -->

### Test code to reproduce
its not necessary which code i use. its the same with example.spec

<!-- If we cannot fully run the tests as provided the issue WILL BE CLOSED -->
<!-- Issues without a reproducible example WILL BE CLOSED -->

<!-- You can fork https://github.com/cypress-io/cypress-test-tiny repo, set up a failing test, then link to your fork -->

### Versions
i am using windows 10 enterprise version 1903, 
cypress.io 4.3.0, 
Chrome Version 80.0.3987.149 (64bit)
Canary Version 82.0.4081.0 (64bit)

<!-- Cypress, operating system, browser -->
",bug
590574218,"If the Chrome tab hangs, Page.navigate commands hangs and never times out","Cypress v4.2.0 on Mac, Chrome 80
Test repo https://github.com/bahmutov/cypress-native-chrome-code-coverage-example/tree/add-hang

In this repo branch `add-hang` when launching the Chrome browser the plugin grabs the RDP socket and then connects too.

I edited the Cypress `browsers/cri-client.ts` file and added a 10 second delay before it tries to connect. Thus we get the following situation

- Cypress launches Chrome browser
- my plugin connects to RDP socket and executes (maliciously) `cdp.Page.navigate({ url: 'chrome://hang' })` causing the Chrome tab to hang
- after 10 seconds, Cypress tries to connect, and then sends page navigate event.
- everything just hangs forever

When running with debug logs, I see we send the navigate command, but without timeout it never receives a response from hanging tab

```
DEBUG=cypress:server:browsers:cri-client,cypress-verbose:server:browsers:cri-client:* npx cypress open
```

<img width=""1440"" alt=""Screen Shot 2020-03-30 at 4 23 40 PM"" src=""https://user-images.githubusercontent.com/2212006/77958763-84b65900-72a3-11ea-8103-597bed16fbb7.png"">

The list of special tabs in Chrome available at `chrome://about/` The below URLs are special since they should cause the browser to crash. I could NOT get the crash via CDP though, only `chrome://hang/` was working.

```
For Debug
The following pages are for debugging purposes only. Because they crash or hang the renderer, they're not linked directly; you can type them into the address bar if you need them.

chrome://badcastcrash/
chrome://inducebrowsercrashforrealz/
chrome://crash/
chrome://crashdump/
chrome://kill/
chrome://hang/
chrome://shorthang/
chrome://gpuclean/
chrome://gpucrash/
chrome://gpuhang/
chrome://memory-exhaust/
chrome://memory-pressure-critical/
chrome://memory-pressure-moderate/
chrome://ppapiflashcrash/
chrome://ppapiflashhang/
chrome://quit/
chrome://restart/
```",bug
588171863,Error when opening Cypress in develop branch in Mac - ,"### Current behavior:

When running `yarn start` in Cypress in `develop` branch on my Mac Mojave 10.14.6 - this error always displays and I cannot proceed:

```
execa_1.default.stdout is not a function
```

<img width=""1133"" alt=""Screen Shot 2020-03-26 at 11 58 06 AM"" src=""https://user-images.githubusercontent.com/1271364/77613952-6f1af980-6f5a-11ea-99f1-e877905cf6ac.png"">

It looks like @bahmutov touched this `darwin/utils.js` file in https://github.com/cypress-io/cypress/issues/6013 This may be masking the real error that's not bubbling up.

https://github.com/cypress-io/cypress/pull/6013/files#diff-8196058edd4df324a343fc7abaa81f9b

Looks like `execa` was updated in this PR - this should be noted in the User Changelog of the PR for all dependency updates and *ideally* done in a separate PR so we can isolate the changes of the dep update. 

## Big question

Why didn't our tests catch this??

**Stack trace:**

```
[object Object]
    at mdfind (/Users/jennifer/Dev/cypress/packages/launcher/lib/darwin/util.js:50:10)
    at tryMdFind (/Users/jennifer/Dev/cypress/packages/launcher/lib/darwin/util.js:72:16)
    at Object.findApp (/Users/jennifer/Dev/cypress/packages/launcher/lib/darwin/util.js:79:12)
    at Object.detect (/Users/jennifer/Dev/cypress/packages/launcher/lib/darwin/index.js:93:19)
    at lookup (/Users/jennifer/Dev/cypress/packages/launcher/lib/detect.js:48:19)
    at checkOneBrowser (/Users/jennifer/Dev/cypress/packages/launcher/lib/detect.js:88:12)
    at /Users/jennifer/Dev/cypress/packages/launcher/lib/detect.js:58:20
    at processImmediate (internal/timers.js:439:21)
From previous event:
    at fn (cypress:///./src/lib/ipc-bus.js:108:14)
    at ipcBus (cypress:///./src/lib/ipc-bus.js:127:10)
    at Object.ipc.<computed> [as openProject] (cypress:///./src/lib/ipc.js:29:69)
    at Object.openProject (cypress:///./src/projects/projects-api.js:175:67)
    at Project.componentDidMount (cypress:///./src/project/project.jsx:123:78)
    at commitLifeCycles (cypress:////Users/jennifer/Dev/cypress/node_modules/react-dom/cjs/react-dom.development.js:22101:22)
    at commitLayoutEffects (cypress:////Users/jennifer/Dev/cypress/node_modules/react-dom/cjs/react-dom.development.js:25344:7)
    at HTMLUnknownElement.callCallback (cypress:////Users/jennifer/Dev/cypress/node_modules/react-dom/cjs/react-dom.development.js:336:14)
    at Object.invokeGuardedCallbackDev (cypress:////Users/jennifer/Dev/cypress/node_modules/react-dom/cjs/react-dom.development.js:385:16)
    at invokeGuardedCallback (cypress:////Users/jennifer/Dev/cypress/node_modules/react-dom/cjs/react-dom.development.js:440:31)
    at commitRootImpl (cypress:////Users/jennifer/Dev/cypress/node_modules/react-dom/cjs/react-dom.development.js:25082:9)
    at unstable_runWithPriority (cypress:////Users/jennifer/Dev/cypress/node_modules/scheduler/cjs/scheduler.development.js:697:12)
    at runWithPriority$2 (cypress:////Users/jennifer/Dev/cypress/node_modules/react-dom/cjs/react-dom.development.js:12149:10)
    at commitRoot (cypress:////Users/jennifer/Dev/cypress/node_modules/react-dom/cjs/react-dom.development.js:24922:3)
    at finishSyncRender (cypress:////Users/jennifer/Dev/cypress/node_modules/react-dom/cjs/react-dom.development.js:24329:3)
    at performSyncWorkOnRoot (cypress:////Users/jennifer/Dev/cypress/node_modules/react-dom/cjs/react-dom.development.js:24307:9)
    at eval (cypress:////Users/jennifer/Dev/cypress/node_modules/react-dom/cjs/react-dom.development.js:12199:24)
    at unstable_runWithPriority (cypress:////Users/jennifer/Dev/cypress/node_modules/scheduler/cjs/scheduler.development.js:697:12)
    at runWithPriority$2 (cypress:////Users/jennifer/Dev/cypress/node_modules/react-dom/cjs/react-dom.development.js:12149:10)
```

### Test code to reproduce

- Pull `develop`
- Run `yarn start`

### Versions

- pre-release in `develop`
- Mac Mojave 10.14.6
- Node.js v12.8.1",bug
586806043,`firefoxGcInterval: null` does not work as documented,"### Current behavior:

It says in our docs, to turn off `firefoxGcInterval` for both `runMode` and `openMode`, I can just set the following: https://on.cypress.io/configuration#firefoxGcInterval

```js
{
  ""firefoxGcInterval"": null
}
```

But this throws an error 

<img width=""300"" alt=""Screen Shot 2020-03-24 at 3 37 31 PM"" src=""https://user-images.githubusercontent.com/1271364/77407977-6a810480-6de5-11ea-82bc-3ee1ab308175.png"">


I don't see any indication of this setting ever having worked (tried back to 4.0.2).

Full stack trace:

```
TypeError: intervals is null
    createIntervalGetter/<@https://docs.cypress.io/__cypress/runner/cypress_runner.js:157219:22
    install/<@https://docs.cypress.io/__cypress/runner/cypress_runner.js:157242:30
    listener@https://docs.cypress.io/__cypress/runner/cypress_runner.js:150130:19
From previous event:
    extend/events.emitThen@https://docs.cypress.io/__cypress/runner/cypress_runner.js:150132:22
    extend/events.proxyTo/</parent[fn]@https://docs.cypress.io/__cypress/runner/cypress_runner.js:150082:29
    action@https://docs.cypress.io/__cypress/runner/cypress_runner.js:145451:32
    fire@https://docs.cypress.io/__cypress/runner/cypress_runner.js:151440:18
    testBeforeRunAsync/<@https://docs.cypress.io/__cypress/runner/cypress_runner.js:151450:14
From previous event:
    testBeforeRunAsync@https://docs.cypress.io/__cypress/runner/cypress_runner.js:151448:18
    onRunnableRun@https://docs.cypress.io/__cypress/runner/cypress_runner.js:152462:14
    action@https://docs.cypress.io/__cypress/runner/cypress_runner.js:145442:61
    patchRunnableRun/Runnable.prototype.run@https://docs.cypress.io/__cypress/runner/cypress_runner.js:151262:13
    ../driver/node_modules/mocha/lib/runner.js/</Runner.prototype.runTest@https://docs.cypress.io/__cypress/runner/cypress_runner.js:92961:10
    next/<@https://docs.cypress.io/__cypress/runner/cypress_runner.js:93087:12
    next@https://docs.cypress.io/__cypress/runner/cypress_runner.js:92870:14
    next/<@https://docs.cypress.io/__cypress/runner/cypress_runner.js:92880:11
    next@https://docs.cypress.io/__cypress/runner/cypress_runner.js:92782:14
    ../driver/node_modules/mocha/lib/runner.js/</Runner.prototype.hook/<@https://docs.cypress.io/__cypress/runner/cypress_runner.js:92848:9
    timeslice@https://docs.cypress.io/__cypress/runner/cypress_runner.js:86774:27
```

Looks like a `null` value is not being handled at all here:

https://github.com/cypress-io/cypress/blob/develop/packages/driver/src/util/firefox_forced_gc.ts#L3:L3

### Desired behavior:

Well, the question is - is this a bug in the code or was this just documented wrong. Not sure which requires updating.

### Test code to reproduce

`cypress.json` - open via `cypress open` or `cypress run` in Firefox 72.0.2 

```js
{
  ""firefoxGcInterval"": null
}
```

### Versions

4.0.0+
",bug
586195880,Cannot read property isAttached of undefined,"### Current behavior:
Cypress does *NOT* work for Firefox 75. 

```
  1) Receiving a project-message ""before each"" hook for ""when multiple tabs are open"":
     TypeError: Cannot read property 'isAttached' of undefined

Because this error occurred during a 'before each' hook we are skipping the remaining tests in the current suite: 'Receiving a project-message'
      at /home/etiennebruines/.cache/Cypress/4.2.0/Cypress/resources/app/packages/server/lib/browsers/firefox-util.js:98:20
      at tryCatcher (/home/etiennebruines/.cache/Cypress/4.2.0/Cypress/resources/app/packages/server/node_modules/bluebird/js/release/util.js:16:23)
      at /home/etiennebruines/.cache/Cypress/4.2.0/Cypress/resources/app/packages/server/node_modules/bluebird/js/release/method.js:15:34
      at /home/etiennebruines/.cache/Cypress/4.2.0/Cypress/resources/app/packages/server/lib/browsers/firefox-util.js:227:40
      at tryCatcher (/home/etiennebruines/.cache/Cypress/4.2.0/Cypress/resources/app/packages/server/node_modules/bluebird/js/release/util.js:16:23)
      at Promise._settlePromiseFromHandler (/home/etiennebruines/.cache/Cypress/4.2.0/Cypress/resources/app/packages/server/node_modules/bluebird/js/release/promise.js:547:31)
      at Promise._settlePromise (/home/etiennebruines/.cache/Cypress/4.2.0/Cypress/resources/app/packages/server/node_modules/bluebird/js/release/promise.js:604:18)
      at Promise._settlePromise0 (/home/etiennebruines/.cache/Cypress/4.2.0/Cypress/resources/app/packages/server/node_modules/bluebird/js/release/promise.js:649:10)
      at Promise._settlePromises (/home/etiennebruines/.cache/Cypress/4.2.0/Cypress/resources/app/packages/server/node_modules/bluebird/js/release/promise.js:729:18)
      at _drainQueueStep (/home/etiennebruines/.cache/Cypress/4.2.0/Cypress/resources/app/packages/server/node_modules/bluebird/js/release/async.js:93:12)
      at _drainQueue (/home/etiennebruines/.cache/Cypress/4.2.0/Cypress/resources/app/packages/server/node_modules/bluebird/js/release/async.js:86:9)
      at Async._drainQueues (/home/etiennebruines/.cache/Cypress/4.2.0/Cypress/resources/app/packages/server/node_modules/bluebird/js/release/async.js:102:5)
      at Immediate.Async.drainQueues [as _onImmediate] (/home/etiennebruines/.cache/Cypress/4.2.0/Cypress/resources/app/packages/server/node_modules/bluebird/js/release/async.js:15:14)
      at processImmediate (internal/timers.js:439:21)
```
### Desired behavior:

No errors. 

### Test code to reproduce

*Any* test consisting of more than one `it`-clause. Firefox crashes upon GC collection afterwards. 

Currently there's no Firefox 75-Cypress-docker image available yet, so no forked test was linked. 

Example:
```js
/// <reference types=""cypress"" />
describe('page', () => {
  it('works', () => {
    cy.visit('https://example.cypress.io')
  })
  it('still works', () => {
    cy.visit('https://example.cypress.io')
  })
})
```

### Versions

```
  │ Cypress:    4.2.0                                                                             
  │ Browser:    Custom Firefox Developer Edition 75 (headless)       
 OS: Linux-based
```
",bug
586066723,"Array in environment variables CYPRESS_BLACKLIST_HOSTS, CYPRESS_testFiles not handled correctly","# Current behavior:
Setting multiple hosts via the environment variable `CYPRESS_BLACKLIST_HOSTS` as an array leads to them not picked up corretly.

Example:

```bash
export CYPRESS_BLACKLIST_HOSTS=[""www.google-analytics.com"",""*.hotjar.com""]
```

The environment variable is always handled as a string

### Desired behavior:
The desired behavior is to analyze if an array was provided and handled each item separately.

### Test code to reproduce
```bash
export CYPRESS_BLACKLIST_HOSTS=[""www.google-analytics.com"",""*.hotjar.com""]

cypress open
```

### Versions
<!-- Cypress, operating system, browser -->
Node.js Version 12.8.1
Cypress Version 4.1.0

",bug
585980151,Unable to install cypress - error ENOENT during postinstall,"Cypress 3.8.3, 4.2.0 can not be installed on Windows 10.

### Current behavior:

```npm install cypress --save-dev

npm WARN deprecated mkdirp@0.5.1: Legacy versions of mkdirp are no longer supported. Please update to mkdirp 1.x. (Note that the API surface has changed to use Promises in 1.x.)

> cypress@4.2.0 postinstall c:\dev\cyp-test\node_modules\cypress
> node index.js --exec install

npm WARN rollback Rolling back strip-ansi@4.0.0 failed (this is probably harmless): EPERM: operation not permitted, lstat 'c:\dev\cyp-test\node_modules\wrap-ansi\node_modules'
npm WARN cyp-test@1.0.0 No description
npm WARN cyp-test@1.0.0 No repository field.

npm ERR! code ELIFECYCLE
npm ERR! syscall spawn =
npm ERR! file =
npm ERR! path =
npm ERR! errno ENOENT
npm ERR! cypress@4.2.0 postinstall: `node index.js --exec install`
npm ERR! spawn = ENOENT
npm ERR!
npm ERR! Failed at the cypress@4.2.0 postinstall script.
npm ERR! This is probably not a problem with npm. There is likely additional logging output above.

npm ERR! A complete log of this run can be found in:
npm ERR!     C:\Users\R\AppData\Roaming\npm-cache\_logs\2020-03-23T06_52_30_322Z-debug.log
```

Logs:

```5346 warn cyp-test@1.0.0 No description
5347 warn cyp-test@1.0.0 No repository field.
5348 verbose stack Error: cypress@4.2.0 postinstall: `node index.js --exec install`
5348 verbose stack spawn = ENOENT
5348 verbose stack     at Process.ChildProcess._handle.onexit (internal/child_process.js:267:19)
5348 verbose stack     at onErrorNT (internal/child_process.js:469:16)
5348 verbose stack     at processTicksAndRejections (internal/process/task_queues.js:84:21)
5349 verbose pkgid cypress@4.2.0
5350 verbose cwd c:\dev\cyp-test
5351 verbose Windows_NT 10.0.18362
5352 verbose argv ""C:\\apps\\nodejs\\node.exe"" ""C:\\Users\\R\\AppData\\Roaming\\npm\\node_modules\\npm\\bin\\npm-cli.js"" ""install"" ""cypress"" ""--save-dev""
5353 verbose node v12.16.1
5354 verbose npm  v6.14.3
5355 error code ELIFECYCLE
5356 error syscall spawn =
5357 error file =
5358 error path =
5359 error errno ENOENT
5360 error cypress@4.2.0 postinstall: `node index.js --exec install`
5360 error spawn = ENOENT
5361 error Failed at the cypress@4.2.0 postinstall script.
5361 error This is probably not a problem with npm. There is likely additional logging output above.
5362 verbose exit [ 1, true ]
```

### Desired behavior:

Cypress gets installed without error.

### Test code to reproduce

npm init
npm install cypress --save-dev

### Versions

npm-version: 6.14.3
node-version: v12.16.1
OS: Windows 10 (Windows_NT 10.0.18362)",bug
584198697,Tests slow down over time when performing several XHR requests calls in single test,"### Current behavior:

Typing into several inputs in a single test where there are XHR requests that goes out during each keypress event - like `keyup` or similar - causes the tests to slow down over time.

The network request responses do not seem to be responding any slower over time. 

This slowness does *not* occur if you split up the typing across several tests. 

### Desired behavior:

Performance of running tests should stay the same over time

### Test code to reproduce

#### ❗️ Looping through input in a single test

Causes slowdown - maybe because we are saving a lot of XHR request data for every command

`spec.js`

```js
it(""test1"", () => {
  cy.visit('index.html')
  for (var i = 0; i < 100; i++) {
    cy.get('input').type('test no animations long test case') 
    cy.get('input').clear()
  }
})
```

`index.html`

```html
<html>
<body>
<input />
<script src=""https://ajax.googleapis.com/ajax/libs/jquery/3.1.0/jquery.min.js""></script>
<script>
    $(() => {
    $('input').on('keyup', (e) => {
        $.ajax({
        url: 'https://jsonplaceholder.cypress.io/comments',
        method: 'POST',
        data: {
          name: 'Using POST in cy.route()',
          email: 'hello@cypress.io',
          body: 'You can change the method used for cy.route() to be GET, POST, PUT, PATCH, or DELETE',
        },
        })
    })
    });
</script>
</body>
</html>
```

<img width=""825"" alt=""Screen Shot 2020-03-19 at 12 33 04 PM"" src=""https://user-images.githubusercontent.com/1271364/77038698-ce20c180-69e2-11ea-82a6-17b1cefc41e3.png"">

Starting to slow down

![](http://g.recordit.co/ZNw49h8e0f.gif)

Now really slow towards the end

![](http://g.recordit.co/fYVNe8rUpu.gif)

#### ❗️ Looping through clicking button in a single test

The slowness is not isolated to the `.type()` command

`spec.js`

```js
it(""test1"", () => {
  cy.visit('index.html')
  for (var i = 0; i < 1000; i++) {
    cy.get('button').click()
  }
})
```

`index.html`

```html
<html>
<body>
<button />
<script src=""https://ajax.googleapis.com/ajax/libs/jquery/3.1.0/jquery.min.js""></script>
<script>
    $(() => {
    $('button').on('click', (e) => {
        $.ajax({
        url: 'https://jsonplaceholder.cypress.io/comments',
        method: 'POST',
        data: {
          name: 'Using POST in cy.route()',
          email: 'hello@cypress.io',
          body: 'You can change the method used for cy.route() to be GET, POST, PUT, PATCH, or DELETE',
        },
        })
    })
    });
</script>
</body>
</html>
```

![](http://g.recordit.co/j79pHhHjbN.gif)

#### ✅ Looping through input over different tests

**No slowdown** - even with `numTestsMemory` kept at `50`.

```js
describe(""Testing"", () => {
  Array(100).fill(0).forEach((val, i) => {
    it(`test ${i}`, () => {
      cy.visit('index.html')
      cy.get('input').type('test no animations long test case')
      cy.get('input').clear()
    })
  })
})
```

<img width=""822"" alt=""Screen Shot 2020-03-19 at 1 06 01 PM"" src=""https://user-images.githubusercontent.com/1271364/77038689-c82ae080-69e2-11ea-8381-7143d8c5937e.png"">


#### ✅ Looping through input without XHR requests

**No slowdown**

`spec.js`

```js
it(""test1"", () => {
  cy.visit('index.html')
  for (var i = 0; i < 100; i++) {
    cy.get('input').type('test no animations long test case') 
    cy.get('input').clear()
  }
})
```

`index.html`

```html
<html>
<body>
<input />
</body>
</html>
```
### Versions

4.2.0 - tried to track this down to some regression in earlier version, but couldn't find any correlation.
",bug
583114274,react-app presets in babel configuration throw error because missing `NODE_ENV` or `BABEL_ENV` environment variables,"### Current behavior:

All tests fail after updating to 4.2.0

### Desired behavior:

Tests should run as they did on 4.1.0

### Error message

```
Oops...we found an error preparing this test file:
  /home/travis/build/$PROJECT/cypress/integration/$FILE.spec.js

The error was:

Error: [BABEL] /home/travis/build/$PROJECT/cypress/integration/$FILE.spec.js: Using `babel-preset-react-app` requires that you specify `NODE_ENV` or `BABEL_ENV` environment variables. Valid values are ""development"", ""test"", and ""production"". Instead, received: undefined. (While processing: ""/home/travis/build/$PROJECT/node_modules/babel-preset-react-app/index.js"") while parsing file: /home/travis/build/$PROJECT/cypress/integration/$FILE.spec.js

This occurred while Cypress was compiling and bundling your test code. This is usually caused by:

- A missing file or dependency
- A syntax error in the file or one of its dependencies

Fix the error in your code and re-run your tests.
```

### Versions

Cypress 4.2.0
Browser: Chrome
Application: CRA
Environment: Travis and Ubuntu 18.04

### Additional information

The issue resolves if pinning version to v4.1.0, but re-appears updating to latest (4.2.0).

Dependencies:

```
    ""react"": ""16.13.0"",
    ""react-dom"": ""16.13.0"",
    ""react-scripts"": ""3.4.0"",
    ""@babel/core"": ""7.8.7"",
    ""@babel/preset-typescript"": ""7.8.3"",
    ""eslint-plugin-react"": ""7.19.0"",
    ""eslint-config-react-app"": ""5.2.0"",
    ""eslint-plugin-cypress"": ""2.10.3"",
```
",bug
580644649,cy.exec does not work on Shippable CI when using our cypress/base image,"When using `cypress/base:12.16.1` image on ShippableCI `cy.exec` gives the following error

Cypress v4.1.0
Linux Debian

```
/bin/bash: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8)' to be empty
```",bug
579717865,Timed out retrying: Maximum call stack exceeded when typing into Salesforce Lightning Components,"### Current behavior:

When attempting to type into certain elements from Salesforce lightning components, an error is thrown like below:

```
CypressError: Timed out retrying: Maximum call stack size exceeded
```

<img width=""555"" alt=""Screen Shot 2020-03-12 at 12 43 29 PM"" src=""https://user-images.githubusercontent.com/1271364/76492859-9ef8d600-645f-11ea-9640-6d6642ad124f.png"">


Similar to previous issue that was resolved in 4.1.0 when doing visibility checks on elements - likely we are naively doing another check during type that is not considering the shape of elements generated in Salesforce Lightning Web Components https://github.com/cypress-io/cypress/issues/4373

### Desired behavior:

Should not throw Max call stack error

### Test code to reproduce

Pending

### Versions

Cypress 4.1.0
",bug
578820330,Cypress hangs during execution of test suite,"<!-- Is this a question? Questions WILL BE CLOSED. Ask in our chat https://on.cypress.io/chat  -->

### Current behavior:
During a test run Cypress hangs and never exit, it doesn't print anything in the stdout while it's blocked.

From the DEBUG log can be seen that it goes in a kind of loop and prints `cypress:server:util:process_profiler current & mean memory and CPU usage by process group` every 10 seconds until is terminated by the CI timeout

### Desired behavior:

Cypress doesn't hang and instead fails if something goes wrong.

### Test code to reproduce

It's not happening 100% of the times so I don't know what's the root cause, however I've attached a debug log

### Versions

Cypress 4.0.2 -  Chrome 78/Firefox 70.0.1 - Unix
[executionLogRedacted.txt](https://github.com/cypress-io/cypress/files/4314425/executionLogRedacted.txt)
",bug
577652514,type / submit in Cypress not triggering HTML validation on elements,"### Current behavior:

Not finding invalid elements, whether by:

1. `cy.get('<selector>:invalid')`

```js
cy.get('[data-name=""name""]:invalid').should('have.length', 1);
```

2. `validity` property

```js
cy.get('[data-name=""name""]').then(($input) => {
  return expect($input[0].validity.tooShort).to.be.true;
});
```

### Desired behavior:

Correctly indicate that the element is indeed invalid (so that assertions can be based on this).

### Test code to reproduce

These tests both fail in showing any problems with invalidity, despite the HTML element being queried having  `minlength` attribute of 3 and our test typing only a single letter (""a""):

```js
it('should catch invalid element by pseudo-selector', () => {
    cy.visit('http://localhost:8000/');
    const tooShortOfAName = 'a';
    cy.get('[data-name=""name""]').type(tooShortOfAName);

    // Fails with or without a form click
    // cy.get('[data-name=""action2""]').click();

    // Fails here
    cy.get('[data-name=""name""]:invalid').should('have.length', 1);
  })

  it('should catch invalid element by JS API', function () {
    cy.visit('http://localhost:8000/');
    const tooShortOfAName = 'a';
    cy.get('[data-name=""name""]').type(tooShortOfAName);

    // Fails with or without a form click
    // cy.get('[data-name=""action2""]').click();

    // Fails here
    cy.get('[data-name=""name""]').then(($input) => {
      return expect($input[0].validity.tooShort).to.be.true;
    });
  });
```

<!-- You can fork https://github.com/cypress-io/cypress-test-tiny repo, set up a failing test, then link to your fork -->

Here's the minimal repo to reproduce: (note that I've added a cypress install as I think you may want to do in your boilerplate also since your docs refer to installing cypress locally)

https://github.com/brettz9/cypress-test-tiny/tree/not-getting-invalidity

(i.e., on the `not-getting-invalidity` branch)

<details>
  <summary>Outdated info</summary>
I've also tacked on an environmental variable test (same as #2605 ?)

```js
it('should obtain environmental variables', function () {
  cy.log(Cypress.env('secret'))
  expect(Cypress.env('secret')).to.equal('Be good');
});
```

...which is not *consistently* getting the `secret` despite it being set in `plugins/index.js`

```js
module.exports = (on, config) => {
  config.env = config.env || {};
  config.env.secret = 'Be good';
  return config;
);
```

...consistent with the approach described for dynamically setting the environmental variables at https://docs.cypress.io/api/plugins/configuration-api.html#Switch-between-multiple-configuration-files or https://docs.cypress.io/api/cypress-api/env.html#From-a-plugin.
</details>

### Versions

<!-- Cypress, operating system, browser -->

4.1.0, Mac OSX 10.15.2, Chrome 80.0.3987.132 (Official Build) (64-bit)",bug
577476198,`position: fixed` elements having parent with `pointer-events: none` mistakenly display as not visible / covered by another el,"<!-- Is this a question? Questions WILL BE CLOSED. Ask in our chat https://on.cypress.io/chat  -->

### Current behavior:
Hi, 
Currently, when testing out the visibility of `.spinner` for [nprogress](https://ricostacruz.com/nprogress/), it shows as being not visible due to the position being fixed although the spinning circle loader is certainly visible on the page. I'm aware of the complexity of the current algorithm used to determine visibility so I thought this might help give a simple, reproducible example of where this may (if I'm understanding correctly) fail. It says that it's being covered by the html wrapper itself, but the element has a z-index set to 1031.

![](https://user-images.githubusercontent.com/8664074/76160875-d849e280-60fb-11ea-8079-960dfaa4fdc2.png)

<!-- A description including screenshots, stack traces, DEBUG logs, etc -->

### Desired behavior:
It should be considered visible as it's not being covered by any element in the DOM.

<!-- A clear description of what you want to happen -->

### Test code to reproduce
https://github.com/josh-byster/cypress-visibility

There is a `visibility.spec.js` which has a basic assertion of visibility in there that should show the issue.
If there's any trouble with reproducibility, it can probably be tested directly at the [nprogress website](https://ricostacruz.com/nprogress/) to check if the spinner is visible.
<!-- If we cannot fully run the tests as provided the issue WILL BE CLOSED -->
<!-- Issues without a reproducible example WILL BE CLOSED -->

<!-- You can fork https://github.com/cypress-io/cypress-test-tiny repo, set up a failing test, then link to your fork -->

### Versions
<!-- Cypress, operating system, browser -->
Cypress 4.1.0
Mac OS X Catalina 10.15.3

",bug
576162190,Not able to use cypress image snapshot plugin and rename image at a time,"<!-- Is this a question? Questions WILL BE CLOSED. Ask in our chat https://on.cypress.io/chat  -->

### Current behavior:
I have renamed images by following the logic give by you
https://on.cypress.io/after-screenshot-api#Usage

but when i use renaming code with cypress-image-snapshot plugin, its not working properly
Eg: 

### `plugins/index.js`

```js
const fs = require('fs');
const path = require('path');
const { addMatchImageSnapshotPlugin } = require('cypress-image-snapshot/plugin');
const _ = require('lodash');
const getImageName = require('../fixtures/common-functions').getImageName;

module.exports = (on, config) => {
  // `on` is used to hook into various events Cypress emits
  on('after:screenshot', (details) => {
    if (details.testFailure) {
      let folders = details.specName.split('\\');
      let pathArray = details.path.split('\\');
      let imageName = getImageName(true, pathArray[pathArray.length - 1])
      const newPath = path.resolve(__dirname, `../reports/mochawesome-report/reporter-assets/${folders[0]}/${folders[1]}/${imageName}`)
      fs.renameSync(details.path, newPath)
      return { path: newPath }
    }
  })
  addMatchImageSnapshotPlugin(on, config);
}
```

### note: 

Here `addMatchImageSnapshotPlugin(on,config)` is related to cypress image snapshot plugin

### case 1) 

If i keep cypress image snapshot plugin above renaming code then facing 

```
Error: Image was NaN% different from saved snapshot with undefined different pixels. See diff for details: undefined issue
```

### case 2) 

If i keep cypress image snapshot plugin below renaming code then renaming is not working
<!-- A description including screenshots, stack traces, DEBUG logs, etc -->

### Desired behavior:

Both should work simultaneously without any issue
<!-- A clear description of what you want to happen -->

### Versions
```js
  ""dependencies"": {
    ""cypress"": ""^3.8.3"",
    ""cypress-image-snapshot"": ""^3.1.1""
  }
```
<!-- Cypress, operating system, browser -->
",bug
574793224,Issue with `cy.request` and cookies,"### Current behavior:
Cookies received in response to `cy.request()` call, with a Domain value set to the parent domain of the target domain, are not being sent in subsequent `cy.request()` or `cy.visit()` calls.
This started happening with Cypress 3.5.0 and it's still happening with newer 4.x versions

**First `cy.request()` sets the cookie:**
![Screenshot from 2020-03-03 16-27-13](https://user-images.githubusercontent.com/20822057/75796727-fdd99380-5d6b-11ea-97e2-cfa2f1830b5d.png)

**Second `cy.request()` doesn't send the cookie:**
![Screenshot from 2020-03-03 16-27-26](https://user-images.githubusercontent.com/20822057/75796765-08942880-5d6c-11ea-9549-6f5d594ca089.png)


### Desired behavior:

The cookies should be sent, like it is doing with Cypress 3.4.1

### Test code to reproduce

https://github.com/vfernandestoptal/cypress-broken-cookies

### Versions
Manjaro Linux kernel 5.5.6-1
Cypress 3.5.0 and higher
Chrome Version 80.0.3987.122 (Official Build) (64-bit)

",bug
574295988,Rerunning spec in open mode hangs with after hook,"In open mode, if you click the stop/restart button or update your spec code, sometimes the rerun test run will hang on the first test and show all tests as queued:

![image](https://user-images.githubusercontent.com/14625260/75724789-1cc52080-5cad-11ea-8bf4-2ed48489b18b.png)


this happens if you have an after hook, which ends up causing an uncaught exception in the console (only with debug logs enabled: `localStorage.debug = 'cypress:*'`)

```js
 listeners - with args: Uncaught Error: runnable must have an id
```
![20-03-03_10:39::24](https://user-images.githubusercontent.com/14625260/75792112-7ecc6700-5d3b-11ea-8ee3-f378653b8e82.png)



",bug
571634741,Race condition when there's an asynchronous error in plugins file,"<!-- Is this a question? Questions WILL BE CLOSED. Ask in our chat https://on.cypress.io/chat  -->

### Current behavior:

It's possible for certain errors to be uncaught in the plugins process. If the error occurs soon after we create the plugins process and is asynchronous, it will not be caught. Such an error should cause the main Cypress process to fail, but it does not.

### Desired behavior:

Any errors thrown in the plugins process should fail the main Cypress process.

### Test code to reproduce

Add this to the plugins file and run a simple test:

```javascript
setTimeout(() => {
  throw new Error('Root async error from plugins file')
})

module.exports = () => {}
```

Since it's a race condition, the issue might not always occur and the error will be properly displayed. But it will reproduce the issue if run a few times.

### Versions

Cypress: 4.0.2
OS: MacOS 10.14.6
Browser: Any
",bug
571572799,Downgrade CLI chalk dependency to install on Node v8.0.0,"Similar to #6512 (execa), chalk also seems to require Node v8+ and does not install on Node v8.0.0

- https://circleci.com/gh/cypress-io/cypress-test-node-versions/10425

```
npm WARN deprecated request@2.88.0: request has been deprecated, see https://github.com/request/request/issues/3142

> cypress@4.0.3 postinstall /home/node/app/node_modules/cypress
> node index.js --exec install

/home/node/app/node_modules/cypress/node_modules/chalk/source/index.js:103
	...styles,
	^^^

SyntaxError: Unexpected token ...
    at createScript (vm.js:74:10)
    at Object.runInThisContext (vm.js:116:10)
    at Module._compile (module.js:533:28)
    at Object.Module._extensions..js (module.js:580:10)
    at Module.load (module.js:503:32)
    at tryModuleLoad (module.js:466:12)
    at Function.Module._load (module.js:458:3)
    at Module.require (module.js:513:17)
    at require (internal/module.js:11:18)
    at Object.<anonymous> (/home/node/app/node_modules/cypress/lib/util.js:22:13)
```",bug
570089339,ProjectId passed via --config flag pulls to configuration settings in Test Runner but is not used for --record,"<!-- Is this a question? Questions WILL BE CLOSED. Ask in our chat https://on.cypress.io/chat  -->

### Current behavior:

When running `cypress open --config projectId=<PROJECT ID>`, the passed project Id is pulled in and displayed in the Project Settings in the Test Runner, overwriting the value in the configuration file.

<img width=""839"" alt=""Screen Shot 2020-02-24 at 2 09 49 PM"" src=""https://user-images.githubusercontent.com/60482585/75183868-6217aa00-5711-11ea-8d47-93fd6436d739.png"">

However, when running `cypress run --record --config projectId=<PROJECT ID> --key <KEY>`, the passed projectId in the configuration file is NOT overwritten, and the test does not run due to incorrect key.

<img width=""957"" alt=""Screen Shot 2020-02-24 at 2 03 17 PM"" src=""https://user-images.githubusercontent.com/60482585/75184324-35b05d80-5712-11ea-8459-e46ba0a5cc39.png"">


### Desired behavior:

<!-- A clear description of what you want to happen -->

ProjectId is not a documented option to the `--config/-c` flag, but behavior should be consistent on whether it is accepted or not.

### Test code to reproduce

<!-- If we cannot fully run the tests as provided the issue WILL BE CLOSED -->
<!-- Issues without a reproducible example WILL BE CLOSED -->

<!-- You can fork https://github.com/cypress-io/cypress-test-tiny repo, set up a failing test, then link to your fork -->

Run `cypress open --config projectId=<OTHER PROJECT ID>` with any value other than what is in the configuration file. The passed value will appear in the Test Runner settings under Project Id.

To recreate the recording issue, run `cypress run --record --config projectId=<OTHER PROJECT ID> key <KEY FOR OTHER PROJECT ID>` and an error will output that <KEY FOR OTHER PROJECT ID> does not match with the project Id in the configuration file.

### Versions

<!-- Cypress, operating system, browser -->

4.0.2
macOS 10.15.3
",bug
569702414,"Cypress run won’t finish, stuck while making connection to Chrome","### Current behavior:

I’m getting error: `Cypress failed to make a connection to the Chrome DevTools Protocol after retrying` during my tests. Usually happens during one of last tests (probably the last). I have multiple Cypress projects, happens on all of them. Tests are running in parallel, on Chrome.

### Test code to reproduce

Issue happens quite randomly, I’m sorry, but I cannot really give a reproducible example, since this happens in CI only. Sending screenshots.

<img width=""953"" alt=""Snímka obrazovky 2020-02-24 o 9 24 54"" src=""https://user-images.githubusercontent.com/23213553/75137296-8a8aae80-56e7-11ea-955e-1a14004017a3.png"">
<img width=""945"" alt=""Snímka obrazovky 2020-02-24 o 9 24 46"" src=""https://user-images.githubusercontent.com/23213553/75137304-8d859f00-56e7-11ea-8860-6c6f521a9d89.png"">

### Versions
Cypress 4.0.2
CI: Bitbucket Pipelines
Image: cypress/browsers:node13.6.0-chrome80-ff72
",bug
568942052,"When including zepto library, zepto object is passed as remote jQuery instead of expected Cypress jQuery to use for chaining.","I'm using cypress v4.0.2, and here is a snip of my test code:
```javascript
cy.get('div[data-component-data-id=301602] h2:first')
  .should(($el) => {
    expect($el).to.have.text('dress')
  })
```

and cypress complains about the assertion:
```
CypressError: Timed out retrying: You attempted to make a chai-jQuery assertion on an object that is neither a DOM object or a jQuery object.

The chai-jQuery assertion you used was:

  > text

The invalid subject you asserted on was:

  > Object{3}

To use chai-jQuery assertions your subject must be valid.

This can sometimes happen if a previous assertion changed the subject.
```

So I have to change `expect($el).to.have.text('dress')` to `expect($el[0]).to.have.text('dress')`, then the complain dismissed and test passed.

I debug the assertion a bit, turns out `$el[0]` is also a jquery element.

I also print `$el` and `$el[0]` to the console:

<img width=""785"" alt=""image"" src=""https://user-images.githubusercontent.com/12708534/75036433-c9084980-54ec-11ea-9924-c33cdf12d671.png"">

**Isn't `cy.get` equivalent to jquery $? Why should I have to get the first element from $el?**
",bug
568665543,Re-running a build in Codeship does not generate new Dashboard run,"### Current behavior:

Cypress tests running on Codeship and recorded to the Dashboard with multiple pipelines (with `cypress run --parallel`) are skipped if the Codeship build is restarted. This means that even if there are failing Cypress tests in the first build run, the second test command (`cypress run`) returns a success code during the second build run. This results in the failing code to be deployed as per our CI logic.

### Desired behavior:

Cypress dashboard should detect that the second run and re-run all the tests, returning an appropriate success/failure code.

### Versions

Cypress v4.

### Note
This is similar to #6450, except for Codeship. There are no known workarounds, and not even a way forward as of now, as per Cypress support. But I thought I'd add a bug ticket just to flag this as an ongoing issue.
",bug
568122712,Error when installing cypress using Node.js version < 8.12.0,"### Current behavior:

When installing Cypress with Node.js version less than 8.12.0 install is prevented by the following errors.

`yarn`

Warning you are not on compatible engine

```
error execa@3.3.0: The engine ""node"" is incompatible with this module. Expected version ""^8.12.0 || >=9.7.0"". Got ""8.0.0""
error Found incompatible module.
```

`npm install`

Even more cryptic - there's just an execa error

```
 npm i --save-dev cypress

> cypress@4.0.2 postinstall /Users/jennifer/Dev/cypress-transform-test/node_modules/cypress
> node index.js --exec install

/Users/jennifer/Dev/cypress-transform-test/node_modules/execa/index.js:18
	const env = extendEnv ? {...process.env, ...envOption} : envOption;
	                         ^^^

SyntaxError: Unexpected token ...
    at createScript (vm.js:74:10)
    at Object.runInThisContext (vm.js:116:10)
    at Module._compile (module.js:533:28)
    at Object.Module._extensions..js (module.js:580:10)
    at Module.load (module.js:503:32)
    at tryModuleLoad (module.js:466:12)
    at Function.Module._load (module.js:458:3)
    at Module.require (module.js:513:17)
    at require (internal/module.js:11:18)
    at Object.<anonymous> (/Users/jennifer/Dev/cypress-transform-test/node_modules/cypress/lib/util.js:18:13)
```

### Desired behavior:

Cypress install [should support Node.js 8+ as of 4.0.0](https://on.cypress.io/migration-guide#Node-js-8-support), so should support an install with Node.js versions as low as 8.0.0

### Why

Execa introduced this breaking change (a fix for a change that should have gone in their 2.0.0 release I guess) without actually noting it as a breaking change., requiring at least Node.js 8.12.0 in their 2.0.1 release.

**Execa 2.0.1 release notes:** https://github.com/sindresorhus/execa/releases/tag/v2.0.1

You can see this change by diffing the package.json from the releases

- execa 2.0.0 package.json https://github.com/sindresorhus/execa/commit/ec10a4c7b5732edb76e7a20e29ffa3996bcde80a#diff-b9cfc7f2cdf78a7f4b91a753d10865a2
- execa 2.0.1 package.json https://github.com/sindresorhus/execa/commit/97ef87d5d30542041d69cb4942bc10f98fc7579c#diff-b9cfc7f2cdf78a7f4b91a753d10865a2

### Code required

We should revert execa dep in the cli back down to 2.0.0.

### Versions

Cypress 4.0.0
",bug
566115861,Can't log/intercept/mock requests when document-domain is disabled by Feature Policy,"### Current behavior:

I have a site running on https, its server serving resources with the `Feature Policy` header `document-domain` directive set to `none`

```
Feature Policy: document-domain 'none'
```

As expected, not setting 

```json
""chromeWebSecurity"": false
```
in cypress.json will result in Cypress failing to even reaching the site

<img width=""917"" alt=""1"" src=""https://user-images.githubusercontent.com/6400898/74632943-d2965800-5160-11ea-89ae-4ccfc1c9e742.png"">

If I set `chromeWebSecurity` to `true`, Cypress will be able to reach and perform actions on the site (in this case, logging in), but

1. In the console I can still see an error being thrown about `document.domain` being disabled by the `Feature Policy`
2. no XHR requests are being logged on the test runner
3. most importantly, no XHR requests get intercepted by `cy.route()`, meaning that it's impossible to wait for them, or inspect their response, or mock their response

<img width=""913"" alt=""3"" src=""https://user-images.githubusercontent.com/6400898/74633060-1b4e1100-5161-11ea-813b-dbdf09c7a743.png"">

If I get rid of the `document-domain` directive, then the error is gone and the XHR requests are getting logged and intercepted as expected

<img width=""910"" alt=""4"" src=""https://user-images.githubusercontent.com/6400898/74633676-703e5700-5162-11ea-92f2-5c95e2284b35.png"">

### Desired behavior:

The desired behaviour would be that setting

```
""chromeWebSecurity"": false
```

would bypass the `document-domain: none` directive

### Versions

cypress: 4.0.2
OS: macOS Catalina 10.15.3
browser: Chrome 80",bug
562521212,Cypress could not connect to Firefox. `Error: cannot open socket` displayed at beginning of running spec,"When running cypress with options '--headless --browser firefox', cypress halts **at the start of the second spec** with message: 

```
Cypress could not connect to Firefox.

An unexpected error was received from Marionette connection:

Error: cannot open socket

To avoid this error, ensure sure that there are no other instances of Firefox launched by Cypress running.
```

This blocks running all specs in 'run' mode
Windows 10, Firefox version 72 (64 bit)

",bug
562432222,Cypress `--browser` option not working on Windows when given a `path` argument,"### Current behavior:

im running the following command after updating cyrpess to 4.0.1 
npm run cypress --browser c:\Users\amrka\appData\local\Mozilla Fireforx\firefox.exe
but still unable to see firefix among the list of browser in cypress

part of the log 

C:\Users\amrka\Desktop\ATT MNC\mc-testing-framework>npm run cypress --browser c:\Users\amrka\appData\local\Mozilla Fireforx\firefox.exe

> mc-testing-framework@1.0.0 cypress C:\Users\amrka\Desktop\ATT MNC\mc-testing-framework
> cypress open ""Fireforx\firefox.exe""

![image](https://user-images.githubusercontent.com/32042806/74137614-6cee1d00-4bf0-11ea-9e7d-b2fed45e17cd.png)



### Desired behavior:

I should be able to see firefox among browser list in cypress

### Versions

Firefox",bug
562395651,Still cannot open Firefox in 4.0.1 on MacOS,"### Current behavior:

I downloaded 4.0.1. Initially I got what looked like the weird new tab issue like [the issue before](https://github.com/cypress-io/cypress/issues/6356#issuecomment-583248699) (without the `on` error) :

<img width=""587"" alt=""Screen Shot 2020-02-10 at 2 40 28 PM"" src=""https://user-images.githubusercontent.com/1271364/74131687-4d1c2080-4c13-11ea-89a5-fafe03471496.png"">

So then I just closed the browser and then I got this error. 

```
Cypress could not connect to Firefox.

An unexpected error was received from Marionette connection:

Error: cannot open socket

To avoid this error, ensure sure that there are no other instances of Firefox launched by Cypress running.
```

<img width=""802"" alt=""Screen Shot 2020-02-10 at 2 35 18 PM"" src=""https://user-images.githubusercontent.com/1271364/74131711-5ad1a600-4c13-11ea-988c-52c0761cef5b.png"">

So I'm like...ok...I hit 'Try Again', it loads the specs back up, but when I click the spec file I get this popup. 

<img width=""541"" alt=""Screen Shot 2020-02-10 at 2 36 20 PM"" src=""https://user-images.githubusercontent.com/1271364/74131756-7341c080-4c13-11ea-8af3-dbf71ac50417.png"">

If I click Quit, basically nothing happens, so then I was like, ok...let's create a new profile I guess. So now it launching Cypress with the 'orange striped bar' and this displaying in the second tab. 

<img width=""1281"" alt=""Screen Shot 2020-02-10 at 2 39 26 PM"" src=""https://user-images.githubusercontent.com/1271364/74131813-910f2580-4c13-11ea-84f2-f6b96b6efead.png"">

### Desired behavior:

Can y'all please verify that Firefox runs on my machine before the next release 😅 I can't debug other people's issues without being able to run Firefox.

### Test code to reproduce

`cypress open` or `cypress run` on MacOS Mojave 10.14.6

Debug logs at time of choosing Firefox browser

```
  cypress:server:open_project launching browser: { channel: 'stable', displayName: 'Firefox', family: 'firefox', info: 'Firefox support is currently in beta! You can help us continue to improve the Cypress + Firefox experience by [reporting any issues you find](https://on.cypress.io/new-issue).', isChosen: true, majorVersion: 72, name: 'firefox', path: '/Applications/Firefox.app/Contents/MacOS/firefox-bin', version: '72.0.2', isHeaded: true, isHeadless: false }, spec: cypress/integration/spec.js +2ms
  cypress:server:browsers getBrowserLauncher { browser: { channel: 'stable', displayName: 'Firefox', family: 'firefox', info: 'Firefox support is currently in beta! You can help us continue to improve the Cypress + Firefox experience by [reporting any issues you find](https://on.cypress.io/new-issue).', isChosen: true, majorVersion: 72, name: 'firefox', path: '/Applications/Firefox.app/Contents/MacOS/firefox-bin', version: '72.0.2', isHeaded: true, isHeadless: false } } +2s
  cypress:server:browsers opening browser { channel: 'stable', displayName: 'Firefox', family: 'firefox', info: 'Firefox support is currently in beta! You can help us continue to improve the Cypress + Firefox experience by [reporting any issues you find](https://on.cypress.io/new-issue).', isChosen: true, majorVersion: 72, name: 'firefox', path: '/Applications/Firefox.app/Contents/MacOS/firefox-bin', version: '72.0.2', isHeaded: true, isHeadless: false } +131ms
  cypress:server:browsers:firefox firefox open { projectRoot: '/Users/jennifer/Dev/cypress-transform-test', onBrowserOpen: [Function: onBrowserOpen], onBrowserClose: [Function], browsers: [ { name: 'chrome', family: 'chromium', channel: 'stable', displayName: 'Chrome', version: '80.0.3987.87', path: '/Applications/Google Chrome.app/Contents/MacOS/Google Chrome', majorVersion: 80 }, { name: 'chromium', family: 'chromium', channel: 'stable', displayName: 'Chromium', version: '78.0.3904.0', path: '/Applications/Chromium.app/Contents/MacOS/Chromium', majorVersion: 78 }, { name: 'chrome', family: 'chromium', channel: 'canary', displayName: 'Canary', version: '82.0.4053.0', path: '/Applications/Google Chrome Canary.app/Contents/MacOS/Google Chrome Canary', majorVersion: 82 }, { name: 'firefox', family: 'firefox', channel: 'stable', displayName: 'Firefox', version: '72.0.2', path: '/Applications/Firefox.app/Contents/MacOS/firefox-bin', info: 'Firefox support is currently in beta! You can help us continue to improve the Cypress + Firefox experience by [reporting any issues you find](https://on.cypress.io/new-issue).', majorVersion: 72 }, { name: 'firefox', family: 'firefox', channel: 'dev', displayName: 'Firefox Developer Edition', version: '73.0', path: '/Applications/Firefox Developer Edition.app/Contents/MacOS/firefox-bin', info: 'Firefox support is currently in beta! You can help us continue to improve the Cypress + Firefox experience by [reporting any issues you find](https://on.cypress.io/new-issue).', majorVersion: 73 }, { name: 'edge', family: 'chromium', channel: 'stable', displayName: 'Edge', version: '80.0.361.48', path: '/Applications/Microsoft Edge.app/Contents/MacOS/Microsoft Edge', majorVersion: 80 }, { name: 'edge', family: 'chromium', channel: 'canary', displayName: 'Edge Canary', version: '82.0.418.0', path: '/Applications/Microsoft Edge Canary.app/Contents/MacOS/Microsoft Edge Canary', majorVersion: 82 }, { name: 'edge', family: 'chromium', channel: 'dev', displayName: 'Edge Dev', version: '81.0.410.1', path: '/Applications/Microsoft Edge Dev.app/Contents/MacOS/Microsoft Edge Dev', majorVersion: 81 }, { name: 'electron', channel: 'stable', family: 'chromium', displayName: 'Electron', version: '78.0.3904.130', path: '', majorVersion: 78, info: 'Electron is the default browser that comes with Cypress. This is the default browser that runs in headless mode. Selecting this browser is useful when debugging. The version number indicates the underlying Chromium version that Electron uses.' } ], proxyUrl: 'http://localhost:65159', userAgent: null, proxyServer: 'http://localhost:65159', socketIoRoute: '/__socket.io', chromeWebSecurity: true, url: 'http://localhost:65159/__/#/tests/integration/spec.js', isTextTerminal: false, browser: { channel: 'stable', displayName: 'Firefox', family: 'firefox', info: 'Firefox support is currently in beta! You can help us continue to improve the Cypress + Firefox experience by [reporting any issues you find](https://on.cypress.io/new-issue).', isChosen: true, majorVersion: 72, name: 'firefox', path: '/Applications/Firefox.app/Contents/MacOS/firefox-bin', version: '72.0.2', isHeaded: true, isHeadless: false } } +0ms
  cypress:server:browsers:firefox available ports: { foxdriverPort: 65162, marionettePort: 65163 } +3ms
  cypress:server:browsers:utils writing extension +2s
  cypress:server:plugins plugin event registered? { event: 'before:browser:launch', isRegistered: true } +2s
  cypress:server:plugins execute plugin event 'before:browser:launch' Node 'v12.8.1' with args: { channel: 'stable', displayName: 'Firefox', family: 'firefox', info: 'Firefox support is currently in beta! You can help us continue to improve the Cypress + Firefox experience by [reporting any issues you find](https://on.cypress.io/new-issue).', isChosen: true, majorVersion: 72, name: 'firefox', path: '/Applications/Firefox.app/Contents/MacOS/firefox-bin', version: '72.0.2', isHeaded: true, isHeadless: false } { extensions: [], preferences: { 'app.normandy.api_url': '', 'app.update.checkInstallTime': false, 'app.update.disabledForTesting': true, 'apz.content_response_timeout': 60000, 'browser.contentblocking.features.standard': '-tp,tpPrivate,cookieBehavior0,-cm,-fp', 'browser.dom.window.dump.enabled': true, 'browser.newtabpage.activity-stream.feeds.section.topstories': false, 'browser.newtabpage.enabled': false, 'browser.pagethumbnails.capturing_disabled': true, 'browser.safebrowsing.blockedURIs.enabled': false, 'browser.safebrowsing.downloads.enabled': false, 'browser.safebrowsing.malware.enabled': false, 'browser.safebrowsing.passwords.enabled': false, 'browser.safebrowsing.phishing.enabled': false, 'browser.search.update': false, 'browser.sessionstore.resume_from_crash': false, 'browser.shell.checkDefaultBrowser': false, 'browser.startup.homepage': 'about:blank', 'browser.startup.homepage_override.mstone': 'ignore', 'browser.startup.page': 0, 'browser.tabs.disableBackgroundZombification': false, 'browser.tabs.warnOnCloseOtherTabs': false, 'browser.tabs.warnOnOpen': false, 'browser.uitour.enabled': false, 'browser.urlbar.suggest.searches': false, 'browser.usedOnWindows10.introURL': '', 'browser.warnOnQuit': false, 'datareporting.healthreport.about.reportUrl': '', 'datareporting.healthreport.documentServerURI': '', 'datareporting.healthreport.logging.consoleEnabled': false, 'datareporting.healthreport.service.enabled': false, 'datareporting.healthreport.service.firstRun': false, 'datareporting.healthreport.uploadEnabled': false, 'datareporting.policy.dataSubmissionEnabled': false, 'datareporting.policy.dataSubmissionPolicyAccepted': false, 'datareporting.policy.dataSubmissionPolicyBypassNotification': true, 'devtools.jsonview.enabled': false, 'dom.disable_open_during_load': false, 'dom.file.createInChild': true, 'dom.ipc.reportProcessHangs': false, 'dom.max_chrome_script_run_time': 0, 'dom.max_script_run_time': 0, 'extensions.autoDisableScopes': 0, 'extensions.enabledScopes': 5, 'extensions.getAddons.cache.enabled': false, 'extensions.installDistroAddons': false, 'extensions.screenshots.disabled': true, 'extensions.update.enabled': false, 'extensions.update.notifyUser': false, 'extensions.webservice.discoverURL': '', 'focusmanager.testmode': true, 'general.useragent.updates.enabled': false, 'geo.provider.testing': true, 'geo.wifi.scan': false, 'hangmonitor.timeout': 0, 'javascript.options.showInConsole': true, 'media.gmp-manager.updateEnabled': false, 'network.cookie.cookieBehavior': 0, 'network.http.prompt-temp-redirect': false, 'network.http.speculative-parallel-limit': 0, 'network.manage-offline-status': false, 'network.sntp.pools': '', 'plugin.state.flash': 0, 'privacy.trackingprotection.enabled': false, 'remote.enabled': true, 'security.certerrors.mitm.priming.enabled': false, 'security.fileuri.strict_origin_policy': false, 'security.notification_enable_delay': 0, 'services.settings.server': '', 'signon.autofillForms': false, 'signon.rememberSignons': false, 'startup.homepage_welcome_url': 'about:blank', 'startup.homepage_welcome_url.additional': '', 'toolkit.cosmeticAnimations.enabled': false, 'toolkit.telemetry.server': ""''"", 'toolkit.startup.max_resumed_crashes': -1, 'network.proxy.type': 1, 'devtools.debugger.remote-enabled': true, 'devtools.debugger.remote-host': '127.0.0.1', 'devtools.debugger.prompt-connection': false, 'devtools.chrome.enabled': true, 'app.update.auto': false, 'app.update.enabled': false, 'browser.displayedE10SNotice': 4, 'browser.download.manager.showWhenStarting': false, 'browser.EULA.override': true, 'browser.EULA.3.accepted': true, 'browser.link.open_external': 2, 'browser.link.open_newwindow': 2, 'browser.offline': false, 'browser.reader.detectedFirstArticle': true, 'browser.selfsupport.url': '', 'browser.tabs.warnOnClose': false, 'devtools.errorconsole.enabled': true, 'extensions.blocklist.enabled': false, 'extensions.checkCompatibility.nightly': false, 'extensions.logging.enabled': true, 'javascript.enabled': true, 'network.http.phishy-userpass-length': 255, 'offline-apps.allow_by_default': true, 'prompts.tab_modal.enabled': false, 'security.fileuri.origin_policy': 3, 'toolkit.networkmanager.disable': true, 'toolkit.telemetry.prompted': 2, 'toolkit.telemetry.enabled': false, 'toolkit.telemetry.rejected': true, 'xpinstall.signatures.required': false, 'xpinstall.whitelist.required': false, 'browser.laterrun.enabled': false, 'browser.newtab.url': 'about:blank', 'dom.report_all_js_exceptions': true, 'network.captive-portal-service.enabled': false, 'security.csp.enable': false, webdriver_accept_untrusted_certs: true, webdriver_assume_untrusted_issuer: true, 'toolkit.legacyUserProfileCustomizations.stylesheets': true, 'browser.tabs.drawInTitlebar': false, 'media.autoplay.default': 0, 'browser.safebrowsing.enabled': false, 'media.getusermedia.browser.enabled': true, 'media.navigator.permission.disabled': true, 'dom.min_background_timeout_value': 4, 'dom.timeout.enable_budget_timer_throttling': false, 'media.devices.insecure.enabled': true, 'media.getusermedia.insecure.enabled': true, 'network.proxy.allow_hijacking_localhost': true, 'network.proxy.http': 'localhost', 'network.proxy.ssl': 'localhost', 'network.proxy.http_port': 65159, 'network.proxy.ssl_port': 65159, 'network.proxy.no_proxies_on': '', 'devtools.debugger.remote-port': 65162, 'marionette.port': 65163 }, args: [ '-marionette', '-new-instance', '-foreground', '-start-debugger-server' ] } undefined +0ms
  cypress:server:plugins call event before:browser:launch for invocation id inv2 +3ms
  cypress:server:plugins:child execute plugin event: before:browser:launch ({ eventId: 2, invocationId: 'inv2' }) +2s
  cypress:server:plugins promise resolved for id 'inv2' with value undefined +0ms
  cypress:server:browsers:utils copied extension +28ms
  cypress:server:browsers:firefox firefox directories { path: '/Users/jennifer/Library/Application Support/Cypress/cy/production/browsers/firefox/interactive', cacheDir: '/Users/jennifer/Library/Application Support/Cypress/cy/production/browsers/firefox/interactive/CypressCache', extensionDest: '/Users/jennifer/Library/Application Support/Cypress/cy/production/browsers/firefox/interactive/CypressExtension' } +33ms
  cypress:server:browsers:firefox launch in firefox {
  url: 'http://localhost:65159/__/#/tests/integration/spec.js',
  args: [
    '-marionette',
    '-new-instance',
    '-foreground',
    '-start-debugger-server',
    '-profile',
    '/Users/jennifer/Library/Application Support/Cypress/cy/production/browsers/firefox/interactive'
  ]
} +2ms
  cypress:launcher launching browser { channel: 'stable', displayName: 'Firefox', family: 'firefox', info: 'Firefox support is currently in beta! You can help us continue to improve the Cypress + Firefox experience by [reporting any issues you find](https://on.cypress.io/new-issue).', isChosen: true, majorVersion: 72, name: 'firefox', path: '/Applications/Firefox.app/Contents/MacOS/firefox-bin', version: '72.0.2', isHeaded: true, isHeadless: false } to open about:blank +2s
  cypress:launcher spawning browser { channel: 'stable', displayName: 'Firefox', family: 'firefox', info: 'Firefox support is currently in beta! You can help us continue to improve the Cypress + Firefox experience by [reporting any issues you find](https://on.cypress.io/new-issue).', isChosen: true, majorVersion: 72, name: 'firefox', path: '/Applications/Firefox.app/Contents/MacOS/firefox-bin', version: '72.0.2', isHeaded: true, isHeadless: false } with args about:blank -marionette -new-instance -foreground -start-debugger-server -profile /Users/jennifer/Library/Application Support/Cypress/cy/production/browsers/firefox/interactive +0ms
  cypress:server:browsers:firefox-util firefox: navigating page with webdriver +0ms
  cypress:network:connect received error on connect, retrying { iteration: 0, delay: 100, err: Error: connect ECONNREFUSED 127.0.0.1:65162     at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1056:14) { errno: 'ECONNREFUSED', code: 'ECONNREFUSED', syscall: 'connect', address: '127.0.0.1', port: 65162 } } +2s
```

### Versions

4.0.1
",bug
561906476,`yarn cypress open` does not open Cypress with yarn v2,"<!-- Is this a question? Questions WILL BE CLOSED. Ask in our chat https://on.cypress.io/chat  -->

### Current behavior:

Not sure if this really has to do with yarn (v2) but adding the latest cypress version to a project fails for me. It successfully installs when I use npm.

Stacktrace:

```
➤ YN0000: ┌ Link step
➤ YN0007: │ cypress@npm:4.0.0 must be built because it never did before or the last one failed
➤ YN0009: │ cypress@npm:4.0.0 couldn't be built successfully (exit code 1, logs can be found here: /var/folders/4r/fbk_4j8d3ss5xl8975901nhr0000gp/T/logfile-6119EAzUDTs6CGBm.log)


```
Content of logfile-6119EAzUDTs6CGBm.log:
```

# This file contains the result of Yarn building a package (cypress@npm:4.0.0)
# Script name: postinstall

/.../test-cypress/.yarn/cache/any-observable-npm-0.3.0-4832f4f3ed-1.zip/node_modules/any-observable/register.js:29
		throw new Error('Cannot find any-observable implementation nor' +
		^

Error: Cannot find any-observable implementation nor global.Observable. You must install polyfill or call require(""any-observable/register"") with your preferred implementation, e.g. require(""any-observable/register"")('rxjs') on application load prior to any require(""any-observable"").
    at loadImplementation (/..../test-cypress/.yarn/cache/any-observable-npm-0.3.0-4832f4f3ed-1.zip/node_modules/any-observable/register.js:29:9)
    at /...../test-cypress/.yarn/cache/any-observable-npm-0.3.0-4832f4f3ed-1.zip/node_modules/any-observable/loader.js:30:18
    at Object.<anonymous> (/..../test-cypress/.yarn/cache/any-observable-npm-0.3.0-4832f4f3ed-1.zip/node_modules/any-observable/index.js:2:39)
    at Module._compile (internal/modules/cjs/loader.js:955:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:991:10)
    at Module.load (internal/modules/cjs/loader.js:811:32)
    at Function.module_1.Module._load (/..../test-cypress/.pnp.js:15569:14)
    at Module.require (internal/modules/cjs/loader.js:848:19)
    at require (internal/modules/cjs/helpers.js:74:18)
    at Object.<anonymous> (/..../test-cypress/.yarn/cache/@samverschueren-stream-to-observable-npm-0.3.0-3da2ac7de0-1.zip/node_modules/@samverschueren/stream-to-observable/index.js:2:20)
    at Module._compile (internal/modules/cjs/loader.js:955:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:991:10)
    at Module.load (internal/modules/cjs/loader.js:811:32)
    at Function.module_1.Module._load (/..../test-cypress/.pnp.js:15569:14)
    at Module.require (internal/modules/cjs/loader.js:848:19)
    at require (internal/modules/cjs/helpers.js:74:18)

```
<!-- A description including screenshots, stack traces, DEBUG logs, etc -->

### Desired behavior:

A succesfull install 
<!-- A clear description of what you want to happen -->

### Test code to reproduce

New folder
yarn init
yarn add --dev cypress@4.0.0

<!-- If we cannot fully run the tests as provided the issue WILL BE CLOSED -->
<!-- Issues without a reproducible example WILL BE CLOSED -->

<!-- You can fork https://github.com/cypress-io/cypress-test-tiny repo, set up a failing test, then link to your fork -->

### Versions

yarn : 2.0.0-rc.27
cypress: 4.0.0
OS: macOS Catalina 10.15.3
<!-- Cypress, operating system, browser -->
",bug
561399218,Trying to use Chromium on 4.0.0 results in an error,"Hey there, I just wanted to give the new version a try and ran into this issue. I don't think it's test specific but let me know if I'm missing something. Thanks for your hard work on v4!

I suspect the issue is a typo on [this line](https://github.com/cypress-io/cypress/blob/c9bccf27f85164a9e157296fb259118cb79560fb/packages/launcher/lib/darwin/index.ts#L22)

### Current behavior:

1. Download and install [Chromium 80.0.3987.87 for Mac OS](https://chromium.cypress.io/mac/stable/80.0.3987.87)
1. `npx cypress open`
1. Select ""Chromium 80""
1. start a test
1. browser crashes with the following error:

```
npx cypress open
Error: spawn /Applications/Chromium.app/Contents/DMacOS/Chromium ENOENT
    at Process.ChildProcess._handle.onexit (internal/child_process.js:264:19)
    at onErrorNT (internal/child_process.js:456:16)
    at processTicksAndRejections (internal/process/task_queues.js:77:11)
 {
  errno: 'ENOENT',
  code: 'ENOENT',
  syscall: 'spawn /Applications/Chromium.app/Contents/DMacOS/Chromium',
  path: '/Applications/Chromium.app/Contents/DMacOS/Chromium',
  spawnargs: [
    'about:blank',
    '--test-type',
    '--ignore-certificate-errors',
    '--start-maximized',
    '--silent-debugger-extension-api',
    '--no-default-browser-check',
    '--no-first-run',
    '--noerrdialogs',
    '--enable-fixed-layout',
    '--disable-popup-blocking',
    '--disable-password-generation',
    '--disable-save-password-bubble',
    '--disable-single-click-autofill',
    '--disable-prompt-on-repos',
    '--disable-background-timer-throttling',
    '--disable-renderer-backgrounding',
    '--disable-renderer-throttling',
    '--disable-restore-session-state',
    '--disable-translate',
    '--disable-new-profile-management',
    '--disable-new-avatar-menu',
    '--allow-insecure-localhost',
    '--reduce-security-for-testing',
    '--enable-automation',
    '--disable-device-discovery-notifications',
    '--disable-infobars',
    '--autoplay-policy=no-user-gesture-required',
    '--disable-site-isolation-trials',
    '--metrics-recording-only',
    '--disable-prompt-on-repost',
    '--disable-hang-monitor',
    '--disable-sync',
    '--disable-web-resources',
    '--safebrowsing-disable-auto-update',
    '--safebrowsing-disable-download-protection',
    '--disable-client-side-phishing-detection',
    '--disable-component-update',
    '--disable-default-apps',
    '--use-fake-ui-for-media-stream',
    '--use-fake-device-for-media-stream',
    '--disable-ipc-flooding-protection',
    '--disable-backgrounding-occluded-window',
    '--disable-breakpad',
    '--password-store=basic',
    '--use-mock-keychain',
    '--proxy-server=http://localhost:54313',
    '--proxy-bypass-list=<-loopback>',
    '--remote-debugging-port=54328',
    '--remote-debugging-address=127.0.0.1',
    '--load-extension=/Users/obartra/Library/Application Support/Cypress/cy/production/browsers/chromium/interactive/CypressExtension,/Users/obartra/Library/Caches/Cypress/4.0.0/Cypress.app/Contents/Resources/app/packages/extension/theme',
    '--user-data-dir=/Users/obartra/Library/Application Support/Cypress/cy/production/browsers/chromium/interactive',
    '--disk-cache-dir=/Users/obartra/Library/Application Support/Cypress/cy/production/browsers/chromium/interactive/CypressCache'
  ]
}
Error: spawn /Applications/Chromium.app/Contents/DMacOS/Chromium ENOENT
    at Process.ChildProcess._handle.onexit (internal/child_process.js:264:19)
    at onErrorNT (internal/child_process.js:456:16)
    at processTicksAndRejections (internal/process/task_queues.js:77:11)
```

### Desired behavior:

- Tests run

### Test code to reproduce

- Use cypress@3.8.3 and run steps described above
- cypress doesn't crash
- Upgrade to cypress@4.0.0 cypress crashes

### Versions

From `npx envinfo`:

  System:
    OS: macOS Mojave 10.14.6
    CPU: (12) x64 Intel(R) Core(TM) i7-8750H CPU @ 2.20GHz
    Memory: 641.25 MB / 32.00 GB
    Shell: 5.3 - /bin/zsh
  Binaries:
    Node: 12.13.0 - ~/.nvm/versions/node/v12.13.0/bin/node
    Yarn: 1.21.1 - ~/.yarn/bin/yarn
    npm: 6.13.6 - ~/.nvm/versions/node/v12.13.0/bin/npm
    Watchman: 4.9.0 - /usr/local/bin/watchman
  Utilities:
    CMake: 3.16.2 - /usr/local/bin/cmake
    Make: 3.81 - /usr/bin/make
    GCC: 4.2.1 - /usr/bin/gcc
    Git: 2.25.0 - /usr/local/bin/git
    Clang: 1100.0.33.12 - /usr/bin/clang
    Subversion: 1.10.4 - /usr/bin/svn
",bug
561319097,Opening Firefox on MacOS results in `Cannot read property 'on' of undefined` error,"### Current behavior:

`cypress open`
select Firefox 72
start test
Firefox window opens to a blank page
Error happens, then cypress exits with Firefox still open

```
TypeError: Cannot read property 'on' of undefined
    at new CommandStream (/Users/crfrolik/Library/Caches/Cypress/4.0.0/Cypress.app/Contents/Resources/app/packages/server/node_modules/marionette-client/lib/marionette/command-stream.js:25:12)
    at Tcp.<anonymous> (/Users/crfrolik/Library/Caches/Cypress/4.0.0/Cypress.app/Contents/Resources/app/packages/server/node_modules/marionette-client/lib/marionette/drivers/tcp.js:81:19)
    at Timeout.waitForSocket [as _onTimeout] (/Users/crfrolik/Library/Caches/Cypress/4.0.0/Cypress.app/Contents/Resources/app/packages/server/node_modules/socket-retry-connect/index.js:37:12)
    at listOnTimeout (internal/timers.js:533:17)
    at processTimers (internal/timers.js:475:7)
```

### Versions

Cypress 4.0.0
Mac OS
Firefox 72.0.2 (64-bit)
",bug
561317211,Cypress does not detect Firefox 64-bit browser,"<!-- Is this a question? Questions WILL BE CLOSED. Ask in our chat https://on.cypress.io/chat  -->

### Desired behavior:

On Windows 10 using Cypress v4.0.0, the Test Runner doesn't now show Firefox as an option in the browser list.

![image](https://user-images.githubusercontent.com/7388782/73985274-9dcc0a80-48ef-11ea-99d7-cdf838b7171e.png)


Looking at the browser configuration, Firefox is not listed.
![image](https://user-images.githubusercontent.com/7388782/73985324-b9cfac00-48ef-11ea-84ef-819df2c36698.png)

I copied the Firefox directory (C:\Program Files\Mozilla Firefox) to the AppData directory
..\AppData\Roaming\Cypress\cy\production\browsers

This doesn't update the browser list.

### Versions

4.0.0
",bug
561314392,MacOS not detecting Microsoft Edge as a launch-able browser,"### Current behavior:

Running cypress open fails to detect edge as selectable browser in the dropdown.  Have tried using cypress run --browser edge (which tells me it can't detect an edge browser) as well as providing an absolute path of 

cypress run --browser /Applications/Microsoft\ Edge.app/Contents/MacOS/Microsoft\ Edge

That seems to run electron in the terminal instead of edge though this could just be because cypress hasn't been setup to run edge headlessly.  I double checked that I had edge installed and the binary was in the place I expected it to be.

This file https://github.com/cypress-io/cypress/blob/develop/packages/launcher/lib/darwin/index.ts

indicates where cypress is looking so I am a bit stumped.

(Just noticed that the const detectEdge doesn't provide ""Microsoft Edge.app"" line like say the const detectFirefox does on line 27 of the link I provided above.  Might that be the issue?

### Desired behavior:

Edge binary should be automatically detected by cypress.

### Test code to reproduce

Install edge(chromium) for MacOS
npm init
npm install cypress@latest
cypress open

### Versions

MacOS Mojave 10.14.6, Microsoft Edge (non dev or canary builds), cypress 4.0.0, node 12.0.0
",bug
560903506,Firefox Nightly - no version found,"### Current behavior:

Tried to launch Cypress while having Firefox Nightly installed and Cypress will not open beyond this screen.

We're unable to pull of the 'version' of Firefox Nightly so it does not continue.

<img width=""714"" alt=""Screen Shot 2020-02-06 at 4 25 04 PM"" src=""https://user-images.githubusercontent.com/1271364/73926146-90b61800-48fd-11ea-809e-183e843f28e5.png"">

It looks like the version is `74.0a1`, maybe the letter is throwing it off. 

<img width=""652"" alt=""Screen Shot 2020-02-06 at 4 42 37 PM"" src=""https://user-images.githubusercontent.com/1271364/73927424-c825c400-48ff-11ea-8252-8c8b02aa1983.png"">


### Desired behavior:

Ability to Cypress in Firefox Nightly

### Versions

firefox branch - prerelease
",bug
560812879,{log:false} of clearLocalStorage doesn't work.,"### Current behavior:

`cy.clearLocalStorage({log:false})` should not show the command on the reporter. But it does. 

### Desired behavior:

It should not show the command.

### Test code to reproduce

```js
it('test', () => {
  cy.clearLocalStorage({log:false})
})
```

Result:

![Screenshot from 2020-02-06 15-42-33](https://user-images.githubusercontent.com/8130013/73912310-87c24800-48f7-11ea-98ad-9b7f1e562578.png)

### Versions

3.8.3
",bug
560796792,`channel` is not part of `Cypress.browser` object,"### Current behavior:

This is related to firefox/4.0 release branch.

The `Cypress.browser` object does not include the `channel` property. 

<img width=""511"" alt=""Screen Shot 2020-02-06 at 12 22 14 PM"" src=""https://user-images.githubusercontent.com/1271364/73909713-c2b68280-48db-11ea-98fb-05d1dfb426a5.png"">


### Desired behavior:

`Cypress.browser` should log all property from `before:browser:launch` and new `isBrowser`

### Test code to reproduce

```
it('should log props', () => {
  console.log(Cypress.browser)
})
```

### Versions

firefox branch -prerelease
",bug
560732205,Recorded videos from Firefox play at the wrong speed,"<!-- Is this a question? Questions WILL BE CLOSED. Ask in our chat https://on.cypress.io/chat  -->

### Current behavior:
* Firefox records videos as a WEBM with variable framerate.
* When Cypress streams these chunks to `ffmpeg`, the variable framerate is incorrectly interpreted at a constant 15fps.
* This results in the output video appearing to run more quickly and more slowly at times, as the CPU load of other processes go up and down and affect the output framerate.
* A related issue occurs when a navigation of the `runner` occurs, which causes the timestamps of the WEBM to reset to 0.

### Desired behavior:
* Use the correct `ffmpeg` options so that the timestamp and framerates are accurately represented in the final captured `mp4`.
	* https://github.com/stoyanovgeorge/ffmpeg/wiki/Variable-Frame-Rate recommended `.outputOption('-vsync=0').videoFilter('setpts=N/FRAME_RATE/TB')`
	* `framerate` video filter may help: https://www.ffmpeg.org/ffmpeg-all.html#framerate
	* `fps` video filter may help: https://www.ffmpeg.org/ffmpeg-all.html#fps-1

### Versions
* Cypress 4.0.0
* Firefox, any version


Possibly caused by https://bugzilla.mozilla.org/show_bug.cgi?id=1717868
",bug
560556928,Test case fails if verifying that element is no longer is visible if webSecurity is turned off,"### Current behavior:
If you are verifying that an element that doesn't exist (or no longer exists) is not visible, the test case will fail if you have webSecurity enabled and pass if webSecurity is turned off.

![image](https://user-images.githubusercontent.com/35334883/73871709-53c62480-481c-11ea-8ae1-3a07ee1997de.png)

### Desired behavior:
The webSecurity settings should not impact in this case if the test passes or fails. It should either always fail or always pass.

### Test code to reproduce

```js
describe('Repro', function() {
  it('repro', function() {
    cy.visit('https://www.cypress.io')
    cy.get('.some-random-class').should('not.be.visible')
  })
})
```

cypress.json:
```json
{
  ""chromeWebSecurity"": false
}
```

### Versions
3.8.2",bug
555338560,Cypress not able to load a different domain used in the second test,"I have 2 tests. In one test the user goes to www.nordstromrack.com and login and in the second test case it goes to www.hautelook.com and tries to the same. Ideally the test should be able to navigate between 2 domains within the same test case but since that's not possible in cypress so I had to add the second test case.

### Current behavior:

In the first test case its able to successfully login but when it goes to the second test case then it tries to load the page and after a few seconds it shows the page not found . 

If in test case 1 , I dont log in and if is imply go to nordstromrack.com and just click on login button and then move to second test case then it actually loads the hautelook.com page in the second test case .But when i include login step then it fails to load the second url in the second test.

<img width=""1397"" alt=""cypressPageNotLoading"" src=""https://user-images.githubusercontent.com/12158094/73148469-5634bb80-4071-11ea-981d-d1c155869edb.png"">

<!-- A description including screenshots, stack traces, DEBUG logs, etc -->

### Desired behavior:
Cypress should able to successfully open the second domain and proceed with the test.

<!-- A clear description of what you want to happen -->

### Test code to reproduce


```js
describe('My Second Test Suite', function () {
  it('My FirstTest case', function () {
    cy.visit(""https://www.nordstromrack.com/"")
    cy.contains('Log In').click({ force: true })
    cy.get('button:contains(""Log In"")').click()
    cy.get('input[name=""email""]:visible').clear().type(""cypresstest@test.com"")
    cy.get('input[name=""password""]').clear().type(""Cypress@123"")
    cy.get('button:contains(""Log In"")').click()
    cy.get('.modal-template__close-icon').click()
    cy.get('.secondary-nav__name').should('have.text', 'tester')
    cy.wait(3000)
  })

  it('My SecondTest case', function () {
    cy.visit(""https://www.hautelook.com/"") //cypress not loading this page in second test case
    cy.contains('Log In').click({ force: true })
    cy.get('button:contains(""Log In"")').click()
    cy.get('input[name=""email""]:visible').clear().type(""cypresstest@test.com"")
    cy.get('input[name=""password""]').clear().type(""Cypress@123"")
    cy.get('button:contains(""Log In"")').click()
    cy.get('.secondary-nav__name').should('have.text', 'tester')
  })
})
```

<!-- If we cannot fully run the tests as provided the issue WILL BE CLOSED -->
<!-- Issues without a reproducible example WILL BE CLOSED -->

<!-- You can fork https://github.com/cypress-io/cypress-test-tiny repo, set up a failing test, then link to your fork -->

### Versions

<!-- Cypress, operating system, browser -->
Cypress package version: 3.8.2
Cypress binary version: 3.8.2
Macbook 
Google Chrome :79",bug
554637109,Node version 'learn more' link in Desktop-GUI is broken,"<!-- Is this a question? Questions WILL BE CLOSED. Ask in our chat https://on.cypress.io/chat  -->

### Current behavior:

The 'Learn more' link inside 'Node version' routes to `http://on.cypress.io/configuration#Node-Version` which goes to no where since the heading in the docs was renamed to `Node version` (lowercase). 

<img width=""800"" alt=""Screen Shot 2020-01-24 at 4 15 41 PM"" src=""https://user-images.githubusercontent.com/1271364/73059801-dec22900-3ec4-11ea-84ba-ad380101c34a.png"">

### Desired behavior:

Hashtags should **never** be hardcoded into on links - this on link cannot be fixed outside of updating the actual link in the Desktop or changing the link in the docs and *never* changing that heading every again.

This will unfortunately be broken in older versions forever. 

All `on.cypress.io` links should be specifically formed and added on `on` package - never hash tags. cc @flotwig 

Granted I think that more issues like this wouldn't happen if it were easier to actually deploy the on links because right now it is a nightmare - https://github.com/cypress-io/cypress-services/issues/1979

### Versions

3.8.2
",bug
553365603,An Its() function cannot access index of zero.,"<!-- Is this a question? Questions WILL BE CLOSED. Ask in our chat https://on.cypress.io/chat  -->

### Current behavior:

From the tutorial on the official website (https://docs.cypress.io/api/commands/its.html) when I have used with an array following the example I have found an issue of the function. The function could access indices from indices `one` to last indices of the array. However, when I have used the indices `zero` with the function the compiler have an error.

### Desired behavior:

The function have been access by  indices `zero` to the last indices of the example array.

### Test code to reproduce
```js
cy.wrap(['Wai Yan', 'Yu']).its(1).should('eq', 'Yu') // true
cy.wrap(['Wai Yan', 'Yu']).its(0).should('eq', 'Yu') // CypressError: cy.its() expects the propertyName argument to have a value.
```

<!-- You can fork https://github.com/cypress-io/cypress-test-tiny repo, set up a failing test, then link to your fork -->

### Versions

Cypress version (Installed via npm) : 3.8.2
Os: Windows 10
",bug
552909978,"""autofocus"" not working with Chrome since Chrome 79","<!-- Is this a question? Questions WILL BE CLOSED. Ask in our chat https://on.cypress.io/chat  -->

### Current behavior:

""autofocus"" attribute works with Electron and with older Chrome versions, but it does not work in Chrome 79. 
When testing a page with ""autofocus"" attribute, `cy.focused()` returns no elements, and nothing is in focus. 

Chrome console log:

```log
Autofocus processing was blocked because a document's URL has a fragment '#/tests/__all'.
```

<!-- A description including screenshots, stack traces, DEBUG logs, etc -->

### Desired behavior:

Autofocus attribute is working in tests as expected in any supported browser, including Chrome 79.
No warnings in JS console log.

<!-- A clear description of what you want to happen -->

### Test code to reproduce

<!-- If we cannot fully run the tests as provided the issue WILL BE CLOSED -->
<!-- Issues without a reproducible example WILL BE CLOSED -->

Simple HTML page:
```html
<!DOCTYPE html>
<html>
<body>
<form>
  First name:<br>
  <input type=""text"" name=""firstname"" autofocus>
  <br>
  Last name:<br>
  <input type=""text"" name=""lastname"">
</form>
</body>
</html>
```

Code of the integration test:
```js
describe('Focus', function() {
    it.only('autofocus', function() {
        cy.visit('./af.html');
        cy.focused().should('have.attr', 'name','firstname');
    });
});
```

<!-- You can fork https://github.com/cypress-io/cypress-test-tiny repo, set up a failing test, then link to your fork -->

### Versions

Cypress 3.8.2
Chrome 79.0.3945.117
Ubuntu 16.04 and 18.04

<!-- Cypress, operating system, browser -->
",bug
551737596,`cy.visit()` Error - DOM Element `id` Attribute Set to `jquery`,"### Current behavior:

Given a static webpage with zero JavaScript present (no jQuery library), if there exists a DOM element with an `id` attribute set to `jquery` (for example, `<p id=""jquery"">jQuery</p>`), then the `cy.visit()` method throws a TypeError: `TypeError: item.first is not a function.`

![](https://www.dl.dropboxusercontent.com/s/9wkqletdgr30zsb/Screenshot%202020-01-18%2002.31.52.png)

Debug Logs:
```
cypress_runner.js:159529 TypeError: item.first is not a function

Because this error occurred during a 'before each' hook we are skipping the remaining tests in the current suite: 'homepage'
    at Object.unwrapFirst (http://localhost:5000/__cypress/runner/cypress_runner.js:86108:19)
    at http://localhost:5000/__cypress/runner/cypress_runner.js:80941:33
From previous event:
    at runCommand (http://localhost:5000/__cypress/runner/cypress_runner.js:80933:8)
    at next (http://localhost:5000/__cypress/runner/cypress_runner.js:81014:14)
From previous event:
    at http://localhost:5000/__cypress/runner/cypress_runner.js:81055:37
From previous event:
    at run (http://localhost:5000/__cypress/runner/cypress_runner.js:81048:19)
    at Object.cy.<computed> [as visit] (http://localhost:5000/__cypress/runner/cypress_runner.js:81457:11)
    at Context.runnable.fn (http://localhost:5000/__cypress/runner/cypress_runner.js:81699:24)
    at callFn (http://localhost:5000/__cypress/runner/cypress_runner.js:30929:21)
    at Hook.../driver/node_modules/mocha/lib/runnable.js.Runnable.run (http://localhost:5000/__cypress/runner/cypress_runner.js:30922:7)
    at http://localhost:5000/__cypress/runner/cypress_runner.js:84876:28
From previous event:
    at Object.onRunnableRun (http://localhost:5000/__cypress/runner/cypress_runner.js:84864:20)
    at $Cypress.action (http://localhost:5000/__cypress/runner/cypress_runner.js:78026:61)
    at Hook.Runnable.run (http://localhost:5000/__cypress/runner/cypress_runner.js:83558:13)
    at next (http://localhost:5000/__cypress/runner/cypress_runner.js:31272:10)
    at http://localhost:5000/__cypress/runner/cypress_runner.js:31294:5
    at timeslice (http://localhost:5000/__cypress/runner/cypress_runner.js:26362:27)
logError @ cypress_runner.js:159529
```

Added a breakpoint to view the object that's considered a ""jQuery object:""

![](https://www.dl.dropboxusercontent.com/s/skb4otgx99ceuj5/Screenshot%202020-01-18%2002.40.12.png)

### Desired behavior:

In a previous issue, this type of error was thrown when an older version of jQuery was found on the webpage being tested: https://github.com/cypress-io/cypress/issues/2927. According to the issue thread, it was resolved in Cypress v3.2.0. 

I'd expect that a webpage with zero JavaScript present shouldn't encounter this error.

### Test code to reproduce

https://github.com/kenchandev/cypress-bug-reduced-test-case

The `README.md` file will contain directions on how to quickly reproduce this bug.

### Versions

**Cypress**: v3.8.2
**Operating System**: Mac OS X
**Browser**: Cypress Test Runner's Default Browser
",bug
551364357,Cypress verify command failing,"### Current behavior:
After an apt update of ubuntu 18.04 (yesterday 16/01/2020), the following cypress command return an error.
`npx cypress verify`

> It looks like this is your first time using Cypress: 3.8.2
> 
>  ✖  Verifying Cypress can run /root/.cache/Cypress/3.8.2/Cypress
>    → Cypress Version: 3.8.2
> Cypress failed to start.
> 
> This is usually caused by a missing library or dependency.
> 
> The error below should indicate which dependency is missing.
> 
> https://on.cypress.io/required-dependencies
> 
> If you are using Docker, we provide containers with all required dependencies installed.
> 
> ----------
> 
> Command failed: /root/.cache/Cypress/3.8.2/Cypress/Cypress --no-sandbox --smoke-test --ping=24
> 
> ----------
> 
> Platform: linux (Ubuntu Linux - 18.04)
> Cypress Version: 3.8.2

`/root/.cache/Cypress/3.8.2/Cypress/Cypress --no-sandbox --smoke-test --ping=24`

> (Cypress:20915): Gtk-WARNING **: 12:20:46.593: cannot open display:

### Desired behavior:
cypress verify should pass

### Test code to reproduce

### Versions
Ubuntu Linux - 18.04
Cypress Version: 3.8.2

#### Packages Versions :
`apt-get install libgtk2.0-0 libgtk-3-0 libnotify-dev libgconf-2-4 libnss3 libxss1 libasound2 libxtst6 xauth xvfb`

> libgtk2.0-0 is already the newest version (2.24.32-1ubuntu1).
> libnotify-dev is already the newest version (0.7.7-3).
> libxss1 is already the newest version (1:1.2.2-1).
> libxtst6 is already the newest version (2:1.2.3-1).
> xauth is already the newest version (1:1.0.10-1).
> libgconf-2-4 is already the newest version (3.2.6-4ubuntu1).
> libasound2 is already the newest version (1.1.3-5ubuntu0.2).
> libgtk-3-0 is already the newest version (3.22.30-1ubuntu4).
> libnss3 is already the newest version (2:3.35-2ubuntu2.7).
> xvfb is already the newest version (2:1.19.6-1ubuntu4.3).",bug
551363985,"Inline, zero-dimension element: erroneous visibility determination","# Current behavior:
[This](https://github.com/badeball/cypress-reproducible-issues/tree/master/zero-dimension-hover) example illustrates an element with `offsetWidth` and `offsetHeight` of zero, but is still interactable in actuality.

For reference, Firefox does not report these values to be zero, which might be of interest in regards to expanding browser support (ie. maybe not good to rely on it as it's not consistent across).

### Desired behavior:
For the element not to be reported as invisible.

### Test code to reproduce
https://github.com/badeball/cypress-reproducible-issues/tree/master/zero-dimension-hover

### Versions
Cypress v3.8.2, Arch Linux, Chrome 79.

",bug
550718893,cy.Request does not send binary data (blob),"Sending blob as body of a request sends empty content:

``` js
const body = new Blob([[1, 2, 3, 4]], { type: ""application/octet-stream"" });
cy.request(
  {
    body,
    method: ""POST"",
    url: ""api/binaryBody"",
    headers: {
      ""Content-Type"": ""application/octet-stream"",
    }
  })
  .then(response => {
    expect(response.status).to.equal(200);
  });
```

Results in following request:

```
The request we sent was:

Method: POST
URL: https://localhost:5001/api/binaryBody
Headers: {
  ""Connection"": ""keep-alive"",
  ""Content-Type"": ""application/octet-stream"",
  ""user-agent"": ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.132 Safari/537.36"",
  ""accept"": ""*/*"",
  ""accept-encoding"": ""gzip, deflate"",
  ""content-length"": 2
}
Body: {}
```

### Expected behavior:

Binary data from the blob should be sent as the request body and the `content-length` header should be set correctly

### Versions

Cypress: 3.8.2
OS: Windows 10 v1809, 64-bit
Browser: Chrome 76.0.3809.132
Node.js: 12.13.0",bug
548582715,"Cannot add commands with ""reserved"" names: getAlias, reset","```js
Cypress.Commands.add('getAlias', (alias:string) => cy.get(`@${alias}`));
```

results in 

> TypeError: command.get is not a function

but

```js
Cypress.Commands.add('alias', (alias:string) => cy.get(`@${alias}`));
```

does not

what _trickerypokery_?",bug
548120778,Error running cypress with `--config-file` set to an absolute path,"### Current behavior:

When cypress is runned using `cypress open --config-file ~/config.json` a folder is created under the project tree with the path `path/to/home/config.json` instead of looking into the existing file at home folder.

### Desired behavior:

The desired behavior  would be for the cypress to find the config file at the home folder and use it.

### Test code to reproduce
Steps:

1 - Setup a sample project with cypress;
2 - Create a config file at home named for example cypress.json;
3 - Create a npm script to run the command with `cypress open --config-file ~/cypress.json;
4 - Run the script;
5 - A new folder should be created under the project folder with a empty cypress.json configuration inside it;
  

### Versions
cypress: 3.8.1
npm: 6.13.4
OS: Ubuntu 18.04.3 LTS
",bug
545926385,"Calling screenshot() on an element that changes sizes after scrolling throws 'is invalid for option ""size""' exception","<!-- Is this a question? Don't open an issue. Ask in our chat https://on.cypress.io/chat  -->

### Current behavior:
Using the screenshot command on an element that changes sizes after scrolling causes an exception to be thrown when trying to stitch them together.

![](https://user-images.githubusercontent.com/6796642/71846379-a084d700-3087-11ea-952f-f3616f64e4f6.png)
![](https://user-images.githubusercontent.com/6796642/71846386-a67ab800-3087-11ea-97bf-6a1a46a5ca7a.png)

```
RangeError: The value ""-36960000"" is invalid for option ""size""
    at Function.allocUnsafe (buffer.js:272:3)
    at Jimp.cropQuiet (Library/Caches/Cypress/3.8.1/Cypress.app/Contents/Resources/app/packages/server/node_modules/@jimp/plugin-crop/dist/index.js:42:27)
    at Jimp.<computed> [as crop] (Library/Caches/Cypress/3.8.1/Cypress.app/Contents/Resources/app/packages/server/node_modules/@jimp/core/dist/index.js:1266:23)
    at crop (Library/Caches/Cypress/3.8.1/Cypress.app/Contents/Resources/app/packages/server/lib/screenshots.js:145:26)
    at Library/Caches/Cypress/3.8.1/Cypress.app/Contents/Resources/app/packages/server/lib/screenshots.js:209:22
    at arrayEach (Library/Caches/Cypress/3.8.1/Cypress.app/Contents/Resources/app/packages/server/node_modules/lodash/lodash.js:516:11)
    at Function.forEach (Library/Caches/Cypress/3.8.1/Cypress.app/Contents/Resources/app/packages/server/node_modules/lodash/lodash.js:9342:14)
    at stitchScreenshots (Library/Caches/Cypress/3.8.1/Cypress.app/Contents/Resources/app/packages/server/lib/screenshots.js:206:7)
    at Library/Caches/Cypress/3.8.1/Cypress.app/Contents/Resources/app/packages/server/lib/screenshots.js:350:21
    at processImmediate (internal/timers.js:439:21)
```

### Desired behavior:
<!-- A clear concise description of what you want to happen -->

The screenshot command should properly create an image instead of throwing an exception.

### Steps to reproduce:
See: https://github.com/Keysox/cypress-screenshot-issue

### Versions
Cypress: 3.8.1

",bug
545044338,Can we correctly assign assertions to a test?,"Cypress v3.8.1

https://github.com/cypress-io/cypress-test-tiny/tree/confirm-after-test spec cypress/integration/two-tests.js

```js
/// <reference types=""cypress"" />
it('first', () => {
  setTimeout(() => {
    expect(false).to.be.true
  }, 1000)

  expect(1).to.equal(1)
})

it('second', () => {
  expect(2).to.equal(2)
  cy.wait(2000)
})
```

Notice the first test - it has an async assertion that fails after 1 second while the second test is running.

<img width=""1275"" alt=""Screen Shot 2020-01-03 at 10 41 47 AM"" src=""https://user-images.githubusercontent.com/2212006/71732596-aa9f9f00-2e15-11ea-9cca-bde94a42161d.png"">

The error claims the exception was thrown from the application code, but it is a test assertion. Can we accurately assign each assertion to its test?",bug
544249903,expect(map).to.be.empty does not behave naturally,"```js
it('expect map', () => {
    expect(new Map([['a', 1]])).to.not.be.empty;
});
```

This test fails with the incorrect assertion: ""expected {} not to be empty"". It seems like Cypress is interpreting the Map object as some kind of DOM element, which it thinks is empty? Similarly, this test incorrectly passes if the `.not` is removed.

<img width=""706"" alt=""Screen Shot 2019-12-31 at 1 48 00 PM"" src=""https://user-images.githubusercontent.com/10134896/71631017-5659ac80-2bd4-11ea-8dcb-78106d126292.png"">

Cypress doesn't explicitly say what it does for the `.empty` predicate in its [assertions documentation](https://docs.cypress.io/guides/references/assertions.html#Chai) but it does link to the [full list of assertions](https://www.chaijs.com/api/bdd/#method_empty) which specify that for a Map, it will assert that the map has size 0. Even if the test code is changed to `expect(new Map([['a', 1]])).to.be.a('map').that.is.not.empty` the ""empty"" assertion is the one that fails.
",bug
543099057,Custom 'Should' error messages are not dynamic,"<!-- Is this a question? Don't open an issue. Ask in our chat https://on.cypress.io/chat  -->

### Current behavior:
```js
it('fails with custom message via overwrite of should', () => {
    cy.wrap(1).should('eq', 1, { message: 'custom error message 1'})
    cy.wrap(1).should('eq', 2, { message: 'custom error message 2'})
  })
```

Actual error message:
```
CustomError:  custom error message 1
```

Expected error  Message:
```
CustomError:  custom error message 2
```

<!-- images, stack traces, etc -->

### Desired behavior:

Custom error messages should be dynamic and not static.

If a 'should' fails, then the custom message of where a 'should'  failed is expected to  be displayed and not the first custom error message on the test run. 

<!-- A clear concise description of what you want to happen -->

### Steps to reproduce: (app code and test code)
```js
  /*
    Ref: https://docs.cypress.io/api/cypress-api/custom-commands.html#Overwrite-Existing-Commands
    Add this to /cypress/support/commands.js
  */
  Cypress.Commands.overwrite('should', (originalFn, actual, assertion, expected, options) => {
    if (options && options.message) {
      cy.on('fail', (error, runnable) => {
        error.name = 'CustomError'
        error.message = options.message
        throw error // throw error to have test still fail
      })
    }
    return originalFn(actual, assertion, expected, options)
  })

it('fails with custom message via overwrite of should', () => {
    cy.wrap(1).should('eq', 1, { message: 'custom error message 1'})
    cy.wrap(1).should('eq', 2, { message: 'custom error message 2'})
  })
```
<!-- Issues without reproducible steps WILL BE CLOSED -->

<!-- You can fork https://github.com/cypress-io/cypress-test-tiny repo, set up a failing test, then tell us the repo/branch to try. -->

### Versions
v3.8.0
<!-- Cypress, operating system, browser -->
OS Windows 10, browser chrome
",bug
543028672,Selector Playground does not work for me on specific Salesforce based sites,"I couldn't find any other issue like the one I seem to be having, when browsing selector playground issues that have already been created. I don't really know how to investigate this further. It happens every time I try to click this selector playground button (boxed in red). So it has never worked for me on the sites I need to test. But it does work on google.com. So my only vague idea so far is that it could be related to salesforce somehow, since to build our sites we use lightning and aura web components.

### Current behavior:
![image](https://user-images.githubusercontent.com/56280950/71535788-eabacb00-28c5-11ea-9f21-eddc272f5366.png)

https://files.gitter.im/cypress-io/cypress/eHIk/image.png

```
cypress_runner.js:162659 [mobx] Encountered an uncaught exception that was thrown by a reaction or observer component, in: 'Reaction[Autorun@32]' TypeError: Cannot read property 'length' of undefined
    at superMatcher (cypress_runner.js:14146)
    at Sizzle.select (cypress_runner.js:14342)
    at Function.Sizzle [as find] (cypress_runner.js:12510)
    at jQuery.fn.init.find (cypress_runner.js:14541)
    at getOrCreateSelectorHelperDom (cypress_runner.js:177581)
    at Object.addOrUpdateSelectorPlaygroundHighlight (cypress_runner.js:177609)
    at AutIframe._clearHighlight (cypress_runner.js:176393)
    at AutIframe.toggleSelectorHighlight (cypress_runner.js:176584)
    at cypress_runner.js:177129
    at reactionRunner (cypress_runner.js:162926)
    at trackDerivedFunction (cypress_runner.js:162090)
    at Reaction../node_modules/mobx/lib/mobx.js.Reaction.track (cypress_runner.js:162630)
    at Reaction.onInvalidate (cypress_runner.js:162907)
    at Reaction../node_modules/mobx/lib/mobx.js.Reaction.runReaction (cypress_runner.js:162596)
    at runReactionsHelper (cypress_runner.js:162733)
    at reactionScheduler (cypress_runner.js:162711)
```


Here is the line of code it references in the stack trace. If the answer to my problem is contained in the comments/messages, I don't understand how, so maybe someone could just explain it to me, if this is the case.
![image](https://user-images.githubusercontent.com/56280950/71536015-3b332800-28c8-11ea-86a4-4bc645499894.png)

### Desired behavior:

I would like the playground selector to work as described by its documentation. It very obviously is not working on these sites. I'll understand if this is an issue that cypress can't fix if it is only specific to certain sites. Maybe it really is an issue contained primarily in cypress code though? Or maybe I can find help on how I can resolve it on my end.

### Steps to reproduce: (app code and test code)

simply run a test that only visits this URL:

1. `cy.visit('https://help.doterra.com/')`
2. Open the playground selector
3. Click on the arrow button as if to select elements (the one boxed in red from the first screen shot)
4. mouse off of that button and immediately I always see the mobx console error, if it hasn't occurred even earlier
5. At this point the selector playground seems stuck and the error will happen over and over trying to click that button

If I need to create a more contained environment to reproduce it in, I can do that, but I figured this should work since that is a public site. It would be very interesting to me if someone else could not reproduce it this way.

### Versions
Cypress package version: 3.7.0
Cypress binary version: 3.7.0
![image](https://user-images.githubusercontent.com/56280950/71536442-92d39280-28cc-11ea-8e67-c66ed964d685.png)
Chrome Version 79.0.3945.88 (Official Build) (64-bit)",bug
542891823,Error: could not find CRI target / Failed to connect to Chrome,"### Current behavior:

`cypress run --headless --browser chrome` is failing in GitHub Actions with this error:

```
Failed to connect to Chrome, retrying in 1 second (attempt 18/32)
could not find CRI target
Error: could not find CRI target
    at lazyAssLogic (/home/runner/.cache/Cypress/3.8.1/Cypress/resources/app/packages/server/node_modules/lazy-ass/index.js:110:14)
    at lazyAss (/home/runner/.cache/Cypress/3.8.1/Cypress/resources/app/packages/server/node_modules/lazy-ass/index.js:115:28)
    at /home/runner/.cache/Cypress/3.8.1/Cypress/resources/app/packages/server/lib/browsers/protocol.js:81:5
    at tryCatcher (/home/runner/.cache/Cypress/3.8.1/Cypress/resources/app/packages/server/node_modules/bluebird/js/release/util.js:16:23)
    at Promise._settlePromiseFromHandler (/home/runner/.cache/Cypress/3.8.1/Cypress/resources/app/packages/server/node_modules/bluebird/js/release/promise.js:547:31)
    at Promise._settlePromise (/home/runner/.cache/Cypress/3.8.1/Cypress/resources/app/packages/server/node_modules/bluebird/js/release/promise.js:604:18)
    at Promise._settlePromise0 (/home/runner/.cache/Cypress/3.8.1/Cypress/resources/app/packages/server/node_modules/bluebird/js/release/promise.js:649:10)
    at Promise._settlePromises (/home/runner/.cache/Cypress/3.8.1/Cypress/resources/app/packages/server/node_modules/bluebird/js/release/promise.js:729:18)
    at _drainQueueStep (/home/runner/.cache/Cypress/3.8.1/Cypress/resources/app/packages/server/node_modules/bluebird/js/release/async.js:93:12)
    at _drainQueue (/home/runner/.cache/Cypress/3.8.1/Cypress/resources/app/packages/server/node_modules/bluebird/js/release/async.js:86:9)
    at Async._drainQueues (/home/runner/.cache/Cypress/3.8.1/Cypress/resources/app/packages/server/node_modules/bluebird/js/release/async.js:102:5)
    at Immediate.Async.drainQueues [as _onImmediate] (/home/runner/.cache/Cypress/3.8.1/Cypress/resources/app/packages/server/node_modules/bluebird/js/release/async.js:15:14)
    at processImmediate (internal/timers.js:439:21)
```

Link to the failing build: https://github.com/sweetalert2/sweetalert2/runs/365206238

### Steps to reproduce: (app code and test code)

Here's the GitHub Actions configuration: https://github.com/sweetalert2/sweetalert2/blob/master/.github/workflows/coverage.yml

The `cy:run` command is defined here: https://github.com/sweetalert2/sweetalert2/blob/master/package.json#L98

### Versions

Cypress: 3.8.1 
Operating System: Ubuntu 18.04
",bug
542847093,DOM Snapshot always shows 'loading DOM element' when hovering over any command.,"### Current behavior:

After the test runs, tests are passing just fine in full browser mode, and headless both, and I want to see DOM snapshot in the point of certain step, BUT there is always default app splash screen loader displayed on top of it. I can run a manual script in the browser console to remove loader after I select (pin) any step, but that is not something that works for us having to enter the code every time you want to see some step.

![hIapu8T](https://user-images.githubusercontent.com/1271364/71574707-5005fa80-2b18-11ea-87c5-5c5fbd686db2.png)


### Desired behavior:

After test run finishes and I click on the certain step I want to be able to use cypress tool to see DOM state before and after the action executed by cypress tool. 

### Steps to reproduce: (app code and test code)

Test is very simple and it passes fine, you can see all the screens and steps when it's running, once it's done and you pin any step in the test you can see the splashscreen animation over the UI. 

### Versions
Cypress 3.7.0 (we didn't upgrade to 3.8.0 due to problems where .clear() and .type() commands stopped working properly after the update. 

Windows 10 Pro

Browser : Chrome Version 79.0.3945.88
<!-- Cypress, operating system, browser -->
",bug
540905555,Screenshot of element is not properly captured with `scroll-behavior: smooth`,"<!-- Is this a question? Don't open an issue. Ask in our chat https://on.cypress.io/chat  -->

### Current behavior:
I want to screenshots some elements, but screenshot command for some reason scroll when picture is taken. So picture doesn't contain the element.

There is video from testing...
https://images.dvanakoncisveta.cz/nav.spec.js.mp4

There is taken picture...
https://images.dvanakoncisveta.cz/actual.png
<!-- images, stack traces, etc -->

### Desired behavior:
Screenshot the set element...

<!-- A clear concise description of what you want to happen -->

### Steps to reproduce: (app code and test code)
I'm using `cypress-plugin-snapshots` plugin with default settings. But I havesame issue with cypress screenshot() too.
`it('nav', () => {
	cy.get('nav').toMatchImage();
});
`

Working demo with this issue is here https://github.com/Workito/cypress-test-tiny
<!-- Issues without reproducible steps WILL BE CLOSED -->

<!-- You can fork https://github.com/cypress-io/cypress-test-tiny repo, set up a failing test, then tell us the repo/branch to try. -->

### Versions
cypress: 3.8.0
cypress-plugin-snapshots: 1.2.9
npm: 6.7.0
node: 11.15.0
Browser: Electron 78 (headless) or Chrome 79 (same issue)
OS: MacOs 10.15.2 (19C57)
<!-- Cypress, operating system, browser -->
",bug
539824537, cy.wait() timeout even though XHR requests were made (graphql requests),"<!-- Is this a question? Don't open an issue. Ask in our chat https://on.cypress.io/chat  -->

### Current behavior:
We have a project using [Relay](https://relay.dev/en/) which uses a single GraphQL API endpoint. Due to route nesting, most pages in this project call the GraphQL endpoint several times (anywhere from 2 to 6 calls) causing a waterfall of API calls.

To test if a page has loaded correctly we define a `beforeEach` block that starts `cy.server()` and defines the route `cy.route('POST', '/graphql').as('graphql')`. Then in the `it(...)` block we `cy.visit('/')` the page and then call `cy.wait('@graphql')` as many times as the endpoint gets hit.

Now requests to the endpoint always happen in the same order but responses do not (which is to be expected). When responses come back `cy.wait()` will sometimes get confused and timeout.

For example. Let's say the page does 3 requests and so we wait 3 times. The first request comes back and the first wait will pick it up. Now the test is waiting for the second request to resolve but the third request comes back instead before the second one. The second wait will then pick up the third response and the test continues to the third wait. Then the second response comes back but the third wait will not pick it up and times out saying that a response never occurred.

It might be that the second request resolved last but before the third `cy.wait()` call.

I hope this is not too confusing :)

Here's a screenshot of what I just explained. Note the response order in the console and that they all resolved correctly but `cy.wait()` timed out anyways.
![image](https://user-images.githubusercontent.com/6989161/71107133-8e053500-218e-11ea-91af-50723512674f.png)

Here is the same test passing.
![image](https://user-images.githubusercontent.com/6989161/71107975-25b75300-2190-11ea-8ee0-b3838ac1e3e8.png)

The more `cy.wait()`s the higher the failure rate of the test. if you're only waiting for two requests it rarely fails.

We get the same behavior if we call `cy.wait(['@graphql', '@graphql', '@graphql'])`

Here's the example test code. I'll be linking the repo below
```javascript
/// <reference types=""Cypress"" />

const getQueryName = function(xhr) {
  const regexp = /\w+Query/gm;
  const match = xhr.requestBody.query.match(regexp);
  return match[0];
};

context(""Wait issue"", () => {
  beforeEach(() => {
    cy.server();
    cy.route({
      method: ""POST"",
      url: ""**/next-js-with-relay-modern-example"",
      // optional route config added only for debugging
      onRequest: xhr => console.log(""onRequest:"", getQueryName(xhr)),
      onResponse: xhr => console.log(""onResponse:"", getQueryName(xhr)),
      onAbort: args => console.log(""onAbort:"", args)
    }).as(""query"");
  });

  it(""does not timeout 01"", () => {
    // first we vist url which triggers
    // waterfall calls to graphql endpoint
    cy.visit(""/"");

    // now we wait for requests to resolve
    // NOTE: .then(...) added only for debugging
    cy.wait(""@query"").then(xhr => cy.log(""query1:"", getQueryName(xhr)));
    cy.wait(""@query"").then(xhr => cy.log(""query2:"", getQueryName(xhr)));
    cy.wait(""@query"").then(xhr => cy.log(""query3:"", getQueryName(xhr)));
    cy.wait(""@query"").then(xhr => cy.log(""query4:"", getQueryName(xhr)));
    cy.wait(""@query"").then(xhr => cy.log(""query5:"", getQueryName(xhr)));
  });
});
```

### Desired behavior:

`cy.wait()` picks up all responses correctly and does not timeout

### Steps to reproduce: (app code and test code)

I have created an [example project repo](https://github.com/daironmichel/cypress-wait-timeout-example) that you can clone and run locally

```bash
git clone git@github.com:daironmichel/cypress-wait-timeout-example.git
cd cypress-wait-timeout-example
yarn install
yarn dev
```
run test on cypress
```bash
yarn run cypress open
```
Run `wait.spec.js`

Note: You might need to run it 2 or 3 times to see it fail.

### Versions

cypress 3.8.0
",bug
538864811,cy.wrap does not respect timeout,"This example spec file fails with the error below:

```js
describe('Cypress wait', () => {
  it('wrap does not wait', () => {
    cy.wrap(
        new Promise((resolve) => setTimeout(resolve, 5000)), {timeout: 20000});
  });
});
```

```
 Cypress wait
    1) wrap does not wait


  0 passing (4s)
  1 failing

  1) Cypress wait wrap does not wait:
     Error: Cypress command timeout of '4000ms' exceeded.
      at http://localhost:57838/__cypress/runner/cypress_runner.js:103532:25
```

Shouldn't `cy.wrap` respect the `timeout` option? The test passes if I pass `--config defaultCommandTimeout=6000` on the command line, but I want to pass a specific timeout for this `cy.wrap` command.",bug
538024648,get() inside should() with callback applies default assertion,"### Current behavior:

Using `get().should(not.exist)` inside should with callback applies default `exist` assertion.

![image](https://user-images.githubusercontent.com/3234900/70860669-c7d30300-1f24-11ea-884a-1ba8e99d6133.png)


### Desired behavior:

`should` will skip the default 

### Steps to reproduce: (app code and test code)

Use this example:

```js
describe(""ad"", () => {
    it(""test"", () => {
        cy.visit(""https://www.cypress.io/"")
        cy.get(""*[aria-label='pricing']"")
            .invoke('text').should(someValue => { 
                cy.get(""asdad"", {timeout: 5000}).should(""not.exist"");
            })
    })
})
```

The element ""asdad"" does not exist  but even though cypress fails while applying the default asertion.

### Versions

Cypress 3.8.0",bug
537780256,should('not.be.visible') fails for non visible elements dur to overflow: hidden and set height,"## Current behavior: 
There continues to be issues with visibility tests. I saw the list of issues compiled at https://github.com/cypress-io/cypress/issues/1242 but I am not sure this is one of the issues still listed as open.

In summary: an element that is not visible due to parent `overflow: hidden` is still reported as visible.

### Desired behavior:
Elements not visible due to parent `overflow: hidden` should be reported as not visible by cypress.

### Steps to reproduce: (app code and test code)
Use this code:

```js
describe('', () => {
  before(function() {
    let html = `<!DOCTYPE html>
<html lang=""en"">
<head>
  <meta charset=""UTF-8"">
  <style>
    * {
      box-sizing: border-box;
    }
    .flex-container {
      display: flex;
      flex-direction: row;
      flex-wrap: wrap;
      justify-content: flex-start;
      align-items: stretch;
      align-content: stretch;
    }
    .copy {
      margin-right: 50px;
      width: 60%;
    }
    .accordion-group {
      flex: 1;
    }
    .accordion {
      overflow: hidden;
    }
    .accordion-content {
      background: red;
    }
  </style>
</head>
<body>
  <div class=""flex-container"">
      <div class=""copy"">
        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin fermentum, velit at eleifend tempus, mi mauris dapibus nunc, vitae semper tellus augue non purus. Suspendisse potenti. Praesent laoreet ornare lorem. Quisque pellentesque tempor magna sit amet facilisis. Pellentesque eleifend dui in nunc tempor, lacinia ullamcorper nunc aliquam. Mauris pretium tincidunt nunc, quis vehicula purus volutpat non. Donec consequat erat velit, nec tincidunt mauris dignissim quis. Sed consectetur, diam dictum feugiat faucibus, dui ex ullamcorper odio, ac rhoncus risus lacus et eros. Sed et vestibulum neque, a viverra felis. Ut quam nisi, dapibus efficitur arcu quis, mollis rhoncus justo. Morbi tristique consectetur tortor. Phasellus posuere, nulla et tempus mollis, est lacus malesuada felis, ac tempor risus ipsum at sapien. Nam ac urna purus. Ut vitae urna ornare, convallis magna vitae, posuere tellus.</p>
      </div>
      <div class=""accordion-group"">
        <div class=""accordion"">
            <h2 class=""accordion-header"">Vestibulum</h2>
            <div class=""accordion-content"">
              <p>Morbi nisl nunc, tincidunt vel est eu, commodo venenatis lorem. Etiam malesuada sagittis magna, sed suscipit orci tristique vel. Proin vulputate rhoncus dictum. Suspendisse volutpat congue metus, ut egestas magna sollicitudin in. Morbi mollis malesuada urna, vitae laoreet elit rutrum rutrum. Cras at tincidunt justo. Donec varius nisi a dolor vehicula sodales. Quisque eu nisl hendrerit, cursus massa sit amet, convallis nulla. Phasellus dapibus facilisis tellus, sed faucibus mauris gravida ultricies. Sed facilisis efficitur nunc, et vehicula augue dictum ac. Nunc sed ante lorem. Vivamus dapibus ante quis urna dignissim rutrum quis a elit. Nam at mi sit amet felis eleifend ultrices.</p>
            </div>
        </div>
        <div class=""accordion"">
            <h2 class=""accordion-header"">Curabitur</h2>
            <div class=""accordion-content"">
              <p>In risus ligula, fermentum nec libero eget, faucibus rutrum libero. Proin ligula turpis, porttitor ac nisl pulvinar, aliquet pretium nulla. Aliquam vel porta ante. Nullam dictum enim a justo elementum, et accumsan magna malesuada. Suspendisse lacinia, urna sed egestas scelerisque, lectus arcu congue sapien, quis sollicitudin nibh massa ut lorem. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Sed mattis aliquet libero, ac porta enim sagittis quis. Pellentesque interdum ipsum euismod, sollicitudin est eu, commodo orci. Sed a arcu justo. Sed dignissim, arcu vitae vehicula imperdiet, diam neque pellentesque leo, quis bibendum dolor lectus eu tellus. In faucibus, tellus nec malesuada consectetur, quam dolor pretium diam, at vehicula massa lacus nec ligula. Aliquam ornare, mi in vehicula commodo, sem magna dignissim felis, vel hendrerit erat elit quis nulla.</p>
            </div>
        </div>
      </div>
  </div>
  <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery/3.4.1/jquery.min.js'></script>
  <script>
    jQuery(document).ready(function () {
      jQuery('.accordion').each(function () {
        var elem = jQuery(this);
        elem.css('height', elem.find('.accordion-header').outerHeight(true));
      });
    });
  </script>
</body>
</html>
`;
    cy.document().then(document => {
      document.write(html);
      document.close();
    });
  });

  it('', function() {
    cy.get('.accordion-content').should('exist').should('not.be.visible');
  });
});
```

### Versions
cypress 3.8.0

",bug
537599902,Filter non-default orgs before checking to display empty orgs view during project setup,"### Current behavior:

Our services are moving away from always utilizing a 'default organization'. The Desktop-Gui however is naively expecting a 'default organization' to always be present. 

The user facing consequence of this is that if an organization has 1 organization that is not a default organization - ~maybe they converted it to professional~ (this actually can't happen because we create a new default org) or only have 1 organization setup due to SSO login - then the organization selection will display as empty and they cannot select an organization to set up their project within. 

![no-orgs copy](https://user-images.githubusercontent.com/1271364/70809504-47ab8100-1df0-11ea-8a49-e79e0f474e59.png)


### Desired behavior:

The Desktop-GUI should first filter out any default orgs and then check the length of the leftover orgs to decide whether the empty view displays for orgs. Not naively check that is is > 1 in length total. 

### Versions

3.7.0

### To Fix:

This line needs to filter our orgs that have `default: true` first, and then check if the length of the remaining orgs is greater than 1. 

https://github.com/cypress-io/cypress/blob/develop/packages/desktop-gui/src/runs/setup-project-modal.jsx#L221:L221

",bug
537486222,Cypress should not allow selecting a disabled option within a disabled fieldset,"### Current behavior:

If you disable a form group it is still possible to change the value of a select input inside

### Desired behavior:

the select input is disabled so should error telling you it is unchangeable, similar to the not visible error

### Steps to reproduce: (app code and test code)

```js
<fieldset _ngcontent-c15="""" class=""nopadding"" disabled="""">
  <div _ngcontent-c15="""" class=""form-group"">
      <label _ngcontent-c15="""" for=""selectBox"">Test Select</label>
      <select _ngcontent-c15="""" class=""form-control ng-valid ng-untouched ng-pristine"" formcontrolname=""selectBox"" id=""selectBox"" ng-reflect-name=""selectBox"">
          <option _ngcontent-c15="""" disabled=""true"" value=""0: undefined"" hidden="""">
              Select Version
          </option>
          <option _ngcontent-c15="""" value=""1"" ng-reflect-value=""1"">1</option>
          <option _ngcontent-c15="""" value=""2"" ng-reflect-value=""2"">2</option>
          <option _ngcontent-c15="""" value=""3"" ng-reflect-value=""3"">3</option>
          <option _ngcontent-c15="""" value=""4"" ng-reflect-value=""4"">4</option>
          <option _ngcontent-c15="""" value=""5"" ng-reflect-value=""5"">5</option>
          <option _ngcontent-c15="""" value=""6"" ng-reflect-value=""6"">6</option>
          <option _ngcontent-c15="""" value=""7"" ng-reflect-value=""7"">7</option>
          <option _ngcontent-c15="""" value=""8"" ng-reflect-value=""8"">8</option>
          <option _ngcontent-c15="""" value=""9"" ng-reflect-value=""9"">9</option>
          <option _ngcontent-c15="""" value=""10"" ng-reflect-value=""10"">10</option>
      </select>
  </div>
</fieldset>
```

```js
cy.get('select')
  .filter('#selectBox')
  .select(3)
  .find(':selected')
  .should('contain', 0)
```

### Versions

cy: 3.5
os: windows 10
browser: chrome 78
",bug
536027258,Adding assertion that the subject is a very large array hangs the test runner,"Cypress v3.7.0 on Windows
Reproduction https://github.com/cypress-io/cypress-test-tiny/tree/test-wrap-large-array

This test passes after about a second

```js
it('works', () => {
  const arr = new Uint8ClampedArray(2560000)
  cy.wrap(arr)
})
```

<img width=""1280"" alt=""Screen Shot 2019-12-10 at 5 15 50 PM"" src=""https://user-images.githubusercontent.com/2212006/70573944-ef1a8080-1b70-11ea-8aa0-72f8cff1ba7b.png"">

but if we add any assertion like

```js
it('works', () => {
  const arr = new Uint8ClampedArray(2560000)
  cy.wrap(arr)
    .should('have.length', 2)
})
```
then the Test Runner starts hanging. Breaking the debugger to see what is going on shows the Chai assertion trying to format the values in the array

<img width=""1280"" alt=""Screen Shot 2019-12-10 at 5 13 58 PM"" src=""https://user-images.githubusercontent.com/2212006/70574023-15d8b700-1b71-11ea-8134-992a87915c02.png"">

<img width=""1280"" alt=""Screen Shot 2019-12-10 at 5 14 13 PM"" src=""https://user-images.githubusercontent.com/2212006/70574031-1a9d6b00-1b71-11ea-9fcc-09de1709762d.png"">

Our code in the stack
<img width=""1282"" alt=""Screen Shot 2019-12-10 at 5 14 55 PM"" src=""https://user-images.githubusercontent.com/2212006/70574053-24bf6980-1b71-11ea-93ec-f1bd85e23dbd.png"">

This showed up in the user's project https://github.com/ericblade/quagga2-reader-qr/blob/8e1665bda9832fb31e32f4eb8eea2364c5d1c37d/e2e/cypress/integration/test_spec.ts#L50

Expected: not freezing and maybe formatting the value differently.",bug
534931264,wslbridge (Ubuntu on Windows) The display compositor is frequently crashing.,"Using cypress in a Ubuntu on Windows fails with an error:

```
It looks like this is your first time using Cypress: 3.7.0

 ✔  Verified Cypress! /home/johnsmith/.cache/Cypress/3.7.0/Cypress

Opening Cypress...
[23948:1209/141647.044586:FATAL:gpu_data_manager_impl_private.cc(892)] The display compositor is frequently crashing. Goodbye.
Unhandled rejection Error: The Test Runner unexpectedly exited via a close event with signal SIGILL

Please search Cypress documentation for possible solutions:

https://on.cypress.io

Check if there is a GitHub issue describing this crash:

https://github.com/cypress-io/cypress/issues

Consider opening a new issue.

----------

Platform: linux (Ubuntu Linux - 18.04)
Cypress Version: 3.7.0
    at /mnt/c/Users/johnsmith/Desktop/Development/dermalog-document/node_modules/cypress/lib/errors.js:193:15
    at tryCatcher (/mnt/c/Users/johnsmith/Desktop/Development/dermalog-document/node_modules/bluebird/js/release/util.js:16:23)
    at Promise._settlePromiseFromHandler (/mnt/c/Users/johnsmith/Desktop/Development/dermalog-document/node_modules/bluebird/js/release/promise.js:512:31)
    at Promise._settlePromise (/mnt/c/Users/johnsmith/Desktop/Development/dermalog-document/node_modules/bluebird/js/release/promise.js:569:18)
    at Promise._settlePromise0 (/mnt/c/Users/johnsmith/Desktop/Development/dermalog-document/node_modules/bluebird/js/release/promise.js:614:10)
    at Promise._settlePromises (/mnt/c/Users/johnsmith/Desktop/Development/dermalog-document/node_modules/bluebird/js/release/promise.js:693:18)
    at Promise._fulfill (/mnt/c/Users/johnsmith/Desktop/Development/dermalog-document/node_modules/bluebird/js/release/promise.js:638:18)
    at Promise._resolveCallback (/mnt/c/Users/johnsmith/Desktop/Development/dermalog-document/node_modules/bluebird/js/release/promise.js:432:57)
    at Promise._settlePromiseFromHandler (/mnt/c/Users/johnsmith/Desktop/Development/dermalog-document/node_modules/bluebird/js/release/promise.js:524:17)
    at Promise._settlePromise (/mnt/c/Users/johnsmith/Desktop/Development/dermalog-document/node_modules/bluebird/js/release/promise.js:569:18)
    at Promise._settlePromise0 (/mnt/c/Users/johnsmith/Desktop/Development/dermalog-document/node_modules/bluebird/js/release/promise.js:614:10)
    at Promise._settlePromises (/mnt/c/Users/johnsmith/Desktop/Development/dermalog-document/node_modules/bluebird/js/release/promise.js:693:18)
    at Promise._fulfill (/mnt/c/Users/johnsmith/Desktop/Development/dermalog-document/node_modules/bluebird/js/release/promise.js:638:18)
    at Promise._resolveCallback (/mnt/c/Users/johnsmith/Desktop/Development/dermalog-document/node_modules/bluebird/js/release/promise.js:432:57)
    at Promise._settlePromiseFromHandler (/mnt/c/Users/johnsmith/Desktop/Development/dermalog-document/node_modules/bluebird/js/release/promise.js:524:17)
    at Promise._settlePromise (/mnt/c/Users/johnsmith/Desktop/Development/dermalog-document/node_modules/bluebird/js/release/promise.js:569:18)
```

Can someone help?
",bug
534451914,cy.task passes null as default argument,"Seems `cy.task` calls task with `null` value instead of `undefined` if the argument was NOT specified in the spec call

Cypress v3.7.0

Reproduction in https://github.com/cypress-io/cypress-test-tiny/tree/default-arg-in-task https://github.com/cypress-io/cypress-test-tiny/commit/c899a7967a1a0383a3c6ff70fd2fa54e488a28ed

Imaging we have a task and use default value for its argument like

```js
module.exports = (on, config) => {
  // `on` is used to hook into various events Cypress emits
  // `config` is the resolved Cypress config
  on('task', {
    hello(name = 'world') {
      console.log('hello ', name)

      return null
    }
  })
}
```

When we call `cy.task('hello')` I expect the terminal to print `hello world` but it prints 

```
ET /__cypress/tests?p=cypress/integration/spec.js-609 200 2.326 ms - 619
GET /__cypress/tests?p=cypress/support/index.js-949 200 1.387 ms - -
hello  null
```

## Expected behavior

`cy.task` methods should respect default arguments (we should not be passing `null` values)

",bug
534415351,file name contains character ”+“ not run,"the file `cy_web+_20191207220608.js` is exsite, but run cypress, 

```
Cannot find module web _20191207220608.js, this character ”+“  instead of "" "", so not find the file.
```

### Current behavior:
```
  │ Cypress:    3.7.0                                                                              │
  │ Browser:    Electron 73 (headless)                                                             │
  │ Specs:      1 found (web+_20191207220608/web+_20191207220608.js)                    │
  └────────────────────────────────────────────────────────────────────────────────────────────────┘


────────────────────────────────────────────────────────────────────────────────────────────────────
                                                                                                    
  Running:  web+_20191207220608/web+_20191207220608.js                           (1 of 1)

Oops...we found an error preparing this test file:

  /home/admin/cypress/web _20191207220608/web _20191207220608.js

The error was:

Error: Cannot find module '/home/admin/cypress/web _20191207220608/web _20191207220608.js' from '/home/admin/cypress'

This occurred while Cypress was compiling and bundling your test code. This is usually caused by:

- A missing file or dependency
- A syntax error in the file or one of its dependencies

Fix the error in your code and re-run your tests.
```

",bug
533562516,Problems hitting requests in localhost,"### Current behavior:

I have a backend application running locally with xampp, this application have some API endpoints and the host of the application is http://testapi.localhost

For other side I have a html+js app runing with webpack-dev-server and runs in http://localhost:3000 , when this app load for the first time it  makes a request to the API, something like ""GET - http://testapi.localhost/user/1"". This request is inside the javascrtip app code, is not inside in the Cypress test code.

Now this is the problem, outside Cypress the app works perfectly in any browser, the request is made succesfully but inside Cypress the request fail with the next error message: ""net::ERR_EMPTY_RESPONSE""

I found some sort of ""solution"" but its not perfect, setting the variable HTTP_PROXY = localhost the app works inside Cypress but sometimes I receive this error in the console: ""MaxListenersExceededWarning: Possible EventEmitter memory leak detected"" and Cypress close. 

### Desired behavior:

Make a succesfully request locally that is not in the Cypress test but in the Application code

### Versions
Cypress: 3.7.0
system: Windows 10
Browser: Chrome 78, Canary 80
",bug
530890197,blackout for screenshots does not accurately calculate blackout area,"### Current behavior:

This issue is 2 fold, but overall demonstrates that the algorithm for calculating the blackout area of a screenshot is not thorough enough to cover all situations.

1. When specifying a DOM element to blackout of screenshots, the blackout area is not accurately calculated when run on Chrome versions below 78.0.3904.108.
2. The blackout area is not accurately calcuated at different viewport sizes (Chrome 78).

#### 1. Chrome versions < 78

Below, the screenshot should black out the red area, but as you can see in Chrome 77 it is not.

I also tested this back to version Cypress 3.2.0 and the issues exhibits on all versions of Cypress.

##### Chrome 77.0.3865.90

![blackout-cy-3 7 0-chrome-77 0 3865 90](https://user-images.githubusercontent.com/1271364/69931078-53e03600-14f4-11ea-837a-d6f3b62bff84.png)

##### Chrome 78.0.3904.108

![blackout-cy-3 7 0-chrome-78 0 3904 108](https://user-images.githubusercontent.com/1271364/69931084-593d8080-14f4-11ea-87f2-d035d788a101.png)

#### 2. Viewport size calculations

Below, the screenshot should black out the red area, but as you can see in smaller viewport sizes it is not.

##### 1400x1080

![blackout-1400x1080](https://user-images.githubusercontent.com/1271364/69931393-7a52a100-14f5-11ea-8971-15a0a4b7ed81.png)

##### 1000x660

![blackout-1000x660](https://user-images.githubusercontent.com/1271364/69931409-84749f80-14f5-11ea-8a69-1e3aa0f7852d.png)

##### 850x500

![blackout-850x500](https://user-images.githubusercontent.com/1271364/69931420-8dfe0780-14f5-11ea-83ef-96c2777175f9.png)

##### 450x200

![blackout-450x200](https://user-images.githubusercontent.com/1271364/69931425-98200600-14f5-11ea-984a-ab34e9ad4d86.png)


### Desired behavior:

The DOM element specified should be blacked out on all Chrome versions at all viewport sizes

### Steps to reproduce: (app code and test code)

I tried several variations of content, removing the lorem ipsum (so that scroll happens) will make the blackout not work or work under certain circumstances, but the below example *will fail* in all examples specified above.

`index.html`

```html
<html>
<body>
  <p>Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec ullamcorper nulla non metus
  auctor fringilla. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Lorem ipsum dolor sit
  amet, consectetur adipiscing elit. Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor. Aenean eu leo
  quam. Pellentesque ornare sem lacinia quam venenatis vestibulum.
  
  Nullam id dolor id nibh ultricies vehicula ut id elit. Donec ullamcorper nulla non metus auctor fringilla. Cras justo
  odio, dapibus ac facilisis in, egestas eget quam. Donec id elit non mi porta gravida at eget metus. Nulla vitae elit
  libero, a pharetra augue. Maecenas sed diam eget risus varius blandit sit amet non magna. Maecenas faucibus mollis
  interdum.
  
  Nulla vitae elit libero, a pharetra augue. Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Donec sed
  odio dui. Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor.
  
  Cras mattis consectetur purus sit amet fermentum. Donec ullamcorper nulla non metus auctor fringilla. Cras justo odio,
  dapibus ac facilisis in, egestas eget quam. Etiam porta sem malesuada magna mollis euismod. Sed posuere consectetur est
  at lobortis.Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec ullamcorper nulla non metus
  auctor fringilla. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Lorem ipsum dolor sit
  amet, consectetur adipiscing elit. Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor. Aenean eu leo
  quam. Pellentesque ornare sem lacinia quam venenatis vestibulum.
  
  Nullam id dolor id nibh ultricies vehicula ut id elit. Donec ullamcorper nulla non metus auctor fringilla. Cras justo
  odio, dapibus ac facilisis in, egestas eget quam. Donec id elit non mi porta gravida at eget metus. Nulla vitae elit
  libero, a pharetra augue. Maecenas sed diam eget risus varius blandit sit amet non magna. Maecenas faucibus mollis
  interdum.
  
  Nulla vitae elit libero, a pharetra augue. Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Donec sed
  odio dui. Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor.
  
  Cras mattis consectetur purus sit amet fermentum. Donec ullamcorper nulla non metus auctor fringilla. Cras justo odio,
  dapibus ac facilisis in, egestas eget quam. Etiam porta sem malesuada magna mollis euismod. Sed posuere consectetur est
  at lobortis.Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec ullamcorper nulla non metus
  auctor fringilla. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Lorem ipsum dolor sit
  amet, consectetur adipiscing elit. Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor. Aenean eu leo
  quam. Pellentesque ornare sem lacinia quam venenatis vestibulum.
  
  Nullam id dolor id nibh ultricies vehicula ut id elit. Donec ullamcorper nulla non metus auctor fringilla. Cras justo
  odio, dapibus ac facilisis in, egestas eget quam. Donec id elit non mi porta gravida at eget metus. Nulla vitae elit
  libero, a pharetra augue. Maecenas sed diam eget risus varius blandit sit amet non magna. Maecenas faucibus mollis
  interdum.
  
  Nulla vitae elit libero, a pharetra augue. Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Donec sed
  odio dui. Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor.
  </p>
  <div width=""560"" height=""315"" style=""background-color: red;"">Nullam id dolor id nibh ultricies vehicula ut id elit. Donec ullamcorper nulla non metus auctor fringilla. Cras justo
  odio, dapibus ac facilisis in, egestas eget quam. Donec id elit non mi porta gravida at eget metus. Nulla vitae elit
  libero, a pharetra augue. Maecenas sed diam eget risus varius blandit sit amet non magna. Maecenas faucibus mollis
  interdum.
  
  Nulla vitae elit libero, a pharetra augue. Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Donec sed
  odio dui. Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor.
  
  Cras mattis consectetur purus sit amet fermentum. Donec ullamcorper nulla non metus auctor fringilla. Cras justo odio,
  dapibus ac facilisis in, egestas eget quam. Etiam porta sem malesuada magna mollis euismod. Sed posuere consectetur est
  at lobortis.Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec ullamcorper
  nulla non metus
  auctor fringilla. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Lorem ipsum dolor sit
  amet, consectetur adipiscing elit. Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor. Aenean eu leo
  quam. Pellentesque ornare sem lacinia quam venenatis vestibulum.
  
  Nullam id dolor id nibh ultricies vehicula ut id elit. Donec ullamcorper nulla non metus auctor fringilla. Cras justo
  odio, dapibus ac facilisis in, egestas eget quam. Donec id elit non mi porta gravida at eget metus. Nulla vitae elit
  libero, a pharetra augue. Maecenas sed diam eget risus varius blandit sit amet non magna. Maecenas faucibus mollis
  interdum.
  
  Nulla vitae elit libero, a pharetra augue. Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Donec sed
  odio dui. Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor.</div>
</body>
<script>
</script>
</html>
```

`spec.js`

```js
it('blackout', () => {
  cy.viewport(1400, 1080) // play with viewport sizes here
  cy.visit('index.html')
  cy.screenshot('blackout', { blackout: ['div'] })
})
```

### Versions

Cypress 3.2.0 - 3.7.0 (all tested versions)
Chrome 77.0.3865.90
",bug
530276494,"Cypress tells Input is disabled, but it isn't, while typing","### Current behavior:

I'd like to test login page on Ionic (v3) website. But when I invoke method `.type` there appears error:

```
CypressError: cy.type() failed because it targeted a disabled element.
```

Error does not occurs always. Test fails is about 20-25% runs. Analysing Cypress' source code I realized that it can behave that way because Input is not focused. I was looking at file: https://github.com/cypress-io/cypress/blob/70ef58bede981567732697c8b79fe7642ab164cf/packages/driver/src/cy/commands/actions/type.js from 407 line. 

So I added method `.focus` before `.type`. But then I am given another error: 

```
CypressError: Timed out retrying: expected '<input.text-input.text-input-md>' to have value 'asdasddd', but the value was 'adasddd'
```

which means that not every character was typed into input (propably every, but not second)

### Desired behavior:

I assume that I have done everything right, and there is no problem with my website, so expected result would be not to got any error using method `.type`. Otherwise, please tell if I'm doing anything incorrect

### Steps to reproduce: (app code and test code)

Here is reproduction project that test my application:

https://github.com/mszkudelski/cypress-bug-repro

You can use npm script or use my bash `script.sh` that runs spec 20 times and log result in `log.txt` file.

### Versions

Cypress: 3.6.1, 
operating system: MacOs 10.15.1 
browser: Electron headless and Chrome",bug
529374733,Cypress --> Test doubled,"### Current behavior:

In one of my xxx.spec.js files I have one context with one tests, I noticed that after adding an `import` inside `commands.js` from `xxx.specs.js` file, the Test Runner shows (and runs) the tests twice !

Depending on commenting/uncommenting the import inside the `commands.js` file, the Test Runner shows one context with one test (desired) or two contexts with one test per context (current)

### Desired behavior:

Test Runner should show/run just the described tests, not double them

### Steps to reproduce: (app code and test code)

In my actual real project I have three `*.spec.js` files, the latter in which I found the problem has one context with four tests, but I get the problem even with this minified version.

- `cypress/integration/share.spec.js`

```js
/* eslint-disable no-undef */
/// <reference types=""Cypress"" />
export const MY_CONSTANT = ""myCostant"";
context(""test1"", () => {
  it(""Project - Should show 'No shares'"", () => {
    console.log(""Hi"");
  });
});
```

- `cypress/support/commands.js`

```js
import { MY_CONSTANT } from ""../integration/share.spec.js"";
// no other code lines necessary!!
```

### Versions

Cypress 3.6.1, Node v10.16.3, npm v6.9.0
",bug
526879460,Azure Pipeline commit sha incorrect for github status check,"<!-- Is this a question? Don't open an issue. Ask in our chat https://on.cypress.io/chat  -->

### Current behavior:

A status check is generate for the merge commit of a PR instead of the commit from the head branch. (example: https://github.com/microsoft/BotFramework-Composer/commit/20df2712b096decaf92c22bfc69c5816170c354e)

### Desired behavior:

The status should be reported on the commit sha for the head branch. (https://github.com/microsoft/BotFramework-Composer/commit/90ff91086f4692524e8bfbf3e3a393e316a693e7)

### Steps to reproduce: (app code and test code)

<!-- Issues without reproducible steps WILL BE CLOSED -->

<!-- You can fork https://github.com/cypress-io/cypress-test-tiny repo, set up a failing test, then tell us the repo/branch to try. -->

1. Create an Azure Pipeline with a PR validation trigger that runs `cypress --record`.
2. Open a pull request that will trigger new az pipeline.
3. Notice the check does not appear on the pull request commit.

### Versions

Cypress package version: 3.6.1
Cypress binary version: 3.6.1
",bug
525281898,cypress open - new projectId creation not respecting --config-file,"### Current behavior:

Creating a new projectId using `cypress open` with a _**different config file**_ results in the new projectId being placed into the `cypress.json` file.

### Desired behavior:

I expect Cypress to honor the value passed to the `--config-file` option and add the new projectId to the specified configuration file and not the original `cypress.json`

### Steps to reproduce: (app code and test code)

1. Clone this repo: `git@github.com:oak-wildwood/cypress-test-tiny.git`
2. Run `npm i`
3. Run `npx cypress open --config-file cypress-other.json`
5. Sign in and click **Setup project to record**
6. On the modal click **Set up project** to complete
7. See the changes to the wrong file

![image](https://user-images.githubusercontent.com/5605406/69187806-4638b280-0ae9-11ea-8428-61667cfc77e9.png)


### Versions
Cypress 3.6.1, MacOS Catalina, Chrome 78",bug
523156071,The context of window is `undefined` when called within a `setTimeout` during strict mode,"### Current behavior: 

The context of window is `undefined` when called within a `setTimeout` during strict mode - originally found in this issue: https://github.com/cypress-io/cypress/issues/5698

### Desired behavior:

`this` should be window - not undefined.

### Steps to reproduce: (app code and test code)

index.html

```html
<!doctype html>
<html lang=""en"">
<body>
  <script>
    'use strict';
    window.setTimeout(function () {
      this.foo = 'bar'
    }, 50)
  </script>
</body>
</html>
```

spec.js

```js
it('asserts', () => {
  cy.visit('index.html')
  cy.window().its('foo').should('eq', 'bar')
})
```

### Versions

Cypress 3.6.1

### To Fix

This line of code below should be changed to:

```
return fnOrCode.apply(contentWindow, params)
```

https://github.com/cypress-io/cypress/blob/develop/packages/driver/src/cy/timers.js#L22:L22

I've confirmed this fixes the issue
",bug
522644402,Uncaught exception not thrown in DevTools,"<!-- Is this a question? Don't open an issue. Ask in our chat https://on.cypress.io/chat  -->

### Current behavior:

The rightclick method is throwing an error unlike `trigger('contextmenu')`. As you can see from the screenshot below, the right click works because the context menu opens up but cypress' test fails. Can't see any js error doing the right click on the page being tested.
![image](https://user-images.githubusercontent.com/11013464/68830585-03d93500-06e7-11ea-840e-51ad464e05fe.png)


### Desired behavior:

It should work just like `trigger('contextmenu')`. Using that is the current workaround to allow tests like this to pass.

### Steps to reproduce: (app code and test code)

Try this simple test:
```js
context('App Tests', () => {
  beforeEach(() => {
    cy.visit('https://design.infor.com/code/ids-enterprise/latest/demo/components/datagrid/test-contextmenu-firstclick.html');
  })

  it('test right click', () => {
    cy.get('[aria-rowindex=""1""] > [aria-colindex=""1""] > .datagrid-cell-wrapper').rightclick();
  });
});
```

### Versions

latest
",bug
522470672,"Cypress swallows requests with pipe, returns 400 error","<!-- Is this a question? Don't open an issue. Ask in our chat https://on.cypress.io/chat  -->

### Current behavior:

When submitting an XHR from the page in Cypress, any unescaped pipe character will cause Cypress to not submit the request to the backend, but will result in an automatic `400` response.

i.e. `GET /api?param=1|2` does not work, but `GET /api?param=12` does work

### Desired behavior:

The request should be submitted to the backend/server with the same URL as entered, even if escaping is incorrect.

### Steps to reproduce: (app code and test code)

Project with reproducible scenario: https://github.com/jylertones/cypress-400-pipe

To run server: `npm run server`
To run tests: `npm run cypress`

### Versions
OS: Linux (tested in various)
Browser: both bundled Electron and Chrome 78
Last working: 3.4.1
Broken in 3.5.0 to present (3.6.1 at the moment)

",bug
522095377,"backface-visibility: hidden with transform-style: preserve-3d fails the ""is.visible"" test","<!-- Is this a question? Don't open an issue. Ask in our chat https://on.cypress.io/chat  -->

### Current behavior:
Currently an element with `backface-visibility: hidden; transform: rotateY(180deg);` that is inside a parent with `transform-style: preserve-3d; transform: rotateY(180deg)` will fail the `is.visible` assertion

The same problem mentioned in #2985 was marked as fixed by https://github.com/cypress-io/cypress/pull/5591 i only think the case where the parent has the css property `transform-style: preserve-3d;` was forgotten

<!-- images, stack traces, etc -->

### Desired behavior:
it should not fail the `is.visible` assertion

<!-- A clear concise description of what you want to happen -->

### Steps to reproduce: (app code and test code)

**app code**
https://codepen.io/loekup/pen/rNNZqZW

**test code**
```js
describe('backface-visibility: hidden; test', function () {
    it('should flip and validate the visibility of the card faces', function () {
        cy.visit('index.html')
        cy.get('.front').should('be.visible');
        cy.get('.back').should('not.be.visible');
        cy.get('.container').click();
        cy.get('.front').should('not.be.visible');
        cy.get('.back').should('be.visible');
    });
});
```

<!-- Issues without reproducible steps WILL BE CLOSED -->

<!-- You can fork https://github.com/cypress-io/cypress-test-tiny repo, set up a failing test, then tell us the repo/branch to try. -->

### Versions
3.6.1.
<!-- Cypress, operating system, browser -->
",bug
522085209,After all hook is masking syntax errors,"<!-- Is this a question? Don't open an issue. Ask in our chat https://on.cypress.io/chat  -->

### Current behavior:

With code like this:

```js
  before(() => {
     notExistingFunction() // syntax error
   })
  after(() => {
    cy.get('foo').type('bar');
  })
```

Cypress reports:

```js
CypressError: cy.type() failed because it requires a DOM element.

The subject received was:

  > undefined

The previous command that ran was:

  > cy.get()

Because this error occurred during a 'after all' hook we are skipping the remaining tests in the current suite
```

### Desired behavior:

The one that is happening when you remove `after` hook, so:
```
ReferenceError: notExistingFunction is not defined

Because this error occurred during a 'before all' hook we are skipping the remaining tests in the current suite: 
```
<!-- A clear concise description of what you want to happen -->

### Steps to reproduce: (app code and test code)

Above - it think it also mask errors in tests as well (`it`)
<!-- Issues without reproducible steps WILL BE CLOSED -->

<!-- You can fork https://github.com/cypress-io/cypress-test-tiny repo, set up a failing test, then tell us the repo/branch to try. -->

### Versions

Cypress 3.6.1 (bug is at least since 3.4)
MacOS Mojave
Chrome Version 78.0.3904.87 (Official Build) (64-bit)
<!-- Cypress, operating system, browser -->
",bug
522019088,"Special characters wrongly displayed in runner UI assertions, formatted as markdown","### Current behavior:

![cypress](https://user-images.githubusercontent.com/13650820/68743031-d52d6280-05f1-11ea-9541-ed2608b1cc4e.PNG)


### Desired behavior:

Special characters properly displayed

### Steps to reproduce: (app code and test code)

for e.g. use assertion with regex:
`should('match', /width: (50.*|49.*|48.*)%;/)`

### Versions

3.6.1",bug
521592502,assert.isFinite() is not a function,"### Current behavior:

`assert.isFinite(Number(val))`

results in
```
Error:       TypeError: assert.isFinite is not a function
```

### Desired behavior:

According to [documentation](https://docs.cypress.io/guides/references/assertions.html#TDD-Assertions) .isFinite() should be available like any other assertion.

### Steps to reproduce:

In any test try `assert.isFinite(Number('test'))`

### Versions

- Cypress 3.5.0
",bug
519682459,False positives: Cypress passes tests that use the same timeout option object in specific sequence.,"### Current behavior:

Cypress produces false positives if one test contains a long timeout which is fed in via a variable. Below is a test to reproduce, which fails to produce a failure for the second test on `https://google.com`.

### Desired behavior:

Fail the last `contains` test.

### Steps to reproduce: (app code and test code)

```javascript
describe('Cypress bug', () => {
  const LONG_TIMEOUT_OPTION = {
    timeout: 10000,
  }

  beforeEach(() => {
    cy.viewport('macbook-15')
  })

  it('should visit Google', () => {
    cy.visit('/')
    cy.contains('About').click()
    cy.contains(
      'Our mission is to organise the world’s information and make it universally accessible and useful.', LONG_TIMEOUT_OPTION)
    cy.contains('See what we build').scrollIntoView().click({ force: true })
    cy.contains(
      'Learn more', LONG_TIMEOUT_OPTION)
  })

  it('should visit Google', () => {
    cy.visit('/')
    cy.contains('About').click()
    cy.contains('Something that the page does not contain', LONG_TIMEOUT_OPTION)
  })
})
```

![image](https://user-images.githubusercontent.com/305847/68448628-38a54200-0238-11ea-8d77-da1d5b33650c.png)
![image](https://user-images.githubusercontent.com/305847/68448677-5ffc0f00-0238-11ea-8e80-c309ac9f1e7f.png)

### Versions
`uname -a`
`Darwin angel 18.7.0 Darwin Kernel Version 18.7.0: Tue Aug 20 16:57:14 PDT 2019; root:xnu-4903.271.2~2/RELEASE_X86_64 x86_64`

Cypress version `3.6.0`
Electron version `73`
Chrome version `Version 74.0.3729.157 (Official Build) (64-bit)`
",bug
517330641,cy.setCookie is Not Setting Desired Cookie Expiry,"### Current behavior:

`cy.setCookie` is not setting the `expiry` as desired.

### Desired behavior:

`cy.setCookie` sets the `expiry` that the code provides.

### Steps to reproduce:

```js
describe('Cypress Cookie Issue', function () {
    it('Expiry Problem', function () {
        let email = 'fake@qa.com'
        let password = 'abc123'
        cy.createAccount(email, password)
        cy.login(email, password)
        cy.visit('/')
        cy.getCookie('jwt').then((jwt) => {
            cy.setCookie('jwt', jwt.value, {expiry: 10000000000})
            cy.getCookie('jwt').then((setJWT) => {
                expect(setJWT.expiry).to.equal(10000000000)
            })
        })
    })
})
```
![image](https://user-images.githubusercontent.com/57365666/68147579-54db7300-ff08-11e9-9bec-1bfa8de6c2a6.png)

### Versions

Cypress 3.6.0, Chrome 78.

I started experiencing this problem when I upgraded from Cypress 3.2.0 to 3.6.0.
",bug
515139254,Test Failing because of the Uncaught exception on cy.visit,"Hi,

My test fails because of the Uncaught type error when I execute `cy.visit()`. My next steps execute but still the test fails.
I have used 
```js
Cypress.on('uncaught:exception', (err, runnable) => {
    // returning false here prevents Cypress from
    // failing the test
    return false
  })
```

![Cypress](https://user-images.githubusercontent.com/19879766/67917347-949b1580-fbfd-11e9-9c51-8cbc2a5e0cce.PNG)

",bug
511965885,3.5.0 Error: write EPROTO 3343909432:error:100000f0:SSL routines:OPENSSL_internal:UNSUPPORTED_PROTOCOL:../../third_party/boringssl/src/ssl/handshake_client.cc:569:," # Current behavior:

I upgraded my cypress version from 3.4.1 to 3.5.0. All my tests were working fine on 3.4.1 but when running on 3.5.0 - I get errors see attached screenshot. 

### Desired behavior:

I should be able to run my tests without any problems. 

### Steps to reproduce: (app code and test code)

Unfortunately, I dont have the time to create a dummy project just for this issue. I am sure its to do with version 3.5.0. Please fix it ASAP 


### Versions
Cypress : 3.5.0
OS: Windows 10
Browser: Chrome 77
Node: 11.7.0
![image](https://user-images.githubusercontent.com/12541984/67492546-7e75de00-f66e-11e9-9420-2758118a559a.png)
![image](https://user-images.githubusercontent.com/12541984/67492962-1e336c00-f66f-11e9-8852-117e89a56400.png)
",bug
511490931,File watching of spec file doesn't work for path / directory / specfile containing bracket `[ ]` characters,"

### Current behavior:

<!-- images, stack traces, etc -->

### Desired behavior:

cypress is recognizing the code change and executing tests but it is not validating updated code  

### Steps to reproduce: (app code and test code)

I
![vs_code](https://user-images.githubusercontent.com/19255128/67421940-21f3bf80-f597-11e9-99b6-8dd0ce82dba1.png)
![cypressui](https://user-images.githubusercontent.com/19255128/67421941-21f3bf80-f597-11e9-980f-1a8f2c967565.png)

 have opened cypress from VS code 

I executed all specs from cypress 

works fine 

I have added new code 

cypress still executing old code 

cypress is recognizing code change but not updated code 
### Versions

cypress 3.4.1
chrome 
",bug
510938871,Video process never exits - continues writing frames even after browser process killed,"### Current behavior:

There are some circumstances where the video recording will continue writing even after the specfile is finished and the browser process is killed. 

The log below is an example. The `writing video frame` and `video stream drained` logging goes on forever until the main CI process times out.

```
mochawesome Report JSON saved to /app/mochawesome-report/mochawesome_003.json

  cypress:server:video:frames writing video frame +112ms
  cypress:server:video:frames video stream drained +0ms

  (Results)

   ┌ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ 
   │  Tests:        6                                              │
   │  Passing:      4                                              │
   │  Failing:      1                                              │
   │  Pending:      1                                              │
   │  Skipped:      0                                              │
   │  Screenshots:  1                                              │
   │  Video:        true                                           │
   │  Duration:     1 minute, 9 seconds                            │
   │  Estimated:    43 seconds                                     │
   │  Spec Ran:     spec.js                                        │
   └ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ 

  (Screenshots)

  - /app/cypress/screenshots/spec.js/Test (failed).png  (1280x720)

  cypress:server:run attempting to close the browser 
  cypress:server:browsers killing browser process +1m
  cypress:server:video:frames writing video frame +981ms
  cypress:server:video:frames video stream drained +0ms
  cypress:server:video:frames writing video frame +144ms
  cypress:server:video:frames video stream drained +0ms
  cypress:server:video capture stderr log { message: [32m'frame= 1826 fps= 27 q=12.0 size=    7680kB time=00:01:12.08 bitrate= 872.8kbits/s dup=504 drop=0 speed=1.05x    ' } [31m+1s
  cypress:server:video:frames writing video frame +100ms
  cypress:server:video:frames video stream drained +0ms
  cypress:server:video:frames writing video frame +149ms
  cypress:server:video:frames video stream drained +0ms
  cypress:server:video:frames writing video frame +150ms
  cypress:server:video:frames video stream drained +0ms
  cypress:server:video:frames writing video frame +100ms
  cypress:server:video:frames video stream drained +0ms
  cypress:server:video capture stderr log { message: 'frame= 1839 fps= 27 q=12.0 size=    7680kB time=00:01:12.60 bitrate= 866.6kbits/s dup=513 drop=0 speed=1.05x    ' } +483ms
  cypress:server:video:frames writing video frame +100ms
  cypress:server:video:frames video stream drained +1ms
  cypress:server:video:frames writing video frame +150ms
  cypress:server:video:frames video stream drained +0ms
  cypress:server:video:frames writing video frame +99ms
```

### Desired behavior:

We should at the least have some sort of timeout so that the video recording doesn't hang forever. 

Ideally we should fix this completely by ending the recording and compressing/uploading the video.

### Steps to reproduce: (app code and test code)

That's a tough one! This was reported by another user, so I don't have a completely reproducible example.

### Versions

Cypress 3.4.1
BuildKite CI
Linux Debian - 9.9
Electron 61.0.3163.100
",bug
510816046,cypress does not exit if reporter throws an exception,"### Current behavior:

`npx cypress run` will not exit if the reporter throws an exception in the `end` event handler.

It will display this stack trace, and then the process will be idle.
```
Error: fail fast
    at Runner.BadReporter.runner.on (.../bad-reporter.js:4:11)
    at emitOne (events.js:116:13)
    at Runner.emit (events.js:211:7)
    at Reporter.emit (/home/egrubbs/.cache/Cypress/3.4.1/Cypress/resources/app/packages/server/lib/reporter.js:237:55)
    at Object.server.startWebsockets.onMocha (/home/egrubbs/.cache/Cypress/3.4.1/Cypress/resources/app/packages/server/lib/project.js:300:22)
    at Socket.<anonymous> (/home/egrubbs/.cache/Cypress/3.4.1/Cypress/resources/app/packages/server/lib/socket.js:236:36)
    at emitTwo (events.js:126:13)
    at Socket.emit (events.js:214:7)
    at /home/egrubbs/.cache/Cypress/3.4.1/Cypress/resources/app/packages/socket/node_modules/socket.io/lib/socket.js:528:12
    at _combinedTickCallback (internal/process/next_tick.js:131:7)
    at process._tickCallback (internal/process/next_tick.js:180:9)
```

### Desired behavior:

Cypress should exit so continuous integration reports an error without waiting for a timeout.

### Steps to reproduce: (app code and test code)

Here is a reporter that will throw an exception in the `end` event handler.

**bad-reporter.js:**
```js
function BadReporter(runner, options) {
  runner.on('end', () => {
    throw new Error('fail fast');
  });
}

module.exports = BadReporter;
```
Run test with bad-reporter.js:
```
npx cypress run --reporter bad-reporter
```

### Versions

Ubuntu
Cypress:    3.4.1
Browser:    Electron 61 (headless)",bug
510363534,preserveOnce does not work if you do not run all tests in a file,"If you have any ""xit"" in the file cookie get clean up even you have `preserveOnce` in `beforeEach`

### Current behavior:

If you have any ""xit"" in the file cookie get clean up even you have `preserveOnce` in `beforeEach`

### Desired behavior:

any test with xit should not run and `preserveOnce` should still work for other tests

### Steps to reproduce: (app code and test code)
```js
describe('test describe', () => {
    context('test context', () => {
       before(() => {
          cy.setCookie('locserv', 'locservcookie');
       })
        beforeEach(() => {
            Cypress.Cookies.preserveOnce('locserv');
        });

        xit('One', () => {
            cy.visit('www.google.com');
        });

        it('Two', () => {
            cy.visit('www.google.com');
            cy.getCookies();
            cy.wait(10000);
        });
    });
});
```


`cy.getCookies();` in the second it gets nothing

### Versions

OS Windows 10
Browser: Chrome 77
Cypress 3.4.1
",bug
505526168,CSS keyframe animations are re-run when hovering over steps in the cypress UI,"<!-- Is this a question? Don't open an issue. Ask in our chat https://on.cypress.io/chat  -->

### Current behavior:

When you hover over a step in the ""timetravel"" history (which is a very cool feature, BTW), if you have CSS keyframe animations, they will re-run, which is odd and potentially misleading.

### Desired behavior:

The DOM history should look exactly like it did at that point in time.

### Steps to reproduce: (app code and test code)

I have an error panel that comes down from the top of the screen when it is placed in the DOM. This is accomplished via CSS:

```css
    #error-panel {
      animation: flash-error 200ms ease-in-out;
    }

    @keyframes flash-error {
      0% {
        transform: translateY(-100%);
      }
      100% {
        transform: translateY(0%);
      }
    }
```

When I hover the mouse over a previous step in the Cypress UI, the panel animates down every time.

Here's a repo that shows this issue:  https://github.com/fr0/cypress-snapshot-hover

### Versions

Cypress 3.4.1
Mac OS
",bug
505427433,describe.only() does not work when string is the same as another describe() block,"### Current behavior:

If you have multiple `describe` blocks with the same description string, marking one of them with `describe.only` will run all `describe` blocks with the same description instead of just the one with `.only`:

![image](https://user-images.githubusercontent.com/8810829/66594315-e86a8f80-eb66-11e9-8781-1db003aad501.png)

### Desired behavior:

Marking a `describe` block with `.only` should ""only"" run that `describe` block, not others with the same description.

### Steps to reproduce: (app code and test code)

Run the following spec:

```js
describe('outer describe', () => {
  describe('inner describe', () => {
    it('works', () => {});
  });

  describe.only('inner describe', () => {
    it('works again', () => {});
  });

  describe('unique name', () => {
    it('still works', () => {});
  });

  describe('inner describe', () => {
    it('works yet again', () => {});
  });
});
```
Instead of just running one test with the description ""works again"", three tests are executed, in all three `describe('inner describe'...)` blocks.

### Versions

Cypress 3.4.1
Ubuntu 18.04
Chrome 77
",bug
504989509,modifyObstructiveCode incorrectly matches the word 'stop',"<!-- Is this a question? Don't open an issue. Ask in our chat https://on.cypress.io/chat  -->

### Current behavior:

During test run, code fails with sself not defined.

### Desired behavior:

functionality of code should not be replaced
isChildTrainPlatform = stop => stop.route_type === STOP_TYPE.TRAINSTOP && stop.location_type === 0;
should not turn into 
isChildTrainPlatform = stop => stop.route_type === STOP_TYPE.TRAINSTOP && sself.location_type === 0;

### Steps to reproduce: (app code and test code)
code specifically with this line

return stop.route_type===__WEBPACK_IMPORTED_MODULE_10__types_stop_types__[""a"" /* default */].TRAINSTOP&&stop.location_type===0;

### Versions

Cypress 3.4.1, Chrome 77
",bug
502635841,Cypress Dashboard  project status icons not properly synced with main panel,"### Current behavior: 

The cypress dashboard has three status icons:

1. Green check to display tests have passed for the most recent test run (assumed)
2. Red X to display tests have failed for the most recent test run (assumed)
3. Yellow question mark to display tests have not been executed (assumed)

These icons are displayed next to the name of the project on the left panel AND on the main panel. These statuses or icons do not seem to be synced correctly. 

[https://ibb.co/zNkPzXf](https://ibb.co/zNkPzXf)

### Desired behavior:

Desired behavior would be to have the icons synced between the left panel and middle panel

### Steps to reproduce: (app code and test code)

1) create a dashboard with multiple projects
2) have a project that has no test runs to show the question mark icon within the left panel and also within the middle panel
3) test the sync between the panels and icons as well as the logic behind what each icon means and the display on the dashboard

### Versions

3.4.1 / windows 10 / chrome Version 77.0.3865.90 (Official Build) (64-bit)",bug
502604086,`onAnyRequest` does not fire when set from `Cypress.Server.defaults`,"### Current behavior:


If I do this: 

```js
// cypress/integration/mytest.js

describe('My test ', () => {
  before(() => {
    cy.server({
      force404: true,
      onAnyRequest: (route, proxy) => {
        // Errors thrown here don't become test failures
        // Instead we need to throw them from within the XHR
        const { xhr } = proxy;
        if (route.status === 404) {
          xhr.onreadystatechange = function() {
            if (xhr.readyState === 4) {
              throw new Error(
                `Route not stubbed. Please add a cy.route() for url: ""${xhr.url}"" or provide it to your server whitelist.`,
              );
            }
          };
        }
      },
    });
  });

  it('should be able to do the things...', () => {
    cy.visit('/'); // This page will go fire a route somewhere lets say `/api/prices`
    // etc...
  });
});
```

I find all my un-stubbed routes fail the test they are called in appropriately and tell me what I should do to fix the failure.

---

Now, according to the following, I can put my default `cy.server` config in `Cypress.Server.defaults()`:

https://docs.cypress.io/api/cypress-api/cypress-server.html#Syntax 

However, when I do the following:

```js
// cypress/support/index.js

Cypress.Server.defaults({
  force404: true,
  onAnyRequest: (route, proxy) => {
    // Errors thrown here don't become test failures
    // Instead we need to throw them from within the XHR
    const { xhr } = proxy;
    if (route.status === 404) {
      xhr.onreadystatechange = function() {
        if (xhr.readyState === 4) {
          throw new Error(
            `Route not stubbed. Please add a cy.route() for url: ""${xhr.url}"" or provide it to your server whitelist.`,
          );
        }
      };
    }
  },
});
```

and 

```js
// cypress/integration/mytest.js

describe('My test ', () => {
  before(() => {
    cy.server();
  });

  it('should be able to do the things...', () => {
    cy.visit('/'); // This page will go fire a route somewhere lets say `/api/prices`
    // etc...
  });
});
```

My routes merely 404. 

### Desired behavior:

I expect unstubbed routes to fail with the above error. 

### Steps to reproduce: (app code and test code)

As above 

### Versions

Cypress: 3.4.1
OS: macOs
Browser: Cypress Chrome ( 77.0.3865.90 )
",bug
501625789,`not.be.visible` assertion fails when element does not exist in DOM and Stripe JS SDK is imported,"<!-- Is this a question? Don't open an issue. Ask in our chat https://on.cypress.io/chat  -->

### Current behavior:
Normally when asserting that an element is not visible (using `.should('not.be.visible')`), if the element does not exist in the DOM, the assertion passes.

For some reason, simply by including the Stripe JS SDK in the head of the document (following the instructions [here](https://stripe.com/docs/web/setup#setup)), the `not.be.visible` assertion fails (by timing out when retrying to find the element) when the element is not in the DOM.

There is a work around by checking `not.exist` before `not.be.visible`

<!-- images, stack traces, etc -->

### Desired behavior:
The behavior should be consistent whether or not the Stripe SDK is imported

<!-- A clear concise description of what you want to happen -->

### Steps to reproduce: (app code and test code)
Repro can be found in [this repo](https://github.com/bahalperin/cypress-test-tiny/tree/visibility-bug)

<!-- Issues without reproducible steps WILL BE CLOSED -->

<!-- You can fork https://github.com/cypress-io/cypress-test-tiny repo, set up a failing test, then tell us the repo/branch to try. -->

### Versions

<!-- Cypress, operating system, browser -->
Cypress 3.4.1
",bug
500305694,URI resolver does not recognize absolute URI,"An absolute URI of the form `https:adversary.io` is not recognized as an absolute URI.

### Current behavior:

Cypress thinks the URI `https:adversary.io` is a relative URI specifying only a pathname component. If resolved with base URI as the current working directory (the default) it will think `https:adversary.io` is a file named `https:adversary.io`.


### Desired behavior:
Cypress should recognise that `https:adversary.io` is an absolute URI (and normalize it to `https://adversary.io/` if Cypress developers prefer that form).

### Steps to reproduce:
Tiny example:

https://github.com/thorlacius/cypress-test-tiny/commit/6869aee8ee7204ef6769710ec56bfe2b3729c929

### Versions
From my package.json:
`""cypress"": ""^3.4.1""`
",bug
500228861,ENOTCONN error on Windows runs,"<!-- Is this a question? Don't open an issue. Ask in our chat https://on.cypress.io/chat  -->

### Current behavior:
cypress throws error on Windows when launching more than one run as a separate process with execSync

<!-- images, stack traces, etc -->
```
C:\Users\fetest\Desktop\runners\loki\builds\bkDJzsb2\0\games\bridge\node_modules\cypress\lib\exec\spawn.js:175
          throw err;
          ^

Error: shutdown ENOTCONN
    at Socket._final (net.js:409:25)
    at callFinal (_stream_writable.js:627:10)
    at processTicksAndRejections (internal/process/task_queues.js:80:21) {
  errno: 'ENOTCONN',
  code: 'ENOTCONN',
  syscall: 'shutdown'
}
child_process.js:660
    throw err;
    ^

Error: Command failed: ""./node_modules/.bin/cypress"" run --env layout=""portrait-hd"",lang=""en"",suite=""dev"",url=""https://cdn.dopamine-gaming.com/review/games/bridge/dev"" --spec cypress/integration/base_spec.js --headed
    at checkExecSyncError (child_process.js:621:11)
    at execSync (child_process.js:657:15)
    at execScript (C:\Users\fetest\Desktop\runners\loki\builds\bkDJzsb2\0\games\bridge\node_modules\automation\bin\test.js:81:5)
    at run (C:\Users\fetest\Desktop\runners\loki\builds\bkDJzsb2\0\games\bridge\node_modules\automation\bin\test.js:74:9)
    at C:\Users\fetest\Desktop\runners\loki\builds\bkDJzsb2\0\games\bridge\node_modules\automation\bin\test.js:50:42
    at Array.forEach (<anonymous>)
    at test (C:\Users\fetest\Desktop\runners\loki\builds\bkDJzsb2\0\games\bridge\node_modules\automation\bin\test.js:50:24)
    at Object.<anonymous> (C:\Users\fetest\Desktop\runners\loki\builds\bkDJzsb2\0\games\bridge\node_modules\automation\bin\test.js:84:1)
    at Module._compile (internal/modules/cjs/loader.js:945:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:962:10) {
  status: 1,
  signal: null,
  output: [ null, null, null ],
  pid: 996,
  stdout: null,
  stderr: null
}
```

### Steps to reproduce:

Launch more than one time cypress run command with execSync
```
execSync('""./node_modules/.bin/cypress"" run --spec cypress/integration/base_spec.js');
execSync('""./node_modules/.bin/cypress"" run --spec cypress/integration/components_spec.js');
```
<!-- Issues without reproducible steps WILL BE CLOSED -->

<!-- You can fork https://github.com/cypress-io/cypress-test-tiny repo, set up a failing test, then tell us the repo/branch to try. -->

### Versions
Cypress v3.4.1
Windows Version 10.0.18362
Node 12.11.0
npm 6.11.3
<!-- Cypress, operating system, browser -->



This issue is related to https://github.com/cypress-io/cypress/issues/1841

and is fixable by adding the erro code into already existing condition (line 169)

![image](https://user-images.githubusercontent.com/17831711/65876989-493ddf00-e393-11e9-91e6-91068f4c1cc9.png)

",bug
497005816,"Cannot combine within, should, and contains commands as expected","### Current behavior:

Taken this example:
```js
cy.get(`article`).within(() => cy.get(`h1`)).should(`have.text`, `My Blog Post`);
cy.contains(`span`, `Hello World!`).should(`exist`);
```
The first assertion passes but the second assertion fails. This is because it looks for `article span` instead of `span`.

### Desired behavior:

Taken this example:
```js
cy.get(`article`).within(() => cy.get(`h1`)).should(`have.text`, `My Blog Post`);
cy.contains(`span`, `Hello World!`).should(`exist`);
```
I expect that it looks for `span` instead of `article span` and I expect both assertions to pass.

### Steps to reproduce: (app code and test code)

```html
<article class='post'>
    <h1>My Blog Post</h1>
</article>

<div>
    <span>Hello World!</span
</div>
```

```js
cy.get(`article`).within(() => cy.get(`h1`)).should(`have.text`, `My Blog Post`);
cy.contains(`span`, `Hello World!`).should(`exist`);
```

### Versions

Cypress: 3.4.1
OS: MacOS Mojave 10.14.5
Browser: Electron 61 + Chrome 77
",bug
494208915,unhelpful error message when taking screenshot of element with zero height,"### Current behavior:

`cy.get(element).screenshot()` displays a very confusing error if the element has zero height.

```
TypeError: Cannot destructure property `duration` of 'undefined' or 'null'.
```

![image](https://user-images.githubusercontent.com/477907/64983051-3f8d8500-d885-11e9-994d-b2051b72e585.png)

#### The code that is causing the confusing error

`numScreenshots` ends up being zero when `elPosition.height` is zero.

https://github.com/cypress-io/cypress/blob/c0962511f045f07f2dc255b251ac251b2d8ae718/packages/driver/src/cy/commands/screenshot.coffee#L138

This causes `_.last(results)` to return `undefined`.

https://github.com/cypress-io/cypress/blob/c0962511f045f07f2dc255b251ac251b2d8ae718/packages/driver/src/cy/commands/screenshot.coffee#L99

Which causes `takeScreenshot().then()` to receive an undefined `props` parameter that it cannot destructure with `{ duration, path, size } = props;`.

https://github.com/cypress-io/cypress/blob/c0962511f045f07f2dc255b251ac251b2d8ae718/packages/driver/src/cy/commands/screenshot.coffee#L357

### Desired behavior:

`cy.get(element).screenshot()` should report an error that the element has zero height.

It is also extremely difficult to troubleshoot an error like this because bluebirdjs doesn't automatically log exceptions, so I have no idea where the code in the error message existed.

It appears that bluebirdjs has events for unhandled errors. It would be great if Cypress provided a filename and line number of the where the error is occurring in the Cypress log as well as a stack trace in the browser console.

http://bluebirdjs.com/docs/api/error-management-configuration.html

```js
process.on(""unhandledRejection"", function(reason, promise) {
});
process.on(""rejectionHandled"", function(promise) {
});
```

### Steps to reproduce: (app code and test code)

You can recreate the confusing error message by trying to take a screenshot of a `span` with zero height.

```js
cy.get('.zero_height_element').screenshot();
```

### Versions

Cypress 3.4.1
Ubuntu 16.04 & 18.04

",bug
493070767,"Videos on the cypress dashboard are not playing completely, just spins - loading spinner","Noticing the recording on the cypress dashboard is not working, just spins",bug
491924049,"Interactive mode shows pass, run mode shows fail","

![19-09-10_18:08::54](https://user-images.githubusercontent.com/14625260/64654230-92cf8580-d3f6-11e9-92ad-9d1415062b5f.png)
![image](https://user-images.githubusercontent.com/14625260/64654262-aa0e7300-d3f6-11e9-9333-787e759bbd95.png)

Simple reproducible:
```js	
describe('suite', () => {
  it('expect fail', () => {})
})

after(() => {
  expect(false).ok
})
```

Cypress: `3.4.1`",bug
489759788,cy.visit() page with baseUrl and two dots doesn't work,"### Current behavior:
`cy.visit('?q=..')` will not honor the `baseUrl` defined in `cypress.json` and will load `http:///?q=..` instead.

### Desired behavior:

Given `cypress.json` as

```json
{
  ""baseUrl"": ""https://google.com""
}
```
`cy.visit('?q=..')` should load `https://google.com?q=..`

### Steps to reproduce: (app code and test code)

See <https://github.com/amrtn/cypress-test-tiny/tree/double-dot-visit>

### Workaround

`cy.visit('/?q=..')` will get translated to `http://www.google.com/?q=..` 

This behavior can be acceptable in some cases.

### Versions

Tested on cypress@3.4.1 in windows 10",bug
486559162,"RequestError: Error: Invalid URI ""/runs""","### Current behavior: 

There is a situation where someone can receive `RequestError: Error: Invalid URI ""/runs""` on `POST /runs`

The request fails on 4 retries and then bails on recording and runs the tests without recording. 

`CYPRESS_ENV` environment variable is not being set, which was our initial suspicion on the problem. https://github.com/cypress-io/cypress/issues/1621

Important bit of the logs from `cypress run --record`:

```log
cypress:server:api request to url: POST /runs with params: {
  ""body"":{
    ""ci"":{
      ""params"":{
        ""buildId"":""123"",
        ""buildUrl"":""https://buildurl"",
        ""buildNumber"":""123""
      },
      ""provider"":""jenkins""
    },
    ""specs"":[..removed..],
    ""commit"":{
      ""sha"":""123"",
      ""branch"":null,
      ""authorName"":""..removed.."",
      ""authorEmail"":""..removed.."",
      ""message"":""..removed.."",
      ""remoteOrigin"":""https://remoteorigin"",
      ""defaultBranch"":null
    },
    ""group"":null,
    ""platform"":{
      ""osCpus"":[..removed..],
      ""osVersion"":""Debian - 9.6"",
      ""browserName"":""Electron"",
      ""browserVersion"":""61.0.3163.100""
    },
    ""parallel"":null,
    ""ciBuildId"":null,
    ""projectId"":""123abc"",
    ""recordKey"":""****"",
    ""specPattern"":null
  },
  ""headers"":{
    ""x-route-version"":""4"",
    ""x-os-name"":""linux"",
    ""x-cypress-version"":""3.4.0""
  }
}
We encountered an unexpected error talking to our servers.

We will retry 3 more times in 30 seconds...

The server's response was:

RequestError: Error: Invalid URI ""/runs""
```

It seems like some issue with [`routes.js`](https://github.com/cypress-io/cypress/blob/develop/packages/server/lib/util/routes.js) and [`api.coffee`](https://github.com/cypress-io/cypress/blob/develop/packages/server/lib/api.coffee#L191) not prepending the api url correctly for some reason, since `/runs` is not the full uri it should be.

Dug into the `request` library where they send the `Invalid URI` error here: Was digging into why request would throw an Invalid URI error here: https://github.com/request/request/blob/df346d8531ac4b8c360df301f228d5767d0e374e/request.js#L260",bug
484112201,Some tests flake only if test runner's browser loses focus (or run headlessly),"### Current behavior:

We have a number of tests which:

- Always pass when run in Chrome 76 with the browser in focus the whole time
- Always pass when run in Electron 61 with the browser in focus the whole time
- Often fail when run in Chrome 76 without the browser in focus
- Often fail when run in Electron 61 without the browser in focus
- Often fail when run headless

### Desired behavior:

Browser does not need to stay in focus; tests also pass headlessly.

### Steps to reproduce: (app code and test code)

```js
it('is just an example', function () {
  cy.visit('https://noredink.com/logout')
  cy.contains('Log In').click()
  cy.findField('Email or username').type('example_user')
  cy.findField('Password').type('easypassword')
  cy.contains('button', 'Log in').click()
})
```

Here is a simple case - logging into our production app. This passes if you keep the browser in focus but sometimes fails if it loses focus (or is run headlessly):

![image](https://user-images.githubusercontent.com/4333625/63533030-fb070780-c4d9-11e9-9198-57918305a87e.png)

[Video: in focus and passing](https://recordit.co/lg6J85tKx8)

[Video: out of focus and failing](https://recordit.co/Tvm8z2LwQj)

We have other examples but they involve the admin side of our site and we probably shouldn't share them here. If you need more examples, let me know and we'll try to find something else that's appropriate to share.

### Versions

Cypress: 3.4.1
OS: macOS Mojave 10.14.5
Browser(s): Chrome 76 and Electron 61

### Other

https://github.com/cypress-io/cypress/issues/1892 may be relevant.",bug
483399763,Audio of videos with autoplay is played multiple times,"### Current behavior:
When a video with autoplay is displayed in cypress, the audio plays multiple times.

### Desired behavior:
The audio should only play once in synchronization with the video.

### Steps to reproduce:
1. Execute the following test cases:
```js
describe('Video Issue', function() {
  it('Reproduction', function() { 
    cy.visit(`https://survey.quantilope.com/dXm3LrqLiopRQ2Arq/RmydaiJepkEn69BQT/BN7tbPwzDPmHMNamF`)
    cy.get('#startSurvey').click()
  })
})
```
2. Observe the issue.

### Versions

* Cypress version 3.4.1
* Browser version Chrome 76 and Electron 61

### Notes

* The test case will pass, but the issue will occur anyhow.
* If you only hear the sound once, wait a little, sometimes it takes a little time to trigger.
* The issue get's much worse with longer videos, sometimes the browser even crashes through this issue, making then the test case fail
* This issue was reported as #2548, but was closed since it couldn't be reproduced.",bug
482043715,response to XHR request ignored by cypress,"<!-- Is this a question? Don't open an issue. Ask in our chat https://on.cypress.io/chat  -->

### Current behavior:

XHR GET request reaches server and browser reports response (http code 200) in developer console but Cypress continues waiting for a response (see spinner next to `(XHR)` step in test and timeout message for `cy.wait` command)

![image](https://user-images.githubusercontent.com/540110/63231058-d1449c80-c1ca-11e9-9fe8-4b53aa7c6cc4.png)

### Desired behavior:

Cypress should recognize that a response to the request was received and continue with the test.

### Steps to reproduce: (app code and test code)

You can use https://github.com/fmezas/cypress-xhr-issue to reproduce the issue. It contains a toy server, client and cypress test, and instructions on how to run

### Versions

Cypress: `3.4.1`
operating system: `OS-X 10.14.6`
browser: `Chrome Version 76.0.3809.100 (Official Build) (64-bit)`
",bug
480368188,Can't chain mutliple `cy.should(callbackFn)`,"<!-- Is this a question? Don't open an issue. Ask in our chat https://on.cypress.io/chat  -->

### Current behavior:

Chaining multiple `.should()` commands that use callback functions throws if any of the callback functions other than the last one contain more than one assertion.

```js
cy.wrap('ab')
  .should(subject => {
    expect(subject).to.be.a('string');
    expect(subject).to.contain('a');
  })
  .should(subject => {
    expect(subject).to.contain('b');
  });
```

![Screenshot from 2019-08-13 16-01-21](https://user-images.githubusercontent.com/1526013/62977068-a41b7700-bde3-11e9-9b1d-5f677ec88f99.png)


<!-- images, stack traces, etc -->

### Desired behavior:

<!-- A clear concise description of what you want to happen -->

Chaining multiple `.should()` commands should work regardless of the number of assertions per callback function.

### Steps to reproduce: (app code and test code)

<!-- Issues without reproducible steps WILL BE CLOSED -->

<!-- You can fork https://github.com/cypress-io/cypress-test-tiny repo, set up a failing test, then tell us the repo/branch to try. -->

```js
describe('chaining cy.should(callbackFn)', () => {
  it('should work, but does not', () => {
    cy.wrap('a')
      .should(subject => {
        expect(subject).to.be.a('string');
        expect(subject).to.contain('a');
      })
      .should(() => {});
  });

  it('works when separated by .then()', () => {
    cy.wrap('a')
      .should(subject => {
        expect(subject).to.be.a('string');
        expect(subject).to.contain('a');
      })
      // Adding an empty then fixes the issue.
      .then(() => {})
      .should(() => {});
  });

  it('works when there is only one assertion per callbackFn', () => {
    cy.wrap('a')
      .should(subject => {
        expect(subject).to.be.a('string');
      })
      .should(subject => {
        expect(subject).to.contain('a');
      })
      .should(() => {});
  });
});
```

### Versions

<!-- Cypress, operating system, browser -->
Cypress: 3.4.5
OS: Ubuntu 19.04
Browser: Electron 61
",bug
478394892,Cypress.env() fails to escape <script></script> tags in the cypress.json file,"<!-- Is this a question? Don't open an issue. Ask in our chat https://on.cypress.io/chat  -->

### Current behavior:
Cypress executes <script></script> tags written on the cypress.json file

<!-- images, stack traces, etc -->
<script>alert('this should not have happened')</script> gets executed while running EVERY test where Cypress.env() is called. A part of the cypress.json is logged to the browser, and the script gets executed too.
### Desired behavior:
I want to safely write <script></script> tags in cypress.json for JS injection testing

<!-- A clear concise description of what you want to happen -->
I want <script></script> tags to be executed as raw text, and <?php?> ones too.

### Steps to reproduce: (app code and test code)

<!-- Issues without reproducible steps WILL BE CLOSED -->
1)Go to your cypress.json, and in you *env* object, paste this ""<script>alert('this should not have happened')</script>""
2) Create a <some-test>.spec.js file and write the context() function, in the scope of the function call Cypress.env() 
3) To to the Cypress tests GUI and execute the test
4) You will see the console logged ""this should not have happened"" and the screen will be filled with json raw data.

<!-- You can fork https://github.com/cypress-io/cypress-test-tiny repo, set up a failing test, then tell us the repo/branch to try. -->

### Versions

<!-- Cypress, operating system, browser -->
Chrome
",bug
476444117,`.each` changes scope for next dual-command (like `cy.contains()`),"### Current behavior:

When you call `.each()`, e.g. on a `cy.get()` command, it changes the scope for next `cy.contains()` command.

Possibly affects other commands, and possibly calls other than `.each()` change the scope, too.

Originally reported [here](https://stackoverflow.com/questions/57293122/how-to-correctly-use-wrap-in-cypress).

### Steps to reproduce: (app code and test code)

```js
describe(`test`, () => {
    it(`test`, () => {
        cy.document().then(doc => {
            doc.body.innerHTML = `
                <div class=""one""></div>
                <div>Search</div>
            `;
        });
        cy.get(`.one`)
            // comment this out for the next `cy.contains` to work properly
            .each(() => {});
        cy.contains(`Search`);
    });
});
```

![image](https://user-images.githubusercontent.com/5153846/62411597-a1f03600-b5f5-11e9-81b0-cb0ac8faaf3e.png)


### Versions

cypress `3.4.1`",bug
476063830,More Desktop gui weirdness since the flexbox changes,"Maybe we need some visual testing setup 😅 	

### Current behavior: 

<img width=""912"" alt=""Screen Shot 2019-08-02 at 3 03 23 PM"" src=""https://user-images.githubusercontent.com/1271364/62356321-ce914880-b536-11e9-8c8e-82dc4d0a6636.png"">


### Desired behavior:

<img width=""903"" alt=""Screen Shot 2019-08-02 at 3 05 42 PM"" src=""https://user-images.githubusercontent.com/1271364/62356414-09937c00-b537-11e9-8a89-138bd3ef232c.png"">


### Versions

`develop` branch - 3.4.2 pre-release
",bug
475709147,Error on XHR stub if resonse json only contains a number or boolean,"## Current behavior:

When a `fixture.json` ONLY contains a number or a boolean, cypress throws the following error: 

```
CypressError: TypeError: First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.
    at Function.Buffer.from (buffer.js:202:9)
    at Object.<anonymous> 
```

<!-- images, stack traces, etc -->

### Desired behavior:

For Cypress to accept fixtures that contain a number or a boolean only.

<!-- A clear concise description of what you want to happen -->

### Steps to reproduce: (app code and test code)

Fixtures:

content of _my-number.json_:
```json
26
```

content of _my-bool.json_:
```
true
```

Tests:
```js
 // fails:
    it('accepts a number', () => {
        cy.server();
        cy.route({method: 'GET', url: '/getnumber', response: 'fixture:my-number.json'}).as('mynumber');
        cy.visit('/');
        cy.wait('@mynumber').its('responseBody').should('be', 26);
    });

    // fails:
    it('accepts a boolean', () => {
        cy.server();
        cy.route({method: 'GET', url: '/getbool', response: 'fixture:my-bool.json'}).as('mybool');
        cy.visit('/');
        cy.wait('@mybool').its('responseBody').should('be', true);
    });
```

<!-- Issues without reproducible steps WILL BE CLOSED -->

<!-- You can fork https://github.com/cypress-io/cypress-test-tiny repo, set up a failing test, then tell us the repo/branch to try. -->

repo: https://github.com/amberjs/cypress-test-tiny

### Versions

Cypress 3.2.0 - 3.4.1
Chrome
<!-- Cypress, operating system, browser -->
",bug
473787931,whitelist based on request body?,"Hey there, I'd like to filter out certain requests from cypress using the whitelist, but I can't seem to get the request body. Here's what my whitelist looks like right now: 

```js
whitelist: (xhr) => {
      //filter out socketIO requests here

      //how do I see the request body here?
      console.log(xhr.body) //returns undefined

      if (xhr.url.indexOf(""socket.io/"") > -1) return true;
      if (xhr.url.indexOf(""sockjs-node/"") > -1) return true;
      //return the default cypress whitelist filer
      return xhr.method === ""GET"" && /\.(jsx?|html|css)(\?.*)?$/.test(xhr.url);
    }
```

Here's a screenshot of what that xhr object looks like when I put a debugger in there: 
![image](https://user-images.githubusercontent.com/2730609/62013182-f605a100-b143-11e9-9162-8676be8484dc.png)

Am I missing something? It seems like we don't have access to the request body in the whitelist function.

Thank you very much!",bug
472152278,RegExp for modifyObstructiveCode replaces var names started with `top` with `self` when it shouldn't,"https://github.com/cypress-io/cypress/blob/b568e825452582ba21e9a26f88daa4edc6b1b587/packages/server/lib/util/security.js#L17

One of my file contains the below code:
```js
if (topTarget.window === topTarget) { ... }
```
in Cypress, It's replaced with 
```js
if (topTarget.window === selfTarget) { ... }
```
and it caused error.

Please fix it as soon as possible, many thanks <3",bug
470488569,cannot `type` negative number into number input with text selection,"Cannot `type` negative number into number input with text selection

Relevant issue description: https://github.com/cypress-io/cypress/issues/2173#issuecomment-513099254
",bug
470195314,"Cypress doesn't work when there is no internet connection, testing to localhost","<!-- Is this a question? Don't open an issue. Ask in our chat https://on.cypress.io/chat  -->

### Current behavior:
Cypress will not load tests to localhost server **when there is no internet connection**. This happens in both GUI (cypress open) and command line (cypress run).

I'm experiencing something similar to https://github.com/cypress-io/cypress/issues/4235, but the differences are:
- It only doesn't work when there is no internet connection.
- When there's no connection, issue happens with **both** Chrome and Electron

In the console, I see this:

![image](https://user-images.githubusercontent.com/34933233/61518722-d7652300-aa3c-11e9-91c0-9b52725533fb.png)

I'm not in a corporate proxy server.

### Desired behavior:
The tests should still run, since I'm only testing a local server.

### Steps to reproduce:
1. Clone [this repo](https://github.com/jodelasur/cypress-issue-localhost-no-internet), then `npm install`. This repo is just create-react-app with a cypress test that visits the home page.
2. Disconnect internet connection.
3. `npm start` to start server. http://localhost:3000 should display the default page for create-react-app.
4. `npm run cypress:open` to start Cypress. Then run home.spec.js. You'll see that the test doesn't load.

I also included my logs in the repo. See `log.txt`.

### Versions

<!-- Cypress, operating system, browser -->
Cypress 3.4.0, Windows 10, Chrome 75 and Electron 61",bug
469815711,cy.within does not yield as documented,"### Current behavior:

The [`cy.within` doc states that](https://docs.cypress.io/api/commands/within.html#Yields) it ""yields the same subject it was given from the previous command"". However, it seems to yield the last subject in the `within` function. Only an empty `within` function will yield the subject from the previous command.

### Desired behavior:

Not sure if the documentation or the implementation is wrong. Depending on that, the documentation or the implementation should be fixed.

### Steps to reproduce: (app code and test code)

```html
<article class='post'>
  <h1>My Blog Post</h1>
</article>
```

```javascript
cy
.get('article')
.within(() => {
  cy.get('h1')
})
.should('have.class', 'post')
```

This fails because the `within` yields the `h1` instead of the `article`.

### Versions

Cypress: 3.4.0
OS: MacOS Mojave 10.14.5
Browser: Electron
",bug
468953096,Assertion failure in async test case does not fail test overall,"<!-- Is this a question? Don't open an issue. Ask in our chat https://on.cypress.io/chat  -->

Related issues

 - https://brucelefebvre.com/blog/2019/08/26/cypress-gotchas-with-promises/
 - https://github.com/cypress-io/cypress/issues/1417 (this is more about using `async`/`await` with the Cypress API, `cy.xxx`)
 - https://github.com/cypress-io/cypress/issues/3724
 - https://github.com/cypress-io/cypress/issues/3883
 - https://github.com/cypress-io/cypress/issues/3497

### Current behavior:

The assertion fails(in red) but the overall test still passes,

![](https://i.imgur.com/KmeM7Tu.png)


### Desired behavior:

[Asserts with `cy`](https://docs.cypress.io/guides/references/assertions.html) work in `async` test case

### Steps to reproduce: (app code and test code)

Use the following testing code with `async` and notice the test succeeds.

https://github.com/MadLittleMods/cypress-test-tiny/pull/1/files
```js
const generateFixtures = function() {
  return new Promise(resolve => {
    setTimeout(() => {
      resolve(""bar"");
    }, 1000);
  });
};

describe(""Some page"", function() {
  it(""shows something"", async function() {
    const fixtures = await generateFixtures();

    cy.visit(`http://google.com/?foo=${fixtures}`);

    cy.contains(""somethingthatodoesNOTexist"");
  });
});
```


### Versions

 - Cypress 3.4.0
 - Node v10.15.1
 - Windows 10
",bug
468442582,"Cypress UI locks up during cypress run in CI (recognizable in video recording, the UI is less responsive and/or completely frozen)","### Current behavior:

As per the following comments, the UI appears to freeze when reviewing video taken during `cypress run`. There is only activity recorded for the first few seconds.

- https://github.com/cypress-io/cypress/issues/2370#issuecomment-491351832
- https://github.com/cypress-io/cypress/issues/2370#issuecomment-493160496

>Example videos https://52855-7910045-gh.circle-artifacts.com/0/root/project/cypress/videos/main-page.spec.js.mp4, https://53812-7910045-gh.circle-artifacts.com/0/root/project/cypress/videos/main-page.spec.js.mp4. But I think that these ""frozen"" videos are a separate problem. Original problem described in this issue is about incomplete videos. 

### Desired behavior:

The UI/video recording should not freeze and capture the test run like usual when run during `cypress open`

### Steps to reproduce: (app code and test code)

??? I'd love if anyone could respond with the Versions below and ideally steps to reproduce this. 🙏 

### Versions

Cypress: <= 3.3.1
Browser: Electron 61
OS: Linux, Debian 8-1 + ??
CI: Jenkins + ??

",bug
468154382,Getting Error: Script error. (:0) - How to resolve?,"<!-- Is this a question? Don't open an issue. Ask in our chat https://on.cypress.io/chat  -->

### Current behavior:

Cypress test run fails on Chrome in `before()` with a cryptic error message:

>Error: Script error. (:0)
>
>Because this error occurred during a 'before all' hook we are skipping the remaining tests in the current suite: 'Pets - Feed item'

Please see this screenshot:

![image](https://user-images.githubusercontent.com/350687/61222886-43394a00-a724-11e9-9a97-ca75a25b972c.png)


### Desired behavior:

A detailed error message should appear and should include clear instructions on how to resolve the problem.

### Steps to reproduce: (app code and test code)
I've not been able to reproduce based on `cypress-test-tiny` repo so I've created a private repo containing a full test suite. I've sent emailed instructions on how to access it to support@cypress.io.

To reproduce using said repo, please:
1. Clone to Ubuntu.
2. Run `npx cypress open`.
3. Run this spec file: `sanity/pets/feed_item.spec.js`

### Versions
Cypress v3.4.0
Ubuntu 16.04 LTS
Chrome 75
",bug
468150250,Fixture returns outdated/false data,"### Current behavior:

Reading and writing fixtures seems to not work as expected (please let me know if this is my error). Across two different tests (within the same spec) the returned value from `cy.fixture` is outdated and should have been updated by a previous call to `cy.writeFile`. This looks to me like a caching issue?

<img width=""1680"" alt=""Screen Shot 2019-07-15 at 16 06 50"" src=""https://user-images.githubusercontent.com/5357923/61222426-f604aa80-a71a-11e9-8061-9d7888b4cdde.png"">

### Desired behavior:

It should always return the latest data from the fixture and not something outdated.

### Steps to reproduce: (app code and test code)

1. Create a empty spec and paste the below code.
2. Run the spec and see the output in the dashboard.

```js
describe('fixture', () => {
  it('step 1', () => {
    // Create the fixture first
    cy.writeFile(""cypress/fixtures/test-temp.json"", {
      id: 1,
      name: 'Step 1'
    });

    // Let's see the data, it should be fine
    cy.fixture(""test-temp"").then(data => cy.log(data));

    // Update the fixture again
    cy.writeFile(""cypress/fixtures/test-temp.json"", {
      id: 1,
      name: 'Step 2'
    });
  });

  it('step 2', () => {
    // Let's wait 5 seconds just to be sure
    cy.wait(5000);

    // The returned data is { id: 1, name: 'Step 1' }
    // Should be { id: 1, name: 'Step 2' }
    cy.fixture(""test-temp"").then(data => cy.log(data));
  });
});
```

### Versions

Cypress 3.4.0 & 3.3.2
MacOS Mojave
Chrome 75

**UPDATE:** No need to create 2 different tests, it also happens inside the very same test.",bug
465826635,Cypress should fire 'mouseenter' event on .click(),"### Current behavior:

I have a custom dropdown with checkboxes. I'm using [vue-on-click-outside lib](https://www.npmjs.com/package/vue-on-click-outside). It's a directive vue.js. When I click outside of my dropdown it's close the dropdown. 

In real life, everything is successful. It's opening when I click on the DOM element and when I click outside, it's closing. 

But with Cypress, when I click the dropdown doesn't show. When I remove the directive, the click works. Obviously, I can't close it when I click outside without the directive.

_My component_

```html
<div class=""checkbox-select"" v-on-click-outside=""closeDropdown"">
    <div class=""checkbox-select trigger"" :class=""{ isActive: dropdown }"" @click=""toggleDropdown"" data-testid=""displayDropdown"">
      <slot v-if=""!dropdown"" name=""label""></slot>
      <span v-show=""dropdown"" class=""checkbox-select title"" data-testid=""titleOpenedDropdown"">TITLE</span>
    </div>
[...]
  </div>
```

I'm using a custom command to get by the data accessor `""data-testid""`. I am using it everywhere, it's not the source of this problem.

```js
export const getByTestId = (id: string) => {
  return cy.get(`[data-testid=${id}]`);
};
```

_My cypress test_

```js
it(""should open dropdown"",()=>{
  cy.getByTestId(""displayDropdown"").should('be.visible').click()
    .getByTestId(""titleOpenedDropdown"").should(""be.visible"");
});
```

_The result_

<img width=""635"" alt=""Screen Shot 2019-07-09 at 10 12 28"" src=""https://user-images.githubusercontent.com/43608750/60895130-15d73280-a232-11e9-99ee-937702197221.png"">

### Desired behavior:

I want to be able to use the [vue-on-click-outside lib](https://www.npmjs.com/package/vue-on-click-outside) and make my cypress tests work when I click.

### Steps to reproduce: (app code and test code)

On a vue.js project

1- `npm install vue-on-click-outside --save`
2- Add it on something you can toggle open/close

```html
<template>
  <div class=""checkbox-select"" v-on-click-outside=""closeDropdown"">
    <div class=""checkbox-select trigger"" :class=""{ isActive: dropdown }"" @click=""toggleDropdown"" data-testid=""displayDropdown"">
      <slot v-if=""!dropdown"" name=""label""></slot>
      <span v-show=""dropdown"" class=""checkbox-select title"" data-testid=""titleOpenedDropdown"">TITLE</span>
    </div>

    <div id=""dropdown"" class=""checkbox-select dropdown"" v-show=""dropdown"">
      <ul id=""customScroll"" class=""checkbox-select items-wrapp"">
        <li v-for=""(item, index) in items"" :key=""index"">
          <div class=""checkbox-select"">
            {{ item }}
          </div>
        </li>
      </ul>
    </div>
  </div>
</template>

<script>
  import { mixin as onClickOutside } from 'vue-on-click-outside';

  export default {
    name: 'input-dropdownCheckboxes',
    mixins: [onClickOutside],
    props: {
      items: {
        type: Array,
        default: []
      }
    },
    data() {
      return {
        dropdown: false
      };
    },
    methods: {
      toggleDropdown() {
        this.dropdown = !this.dropdown;
      },
      closeDropdown() {
        if(this.dropdown) {
          this.dropdown = false;
        }
      }
    }
  };
</script>
```

3- Try to click on this element with cypress to open it.

```js
it(""should open dropdown"",()=>{
  cy.getByTestId(""displayDropdown"").should('be.visible').click()
    .getByTestId(""titleOpenedDropdown"").should(""be.visible"");
});
```

### Versions
Cypress 3.3.2
Chrome 75",bug
465366236,`within` followed by `should` permanently limits scope,"### Current behavior:

When `within` is used to find and return some element within some other element and then followed by `should` to test the returned element, this breaks _all_ subsequent commands (all, not just in the same chain) by permanently setting the root to the aforementioned other element.

In other words, `cy.get('#scope').within(() => cy.get(…)).should(…)` breaks the rest of the test, because it makes it impossible to find anything outside `#scope`.

### Desired behavior:

`cy.get(…).within(() => cy.get(…)).should(…)` shouldn't impact subsequent commands at all. E.g. `cy.get(…)` used after it should search the entire document as usual.

### Steps to reproduce: (app code and test code)

```html
<div id=""foo""><p>foo</p></div>
```

```javascript
cy.root().should('match', 'html') // passes, as it always should

cy.get('#foo')
  .within(() => cy.get('p')) // returns `#foo p`
  .should('match', 'p') // passes, but causes the scope of preceding `within` to become global

cy.root().should('match', 'html') // fails! root is still `div#foo`
```

_Obviously this example is contrived, it's just a minimum reproducible sample._

### Versions

Cypress 3.3.2
Chrome 75.0.3770.100 (Official Build) (64-bit)
MacOS 10.14.5 (18F132)",bug
464629307,Cypress is not able to clean /screenshots,"### Current behavior:

On every run, cypress will clean it's screenshots folder (as mentioned in the documentation). Unfortunately on Windows it is likely that the filenames are too long and thus can not be deleted. When cypress tries to do this, it ignores those files. 
We take all screenshots after the test runs and publish them as build artifacts. So this is a problem as we always see old screenshots.

### Desired behavior:

Cypress should be able to delete them anyway.

I will use a own build step that uses ""rimraf"" to do this. maybe cypress should include rimraf or similar for this task?

### Steps to reproduce: (app code and test code)

https://github.com/gabbersepp/cypress-test-tiny

Execute cypress from this repo on a Windows 2016 Server.

Please note: It seems that Windows 10 has increased it's max path length. So when using this repo on a Win10 machine, you will have no issues. 

### Versions

cypress 3.3.2
Windows 10
Chrome: Version 75.0.3770.100 (Offizieller Build) (64-Bit)
",bug
464273556,"trigger(""keydown"", ...) or type() seems to have a different behaviour compared to browsers?","### Current behavior:

The tests ""should have an empty value"" pass.
![the tests](https://user-images.githubusercontent.com/13646646/60670650-0fa61800-9e26-11e9-8e16-1d97f4edff4b.gif)


### Desired behavior:

The tests ""should have an empty value"" should fail. 

Given how the code is now, the shortcut key (;) is entered in the textfield everytime I use the shortcut.
![value_becomes_semicolon](https://user-images.githubusercontent.com/13646646/60670675-192f8000-9e26-11e9-838a-b519254c2259.gif)


### Steps to reproduce: 
A [repository](https://github.com/akosipax/cypress-test) to the app code + test code is available.

Just serve it with `npx serve` and you can change the  `baseURL` in cypress.json in case the port changes.

(I didn't realize that there was a cypress-test-tiny repo that I could fork so I made my own repo)

### Versions

Cypress 3.3.2

Mac OS 10.14.5

Chrome 75
",bug
462587915,Failure during cypress verify --smoke-test: code 3221225781 in Windows,"**NOTE** If the code after running Cypress with [`DEBUG:cypress*`](https://on.cypress.io/debugging#Print-DEBUG-logs) is NOT 3221225781, but you are seeing a similar error - see this issue instead: https://github.com/cypress-io/cypress/issues/4624

### Current behavior:

Running `cypress open`, `cypress run` or `cypress verify` results in the error below. Specifically when running with [`DEBUG:cypress*`](https://on.cypress.io/debugging#Print-DEBUG-logs) logs set, the `makeError` portion prints the `code: 3221225781`.

```
cypress verify
...
cypress:cli Smoke test failed: { Error: Command failed: ..\Cypress.exe --smoke-test --ping=259

    at makeError (..cypress\node_modules\execa\index.js:172:9)
    at Promise.all.then.arr (..\cypress\node_modules\execa\index.js:277:16)
    at <anonymous>
    at process._tickCallback (internal/process/next_tick.js:188:7)
  code: 3221225781,
  stdout: '',
  stderr: '',
  failed: true,
  signal: null,
  cmd: '..Cypress.exe --smoke-test --ping=259',
  timedOut: false,
 ?  Verifying Cypress can run ..\Cypress
   ? Cypress Version: xxx
Cypress failed to start.

This is usually caused by a missing library or dependency.

The error below should indicate which dependency is missing.

https://on.cypress.io/required-dependencies

If you are using Docker, we provide containers with all required dependencies installed.
----------

Command failed: ..\Cypress.exe --smoke-test --ping=259
----------

Platform: xxx
Cypress Version: xxx
```

- https://github.com/cypress-io/cypress/issues/1866#issuecomment-401725706
- Maybe related: https://github.com/cypress-io/cypress/issues/2812

### [previous comments from @brian-mann](https://github.com/cypress-io/cypress/issues/1866#issuecomment-401868304)

>It appears there is more information from Electron regarding this here: electron/electron#3570
>
>Electron is exiting with exit code 3221225781
>
>There are a bunch of issues over at Electron's github indicating this. I scanned through them but didn't really see any actionable steps. We really need to be able to reproduce this on our own machines so we can iterate on the problem.
>
>A quick google pulls up a bunch of results here: https://www.google.com/search?q=electron+3221225781&oq=electron+3221225781&aqs=chrome..69i57j69i60l2.1334j0j4&sourceid=chrome&ie=UTF-8
>
>I would suggest any/all of you read through those and try out some of the workarounds there. If any work, please report them back here and we'll see what changes we need to make.",bug
462585077,Failure during cypress verify step --smoke-test / throwing at makeError,"### Current behavior:

We have a few issues floating around about errors during `cypress verify` that we have not been able to reproduce and have not been fixed as of Cypress v3.3.2.

This issue is the epic issue to track them all in one place. All the other issues have been closed and direct users to comment here. 

- https://github.com/cypress-io/cypress/issues/4613
- https://github.com/cypress-io/cypress/issues/4442
- https://github.com/cypress-io/cypress/issues/4258
- https://github.com/cypress-io/cypress/issues/3901
- https://github.com/cypress-io/cypress/issues/3254
- https://github.com/cypress-io/cypress/issues/3176
- https://github.com/cypress-io/cypress/issues/3116
- https://github.com/cypress-io/cypress/issues/3013#issuecomment-450389632
- https://github.com/cypress-io/cypress/issues/2797
- https://github.com/cypress-io/cypress/issues/1866
- https://github.com/cypress-io/cypress/issues/1556#issuecomment-405548988

#### The error looks something like this:

```
It looks like this is your first time using Cypress: xxx

 ✖  Verifying Cypress can run /Users/benjamin/Library/Caches/Cypress/xxx/Cypress.app
   → Cypress Version: xxx
Cypress failed to start.

This is usually caused by a missing library or dependency.

The error below should indicate which dependency is missing.

https://on.cypress.io/required-dependencies

If you are using Docker, we provide containers with all required dependencies installed.
----------

Command failed: /Caches/Cypress/xxx/Cypress.app/Contents/MacOS/Cypress --smoke-test --ping=584
----------

Platform: xxx
Cypress Version: xxx
```

#### Some of the output when run in `DEBUG:cypress*` mode display this stacktrace at `makeError`

```
cypress:cli needs XVFB? false +0ms
cypress:cli smoke test command: ../Cypress --smoke-test --ping=310 +0ms
cypress:cli Smoke test failed: { 
  Error: Command failed: ../Cypress --smoke-test --ping=310
    at makeError (../node_modules/execa/index.js:172:9)
    at Promise.all.then.arr (../node_modules/execa/index.js:277:16)
    at process._tickCallback (internal/process/next_tick.js:68:7)
  code: 1,
  stdout: '',
  stderr: '',
  failed: true,
  signal: null,
  cmd: '../Cypress --smoke-test --ping=310',
  timedOut: false,
  killed: false 
} +43ms

Verifying Cypress can run /home/circleci/.cache/Cypress/3.1.5/Cypress [failed]
```

#### Most of the `code` values in this stack trace are either `1` or `null`. 

- [This code was `9`](https://github.com/cypress-io/cypress/issues/3116#issuecomment-474853589) and was solved by running under `sudo`. 
- This code was `3221225781` - SEE THIS ISSUE INSTEAD: https://github.com/cypress-io/cypress/issues/4625

#### Some people mentioned fixes?

Some people mentioned that restarting their computer fixed it. /shrug

- https://github.com/cypress-io/cypress/issues/4258#issuecomment-498004337
- https://github.com/cypress-io/cypress/issues/3254#issuecomment-459441739

### Steps to reproduce: (app code and test code) 

Basically any way you can run or open Cypress - people run into this issue

- `npx cypress open`
- `cypress open`
- `./node_modules/cypress/bin/cypress open`
- `yarn cypress run`

### Versions

Cypress Versions: 3.0.1 ~ 3.3.1
OS Versions: 
- darwin (18.2.0)
- darwin (18.0.0)
- darwin (17.6.0)
- darwin (17.5.0)
- macOS Mojave 10.14.3
- Debian 9.6
- linux (Debian - 9.8)
- linux (Ubuntu Linux - 18.04)
- win32 (6.3.9600)
- win32 (10.0.17134)

# Try this before commenting!

- Update to the most recent version of Cypress: https://on.cypress.io/changelog
- Clear your cache by running `cypress cache clear`
- Try to run `cypress verify` BY ITSELF (not `cypress open` or `cypress run`)
- Ensure dependencies are installed `sudo apt-get install xvfb libgtk2.0-0 libnotify-dev libgconf-2-4 libnss3 libxss1 libasound2`
",bug
462340733,"""Cypress verification timed out"" occurs sporadically in CI","This occurs only in our gitlab CI environment, failing about half the time. I've compared the successful and unsuccessful log output but it looks identical up until the line where it fails. I'm not sure how to debug any further from here. I have cypress caching configured for these examples but it happens without anything cached also.

Verification failure output below:
```
DEBUG=cypress:* npx cypress install
2019-06-29T20:25:29.144Z cypress:cli cli starts with arguments [""/usr/local/bin/node"",""/builds/usurp-power/engine/packages/usurp-web/node_modules/.bin/cypress"",""install""]
2019-06-29T20:25:29.146Z cypress:cli NODE_OPTIONS is not set
2019-06-29T20:25:29.146Z cypress:cli program parsing arguments
2019-06-29T20:25:34.050Z cypress:cli parsed cli options {}
2019-06-29T20:25:34.051Z cypress:cli installing with options {}
2019-06-29T20:25:34.052Z cypress:cli version in package.json is 3.3.1
2019-06-29T20:25:34.052Z cypress:cli Using CYPRESS_CACHE_FOLDER from environment variable
2019-06-29T20:25:34.052Z cypress:cli Using CYPRESS_CACHE_FOLDER from environment variable
2019-06-29T20:25:34.053Z cypress:cli Using CYPRESS_CACHE_FOLDER from environment variable
2019-06-29T20:25:34.053Z cypress:cli Using CYPRESS_CACHE_FOLDER from environment variable
2019-06-29T20:25:34.054Z cypress:cli using environment variable CYPRESS_CACHE_FOLDER /builds/usurp-power/engine/cache/Cypress
2019-06-29T20:25:34.054Z cypress:cli Using CYPRESS_CACHE_FOLDER from environment variable
2019-06-29T20:25:34.054Z cypress:cli Using CYPRESS_CACHE_FOLDER from environment variable
2019-06-29T20:25:34.054Z cypress:cli using environment variable CYPRESS_CACHE_FOLDER /builds/usurp-power/engine/cache/Cypress
2019-06-29T20:25:34.054Z cypress:cli Using CYPRESS_CACHE_FOLDER from environment variable
2019-06-29T20:25:34.054Z cypress:cli Using CYPRESS_CACHE_FOLDER from environment variable
2019-06-29T20:25:34.055Z cypress:cli using environment variable CYPRESS_CACHE_FOLDER /builds/usurp-power/engine/cache/Cypress
2019-06-29T20:25:34.058Z cypress:cli Reading binary package.json from: /builds/usurp-power/engine/cache/Cypress/3.3.1/Cypress/resources/app/package.json
2019-06-29T20:25:34.087Z cypress:cli installed version is 3.3.1 version needed is 3.3.1
2019-06-29T20:25:34.088Z cypress:cli Not downloading or installing binary
$ DEBUG=cypress:* npx cypress verify
2019-06-29T20:25:34.537Z cypress:cli cli starts with arguments [""/usr/local/bin/node"",""/builds/usurp-power/engine/packages/usurp-web/node_modules/.bin/cypress"",""verify""]
2019-06-29T20:25:34.539Z cypress:cli NODE_OPTIONS is not set
2019-06-29T20:25:34.539Z cypress:cli program parsing arguments
2019-06-29T20:25:34.541Z cypress:cli parsed cli options {}
2019-06-29T20:25:34.706Z cypress:cli verifying Cypress app
2019-06-29T20:25:34.707Z cypress:cli Using CYPRESS_CACHE_FOLDER from environment variable
2019-06-29T20:25:34.707Z cypress:cli Using CYPRESS_CACHE_FOLDER from environment variable
2019-06-29T20:25:34.707Z cypress:cli using environment variable CYPRESS_CACHE_FOLDER /builds/usurp-power/engine/cache/Cypress
2019-06-29T20:25:34.708Z cypress:cli checking environment variables
2019-06-29T20:25:34.711Z cypress:cli checking if executable exists /builds/usurp-power/engine/cache/Cypress/3.3.1/Cypress/Cypress
2019-06-29T20:25:34.712Z cypress:cli Binary is executable? : true
2019-06-29T20:25:34.713Z cypress:cli binaryDir is  /builds/usurp-power/engine/cache/Cypress/3.3.1/Cypress
2019-06-29T20:25:34.713Z cypress:cli Reading binary package.json from: /builds/usurp-power/engine/cache/Cypress/3.3.1/Cypress/resources/app/package.json
2019-06-29T20:25:34.716Z cypress:cli Found binary version 3.3.1 installed in: /builds/usurp-power/engine/cache/Cypress/3.3.1/Cypress
2019-06-29T20:25:34.730Z cypress:cli { verified: true }
2019-06-29T20:25:34.730Z cypress:cli is Verified ? true
2019-06-29T20:25:34.731Z cypress:cli force verify
2019-06-29T20:25:34.731Z cypress:cli running binary verification check 3.3.1
[20:25:34]  Verifying Cypress can run /builds/usurp-power/engine/cache/Cypress/3.3.1/Cypress [started]
2019-06-29T20:25:34.737Z cypress:cli clearing out the verified version
2019-06-29T20:25:34.739Z cypress:cli undefined DISPLAY environment variable
2019-06-29T20:25:34.739Z cypress:cli Cypress will spawn its own Xvfb
2019-06-29T20:25:34.739Z cypress:cli needs Xvfb? true
2019-06-29T20:25:34.740Z cypress:cli Starting Xvfb
2019-06-29T20:25:35.725Z cypress:cli running smoke test
2019-06-29T20:25:35.725Z cypress:cli using Cypress executable /builds/usurp-power/engine/cache/Cypress/3.3.1/Cypress/Cypress
2019-06-29T20:25:35.726Z cypress:cli smoke test command: /builds/usurp-power/engine/cache/Cypress/3.3.1/Cypress/Cypress --smoke-test --ping=890
2019-06-29T20:25:45.853Z cypress:cli Smoke test failed: { Error: Command failed: /builds/usurp-power/engine/cache/Cypress/3.3.1/Cypress/Cypress --smoke-test --ping=890
2019-06-29T20:25:42.995Z cypress:ts Running without ts-node hook in environment ""production""
2019-06-29T20:25:43.631Z cypress:server:cypress starting cypress with argv [ '/builds/usurp-power/engine/cache/Cypress/3.3.1/Cypress/Cypress', '--smoke-test', '--ping=890' ]
2019-06-29T20:25:45.338Z cypress:server:args argv array: [ '/builds/usurp-power/engine/cache/Cypress/3.3.1/Cypress/Cypress', '--smoke-test', '--ping=890' ]
2019-06-29T20:25:45.344Z cypress:server:args argv parsed: { _: [ '/builds/usurp-power/engine/cache/Cypress/3.3.1/Cypress/Cypress' ], smokeTest: true, ping: 890, cwd: '/builds/usurp-power/engine/cache/Cypress/3.3.1/Cypress/resources/app/packages/server' }
2019-06-29T20:25:45.345Z cypress:server:args options { _: [ '/builds/usurp-power/engine/cache/Cypress/3.3.1/Cypress/Cypress' ], smokeTest: true, ping: 890, cwd: '/builds/usurp-power/engine/cache/Cypress/3.3.1/Cypress/resources/app/packages/server', config: {} }
2019-06-29T20:25:45.346Z cypress:server:args argv options: { _: [ '/builds/usurp-power/engine/cache/Cypress/3.3.1/Cypress/Cypress' ], smokeTest: true, ping: 890, cwd: '/builds/usurp-power/engine/cache/Cypress/3.3.1/Cypress/resources/app/packages/server', config: {}, pong: 890 }


    at makeError (/builds/usurp-power/engine/packages/usurp-web/node_modules/cypress/node_modules/execa/index.js:172:9)
    at Promise.all.then.arr (/builds/usurp-power/engine/packages/usurp-web/node_modules/cypress/node_modules/execa/index.js:277:16)
    at process._tickCallback (internal/process/next_tick.js:68:7)
  code: null,
  stdout: '',
  stderr:
   '2019-06-29T20:25:42.995Z cypress:ts Running without ts-node hook in environment ""production""\n2019-06-29T20:25:43.631Z cypress:server:cypress starting cypress with argv [ \'/builds/usurp-power/engine/cache/Cypress/3.3.1/Cypress/Cypress\', \'--smoke-test\', \'--ping=890\' ]\n2019-06-29T20:25:45.338Z cypress:server:args argv array: [ \'/builds/usurp-power/engine/cache/Cypress/3.3.1/Cypress/Cypress\', \'--smoke-test\', \'--ping=890\' ]\n2019-06-29T20:25:45.344Z cypress:server:args argv parsed: { _: [ \'/builds/usurp-power/engine/cache/Cypress/3.3.1/Cypress/Cypress\' ], smokeTest: true, ping: 890, cwd: \'/builds/usurp-power/engine/cache/Cypress/3.3.1/Cypress/resources/app/packages/server\' }\n2019-06-29T20:25:45.345Z cypress:server:args options { _: [ \'/builds/usurp-power/engine/cache/Cypress/3.3.1/Cypress/Cypress\' ], smokeTest: true, ping: 890, cwd: \'/builds/usurp-power/engine/cache/Cypress/3.3.1/Cypress/resources/app/packages/server\', config: {} }\n2019-06-29T20:25:45.346Z cypress:server:args argv options: { _: [ \'/builds/usurp-power/engine/cache/Cypress/3.3.1/Cypress/Cypress\' ], smokeTest: true, ping: 890, cwd: \'/builds/usurp-power/engine/cache/Cypress/3.3.1/Cypress/resources/app/packages/server\', config: {}, pong: 890 }\n',
  failed: true,
  signal: 'SIGTERM',
  cmd:
   '/builds/usurp-power/engine/cache/Cypress/3.3.1/Cypress/Cypress --smoke-test --ping=890',
  timedOut: true,
  killed: true }
2019-06-29T20:25:45.855Z cypress:cli error message: 2019-06-29T20:25:42.995Z cypress:ts Running without ts-node hook in environment ""production""
2019-06-29T20:25:43.631Z cypress:server:cypress starting cypress with argv [ '/builds/usurp-power/engine/cache/Cypress/3.3.1/Cypress/Cypress', '--smoke-test', '--ping=890' ]
2019-06-29T20:25:45.338Z cypress:server:args argv array: [ '/builds/usurp-power/engine/cache/Cypress/3.3.1/Cypress/Cypress', '--smoke-test', '--ping=890' ]
2019-06-29T20:25:45.344Z cypress:server:args argv parsed: { _: [ '/builds/usurp-power/engine/cache/Cypress/3.3.1/Cypress/Cypress' ], smokeTest: true, ping: 890, cwd: '/builds/usurp-power/engine/cache/Cypress/3.3.1/Cypress/resources/app/packages/server' }
2019-06-29T20:25:45.345Z cypress:server:args options { _: [ '/builds/usurp-power/engine/cache/Cypress/3.3.1/Cypress/Cypress' ], smokeTest: true, ping: 890, cwd: '/builds/usurp-power/engine/cache/Cypress/3.3.1/Cypress/resources/app/packages/server', config: {} }
2019-06-29T20:25:45.346Z cypress:server:args argv options: { _: [ '/builds/usurp-power/engine/cache/Cypress/3.3.1/Cypress/Cypress' ], smokeTest: true, ping: 890, cwd: '/builds/usurp-power/engine/cache/Cypress/3.3.1/Cypress/resources/app/packages/server', config: {}, pong: 890 }

2019-06-29T20:25:45.856Z cypress:cli error timedOut is true
2019-06-29T20:25:47.406Z cypress:cli Stopping Xvfb
[20:25:47]  Verifying Cypress can run /builds/usurp-power/engine/cache/Cypress/3.3.1/Cypress [failed]
Cypress verification timed out.

This command failed with the following output:

/builds/usurp-power/engine/cache/Cypress/3.3.1/Cypress/Cypress --smoke-test --ping=890

----------

2019-06-29T20:25:42.995Z cypress:ts Running without ts-node hook in environment ""production""
2019-06-29T20:25:43.631Z cypress:server:cypress starting cypress with argv [ '/builds/usurp-power/engine/cache/Cypress/3.3.1/Cypress/Cypress', '--smoke-test', '--ping=890' ]
2019-06-29T20:25:45.338Z cypress:server:args argv array: [ '/builds/usurp-power/engine/cache/Cypress/3.3.1/Cypress/Cypress', '--smoke-test', '--ping=890' ]
2019-06-29T20:25:45.344Z cypress:server:args argv parsed: { _: [ '/builds/usurp-power/engine/cache/Cypress/3.3.1/Cypress/Cypress' ], smokeTest: true, ping: 890, cwd: '/builds/usurp-power/engine/cache/Cypress/3.3.1/Cypress/resources/app/packages/server' }
2019-06-29T20:25:45.345Z cypress:server:args options { _: [ '/builds/usurp-power/engine/cache/Cypress/3.3.1/Cypress/Cypress' ], smokeTest: true, ping: 890, cwd: '/builds/usurp-power/engine/cache/Cypress/3.3.1/Cypress/resources/app/packages/server', config: {} }
2019-06-29T20:25:45.346Z cypress:server:args argv options: { _: [ '/builds/usurp-power/engine/cache/Cypress/3.3.1/Cypress/Cypress' ], smokeTest: true, ping: 890, cwd: '/builds/usurp-power/engine/cache/Cypress/3.3.1/Cypress/resources/app/packages/server', config: {}, pong: 890 }

----------

Platform: linux (Debian - 8.11)
Cypress Version: 3.3.1
```

Verification success output below:
```
$ DEBUG=cypress:* npx cypress install
2019-06-29T19:47:14.959Z cypress:cli cli starts with arguments [""/usr/local/bin/node"",""/builds/usurp-power/engine/packages/usurp-web/node_modules/.bin/cypress"",""install""]
2019-06-29T19:47:14.961Z cypress:cli NODE_OPTIONS is not set
2019-06-29T19:47:14.961Z cypress:cli program parsing arguments
2019-06-29T19:47:19.725Z cypress:cli parsed cli options {}
2019-06-29T19:47:19.726Z cypress:cli installing with options {}
2019-06-29T19:47:19.727Z cypress:cli version in package.json is 3.3.1
2019-06-29T19:47:19.727Z cypress:cli Using CYPRESS_CACHE_FOLDER from environment variable
2019-06-29T19:47:19.727Z cypress:cli Using CYPRESS_CACHE_FOLDER from environment variable
2019-06-29T19:47:19.728Z cypress:cli Using CYPRESS_CACHE_FOLDER from environment variable
2019-06-29T19:47:19.728Z cypress:cli Using CYPRESS_CACHE_FOLDER from environment variable
2019-06-29T19:47:19.728Z cypress:cli using environment variable CYPRESS_CACHE_FOLDER /builds/usurp-power/engine/cache/Cypress
2019-06-29T19:47:19.729Z cypress:cli Using CYPRESS_CACHE_FOLDER from environment variable
2019-06-29T19:47:19.729Z cypress:cli Using CYPRESS_CACHE_FOLDER from environment variable
2019-06-29T19:47:19.729Z cypress:cli using environment variable CYPRESS_CACHE_FOLDER /builds/usurp-power/engine/cache/Cypress
2019-06-29T19:47:19.729Z cypress:cli Using CYPRESS_CACHE_FOLDER from environment variable
2019-06-29T19:47:19.729Z cypress:cli Using CYPRESS_CACHE_FOLDER from environment variable
2019-06-29T19:47:19.729Z cypress:cli using environment variable CYPRESS_CACHE_FOLDER /builds/usurp-power/engine/cache/Cypress
2019-06-29T19:47:19.732Z cypress:cli Reading binary package.json from: /builds/usurp-power/engine/cache/Cypress/3.3.1/Cypress/resources/app/package.json
2019-06-29T19:47:19.783Z cypress:cli installed version is 3.3.1 version needed is 3.3.1
2019-06-29T19:47:19.784Z cypress:cli Not downloading or installing binary
$ DEBUG=cypress:* npx cypress verify
2019-06-29T19:47:20.289Z cypress:cli cli starts with arguments [""/usr/local/bin/node"",""/builds/usurp-power/engine/packages/usurp-web/node_modules/.bin/cypress"",""verify""]
2019-06-29T19:47:20.291Z cypress:cli NODE_OPTIONS is not set
2019-06-29T19:47:20.292Z cypress:cli program parsing arguments
2019-06-29T19:47:20.294Z cypress:cli parsed cli options {}
2019-06-29T19:47:20.428Z cypress:cli verifying Cypress app
2019-06-29T19:47:20.429Z cypress:cli Using CYPRESS_CACHE_FOLDER from environment variable
2019-06-29T19:47:20.429Z cypress:cli Using CYPRESS_CACHE_FOLDER from environment variable
2019-06-29T19:47:20.429Z cypress:cli using environment variable CYPRESS_CACHE_FOLDER /builds/usurp-power/engine/cache/Cypress
2019-06-29T19:47:20.430Z cypress:cli checking environment variables
2019-06-29T19:47:20.433Z cypress:cli checking if executable exists /builds/usurp-power/engine/cache/Cypress/3.3.1/Cypress/Cypress
2019-06-29T19:47:20.434Z cypress:cli Binary is executable? : true
2019-06-29T19:47:20.435Z cypress:cli binaryDir is  /builds/usurp-power/engine/cache/Cypress/3.3.1/Cypress
2019-06-29T19:47:20.435Z cypress:cli Reading binary package.json from: /builds/usurp-power/engine/cache/Cypress/3.3.1/Cypress/resources/app/package.json
2019-06-29T19:47:20.438Z cypress:cli Found binary version 3.3.1 installed in: /builds/usurp-power/engine/cache/Cypress/3.3.1/Cypress
2019-06-29T19:47:20.449Z cypress:cli { verified: true }
2019-06-29T19:47:20.449Z cypress:cli is Verified ? true
2019-06-29T19:47:20.449Z cypress:cli force verify
2019-06-29T19:47:20.450Z cypress:cli running binary verification check 3.3.1
[19:47:20]  Verifying Cypress can run /builds/usurp-power/engine/cache/Cypress/3.3.1/Cypress [started]
2019-06-29T19:47:20.458Z cypress:cli clearing out the verified version
2019-06-29T19:47:20.460Z cypress:cli undefined DISPLAY environment variable
2019-06-29T19:47:20.460Z cypress:cli Cypress will spawn its own Xvfb
2019-06-29T19:47:20.460Z cypress:cli needs Xvfb? true
2019-06-29T19:47:20.460Z cypress:cli Starting Xvfb
2019-06-29T19:47:21.456Z cypress:cli running smoke test
2019-06-29T19:47:21.456Z cypress:cli using Cypress executable /builds/usurp-power/engine/cache/Cypress/3.3.1/Cypress/Cypress
2019-06-29T19:47:21.456Z cypress:cli smoke test command: /builds/usurp-power/engine/cache/Cypress/3.3.1/Cypress/Cypress --smoke-test --ping=224
2019-06-29T19:47:31.328Z cypress:cli smoke test stdout ""224""
2019-06-29T19:47:31.329Z cypress:cli Stopping Xvfb
2019-06-29T19:47:31.424Z cypress:cli write verified: true
2019-06-29T19:47:31.425Z cypress:cli could not read binary_state.json file
[19:47:31]  Verifying Cypress can run /builds/usurp-power/engine/cache/Cypress/3.3.1/Cypress [completed]```",bug
462120638,Cannot type() into different Elements using slatejs,"<!-- Is this a question? Don't open an issue. Ask in our chat https://on.cypress.io/chat  -->

### Current behavior:

When typing into two different textfields:
```js
cy.get('[data-key=""1975""]').type('Text1')
cy.get('blockquote[data-key=""1987""]').type('Text2')
```

into the slatejs richtext editor, all of the text is saved in the first block.

DOM looks like this:

<img width=""558"" alt=""Bildschirmfoto 2019-06-28 um 18 32 36"" src=""https://user-images.githubusercontent.com/6641079/60357570-41f1e880-99d4-11e9-92a9-ccb40d4f65b3.png"">

The test run is also green as long as I don't make assertions.
The elements are found correctly but it seems the focus could not change.

### Desired behavior:

type() should only write into the element specified in the cy.get() function.
DOM-Result should look like:

<img width=""634"" alt=""Bildschirmfoto 2019-06-28 um 18 34 57"" src=""https://user-images.githubusercontent.com/6641079/60357551-32729f80-99d4-11e9-8a1d-09aaa64b5f6b.png"">
(edited manually)

### Steps to reproduce: (app code and test code)

You easily reproduce on the slatejs demo page with following test-code:
```js
describe('My First Test', function() {
  it('Visits slatejs', function() {

    cy.visit('https://www.slatejs.org/#/rich-text')
    cy.get('[data-key=""1975""]').type('Text1')
    cy.get('blockquote[data-key=""1987""]').type('Text2')
  })
})
```


### Versions

Cypress: 3.3.2
Chrome: 75
",bug
461873210,"When downloading 2 versions of Cypress simultaneously, one clobbers the other resulting in nondescript error and exit","### Current behavior: 

We recently encountered an error on one of our repos ourselves where we use yarn. The problem was that we were downloading two versions of cypress within our `package.json`. We run a monorepo, so one of the cypress versions was in the main `package.json` and the other cypress version was in a sub-module of our monorepo. 

Since we save cypress upon download to `/tmp/cypress.zip`, they were clobbering each other when both were being downloaded/unzipping at the same time. Due to how yarn works, this is likely to exhibit more frequently in it - although it's still possible using npm.

**Note: This can still happen even if the 2 Cypress versions are the same version number**

Basically:

- Version 1 and 2 of Cypress begin download
- Version 1 of Cypress finishes download
- Version 2 of Cypress is still downloading - deleting current `/tmp/cypress.zip`
- Version 1 of Cypress begins unzipping `/tmp/cypress.zip`
- Error

Resulting in this error specifically:

```
Installing Cypress (version: 3.3.2)

[04:46:10]  Downloading Cypress     [started]
[04:46:11]  Downloading Cypress     [completed]
[04:46:11]  Unzipping Cypress       [started]
read err Error: not enough bytes in the stream. expected 8709456. got only 2882632
    at AssertByteCountStream._flush (/root/monorepo/node_modules/yauzl/index.js:494:15)
    at AssertByteCountStream.prefinish (_stream_transform.js:141:10)
    at AssertByteCountStream.emit (events.js:198:13)
    at prefinish (_stream_writable.js:635:14)
    at finishMaybe (_stream_writable.js:643:5)
    at endWritable (_stream_writable.js:663:3)
    at AssertByteCountStream.Writable.end (_stream_writable.js:594:5)
    at InflateRaw.onend (_stream_readable.js:655:10)
    at Object.onceWrapper (events.js:286:20)
    at InflateRaw.emit (events.js:203:15)
    at endReadableNT (_stream_readable.js:1129:12)
    at process._tickCallback (internal/process/next_tick.js:63:19)
events.js:174
      throw er; // Unhandled 'error' event
      ^

Error: invalid central directory file header signature: 0x98d05ebb
    at /root/monorepo/node_modules/cypress/node_modules/yauzl/index.js:258:70
    at /root/monorepo/node_modules/cypress/node_modules/yauzl/index.js:631:5
    at /root/monorepo/node_modules/cypress/node_modules/fd-slicer/index.js:32:7
    at FSReqWrap.wrapper [as oncomplete] (fs.js:467:17)
Emitted 'error' event at:
    at emitError (/root/monorepo/node_modules/cypress/node_modules/yauzl/index.js:232:8)
    at emitErrorAndAutoClose (/root/monorepo/node_modules/cypress/node_modules/yauzl/index.js:227:3)
    at /root/monorepo/node_modules/cypress/node_modules/yauzl/index.js:258:42
    at /root/monorepo/node_modules/cypress/node_modules/yauzl/index.js:631:5
    at /root/monorepo/node_modules/cypress/node_modules/fd-slicer/index.js:32:7
    at FSReqWrap.wrapper [as oncomplete] (fs.js:467:17)
info Visit https://yarnpkg.com/en/docs/cli/install for documentation about this command.
Exited with code 1
```

See https://github.com/cypress-io/cypress/issues/3515#issuecomment-506614578


### Desired behavior:

When downloading Cypress, we need to make the `tmp` destination more unique like:

`/tmp/cypress-${version}-${random}.zip`

### Steps to reproduce: (app code and test code)

`project/packages/foo/package.json`

```json
{
  ""name"": ""foo"",
  ""devDependencies"": {
    ""cypress"": ""3.3.2""
  }
}
```

`project/packages/bar/package.json`

```json
{
  ""name"": ""bar"",
  ""devDependencies"": {
    ""cypress"": ""3.3.2""
  }
}
```

Run `yarn`

### Versions

Cypress 3.3.2
",bug
461446893,Filling forms using Hyperform,"I encountered issues filling form fields with type() when the form is ""enhanced"" with Hyperform (https://hyperform.js.org/).

### Current behavior:
The form field is not filled.

### Desired behavior:
The form field shoud be filled.

### Steps to reproduce: (app code and test code)
No app code needed.

Test code:
```js
describe('Hyperform basic test', function() {
  it('it should be possible to fill a form field', function() {
    cy.visit('https://hyperform.js.org/examples.html#file=simple')
    cy.get('input').type('This will never appear')
  })
})
```

### Versions
Cypress 3.3.0 and 3.3.1
Chromium 69 and Electron 61 ",bug
459881835,uncaught error from onBeforeLoad is mistakenly attributed to application code,"Mac, Cypress v3.3.x

Reproducible example in [branch `set-navigator-language` in cypress-test-tiny](cypress-test-tiny](https://github.com/cypress-io/cypress-test-tiny/tree/set-navigator-language)

Sample page (does not really matter)

```html
<body>
  <p>Hi there</p>
</body>
```

spec 
```js
/// <reference types=""cypress"" />
it('catches correctly exception', () => {
  cy.visit('index.html', {
    onBeforeLoad (win) {
      win.navigator.language = 'JavaScript'
    }
  })
})
```

When the test runs it thinks the exception is from the application code, but even from the stacktrace it is coming from the spec code

<img width=""1117"" alt=""Screen Shot 2019-06-24 at 9 03 33 AM"" src=""https://user-images.githubusercontent.com/2212006/60021186-7f1a4b80-965f-11e9-858e-d961ee687387.png"">
",bug
459762281,Cypress fails to parse environment variables with commas,"### Current behavior:

Cypress fails to run when passing an environment variable containing a comma.

Command run:
`cypress open --env ABC=""1,2,3""`

Stacktrace:
> A JavaScript error occurred in the main process
Uncaught Exception:
TypeError: Cannot read property 'split' of undefined
    at pipesToCommas (/home/ehlerts/.cache/Cypress/3.3.1/Cypress/resources/app/packages/server/lib/util/args.js:95:14)
    at JSONOrCoerce (/home/ehlerts/.cache/Cypress/3.3.1/Cypress/resources/app/packages/server/lib/util/args.js:115:9)
    at /home/ehlerts/.cache/Cypress/3.3.1/Cypress/resources/app/packages/server/node_modules/lodash/lodash.js:13402:38
    at /home/ehlerts/.cache/Cypress/3.3.1/Cypress/resources/app/packages/server/node_modules/lodash/lodash.js:4911:15
    at baseForOwn (/home/ehlerts/.cache/Cypress/3.3.1/Cypress/resources/app/packages/server/node_modules/lodash/lodash.js:2996:24)
    at Function.mapValues (/home/ehlerts/.cache/Cypress/3.3.1/Cypress/resources/app/packages/server/node_modules/lodash/lodash.js:13401:7)
    at /home/ehlerts/.cache/Cypress/3.3.1/Cypress/resources/app/packages/server/node_modules/lodash/lodash.js:4374:28
    at arrayReduce (/home/ehlerts/.cache/Cypress/3.3.1/Cypress/resources/app/packages/server/node_modules/lodash/lodash.js:683:21)
    at baseWrapperValue (/home/ehlerts/.cache/Cypress/3.3.1/Cypress/resources/app/packages/server/node_modules/lodash/lodash.js:4373:14)
    at LodashWrapper.wrapperValue (/home/ehlerts/.cache/Cypress/3.3.1/Cypress/resources/app/packages/server/node_modules/lodash/lodash.js:9052:14)
    at sanitizeAndConvertNestedArgs (/home/ehlerts/.cache/Cypress/3.3.1/Cypress/resources/app/packages/server/lib/util/args.js:151:4)
    at Object.toObject (/home/ehlerts/.cache/Cypress/3.3.1/Cypress/resources/app/packages/server/lib/util/args.js:227:21)
    at Object.start (/home/ehlerts/.cache/Cypress/3.3.1/Cypress/resources/app/packages/server/lib/cypress.js:77:40)
    at Object.<anonymous> (/home/ehlerts/.cache/Cypress/3.3.1/Cypress/resources/app/packages/server/index.js:27:43)
    at Object.<anonymous> (/home/ehlerts/.cache/Cypress/3.3.1/Cypress/resources/app/packages/server/index.js:29:3)
    at Module._compile (module.js:642:30)
    at Object.Module._extensions..js (module.js:653:10)
    at Module.load (module.js:561:32)
    at tryModuleLoad (module.js:504:12)
    at Function.Module._load (module.js:496:3)
    at Module.require (module.js:586:17)
    at require (internal/module.js:11:18)
    at Object.<anonymous> (/home/ehlerts/.cache/Cypress/3.3.1/Cypress/resources/app/index.js:2:1)
    at Object.<anonymous> (/home/ehlerts/.cache/Cypress/3.3.1/Cypress/resources/app/index.js:3:3)
    at Module._compile (module.js:642:30)
    at Object.Module._extensions..js (module.js:653:10)
    at Module.load (module.js:561:32)
    at tryModuleLoad (module.js:504:12)
    at Function.Module._load (module.js:496:3)
    at Object.<anonymous> (/home/ehlerts/.cache/Cypress/3.3.1/Cypress/resources/electron.asar/browser/init.js:186:8)
    at Object.<anonymous> (/home/ehlerts/.cache/Cypress/3.3.1/Cypress/resources/electron.asar/browser/init.js:188:3)
    at Module._compile (module.js:642:30)
    at Object.Module._extensions..js (module.js:653:10)
    at Module.load (module.js:561:32)
    at tryModuleLoad (module.js:504:12)
    at Function.Module._load (module.js:496:3)
    at Function.Module.runMain (module.js:683:10)
    at startup (bootstrap_node.js:196:16)
    at bootstrap_node.js:622:3

Once the stacktrace has been printed, nothing happens.

### Desired behavior:

Cypress should be able to parse environment variables containing commas.

### Steps to reproduce: (app code and test code)

Run the following from a terminal:

`cypress open --env ABC=""1,2,3""`

### Versions

Tested Cypress versions: 3.3.1, 3.2.0, 3.1.5
Operating system: Ubuntu 18.04.2 LTS",bug
457788290,type('{enter}') doesn't work when only 1 input blocking implicit submission,"### Current behavior:

I've already tried: 

```js
cy.get('input').eq(0).type('{enter}')
``` 

But it doesn't work. I've also tried:

```js
cy.get('input').eq(0).type('{enter}').trigger('input')
``` 

And:
```js
cy.get('input').eq(0).type('{enter}').trigger('input').eq(0).
{uparrow},{downarrow},tab()
```

they're all right.But ENTER isn't.
",bug
456026922,"cy.writeFile() is working with JS specs, but not with TypeScript specs","This is in reference to the issue - https://github.com/cypress-io/cypress/issues/4456

### Current behavior:
```
cy.writeFile(""../output/oozie_workflows.csv"", oozieId + "",False"", {
  encoding: 'utf-8'
  flag: ""a""
});
```

The above code works fine with JavaScript specs, but with TypeScript specs - it throws below error message.

```
Argument of type '{ encoding: string; flag: string; }' is not assignable to parameter of type 'Encodings'.
  Type '{ encoding: string; flag: string; }' is not assignable to type '""utf-16le""'.ts(2345)
```

I'm sure this something to do with the **file:  index.d.ts**. Please check.

### Versions
Cypress - 3.3.1
",bug
455923915,cy.route() unable to mock same url multiple times if requests happen quickly,"### Current behavior:

If you make multiple requests to the same endpoint and want to mock each response differently based on the order that they occur, cypress appears to be unable to do it unless you wait X milliseconds between requests.  If there is no pause between requests, cypress will never catch the first `cy.wait(...)` and will mock every request to that endpoint with the same response.

### Desired behavior:

```js
cy.server()
cy.route(url, res1).as(get)
cy.wait(@get)
cy.route(url, res2).as(get)
```
Should result in the first GET request to url responding with res1 and the second GET request to url responding with res2, regardless of the amount of time between requests.

### Steps to reproduce: (app code and test code)

Run tests [here](https://github.com/bahalperin/cypress-route-bug-repro)
",bug
455841854,"cy.contains(selector, content) does not resolve element in headed Electron browser","### Current behavior: 

I've a statement in my test code that works fine in Chrome and headless Electron, but when I run it in headed Electron (v61) it doesn't resolve.

The code is:

```js
cy.contains('.braintree-option__label', 'Card').click({
  force: true
});
```

The element is one of the options provided by Braintree payments

![payments1](https://user-images.githubusercontent.com/36962817/59417181-0f869f80-8dc7-11e9-8ddc-3248bc22d020.png)

![payments2](https://user-images.githubusercontent.com/36962817/59417194-13b2bd00-8dc7-11e9-9b93-8312d8189e96.png)

It actually doesn't fail, because it can click on the element, and I see that the test finishes, but it doesn't mark it as so (no :heavy_check_mark:  nor :x: ). But in the Cypress log I see that it doesn't resolve the element even though cypress does click:

![payments3](https://user-images.githubusercontent.com/36962817/59417563-c6831b00-8dc7-11e9-84aa-72bf37e279a0.png)

### Desired behavior:

Cypress is able to resolve the element both in Chrome and Electron (headed and headless)

### Steps to reproduce: (app code and test code)

App code
```html
<div class=""braintree-option__label"" aria-label=""Paying with Card"">
  Card
  <div class=""braintree-option__disabled-message""></div>
</div>
```

test code
```js
cy.contains('.braintree-option__label', 'Card').click({
  force: true
});
```

### Versions

Cypress 3.3.1
Ubuntu Linux 18.04.2 LTS
Electron Browser 61",bug
455369279,Sync file system operation in net_profiler.js:161,"while building Cypress on Mac got this error when running smoke test:
```
Unhandled rejection Error: ENFILE: file table overflow, open '/Users/gleb/git/cypress/build/darwin/Cypress.app/Contents/Resources/app/packages/server/lib/logger.js'
```

`develop` branch at 3.3.1
Mac plaftorm

Full stacktrace

```
Unhandled rejection Error: ENFILE: file table overflow, open '/Users/gleb/git/cypress/build/darwin/Cypress.app/Contents/Resources/app/packages/server/lib/logger.js'
    at Object.fs.openSync (fs.js:646:18)
    at Object.module.(anonymous function) [as openSync] (ELECTRON_ASAR.js:166:20)
    at Object.fs.readFileSync (fs.js:551:33)
    at Object.fs.readFileSync (ELECTRON_ASAR.js:538:29)
    at Object.Module._extensions..js (module.js:652:20)
    at Module.load (module.js:561:32)
    at tryModuleLoad (module.js:504:12)
    at Function.Module._load (module.js:496:3)
    at Module.require (module.js:586:17)
    at require (internal/module.js:11:18)
    at /Users/gleb/git/cypress/build/darwin/Cypress.app/Contents/Resources/app/packages/server/lib/errors.js:347:16
    at tryCatcher (/Users/gleb/git/cypress/build/darwin/Cypress.app/Contents/Resources/app/packages/server/node_modules/bluebird/js/release/util.js:16:23)
    at Function.Promise.attempt.Promise.try (/Users/gleb/git/cypress/build/darwin/Cypress.app/Contents/Resources/app/packages/server/node_modules/bluebird/js/release/method.js:39:29)
    at Object.log (/Users/gleb/git/cypress/build/darwin/Cypress.app/Contents/Resources/app/packages/server/lib/errors.js:337:26)
    at exitErr (/Users/gleb/git/cypress/build/darwin/Cypress.app/Contents/Resources/app/packages/server/lib/cypress.js:32:32)
    at tryCatcher (/Users/gleb/git/cypress/build/darwin/Cypress.app/Contents/Resources/app/packages/server/node_modules/bluebird/js/release/util.js:16:23)
    at Promise._settlePromiseFromHandler (/Users/gleb/git/cypress/build/darwin/Cypress.app/Contents/Resources/app/packages/server/node_modules/bluebird/js/release/promise.js:510:31)
    at Promise._settlePromise (/Users/gleb/git/cypress/build/darwin/Cypress.app/Contents/Resources/app/packages/server/node_modules/bluebird/js/release/promise.js:567:18)
    at Promise._settlePromise0 (/Users/gleb/git/cypress/build/darwin/Cypress.app/Contents/Resources/app/packages/server/node_modules/bluebird/js/release/promise.js:612:10)
    at Promise._settlePromises (/Users/gleb/git/cypress/build/darwin/Cypress.app/Contents/Resources/app/packages/server/node_modules/bluebird/js/release/promise.js:687:18)
    at Async._drainQueue (/Users/gleb/git/cypress/build/darwin/Cypress.app/Contents/Resources/app/packages/server/node_modules/bluebird/js/release/async.js:133:16)
    at Async._drainQueues (/Users/gleb/git/cypress/build/darwin/Cypress.app/Contents/Resources/app/packages/server/node_modules/bluebird/js/release/async.js:143:10)
    at Immediate.Async.drainQueues (/Users/gleb/git/cypress/build/darwin/Cypress.app/Contents/Resources/app/packages/server/node_modules/bluebird/js/release/async.js:17:14)
    at runCallback (timers.js:789:20)
    at tryOnImmediate (timers.js:751:5)
    at processImmediate [as _immediateCallback] (timers.js:722:5)
```

Seems we are calling `fs.openSync` which we should never do - all FS actions should go through `graceful-fs` which retries actions.

Probably this place
```
packages/server/lib/util/net_profiler.js:161:  this.logStream = fs.openSync(this.logPath, 'a')
```",bug
454605338,"UI: ""Found undefined alias for 'myalias'"" when multiple aliases defined for element","### Current behavior:

When using `.as('myalias')` in a loop the message `Found undefined alias for: 'myalias'` shows up in the UI but it still works (in the console you can see that the alias resolved to two elements).
![](http://0i5.de/cZuU)

The message does not show up when the loop is only executed once.

### Desired behavior:

This message should not appear and irritate the developer :)

### Steps to reproduce: (app code and test code)
```typescript
describe('Test', () => {
  it('test', () => {
    cy.visit('http://google.com');
    for (let i = 0; i < 2; i += 1) {
      cy.get('[name=""btnK""]').as('search-button');
      cy.get('@search-button');
    }
  });
});
```

### Versions
|||
|-|-|
|Cypress|3.3.1|
|OS| Windows 10|
|Browsers| Electron headed|

### PS:
Am I using aliases incorrectly here or is this just a misguided message from the UI?
",bug
454038504,"Need ability to type into elements that are actionable through {tab}, but not actionable by click","### Current behavior:

When there is an input within HTML that is covered by a parent element with the css property of `visibility :hidden`, Cypress interprets this as non-actionable and does not allow typing. 

I can, however, type into the input when typing `tab` on my keyboard with the element coming into focus from there. I tried working around this by doing `cy.get('input').focus().type('John')`, but it still fails saying the element is not visible.

### Desired behavior:

While the element cannot be clicked and typed into, there should be a way to replicate the behavior or 'tabbing' into an input and typing.

![Screen Shot 2019-06-10 at 2 06 24 PM](https://user-images.githubusercontent.com/1271364/59180100-0bba0980-8b8a-11e9-94e2-6ae662721768.png)

### Steps to reproduce: (app code and test code)

Can reproduce in the code below originally provided via https://github.com/cypress-io/cypress/issues/2558#issuecomment-494334158

HTML

```html
<!DOCTYPE html>
<html>
  <head></head>
  <body>
    <header style=""left: 0;  right: 0; height: 60px; position: absolute;""></header>
    <input>
  </body>
</html>
```

Spec file

```js
Cypress.Commands.add('hide', { prevSubject: 'element' }, (subject) => {
  subject.css('visibility', 'hidden');
})

it('Successful test', () => {
  cy.visit('index.html');
  cy.get('header')
    .hide();
  cy.get('input')
    .should('be.visible')
    .type('John Smith')
})

it('Failed test', () => {
  cy.visit('index.html');
  cy.get('input')
    .should('be.visible')
    .type('John Smith')
})
```

### Versions

Cypress 3.3.1
",bug
452895560,Adding --headed flag causes Cypress to no longer look in --project for cypress.json,"### Current behavior:

I am running the following command from within a monorepo, so I am passing a project flag to cypress. The command below works and runs the tests fine.

```
cypress run --project ./packages/dashboard --spec ./packages/dashboard/cypress/integration/spec.js
```

After passing the `--headed` flag, it no longer seems to find the project at the right location. 

```
cypress run --project ./packages/dashboard --headed=true --spec ./packages/dashboard/cypress/integration/spec.js
```

```
Could not find any tests to run.

We looked but did not find a cypress.json file in this folder: .../cypress-monorepo
error Command failed with exit code 1.
```

It shouldn't be looking for the `cypress.json` in my cwd, but in the project directory I passed in as the `--project` flag.

### Desired behavior:

It shouldn't be looking for the `cypress.json` in my cwd, but in the project directory I passed in as the `--project` flag. For some reason, adding the `--headed` flag changes this behavior.

### Versions

Cypress 3.3.1
",bug
452637689,Cypress fails when use `should('be.visible')` on a visible element - overflow hidden with position absolute outside,"I found `should('be.visible')` gives wrong result sometimes (even in latest version). I finally made a simple demo to reproduce it:

**index.html**

```html
<html>
<head>
    <style>
        #main {
            border: 3px solid red;
            width: 200px;
            height: 200px;
            overflow: hidden;
        }

        #outside {
            position: absolute;
            left: 300px;
            border: 3px solid blue;
            width: 100px;
            height: 100px;
        }

        #hello {
            border: 3px solid green;
        }

    </style>
</head>
<body>
<div id=""main"">
    Main (overflow:hidden)
    <div id=""outside"">
        Outside (position:absolute)
        <span id=""hello"">Hello</span>
    </div>
</div>
</body>
</html>
```

**hello_spec.ts**

```ts
describe('cypress', () => {

  it('test visible correctly', () => {
    cy.visit('index.html');
    cy.get('#hello').should('be.visible');
  });

})

```

![image](https://user-images.githubusercontent.com/333781/58978191-eaf65a80-87fd-11e9-9b6d-1d1a43834c7a.png)

A complete small demo: https://github.com/freewind-demos/typescript-cypress-check-visibility-issue-demo

The problem is on this line of code:

![image](https://user-images.githubusercontent.com/333781/58978318-2b55d880-87fe-11e9-943c-aac7ad1cffad.png)

(In function `elIsOutOfBoundsOfAncestorsOverflow`)",bug
452065961,Problem with http-to-https redirects behind corporate proxy,"### Current behavior:

I'm trying to test the following page with cypress 3.3.1:

```html
<script src=""//cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore.js""></script>
<script>_.assign()</script>
<script src=""//cdn.jsdelivr.net/npm/bluebird@3.5.5/js/browser/bluebird.min.js""></script>
<script>Promise.config({ longStackTraces: true });</script>
```

* I am serving this page under `http://localhost:3000/` (not https!)
* I am behind a corporate proxy in which both `http_proxy` and `https_proxy` have the exact same value of the form `http://username:password@proxy_host:port`. Note that even the `https_proxy` value is `http`, not `https` (I am not sure this matters, but I thought I should give as much potentially relevant information as possible)

### Desired behavior:

It should work, but instead I get the following error:

```
Uncaught TypeError: Promise.config is not a function

This error originated from your application code, not from Cypress.

When Cypress detects uncaught errors originating from your application it will automatically fail the current test.

This behavior is configurable, and you can choose to turn this off by listening to the 'uncaught:exception' event.

https://on.cypress.io/uncaught-exception-from-application
```

### Notes

This indicates that something went wrong when fetching the bluebird script (while the underscore script was fetched fine).

Amazingly, replacing `//cdn.jsdelivr.net` with `https://cdn.jsdelivr.net` makes it work, while replacing with `http://cdn.jsdelivr.net` gives the same error.

Since `http://cdn.jsdelivr.net/` yields a 301 REDIRECT to `https://cdn.jsdelivr.net/`, I thought this redirect was causing the problem. But as it can be seen, the bluebird script was fetched correctly, and `http://cdnjs.cloudflare.com/` also redirects to `https://cdnjs.cloudflare.com/`, so I am lost.

Although I've found this very simple workaround, I thought I should file this issue because, well, fetching with `//` instead of `https://` should work, simply because it works outside cypress. Perhaps this indicates a deeper problem, and other not-so-simple situations might not have this workaround possible.

### Steps to reproduce: (app code and test code)

I couldn't just fork https://github.com/cypress-io/cypress-test-tiny to show the problem because there wouldn't be the corporate proxy issue. But I believe the description above is enough. Let me know if any clarification is needed.

### Versions

* Cypress 3.3.1
* Both Windows and Linux
* Both Electron and Chrome
",bug
451644050,RangeError: Maximum call stack size exceeded error thrown on DocumentFragments,"### Current behavior:

Currently i am start using cypress in a Salesforce based web, but when i try to use the Lightning elements that salesforce provides i receive the error for maximum call stack
Just for the record for every element it works fine only in elements like this one:

The element is the following: `label lightning-input_input=""""`
 
![image](https://user-images.githubusercontent.com/51169712/58827684-3693e300-8609-11e9-8446-aee2638f8047.png)

### Desired behavior:

I want that elements such as `lightning-input` can be clickable or you can write on them

### Steps to reproduce: (app code and test code)


.
### Versions

3.3.1
",bug
451455370,3.3.1 - cypress often fails to load in open mode - websocket error,"<!-- Is this a question? Don't open an issue. Ask in our chat https://gitter.im/cypress-io/cypress-->

### Current behavior:

<!-- images, stack traces, etc -->
![image](https://user-images.githubusercontent.com/309321/58801310-70191e00-860a-11e9-862e-884d34eb3b36.png)


### Desired behavior:

No error

### Steps to reproduce: (app code and test code)

This happens intermittently but very often on 3.3.1. If you log off and on again it is fine.

If you switch back to cypress 3.3.0, even without logging off it is fine.

### Versions

3.3.1 (3.3.0 is fine)
OS: windows

Most of us use proxies, usually fiddler. When 3.3.0 was release we had to have this:

```
$ env | grep PROXY
HTTP_PROXY=http://127.0.0.1:8888
NO_PROXY=undefined
HTTPS_PROXY=http://127.0.0.1:8888 (edited) 
```

One of our devs reckons the following proxy settings in 3.3.1 fix this bug:

```
$ env | grep -i proxy
HTTP_PROXY=
NO_PROXY=undefined
HTTPS_PROXY=
```

I believe the NO_PROXY needing ""undefined"" was due to another bug you had in your network code.",bug
451288525,"Error """" happens during the execution with each","### Is this a Feature or Bug?
Bug
<!-- Is this a question? Don't open an issue. Ask in our chat https://gitter.im/cypress-io/cypress-->

### Current behavior:

<!-- images, stack traces, etc -->
![image](https://user-images.githubusercontent.com/37669424/58776035-c2e6db80-85f2-11e9-9702-38487d656370.png)


### Desired behavior:
No error should be found
<!-- A clear concise description of what you want to happen -->

### Steps to reproduce: (app code and test code)

I ran the script which has this line to get a list of li elements
![image](https://user-images.githubusercontent.com/37669424/58776093-05a8b380-85f3-11e9-8d54-a8e3005c1aca.png)
without this, it worked fine for a single li element but when I tried to work with list, it failed

### Versions
3.3.1
<!-- Cypress, operating system, browser -->
",bug
450844267,option to disable scroll per command (Auto scroll on click/trigger can break virtual grids),"<!-- Is this a question? Don't open an issue. Ask in our chat https://gitter.im/cypress-io/cypress-->

### Current behavior:

Cypress click will scroll an element inside a virtual grid to the top.

However in between the scroll and triggering the click, the virtual grid can hear the scroll, then change which dom row corresponds to which data row (usually in virtual grids, in order that mobile scrolling works you have a window of real dom nodes and upon a scroll you move the data and then the y position of the rows so that the user can continue seamlessly scrolling).

This means that day the grid is rows 1-7 and you get 3.. the trigger is executed on the same dom element that was fetched, but because of the scroll it has become a row containing the data in 5.

Because of race conditions, this usually ends up being intermittent depending on if cypress or the scroll listener wins.

<!-- images, stack traces, etc -->

### Desired behavior:

I’d love to be able to disable scroll per command or else entirely so it has to be explicit (better I think for an spa)

<!-- A clear description of what you want to happen -->

@Bkucera this is the scenario I mentioned on the Pr ",bug
450620517,ERROR adm_helpers.cc Failed to query stereo recording,"### Current behavior:

A few of our users have encountered this message while running Cypress, yet none of them have opened an issue concerning it, so here it is!

**Sep 25 2018 21:13**

>Anybody ever see this error
>[426:0925/144153.978531:ERROR:adm_helpers.cc(62)] Failed to query stereo recording.
>ALSA lib confmisc.c:768:(parse_card) cannot find card '0'
>ALSA lib conf.c:4259:(_snd_config_evaluate) function snd_func_card_driver returned error: No such file or directory
>ALSA lib confmisc.c:392:(snd_func_concat) error evaluating strings
>ALSA lib conf.c:4259:(_snd_config_evaluate) function snd_func_concat returned error: No such file or directory
>ALSA lib confmisc.c:1251:(snd_func_refer) error evaluating name
>ALSA lib conf.c:4259:(_snd_config_evaluate) function snd_func_refer returned error: No such file or directory
>ALSA lib conf.c:4738:(snd_config_expand) Evaluate error: No such file or directory
>ALSA lib pcm.c:2239:(snd_pcm_open_noupdate) Unknown PCM default
>ALSA lib confmisc.c:768:(parse_card) cannot find card '0'
>ALSA lib conf.c:4259:(_snd_config_evaluate) function snd_func_card_driver returned error: No such file or directory
>ALSA lib confmisc.c:392:(snd_func_concat) error evaluating strings
>ALSA lib conf.c:4259:(_snd_config_evaluate) function snd_func_concat returned error: No such file or directory
>ALSA lib confmisc.c:1251:(snd_func_refer) error evaluating name
>ALSA lib conf.c:4259:(_snd_config_evaluate) function snd_func_refer returned error: No such file or directory
>ALSA lib conf.c:4738:(snd_config_expand) Evaluate error: No such file or directory
>ALSA lib pcm.c:2239:(snd_pcm_open_noupdate) Unknown PCM default
>
>https://gitter.im/cypress-io/cypress?at=5baa499c01fb5f4ae11e547d

**Feb 13 22:19**

>Hello. I'm seeing error Failed to query stereo recording - any idea how to fix this?
>
>https://gitter.im/cypress-io/cypress?at=5c643c6f8328315decea88f9

**May 21 19:25**

>Hello. My test run stopped prematurely right after this log message:
>[4861:0521/124346.631077:ERROR:adm_helpers.cc(62)] Failed to query stereo recording.
>Can anyone tell me what this is and how to fix it? Tx
>
>https://gitter.im/cypress-io/cypress?at=5ce3f5520ac9852a95168552

**May 30**

Errors while running in CI (ECS) and does not issue exit code

>I've gone to have a look around in the logs and it seems to have blown up here:

![Screenshot-2019-05-30-at-10-17-58](https://user-images.githubusercontent.com/1271364/58683250-c5022d80-8399-11e9-91d9-c54edcf5347f.png)

### Desired behavior:

To issue the proper exit code while running Cypress.

### Steps to reproduce: (app code and test code)

Well, this is the question that requires investigating. I don't have more information than this error occurs sometimes. 

### Versions

Cypress 3.1.0+

### Some relevant existing issues?

- The Chromium file/line where this is throwing: https://chromium.googlesource.com/external/webrtc/+/master/media/engine/adm_helpers.cc#74
- Electron, but in 1.7/1.8 version, so shouldn't affect 3.3.0+ https://github.com/electron/electron/issues/10455

# HELP NEEDED

If you are seeing this error, please help us fix it 😄 

- What OS/environment are you running this in? Is it only during `cypress run`? Is it only in CI?
- Can you provide more information on what test code you ran exactly when this happened? Does it happen in the same spot each time?
- Can you run your tests with `cypress open`, choose the Electron browser, open DevTools where this error occurs? What is logged here? Please provide.
- Could you run Cypress in [debug mode](https://on.cypress.io/debugging#Debug-the-Command-Line) mode and print the logs here?

",bug
450409367,Cypress click coordinates incorrect when element inside Iframe,"Cypress calculates coords for the click assuming the element is in the topmost frame, which causes coords to be off:

I clicked the `hashchange`, which was at the top of an iframe:
![image](https://user-images.githubusercontent.com/14625260/58649774-fe279880-82da-11e9-867a-b4eed5d5514e.png)

So Cypress thought I clicked the top of my AUT frame:
![image](https://user-images.githubusercontent.com/14625260/58649785-05e73d00-82db-11e9-9c73-5ab056d951e0.png)

this will be fixed in #3030 
",bug
448218545,'Cannot read property \'replace\' of null' from sanitize-filename err being thrown,"We are using Docker containers to run multiple test cases in parallel. Each container run a single test. we are launching multiple test cases together to test the same application located in another server. When I launch a single test it passes. Problems start when I run the same test 4 or 5 tests in parallel. Some of them pass the others fail.

The test is simple it enters the login and password in the login webpage and clicks ""connect"" and wait for the home page.

I read the access log of the server and I found that the number of requests is not the same for each client ! I found that weird because I waited for the same behaviour from the web server.

I extracted the cypress Debug logs and I found that the failed clients have this error:

```
cypress:server:reporter got mocha event 'fail' with args: [ 
  { 
    id: 'r3', 
    err: { 
      message: 'Cannot read property \'replace\' of null', 
      name: 'TypeError', 
      stack: 'TypeError: Cannot read property \'replace\' of null\n    
        at sanitize (/root/.cache/Cypress/3.3.1/Cypress/resources/app/packages/server/node_modules/sanitize-filename/index.js:41:6)\n    
        at module.exports (/root/.cache/Cypress/3.3.1/Cypress/resources/app/packages/server/node_modules/sanitize-filename/index.js:51:16)\n
```

I tried to run those tests not in containers they passed. 

I couldn't understand the source of the problem, eather the cypress test or the application itself.

Any help will be appreciated.",bug
448062355,NO_PROXY ignored when baseUrl is set,"### Current behavior:

I am behind a corporate proxy and want to test against an internal URL, no proxy should be used. To do so I added the host of the `baseUrl` to the environment variable `NO_PROXY` and `no_proxy` (I also have `HTTP_PROXY`, `http_proxy`, `HTTPS_PROXY` and `https_proxy` set up, pointing to the corporate proxy).

When I run cypress I get the error:
```
Cypress could not verify that this server is running:

  > https://<my-domain>/<context-root>/

We are verifying this server because it has been configured as your `baseUrl`.

Cypress automatically waits until your server is accessible before running tests.

We will try connecting to it 3 more times...
We will try connecting to it 2 more times...
We will try connecting to it 1 more time...

Cypress failed to verify that your server is running.

Please start this server and then run Cypress again.
```

Output with `DEBUG=cypress:*` on:
```bash
  cypress:cli verifying Cypress app +0ms
  cypress:cli checking environment variables +2ms
  cypress:cli checking if executable exists C:\Users\skydever\AppData\Local\Cypress\Cache\3.3.1\Cypress\Cypress.exe +2ms
  cypress:cli Binary is executable? : true +1ms
  cypress:cli binaryDir is  C:\Users\skydever\AppData\Local\Cypress\Cache\3.3.1\Cypress +1ms
  cypress:cli Reading binary package.json from: C:\Users\skydever\AppData\Local\Cypress\Cache\3.3.1\Cypress\resources\app\package.json +0ms
  cypress:cli Found binary version 3.3.1 installed in: C:\Users\skydever\AppData\Local\Cypress\Cache\3.3.1\Cypress +3ms
  cypress:cli { verified: true } +5ms
  cypress:cli is Verified ? true +3ms
  cypress:cli processing run options +0ms
  cypress:cli --key is not set, looking up environment variable CYPRESS_RECORD_KEY +0ms
  cypress:cli run to spawn.start args [""--run-project"",""apps/<context-root>-e2e"",""--config"",""{\""baseUrl\"":\""https://<my-domain>/<context-root>/\""}"",""--record"",false,""--output-path"",""C:\\Users\\skydever\\AppData\\Local\\Temp\\tmp-5600xlL3rio34MOO""] +1ms
  cypress:cli needs to start own Xvfb? false +0ms
  cypress:cli spawning, should retry on display problem? false +1ms
  cypress:cli spawning Cypress with executable: C:\Users\skydever\AppData\Local\Cypress\Cache\3.3.1\Cypress\Cypress.exe +13ms
  cypress:cli spawn args [ '--run-project', 'apps/<context-root>-e2e', '--config', '{""baseUrl"":""https://<my-domain>/<context-root>/""}', '--record', false, '--output-path', 'C:\\Users\\skydever\\AppData\\Local\\Temp\\tmp-5600xlL3rio34MOO', '--cwd', 'D:\\<path-to-my-project>' ] { detached: false, stdio: 'pipe', windowsHide: false } +0ms

  cypress:ts Running without ts-node hook in environment ""production"" +0ms
  cypress:server:cypress starting cypress with argv [ 'C:\\Users\\skydever\\AppData\\Local\\Cypress\\Cache\\3.3.1\\Cypress\\Cypress.exe', '--run-project', 'apps/<context-root>-e2e', '--config', '{""baseUrl"":""https://<my-domain>/<context-root>/""}', '--record', 'false', '--output-path', 'C:\\Users\\skydever\\AppData\\Local\\Temp\\tmp-5600xlL3rio34MOO', '--cwd', 'D:\\<path-to-my-project>' ] +0ms
  cypress:server:args argv array: [ 'C:\\Users\\skydever\\AppData\\Local\\Cypress\\Cache\\3.3.1\\Cypress\\Cypress.exe', '--run-project', 'apps/<context-root>-e2e', '--config', '{""baseUrl"":""https://<my-domain>/<context-root>/""}', '--record', 'false', '--output-path', 'C:\\Users\\skydever\\AppData\\Local\\Temp\\tmp-5600xlL3rio34MOO', '--cwd', 'D:\\<path-to-my-project>' ] +0ms
  cypress:server:args argv parsed: { _: [ 'C:\\Users\\skydever\\AppData\\Local\\Cypress\\Cache\\3.3.1\\Cypress\\Cypress.exe' ], runProject: 'apps/<context-root>-e2e', config: '{""baseUrl"":""https://<my-domain>/<context-root>/""}', record: false, outputPath: 'C:\\Users\\skydever\\AppData\\Local\\Temp\\tmp-5600xlL3rio34MOO', cwd: 'D:\\<path-to-my-project>' } +6ms
  cypress:server:args options { _: [ 'C:\\Users\\skydever\\AppData\\Local\\Cypress\\Cache\\3.3.1\\Cypress\\Cypress.exe' ], runProject: 'apps/<context-root>-e2e', config: { baseUrl: 'https://<my-domain>/<context-root>/' }, record: false, outputPath: 'C:\\Users\\skydever\\AppData\\Local\\Temp\\tmp-5600xlL3rio34MOO', cwd: 'D:\\<path-to-my-project>', proxyServer: 'http://<proxy-ip>:<proxy-port>', proxyBypassList: '<my-domain>' } +1ms
  cypress:server:args argv options: { _: [ 'C:\\Users\\skydever\\AppData\\Local\\Cypress\\Cache\\3.3.1\\Cypress\\Cypress.exe' ], runProject: 'apps/<context-root>-e2e', config: { baseUrl: 'https://<my-domain>/<context-root>/' }, record: false, outputPath: 'C:\\Users\\skydever\\AppData\\Local\\Temp\\tmp-5600xlL3rio34MOO', cwd: 'D:\\<path-to-my-project>', proxyServer: 'http://<proxy-ip>:<proxy-port>', proxyBypassList: '<my-domain>', projectRoot: 'D:\\<path-to-my-project>\\apps\\<context-root>-e2e', run: true } +0ms
  cypress:server:appdata path: C:\Users\skydever\AppData\Roaming\Cypress\cy\production +0ms
  cypress:server:cypress starting in mode run +2s
  cypress:server:appdata path: C:\Users\skydever\AppData\Roaming\Cypress\cy\production +4s
  cypress:server:appdata path: C:\Users\skydever\AppData\Roaming\Cypress\cy\production\cache +880ms
  cypress:server:appdata path: C:\Users\skydever\AppData\Roaming\Cypress\cy\production\browsers +16s
  cypress:server:timers queuing timer id 1 after 500 ms +0ms
  cypress:server:timers child received timer id 1 +0ms
  cypress:server:timers child sending timer id 1 +504ms
  cypress:server:timers clearing timer id 1 from queue { '1': { args: [], ms: 500, cb: [Function] } } +508ms
  cypress:server:run run mode ready with options { _: [ 'C:\\Users\\skydever\\AppData\\Local\\Cypress\\Cache\\3.3.1\\Cypress\\Cypress.exe' ], runProject: 'apps/<context-root>-e2e', config: { baseUrl: 'https://<my-domain>/<context-root>/' }, record: false, outputPath: 'C:\\Users\\skydever\\AppData\\Local\\Temp\\tmp-5600xlL3rio34MOO', cwd: 'D:\\<path-to-my-project>', proxyServer: 'http://<proxy-ip>:<proxy-port>', proxyBypassList: '<my-domain>', projectRoot: 'D:\\<path-to-my-project>\\apps\\<context-root>-e2e', run: true } +0ms
  cypress:server:project Project created D:\<path-to-my-project>\apps\<context-root>-e2e +0ms
  cypress:server:openproject opening project D:\<path-to-my-project>\apps\<context-root>-e2e +0ms
  cypress:server:project opening project instance D:\<path-to-my-project>\apps\<context-root>-e2e +0ms
  cypress:server:config setting plugins file D:\<path-to-my-project>\dist\out-tsc\apps\<context-root>-e2e\src\plugins\index.js +0ms
  cypress:server:config for project root D:\<path-to-my-project>\apps\<context-root>-e2e +0ms
  cypress:server:config set pluginsFile to D:\<path-to-my-project>\dist\out-tsc\apps\<context-root>-e2e\src\plugins\index.js +1ms
  cypress:server:config set scaffold paths +0ms
  cypress:server:scaffold scaffolded files [""..\\..\\dist\\out-tsc\\apps\\<context-root>-e2e\\src\\integration\\examples\\actions.spec.js"",""..\\..\\dist\\out-tsc\\apps\\<context-root>-e2e\\src\\integration\\examples\\aliasing.spec.js"",""..\\..\\dist\\out-tsc\\apps\\<context-root>-e2e\\src\\integration\\examples\\assertions.spec.js"",""..\\..\\dist\\out-tsc\\apps\\<context-root>-e2e\\src\\integration\\examples\\connectors.spec.js"",""..\\..\\dist\\out-tsc\\apps\\<context-root>-e2e\\src\\integration\\examples\\cookies.spec.js"",""..\\..\\dist\\out-tsc\\apps\\<context-root>-e2e\\src\\integration\\examples\\cypress_api.spec.js"",""..\\..\\dist\\out-tsc\\apps\\<context-root>-e2e\\src\\integration\\examples\\files.spec.js"",""..\\..\\dist\\out-tsc\\apps\\<context-root>-e2e\\src\\integration\\examples\\local_storage.spec.js"",""..\\..\\dist\\out-tsc\\apps\\<context-root>-e2e\\src\\integration\\examples\\location.spec.js"",""..\\..\\dist\\out-tsc\\apps\\<context-root>-e2e\\src\\integration\\examples\\misc.spec.js"",""..\\..\\dist\\out-tsc\\apps\\<context-root>-e2e\\src\\integration\\examples\\navigation.spec.js"",""..\\..\\dist\\out-tsc\\apps\\<context-root>-e2e\\src\\integration\\examples\\network_requests.spec.js"",""..\\..\\dist\\out-tsc\\apps\\<context-root>-e2e\\src\\integration\\examples\\querying.spec.js"",""..\\..\\dist\\out-tsc\\apps\\<context-root>-e2e\\src\\integration\\examples\\spies_stubs_clocks.spec.js"",""..\\..\\dist\\out-tsc\\apps\\<context-root>-e2e\\src\\integration\\examples\\traversal.spec.js"",""..\\..\\dist\\out-tsc\\apps\\<context-root>-e2e\\src\\integration\\examples\\utilities.spec.js"",""..\\..\\dist\\out-tsc\\apps\\<context-root>-e2e\\src\\integration\\examples\\viewport.spec.js"",""..\\..\\dist\\out-tsc\\apps\\<context-root>-e2e\\src\\integration\\examples\\waiting.spec.js"",""..\\..\\dist\\out-tsc\\apps\\<context-root>-e2e\\src\\integration\\examples\\window.spec.js"",""..\\..\\dist\\out-tsc\\apps\\<context-root>-e2e\\src\\fixtures\\example.json"",""..\\..\\dist\\out-tsc\\apps\\<context-root>-e2e\\src\\plugins\\index.js""] +0ms
  cypress:server:config got file tree +4ms
  cypress:server:project get saved state +22ms
  cypress:server:saved_state noop saved state +0ms
  cypress:server:scaffold plugins folder D:\<path-to-my-project>\dist\out-tsc\apps\<context-root>-e2e\src\plugins +2ms
  cypress:server:plugins plugins.init D:\<path-to-my-project>\dist\out-tsc\apps\<context-root>-e2e\src\plugins\index.js +0ms
  cypress:server:plugins:child pluginsFile: D:\<path-to-my-project>\dist\out-tsc\apps\<context-root>-e2e\src\plugins\index.js +0ms
  cypress:server:plugins:child require pluginsFile +4ms
  cypress:server:plugins:child run plugins function +5ms
  cypress:server:plugins:child register event _get:task:body with id 0 +0ms
  cypress:server:plugins:child register event _get:task:keys with id 1 +0ms
  cypress:server:plugins register plugins process event _get:task:body with id 0 +370ms
  cypress:server:plugins register event '_get:task:body' +0ms
  cypress:server:plugins register plugins process event _get:task:keys with id 1 +0ms
  cypress:server:plugins register event '_get:task:keys' +0ms
  cypress:server:project plugin config yielded: null +374ms
  cypress:server:buffers resetting buffers +0ms
  cypress:server:server Server listening on  { address: '127.0.0.1', family: 'IPv4', port: 64997 } +0ms
  cypress:server:appdata path: C:\Users\skydever\AppData\Roaming\Cypress\cy\production\proxy +3s
  cypress:https-proxy Created SNI HTTPS Proxy on port 64999 +0ms
  cypress:server:ensure-url checking that baseUrl is available { baseUrl: 'https://<my-domain>/<context-root>/',
  delaysRemaining: [ 3000, 3000, 4000 ],
  retryIntervals: [ 3000, 3000, 4000 ] } +0ms
  cypress:network:agent addRequest called for https://<my-domain>/<context-root>/ +0ms
  cypress:network:agent Creating proxied socket for https://<my-domain>/<context-root>/ through  +1ms
Cypress could not verify that this server is running:

  > https://<my-domain>/<context-root>/

We are verifying this server because it has been configured as your `baseUrl`.

Cypress automatically waits until your server is accessible before running tests.

We will try connecting to it 3 more times...
  cypress:server:timers child received timer id 2 +2s
  cypress:server:timers queuing timer id 2 after 3000 ms +2s
  cypress:server:timers child sending timer id 2 +3s
  cypress:server:timers clearing timer id 2 from queue { '2': { args: [], ms: 3000, cb: [Function] } } +3s
  cypress:server:ensure-url checking that baseUrl is available { baseUrl: 'https://<my-domain>/<context-root>/',
  delaysRemaining: [ 3000, 4000 ],
  retryIntervals: [ 3000, 3000, 4000 ] } +3s
  cypress:server:timers child received timer id 3 +6ms
  cypress:network:agent addRequest called for https://<my-domain>/<context-root>/ +3s
  cypress:network:agent Creating proxied socket for https://<my-domain>/<context-root>/ through  +1ms
We will try connecting to it 2 more times...
  cypress:server:timers queuing timer id 3 after 3000 ms +5ms
  cypress:server:timers child sending timer id 3 +3s
  cypress:server:timers clearing timer id 3 from queue { '3': { args: [], ms: 3000, cb: [Function] } } +3s
  cypress:server:ensure-url checking that baseUrl is available { baseUrl: 'https://<my-domain>/<context-root>/',
  delaysRemaining: [ 4000 ],
  retryIntervals: [ 3000, 3000, 4000 ] } +3s
  cypress:server:timers child received timer id 4 +5ms
  cypress:network:agent addRequest called for https://<my-domain>/<context-root>/ +3s
  cypress:network:agent Creating proxied socket for https://<my-domain>/<context-root>/ through  +1ms
We will try connecting to it 1 more time...

  cypress:server:timers queuing timer id 4 after 4000 ms +5ms
  cypress:server:timers child sending timer id 4 +4s
  cypress:server:timers clearing timer id 4 from queue { '4': { args: [], ms: 4000, cb: [Function] } } +4s
  cypress:server:ensure-url checking that baseUrl is available { baseUrl: 'https://<my-domain>/<context-root>/',
  delaysRemaining: [],
  retryIntervals: [ 3000, 3000, 4000 ] } +4s
  cypress:network:agent addRequest called for https://<my-domain>/<context-root>/ +4s
  cypress:network:agent Creating proxied socket for https://<my-domain>/<context-root>/ through  +0ms
  cypress:server:server RequestError: Error: A connection to the upstream proxy could not be established: Unsupported proxy protocol: null
  cypress:server:server     at new RequestError (C:\Users\skydever\AppData\Local\Cypress\Cache\3.3.1\Cypress\resources\app\packages\server\node_modules\request-promise-core\lib\errors.js:14:15)
  cypress:server:server     at Request.plumbing.callback (C:\Users\skydever\AppData\Local\Cypress\Cache\3.3.1\Cypress\resources\app\packages\server\node_modules\request-promise-core\lib\plumbing.js:87:29)
  cypress:server:server     at Request.RP$callback [as _callback] (C:\Users\skydever\AppData\Local\Cypress\Cache\3.3.1\Cypress\resources\app\packages\server\node_modules\request-promise-core\lib\plumbing.js:46:31)
  cypress:server:server     at self.callback (C:\Users\skydever\AppData\Local\Cypress\Cache\3.3.1\Cypress\resources\app\packages\server\node_modules\request\request.js:185:22)

  cypress:server:server     at emitOne (events.js:116:13)
  cypress:server:server     at Request.emit (events.js:211:7)
  cypress:server:server     at Request.onRequestError (C:\Users\skydever\AppData\Local\Cypress\Cache\3.3.1\Cypress\resources\app\packages\server\node_modules\request\request.js:881:8)
  cypress:server:server     at emitOne (events.js:116:13)
  cypress:server:server     at ClientRequest.emit (events.js:211:7)
  cypress:server:server     at nextTick (_http_agent.js:334:39)
  cypress:server:server     at _combinedTickCallback (internal/process/next_tick.js:131:7)
  cypress:server:server     at process._tickCallback (internal/process/next_tick.js:180:9)
  cypress:server:server  +10s
  cypress:server:server Setting remoteAuth undefined +3ms
  cypress:server:cors Parsed URL { port: '443', tld: 'net', domain: 'siemens' } +0ms
  cypress:server:server Setting remoteOrigin https://<my-domain> +32ms
  cypress:server:server Setting remoteHostAndPort { port: '443', tld: 'net', domain: 'siemens' } +0ms
  cypress:server:server Setting remoteDocDomain siemens.net +0ms
  cypress:server:server Getting remote state: { auth: undefined, props: { port: '443', tld: 'net', domain: 'siemens' }, origin: 'https://<my-domain>', strategy: 'http', visiting: undefined, domainName: 'siemens.net', fileServer: null } +0ms
  cypress:server:cypress exiting with err { Error: Cypress failed to verify that your server is running.

Please start this server and then run Cypress again.
    at Object.get (C:\Users\skydever\AppData\Local\Cypress\Cache\3.3.1\Cypress\resources\app\packages\server\lib\errors.js:292:11)
    at C:\Users\skydever\AppData\Local\Cypress\Cache\3.3.1\Cypress\resources\app\packages\server\lib\server.js:245:42
    at tryCatcher (C:\Users\skydever\AppData\Local\Cypress\Cache\3.3.1\Cypress\resources\app\packages\server\node_modules\request-promise\node_modules\bluebird\js\release\util.js:16:23)
    at Promise._settlePromiseFromHandler (C:\Users\skydever\AppData\Local\Cypress\Cache\3.3.1\Cypress\resources\app\packages\server\node_modules\request-promise\node_modules\bluebird\js\release\promise.js:512:31)
    at Promise._settlePromise (C:\Users\skydever\AppData\Local\Cypress\Cache\3.3.1\Cypress\resources\app\packages\server\node_modules\request-promise\node_modules\bluebird\js\release\promise.js:569:18)
    at Promise._settlePromise0 (C:\Users\skydever\AppData\Local\Cypress\Cache\3.3.1\Cypress\resources\app\packages\server\node_modules\request-promise\node_modules\bluebird\js\release\promise.js:614:10)
    at Promise._settlePromises (C:\Users\skydever\AppData\Local\Cypress\Cache\3.3.1\Cypress\resources\app\packages\server\node_modules\request-promise\node_modules\bluebird\js\release\promise.js:690:18)
    at _drainQueueStep (C:\Users\skydever\AppData\Local\Cypress\Cache\3.3.1\Cypress\resources\app\packages\server\node_modules\request-promise\node_modules\bluebird\js\release\async.js:138:12)
    at _drainQueue (C:\Users\skydever\AppData\Local\Cypress\Cache\3.3.1\Cypress\resources\app\packages\server\node_modules\request-promise\node_modules\bluebird\js\release\async.js:131:9)
    at Async._drainQueues (C:\Users\skydever\AppData\Local\Cypress\Cache\3.3.1\Cypress\resources\app\packages\server\node_modules\request-promise\node_modules\bluebird\js\release\async.js:147:5)
    at Immediate.Async.drainQueues (C:\Users\skydever\AppData\Local\Cypress\Cache\3.3.1\Cypress\resources\app\packages\server\node_modules\request-promise\node_modules\bluebird\js\release\async.js:17:14)
    at runCallback (timers.js:789:20)
    at tryOnImmediate (timers.js:751:5)
    at processImmediate [as _immediateCallback] (timers.js:722:5)

  isCypressErr: true,
  type: 'CANNOT_CONNECT_BASE_URL',
  details: undefined } +34s
Cypress failed to verify that your server is running.

Please start this server and then run Cypress again.
  cypress:server:cypress about to exit with code 1 +1ms
```

When I remove all the proxy env. variables everything is working.

### Desired behavior:

`NO_PROXY` should be considered.

### Steps to reproduce: (app code and test code)

Set env. variables `HTTP_PROXY` + `HTTPS_PROXY` to a valid proxy.
Set the domain of the `baseUrl` as value for the env. variable `NO_PROXY`.
Run the tests.

### Versions

Cypress: 3.3.1
OS: Windows 7 Enterprise
Running with the included Electron client

Prior Cypress 3.3.1/3.3.0 I had no issues concerning proxies.

Thank you a lot, Cypress is awesome!!",bug
447898025,Delayed 304 responses when using proxy,"### Current behaviour:

When a page loads resources, and the resources have been loaded before, the web server returns a 304 response. When running Cypress without proxy, this works fine. When running Cypress with proxy, there is a 5 second delay before the response reaches the browser.

### Desired behavior:

There should be no additional delay on 304 responses with a proxy.

### Steps to reproduce: (app code and test code)

I have created a minimal demo for the issue. Please see:
[https://github.com/bjowes/delayed-response-demo](https://github.com/bjowes/delayed-response-demo)

The README contains instruction on using the demo.

In this simplistic case, the tests still pass. In my real scenario I am testing an Angular app with many more resources. The tests fail nearly every time due to timeout caused by delayed 304 responses.

### Versions

Tested with Cypress 3.3.1 on Windows 10 and OS X 10.14.4. 
Browser: Chrome v74.
Also tried in headless mode with Electron 61.
I haven't double checked but I believe the behaviour has been present at least since Cypress 3.1.0.

### Comment

Since the proxy I use is made by me (and based on the [`node-http-mitm-proxy` library](https://github.com/joeferner/node-http-mitm-proxy)), I realise that the error may lie in the proxy itself. However, I have verified that using Chrome with my proxy but without Cypress works just fine.

The only thing the `node-http-mitm-proxy` does to the traffic is setting `transfer-encoding` to `chunked` and removing the `content-length` header (if any). I have observed that if I remove this in the case of 304 response (which has no content) it works fine. Hence I presume there is some issue related to `chunked` encoding consisting of only an empty chunk.

Personally I can live with my workaround but I believe that it is not an unusual approach by proxies to always set `transfer-encoding` on responses to `chunked`, especially those that allow modification of the content.",bug
447736150,document.referrer is set on cy.visit(...),"### Current behavior:

`document.referrer` is set to cypress test url when I use `cy.visit(...)`

### Desired behavior:

`document.referrer` is an empty string

### Steps to reproduce: (app code and test code)

```js
cy.visit('https://your.test.dom/')
```
jscode on the page:

```
console.log(document.referrer)
```

### Versions

3.3.1 cypress (chromium 73 and electron 61)
Kubuntu 18.04",bug
447484632,Not able to interact with the Hammer.js tap event,"### Context

We are trying to perform automated testing for a web application based on Angular 5. Due to the web app must be accessible through mobile and tablet devices, we use [Hammer.js](https://hammerjs.github.io/) in order to be able to handle some gesture-based events.

### Current behavior:

Cypress is not able to click on a button that is listening the Hammer.js ""tap"" event. When clicking, the handler is not executed. On the other hand, the user has no problem to interact by using the mouse click event.

### Desired behavior:

The behaviour should be the same as the expected when the click event is used otherwise we cannot use Cypress in order to ""simulate"" the user interaction with the UI.

We successfully tested with other automation tools based on Selenium webdriver but we are interested on migrating our automated tests to Cypress. Nevertheless, this issue is blocking for us.

### Versions
3.3.1",bug
446678729,Cypress 3.3.1/3.3.0/3.2.0: Error TS2688: Cannot find type definition file for '../sinon',"### Current behavior:
After I have upgraded from Cypress 3.1.5 to 3.3.0, Cypress is throwing the error on compile

> TypeScript error: node_modules/cypress/types/sinon-chai/index.d.ts(10,23): Error TS2688: Cannot find type definition file for '../sinon'.

Then I have tried 3.2.0 and had the same issue. When revered to 3.1.5 - issue is gone.

I have tried to remove node_modules, clear npm cash and make a clean installation for every version of Cypress. No luck.
<!-- images, stack traces, etc -->

<img width=""1670"" alt=""2019-05-21_1010"" src=""https://user-images.githubusercontent.com/21285622/58108138-e94b5680-7bb0-11e9-9e91-7eae5df3663a.png"">


### Desired behavior:

3.2.0 and 3.3.0 should compile and run tests without issues.

### Steps to reproduce: (app code and test code)

<!-- Issues without reproducible steps will get closed. You can fork https://github.com/cypress-io/cypress-test-tiny repo, set up a failing test, then tell us the repo/branch to try. -->

### Versions
Cypress: 3.3.0/3.2.0
macOS Mojave v.10.14.5
Chrome 74, Electron 59/61

Package.json
```json
""devDependencies"": {
        ""@angular-devkit/build-angular"": ""^0.13.8"",
        ""@angular/cli"": ""~6.1.2"",
        ""@angular/compiler-cli"": ""^6.1.0"",
        ""@angular/language-service"": ""^6.1.0"",
        ""@cypress/browserify-preprocessor"": ""^1.1.2"",
        ""@storybook/addon-actions"": ""^5.0.10"",
        ""@storybook/addon-links"": ""^5.0.10"",
        ""@storybook/addon-notes"": ""^5.0.10"",
        ""@storybook/addons"": ""^5.0.10"",
        ""@storybook/angular"": ""^5.0.10"",
        ""@types/jest"": ""^23.3.1"",
        ""@types/new-relic-browser"": ""0.1072.3"",
        ""@types/node"": ""~8.9.4"",
        ""@types/popper.js"": ""1.11.0"",
        ""@types/react"": ""^16.4.8"",
        ""@types/webpack-env"": ""^1.13.6"",
        ""babel-loader"": ""^8.0.5"",
        ""codelyzer"": ""~4.2.1"",
        ""cypress"": ""3.3.0"",
        ""cypress-cucumber-preprocessor"": ""^1.6.0"",
        ""del-cli"": ""^1.1.0"",
        ""husky"": ""^1.1.2"",
        ""icon-font-generator"": ""^2.1.8"",
        ""jest"": ""^23.4.2"",
        ""jest-canvas-mock"": ""^1.1.0"",
        ""jest-date-mock"": ""^1.0.5"",
        ""jest-preset-angular"": ""^6.0.0"",
        ""jest-teamcity-reporter"": ""^0.9.0"",
        ""json-sass"": ""^1.3.5"",
        ""lint-staged"": ""^7.2.0"",
        ""node-sass"": ""^4.12.0"",
        ""prettier"": ""^1.14.1"",
        ""protractor"": ""^5.4.1"",
        ""start-server-and-test"": ""^1.7.13"",
        ""ts-node"": ""~5.0.1"",
        ""tsify"": ""^4.0.1"",
        ""tslint"": ""~5.9.1"",
        ""tslint-config-prettier"": ""^1.14.0"",
        ""typescript"": ""^2.9.2""
    }
```


<!-- Cypress, operating system, browser -->
",bug
446591472,Using auth option in visit method sets authorization headers in all subrequests,"### Current behavior:

We have overridden Visit method and adding there auth option (because app we are testing is behind basic http auth). But these headers are sent NOT ONLY to page which is defined in visit method, but also to all sub requests, like for example images and js, which are loaded on page. Is this normal behaviour? Because we have problems with CDN, which is just refusing requests with such header.

### Desired behavior:

I would expect authorization header is sent only to defined visit page, not to all requests on page.

### Steps to reproduce: (app code and test code)

It seems this is done inside cypress proxy, because if you take a look inside browser there is no header in requests, but if you see logs on server, there is actually Authorization header.

### Versions

Cypress 3.3.0
",bug
445537814,Sticky elements within a fixed container are not properly taken into account when scrolling to an element,"### Current behavior:
This bug is related to #565 / #571

A typical use case for fixed containers are modals which fully overlay an application. In our case the fixed container is used to dim the application while displaying a modal or side panel within said container. The content within the dimmed overlay container is scrollable, but the container itself is not. I was able to break the test for #565 by making minimal adjustments to the fixture, which is included in the test repo.

As soon as a sticky element is nested within a fixed container, Cypress scrolls the element too far, so it ends up below the sticky header. 

![sticky elements -- additional example with side panel -- can click the first tr (failed)](https://user-images.githubusercontent.com/3470207/57944499-3a073a80-78a5-11e9-9848-2897b5e59f35.png)
![sticky elements -- issue 565571 with updated fixture -- can click the first tr (failed)](https://user-images.githubusercontent.com/3470207/57944500-3a073a80-78a5-11e9-8696-7f2295434da9.png)

### Desired behavior:
Cypress should take sticky headers into account when scrolling, even when they are within a fixed element and clicking on an element should succeed.

### Steps to reproduce: (app code and test code)
A repo (based on https://github.com/cypress-io/cypress-test-tiny) containing two failing test cases can be found at https://github.com/johanneslumpe/cypress-sticky-header-bug

### Versions
Cypress 3.3.0
Chrome 74
Mac OS

",bug
445180868,Redirected to chrome-error://chromewebdata/ when X-Frame-Options present on redirected domain,"### Current behavior:
 I get this screen when I try to access certain pages:
![image](https://user-images.githubusercontent.com/45433407/57890539-931b9380-77fd-11e9-8bdf-6c74f7726fe9.png)

This I can easily access on the same browser used by cypress
![image](https://user-images.githubusercontent.com/45433407/57890546-97e04780-77fd-11e9-976c-2ddb545470a8.png)

I have my ""chromeWebSecurity"": false on my cypress file just in case

### Desired behavior:
Continue executing the test. Access the pages that are completely accessible when not accessed through cypress' chrome

### Steps to reproduce: (app code and test code)
This is my code, I hope this one is reproducible:

```js
describe('Happy Path B2C / Checkout V2 ', function () {
beforeEach(""Home - Catalog - PP - Cart"", function(){

        //Going directly to product's page 
        cy.visit('https://juntozstagingv2.com/es-pe/');

        //Closing Ads
        cy.get(""div[data-action='close-mc-modal']"").click({force:true})

        //Triggerin Login
        cy.get(""a[aria-haspopup='true']"").click();
        cy.get(""a[href='https://juntozstagingv2.com/account/login']"").click();
    })
});
```



┆Issue is synchronized with this [Jira Epic](https://cypress-io.atlassian.net/browse/TR-47) by [Unito](https://www.unito.io/learn-more)
",bug
445047657,Blank screen when re-running test in GUI,"When I click the button to re-run tests, Cypress redirects to a different port and cannot connect to the server's WebSocket.

From here:
![image](https://user-images.githubusercontent.com/1151760/57870378-f04f1f00-77d4-11e9-889e-5d4e738b8d5b.png)

I click ![image](https://user-images.githubusercontent.com/1151760/57870390-f7762d00-77d4-11e9-9466-0949dac43359.png) or the refresh button and it brings me the same URL, but on the AUT's port, not Cypress's port:
![image](https://user-images.githubusercontent.com/1151760/57870424-0f4db100-77d5-11e9-8b6d-a8d3512fcc9b.png)

In the console, there is this error:
![image](https://user-images.githubusercontent.com/1151760/57870451-1c6aa000-77d5-11e9-867f-ac9e78179c48.png)

Reproducible by running the `6_visit_spec` e2e test's `visit_response_never_ends_failing_spec` with the first test `.only`'d in Chrome on the commit `c6573499b74d230994a14c325990de64a793bbb2`.

Similar issue: #2104",bug
444954643,Ampersand (&) in spec file causes test not to run,"### Current behavior:
The spec file in my example has an '&' in the title: `capture_all_student_documents-&-forms_get_requests.spec.js`
![image](https://user-images.githubusercontent.com/5534029/57856711-90984a00-77bb-11e9-8933-3ab7357a67e5.png)

The dashboard lists the below error.  Note the `Error: Cannot find module [...] capture_all_student_documents-` where the wrong filename is listed because it has been truncated immediately before the ampersand.
![image](https://user-images.githubusercontent.com/5534029/57856725-968e2b00-77bb-11e9-8b02-f70a77f60094.png)

### Desired behavior:
Spec files with ampersands in the filenames run without error.  I have not tested other characters to see if there are other common characters which also cause errors, but if so, these other characters would also run without error.

### Steps to reproduce: (app code and test code)
Name a spec file with an '&' as part of the file name.  Run the spec file.

### Versions
Cypress 3.2, Windows 10, Chrome

### Workaround
Obviously you can rename the spec file to something without the '&', such as replacing it with 'and'.",bug
444420678,Command line arrays no longer being split,"### Current behaviour:

If you run `cypress open --config 'blacklistHosts=[example.com,*.example.net]'` it puts a string of `[example.com,*.example.net]` in blacklistHosts rather than two entries in an array, which it used to do.

### Desired behaviour:

It should create an array in blacklistHosts of two entries, `['example.com', '*.example.net']`. It used to do this; the commit that added this behaviour was https://github.com/cypress-io/cypress/commit/31f22c24b2065268daeeca928001aa5a750bf094 and I think that the commit that broke it was https://github.com/cypress-io/cypress/commit/ce3ab55f72527374cfa2a1b942dffedb5d1a232f (done because it was affecting other command line arguments, maybe?).

### Steps to reproduce: (app code and test code)

Run any cypress open command with that config and then look at Settings -> Configuration to see the generated config (this view made it much easier to find this out, thanks!).

### Versions

Have seen on both Cypress 3.1.2 on Mac, and Cypress 3.2.0 on Linux.
",bug
444173898,cy.clear() throws Type Error: Illegal Invocation,"### Current behavior:

`cy.clear()` method intermittently throws the following error message shown below 
![image](https://user-images.githubusercontent.com/23197906/57739032-fe3f5b80-767f-11e9-83d7-3c605d39ab77.png)

Additional error details below when running from the commandline

![image](https://user-images.githubusercontent.com/23197906/57739299-0c41ac00-7681-11e9-9b3f-a36053bcc94b.png)



 
### Desired behavior:

`cy.clear()` should always clear the text area.

### Steps to reproduce: (app code and test code)

Run the below code on the following open-source website: 

```js
cy.visit(""http://pie-website.surge.sh/examples/pie-multiple-choice.html"");
cy.get('.Component-prompt-8 > .EditorAndToolbar-root-70 > .EditorAndToolbar-editorHolder-72 > .EditorAndToolbar-children-71 > .Editor-slateEditor-69 > div').as('question');
cy.get('@question').clear().type(""Test Question"");
```

### Versions

Cypress: 3.2.0
Operating System: macOS Mojave 10.4.3
Browser: Electron 59",bug
443533581,Wide selectors in the selector playground can cause GUI overflow issues ,"### Current behavior:
Very long selectors in the selector playground text input box can overflow other page elements:
![image](https://user-images.githubusercontent.com/5534029/57643927-e3d68680-7588-11e9-89fc-9e7c9eb4f2af.png)

### Desired behavior:
When some maximum width of the field is reached (based on the browser's width), the user has to scroll to see the rest of the input.  Something like this:
https://codepen.io/Momciloo/pen/bpyMbB

### Steps to reproduce: (app code and test code)
Type or paste a very long selector in to the selector playground text input box.  And yes, I know that using selectors that look like this is not recommended :)

### Versions
Cypress 3.2, Windows 10, Chrome",bug
442783551,Crash on empty document,"Cypress v3.2.0

test
```js
it.only('works', () => {
  expect(1).to.equal(1)
  const doc = cy.state('document')
  doc.write('')
})
```

Hover over the assertion and see a crash in the console

<img width=""689"" alt=""Screen Shot 2019-05-10 at 11 43 06 AM"" src=""https://user-images.githubusercontent.com/2212006/57539800-46295000-7319-11e9-987d-a9d57f0655b0.png"">

The code not being defensive enough because `contents.find('html')[0]` is undefined in this example

https://github.com/cypress-io/cypress/blob/develop/packages/runner/src/iframe/aut-iframe.js#L57

```js
var htmlAttrs = _lodash.default.transform(contents.find('html')[0].attributes, function (memo, attr) {
        if (attr.specified) {
          memo[attr.name] = attr.value;
        }
      }, {});
```",bug
442246231,ENOENT ensureSymlink crash on first run on macOS,"### To Reproduce

1. Have a fresh install of macOS that has never used Cypress before
2. Clone the repository, do `npm install`
3. Do `npm run cypress:open` and get the following error:

```
Unhandled rejection Error: ENOENT: no such file or directory, ensureSymlink '/Users/flotwig/Library/Application Support/Cypress/cy'
```

Strangely, on the next run of `npm run cypress:open`, Cypress will work fine.

I've tried to get it to re-occur by deleting the `Cypress` directory, but I actually can't get the bug to happen twice.

### Versions

Cypress 3.2.0
macOS 10.14.4 Mojave
Node.js 8.9.3",bug
441745033,'visible' assertion says visible for elements cropped by parent element with overflow: hidden,"<!-- Is this a question? Don't open an issue. Ask in our chat https://gitter.im/cypress-io/cypress-->

### Current behavior:
Cypress claims an element is visible, while it's completely cropped by parent `overflow: hidden` container element.

Here's html:
```html
<!DOCTYPE html>
<html lang=""en"">
<head>
  <meta charset=""UTF-8"">
  <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
  <meta http-equiv=""X-UA-Compatible"" content=""ie=edge"">
  <title>Document</title>
  <style>
    .container {
      display: flex;
      overflow: hidden;
    }
    div {
      flex: 0 0 80%;
    }

    [data-cy=red] {
      background-color: red;
    }

    [data-cy=green] {
      background-color: green;
    }

    [data-cy=blue] {
      background-color: blue;
    }
  </style>
</head>
<body>
  <div class=""container"">
    <div data-cy=""red"">red</div>
    <div data-cy=""green"">green</div>
    <div data-cy=""blue"">blue</div>
  </div>
</body>
</html>
```

Here's the test:
```js
/// <reference types=""Cypress"" />

describe('Smoke test', () => {
  it('отображает футер', () => {
    cy.visit('http://localhost:8080')
    cy.get('[data-cy=""red""]').should('be.visible')
    cy.get('[data-cy=""green""]').should('be.visible')
    cy.get('[data-cy=""blue""]').should('not.be.visible')
  })
})
```
All three divs, red, green and blue are 80% of the parent, parent div is `overflow: hidden`, there is no way for a user to scroll to blue div:
![Screenshot from 2019-05-08 16-32-54](https://user-images.githubusercontent.com/12434833/57379400-84a2fb80-71af-11e9-909f-3edac37b5f38.png)

But Cypress somehow scrolls to that div and thinks it's visible:
![Screenshot from 2019-05-08 16-33-11](https://user-images.githubusercontent.com/12434833/57379441-9b495280-71af-11e9-8d74-41c053a9ebf3.png)

### Desired behavior:

Above code should be enough, but just in case, here's the reproduction repo: https://github.com/mvasin/cypress-visible-bug

### Versions
Cypress 3.2.0, Ubuntu 18.04.2 LTS, Electron 59 or Chrome 74
",bug
441501125,window.alert hold page load forever even chromeWebSecurity set to false,"### Current behavior:

My app require to test third-party payment, so I have to setup `chromeWebSecurity` to `false`.

After redirect to different superdomain, the alertbox won't be auto accepted.

![An_embedded_page_at_127_0_0_1_8081_says_and_cypress_alert_issue_and_alert_html_—_cypress_alert_issue](https://user-images.githubusercontent.com/5180966/57341066-687d6b00-716b-11e9-824e-e8fab351cc39.png)

### Desired behavior:

The alert box should be auto accepted.

### Steps to reproduce: (app code and test code)

Here is the repo to reproduce, steps in the `README.md`.

https://github.com/zackexplosion/cypress-alert-issue

test code is very simple.
```js
describe('alert will hold page load', function() {
  it('forever', function() {
    // Just a blank page. 
    cy.visit('http://127.0.0.1:8080')
    
    // after form submit, it will redirect to http://127.0.0.1:8081/alert, and the alertbox won't be accepted.
    cy.get('#_form_aiochk').submit()
  })
})
```

### Versions
Cypress: 3.2.0
MacOS: 10.13.6
Browser: Chrome 74.0.3729.131


",bug
440512642,Cypress doesn't open certain URLs - is blank screen,"<!-- Is this a question? Don't open an issue. Ask in our chat https://gitter.im/cypress-io/cypress-->

### Current behavior:

After installing Cypress doesn't open any URL, even their examples. Run with React.js.


### Steps to reproduce: (app code and test code)

Cypress was installed as follows

`npm install cypress --save-dev`

and open

`node_modules/.bin/cypress open`

Code from example

```js
context('Actions', () => {
  beforeEach(() => {
    cy.visit('https://example.cypress.io/commands/actions')
  })
//...//
})
```

Cypress open link http://localhost:50702/__/#/tests/integration/examples/actions.spec.js
and nothing happens.

### Versions

2.4.1",bug
438301821,Cypress commands (e.g. cy.get) return undefined if previous test step fails,"### Current behavior:

Cypress test runner fails in `after()` block with error:

```
CypressError: cy.first() failed because it requires a DOM element.

The subject received was:

  > undefined

The previous command that ran was:

  > cy.get()

Because this error occurred during a 'after all' hook we are skipping the remaining tests in the current suite:
```

This happens each time a test step fails. In this case, it happens when the following assertion fails 
```js
.get('div.header__dob').should('contain', `${patient.birth_date}`)
```

### Desired behavior:

Cleanup step should execute with Cypress commands returning values instead of `undefined`

### Steps to reproduce: (app code and test code)

1. Write test with `before`, `test` & `after` steps
2. Have an assertion fail during testing
3. `cy.get` should return `undefined` in `after` step

### Versions

Cypress: 3.2.0
OS: MacOS 10.14.4
Browser: Electron59 & Chrome73
",bug
437321935,"Presence of DISPLAY env var causes ""Cypress failed to start""","### Current behavior:

1. Have `DISPLAY` env var set
1. `cypress run`:

```
Verifying Cypress can run /root/.cache/Cypress/3.2.0/Cypress [failed]
Cypress failed to start.

This is usually caused by a missing library or dependency.

The error below should indicate which dependency is missing.

https://on.cypress.io/required-dependencies

If you are using Docker, we provide containers with all required dependencies installed.
----------

Command failed: /root/.cache/Cypress/3.2.0/Cypress/Cypress --smoke-test --ping=177
----------

Platform: linux (Ubuntu Linux - 18.04)
Cypress Version: 3.2.0
```


### Desired behavior:

`cypress run` runs regardless of presence of `DISPLAY` variable.

### Steps to reproduce: (app code and test code)
 
* Stock [Cypress Docker image](https://docs.cypress.io/examples/examples/docker.html#Images).
* Running on [Semaphore 2.0](https://semaphoreci.com/blog/2018/11/06/semaphore-2-0-launched.html)
* `--config baseUrl=www.example.com`

This **was working** until a few days ago when we started observing `Cypress failed to start`.
Inspecting logs we noticed that Semaphore had began injecting a `DISPLAY` env var. We reached out to Semaphore and they confirmed:

> Thanks for reporting this.
>
> The $DISPLAY=:99 change was introduced two days ago as a part of improvements and fixes activities. This change helps with some workflows that are using Selenium/Chrome combination. Since this positively affected a given group of our users, we introduced this change.
> 
> I shared this message with the platform team and we will let you know as soon as we have any new information. Until then, please use the workaround you described.
> 
> Thanks for your patience.


### Versions

* Stock [Cypress Docker image](https://docs.cypress.io/examples/examples/docker.html#Images)
* `npm install` Cypress 3.2.0
* Running on [Semaphore 2.0](https://semaphoreci.com/blog/2018/11/06/semaphore-2-0-launched.html) using Docker image (per [Semaphore docs](https://docs.semaphoreci.com/article/78-working-with-docker-images#using-a-public-docker-image-in-cicd-jobs))",bug
434766545,window.location.replace not working - inserts `__` into url,"### Current behavior:

Navigating within our application using `location.replace("""")` in a chained promise handler throws a cross-origin error. In our actual application, we are waiting on a network request, then navigating using `location.replace()` in a then handler. 

I've simplified the code to the most basic thing I can, and am able to reproduce by calling `location.replace()` in a simple `setTimeout`.

`window.location.replace("""")` -- works

```js
setTimeout(() =>{
  window.location.replace("""");
});
```
-- gives the following error: `SecurityError: Blocked a frame with origin ""http://localhost:58236"" from accessing a cross-origin frame.`

### Desired behavior:

I need to be able to call `location.replace()` in a chained promise handler.

### Steps to reproduce: (app code and test code)

https://github.com/beckee/cypress-test-tiny

### Versions

Cypress 3.2.0
Mac OSX 
Chrome Version 73
",bug
434009156,Browsers with spaces in the path name cannot be launched from `--browser`,"The `--browser=<path>` option introduced in #1026 does not work properly if the path includes spaces. The spaces will not be properly escaped when doing the `--version` call, but will be escaped when launching the actual browser, making it impossible to both detect and launch a browser whose path contains spaces.

Workaround: create a symlink that does not contain spaces to the browser, and use that as the path.",bug
433847723,Incorrect redirect to malformed url within AUT - adding `_/` in url,"<!-- Is this a question? Don't open an issue. Ask in our chat https://gitter.im/cypress-io/cypress-->

### Current behavior:
When I instruct cypress to login to an Oracle APEX application, the authentication re-directs cypress to a '404 not found' page because the authenticated URL is malformed. The malformed URL is the only issue and can simply corrected programmatically (with a find and replace command).
![Screen Shot 2019-04-15 at 10 14 48 PM](https://user-images.githubusercontent.com/12301835/56223200-29ec0900-6022-11e9-83c7-d2fff85d2fab.png)

However - it is very important to note that the cypress login correctly returns:
1. a valid cookie
2. a valid session

which is everything you need for authentication.



<!-- images, stack traces, etc -->

### Desired behavior:

Cypress, ideally, should be able to follow the same authentication redirect that a user would in a regular browser. 
<!-- A clear description of what you want to happen -->

### Steps to reproduce: (app code and test code)

I created a dummy application with dummy credentials hosted by apex.oracle.com to demonstrate:
```js
it('Login demo', function() {
    cy.visit('https://apex.oracle.com/pls/apex/f?p=54707:LOGIN_DESKTOP')
    cy.get('#P9999_USERNAME').type('ApexUser')
    cy.get('#P9999_PASSWORD').type('Oradoc_db1')
    cy.get('.t-Button').click()
  })
```
The above code (which should work until the application expires in many months) will redirect to a 404 not found page with a url in the format: 
https://apex.oracle.com/__/f?p=54707:1:[session_id]:::::
Outside of cypress the url will have the format:
https://apex.oracle.com/pls/apex/f?p=54707:1:[session_id]:::::

### Versions
I have tested this across 4 instances of Oracle APEX (APEX 5.0, 5.1, 18.1 and 19) and this behavior is consistent.
<!-- Cypress, operating system, browser -->
",bug
433642945,XHR's pend forever when browser navigates in >= Chrome 71,"As of Chrome 71 - Chrome now fires `readystatechange` events *asynchronously* when the page is unloading - which means these events are never received.

Because we're never notified when the XHR's are aborted internally by the browser we never finish them correctly - and awaiting them with `cy.wait('...')` never completes.

Electron:

![Screenshot 2019-04-16 03 46 28](https://user-images.githubusercontent.com/1268976/56193210-1d55b980-5ffe-11e9-876a-b604ee0ec87d.png)

Chrome >= 71:
![image](https://user-images.githubusercontent.com/1268976/56193226-26468b00-5ffe-11e9-82eb-f58bf002e5cf.png)
",bug
431044152,Assertions run outside of a test should be handled properly in Cypress (not throw internal errors),"### Current behavior:

When you write assertions outside of a test (failing & passing), Cypress throws an error ""cannot read 'id' of undefined"" 

This is being thrown when attempting to create the logs for a test when the runnable is undefined. 

Furthermore, Cypress attempts to iterate over the stylesheets of the current document. Since there is no document, this throws an error that it ""cannot read 'stylesheets' of undefined""

### Desired behavior:

When you write assertions outside of a test (failing & passing), Cypress should handles these correctly. 

- Passing assertions should pass 
- Failing assertions should warn that you have a failure outside of a proper test - that you should probably write a test to put your assertions into.

### Steps to reproduce: (app code and test code)

1. Create a specfile within `cypress/integration`
2. Write `expect(true).to.be.true` to test the passing behavior.
3. Write `expect(true).to.be.false` to test the failing behavior.

### Versions

Cypress 3.2.0
",bug
430850948,A fail in the after each hook covers the fail in a test run,"### Current behavior:

When a test case fails and the following after each hook also fails, only the error from the after each hook is printed in the cypress dashboard, but only the fail screenshot of the test case is included.

**Example**
This screenshot is attached to my failed test:
![image](https://user-images.githubusercontent.com/35334883/55787506-b6dd1280-5ab6-11e9-9381-b4f95692205b.png)

The same fail has the following console output, which is obviously incorrect:
![image](https://user-images.githubusercontent.com/35334883/55787593-ea1fa180-5ab6-11e9-93c4-e4729c4eebaf.png)


### Desired behavior:

When a test case fails and the following after all hook also fails, there should be fail messages, one for the test case and one for the after all hook. There should also be a screenshot for both fails attached.

### Steps to reproduce:

1. Create a test case with an after each hook.
1. Make sure the test case itself will fail.
1. Run the testcase.
1. Observe the issue.

### Versions
![image](https://user-images.githubusercontent.com/35334883/55787724-2fdc6a00-5ab7-11e9-852d-39e3d1dc3247.png)
",bug
430438966,Reset button not considered during Implicit submission of a form,"### Current behavior:

Cypress doesn't allow the user to implicitly submit the form with the `{enter}` key if either:

- there is a `reset` button before the `submit` button
- there is a `reset` button but no `submit` button.

All that happens is the form is cleared.

### Desired behavior:

Form should submit when Enter key is pressed if there is a reset button present

### Steps to reproduce: (app code and test code)

```html
    <form action=""."" method=""GET"">
        <input name=""search"" id=""search-field"" type=""text"">
        <button type=""reset"">Reset</button>
        <button type=""submit"">Submit</button>
    </form>
```

```js
cy.get('#search-field').type('foo{enter}')
```

### Versions

cypress 3.2.0
",bug
430237044,Strings end with '\n' cause Chrome only test failures,"### Current behavior:

The following tests from `tests/integration/commands/actions/type_spec.coffee` fail on Chrome 73 but pass on Electron 59:

* `can wrap cursor to next line in [contenteditable] with {rightarrow}`
* `can wrap cursor to prev line in [contenteditable] with {leftarrow}failed`
* `can use {rightarrow} and nested elementsfailed`
* `enter and \n should act the same for [contenteditable]`
* `can type into [contenteditable] with existing <div>`
* `can type into [contenteditable] with existing <p>failed`
* `collapses selection to start on {leftarrow}`
* `collapses selection to end on {rightarrow}`
* `should move cursor to the start of each line in contenteditable`
* `should move cursor to the end of each line in contenteditable`
* `up and down arrow on contenteditablefailed`
* `downarrow ignores current selectionfailed`
* `inserts new line into [contenteditable]`
* `inserts new line into [contenteditable] from midline`

The test failures have a common pattern:  The expected result strings all end with `\n` but the actual result does not end with `\n`.

![Screen Shot 2019-04-07 at 11 07 03 PM](https://user-images.githubusercontent.com/1740517/55696211-ea6e4e80-5989-11e9-9b93-b4a65685c420.png)

### Desired behavior:

All tests from `type_spec.coffee` pass on both Chrome and Electron.

### Steps to reproduce: (app code and test code)

* Clone Cypress' `develop` branch.
* Install Chrome 73.
* Open 3 terminals running the following commands:

Terminal 1:
```shell
cd cypress/package/driver
npm start
```

Terminal 2:
```shell
cd cypress/package/runner
npm run watch
```

Terminal 3:
```shell
cd cypress/packages/driver
npm run cypress:open
```

* Select ""Chrome 73"" as the browser.
* Click `type_spec.coffee` under command > actions.
* Wait for the tests to finish. :)

### Versions
Chrome Version 73.0.3683.103 (Official Build) (64-bit)
Mac OS (latest released version)
Cypress 3.2.0 
",bug
429391006,cannot overwrite cy.route command,"Cypress 3.2.0

Aliases test in cypress-example-kitchensink. I am trying to overwrite `cy.route` command to display the route to be spied on.

```js
Cypress.Commands.overwrite('route', (route, ...args) => {
  cy.log('foo').then(() => {
    return route(...args)
  })
})

it('.as() - alias a route for later use', () => {
  cy.visit('https://example.cypress.io/commands/aliasing')
  cy.server()
  cy.route('GET', 'comments/*').as('getComment')
  cy.get('.network-btn').click()
  cy.wait('@getComment').its('status').should('eq', 200)
})
```

Gives me an error message

```
1) Aliasing .as() - alias a route for later use:
     CypressError: Cypress detected that you invoked one or more cy commands in a custom command but returned a different value.

The custom command was:

  > cy.server()

The return value was:

  > Object{24}

Because cy commands are asynchronous and are queued to be run later, it doesn't make sense to return anything else.

For convenience, you can also simply omit any return value or return 'undefined' and Cypress will not error.

In previous versions of Cypress we automatically detected this and forced the cy commands to be returned. To make things less magical and clearer, we are now throwing an error.
```

If I return undefined, then alias `as` seems to not work - even as it is shown in the list of registered aliases

```js
Cypress.Commands.overwrite('route', (route, ...args) => {
  cy.log(`cy.route ${args.join(' ')}`)

  route(...args)
})
```

`cypress run` output

```
    1) .as() - alias a route for later use
visit http://localhost:8080/commands/aliasing
log cy.server
log cy.route GET comments/*
get .network-btn
click 
xhr  GET https://jsonplaceholder.cypress.io/comments/1
log [getComment]
wait @getComment


  1 passing (5s)
  1 failing

  1) Aliasing .as() - alias a route for later use:
     CypressError: cy.wait() only accepts aliases for routes.
The alias: 'getComment' did not match a route.
```",bug
429370377,3.3.0 Windows build breaks kitchensink aliasing test on AppVeyor,"Current `develop` branch commit `3f3ec50adbcc5ecbb21a189f695ac81765662806` Windows build breaks test cypress-example-kitchensink ""examples\aliasing.spec.js"" on AppVeyor CI

https://ci.appveyor.com/project/cypress-io/cypress-test-example-repos/builds/23603100

```
Running: examples\aliasing.spec.js...                                                   (2 of 19) 
  Aliasing
    √ .as() - alias a DOM element for later use (747ms)
    1) .as() - alias a route for later use
  1 passing (14s)
  1 failing
  1) Aliasing .as() - alias a route for later use:
     CypressError: Timed out retrying: expected null to equal 200
```


![Screen Shot 2019-04-04 at 12 20 25 PM](https://user-images.githubusercontent.com/2212006/55571728-0fd23280-56d4-11e9-9c2d-fe3da7f8ed93.png)
",bug
428735233,cy.invoke doesn't retain `this` context on object methods,"### Current behavior:

`cy.invoke` doesn't retain (properly bind) `this` context on object methods.

### Steps to reproduce: (app code and test code)

```js
describe(`test`, () => {
    it.only(`test`, () => {
        cy.window().then( win => {
            win.obj = {
                val: 42,
                get () { return this.val; }
            };

            // shallow invoke is fine
            cy.wrap(win.obj).invoke(`get`).should(`eq`, 42);

            // lodash's invoke works as correctly
            cy.wrap( Cypress._.invoke(win, `obj.get`) ).should(`eq`, 42);
            
            // but not Cypress' invoke
            cy.window().invoke(`obj.get`).should(`eq`, 42); // undefined
        });
    });
});
```

### Versions

cypress: `3.1.3` (haven't seen any `cy.invoke`-related fixes in changelog, so I assume it's still not fixed in newer versions)",bug
427039380,"Crash ""Cannot read property 'error' of undefined""","## bug 🐞

### good

A test like this work fine - cannot find an element, times out

```js
it.only('works', () => {
  cy.get('fff', { log: false }).type('foo')
})
```

<img width=""343"" alt=""Screen Shot 2019-03-29 at 11 15 38 AM"" src=""https://user-images.githubusercontent.com/2212006/55242619-00567380-5214-11e9-83f4-e06cca923b5f.png"">

### bad

But if I change the selector to be like this it crashes badly immediately (yes, I have just added backticks around `'foo'` string

```js
it.only('works', () => {
  cy.get(`'fff'`, { log: false }).type('foo')
})
```

<img width=""341"" alt=""Screen Shot 2019-03-29 at 11 16 32 AM"" src=""https://user-images.githubusercontent.com/2212006/55242781-4f9ca400-5214-11e9-8b66-3e246652dfea.png"">

Seems the crash happens at the line `options._log` in
```js
e.onFail = function() {
    return options._log.error(e);
}
```

<img width=""1061"" alt=""Screen Shot 2019-03-29 at 11 16 52 AM"" src=""https://user-images.githubusercontent.com/2212006/55242773-4a3f5980-5214-11e9-9b04-dca91aa648f8.png"">

### removing log: false

If I remove `{log: false}` from `cy.get` command the test correctly shows an error message

```js
it.only('works', () => {
  cy.get(`'fff'`).type('foo')
})
```

<img width=""341"" alt=""Screen Shot 2019-03-29 at 11 18 43 AM"" src=""https://user-images.githubusercontent.com/2212006/55242890-8a9ed780-5214-11e9-8e17-c01af7dfc94c.png"">


",bug
426156108,cy.its() no longer waits on undefined,"<!-- Is this a question? Don't open an issue. Ask in our chat https://gitter.im/cypress-io/cypress-->

### Current behavior:

`cy.its()` yields `undefined`.

```javascript
cy.window().its('__store__').then((store) => {
    ...
    /* `store` is undefined as value is yielded before my application gets a chance to set `window.__store__ = myStore;` */
});
```

### Desired behavior:
Docs state:

> .its() will automatically retry itself until the property exists on the subject.

https://docs.cypress.io/api/commands/its.html#Assertions

### Steps to reproduce: (app code and test code)

Interestingly, asserting that the yielded property exists resolves this issue:

```javascript
cy.window().its('__store__').should('exist').then((store) => {
    ...
    /* `store` is *not* `undefined` 👌 */
});
```

I suspect all that is required is that the documentation needs to be updated to indicate that by default it will yield `undefined` unless there's a subsequent command that triggers the retry behaviour/state.

### Versions

Cypress 3.2.0
macOS: 10.14.3
Chrome 73",bug
423683189,dblclick() doesn't work as click(),"### Current behavior:

> Error:       CypressError: cy.dblclick() failed because this element is not visible:
> 
> <span class=""pax-add pax-enabled"" id=""hrefIncAdt"">+</span>
> 
> This element '<span#hrefIncAdt.pax-add.pax-enabled>' is not visible because its content is being clipped by one of its parent elements, which has a CSS property of overflow: 'hidden', 'scroll' or 'auto'
> 
> Fix this problem, or use {force: true} to disable error checking.

### Desired behavior:

- The double click function gets NO error as click function works.

### Steps to reproduce: (app code and test code)
Having the code to demonstrate the issue as below

```js
context('Drop-down with navigation', () =>{
        it.only('Check drop-down with navigation', ()=>{
            cy.visit('https://www.spicejet.com/')
            cy.get('.adult-infant-child').within(() => {
                cy.get('#divpaxinfo').click()
                    // choose number of adult
                    cy.get('#divAdult #hrefIncAdt').dblclick()
                    // choose number of child
                    cy.get('#divChild #hrefIncChd').click()

            })
        })
    })
```

1. Run the code above => get error

2. Work around:
Replace the line 
`cy.get('#divAdult #hrefIncAdt').dblclick()`
by
`cy.get('#divAdult #hrefIncAdt').click()`

### Versions

```json
  ""devDependencies"": {
    ""cypress"": ""^3.1.5"",
    ""cypress-xpath"": ""^1.3.0"",
    ""eslint-plugin-cypress"": ""^2.2.1""
  }
```
node version: v9.3.0
OS: MAC OS
",bug
422604167,Cypress unable to test sites with scripts obfuscated with domain lock,"### Current behavior:

![Untitled](https://user-images.githubusercontent.com/48315811/54118645-f4457600-440c-11e9-9cf0-b552b3d82f22.png)

I noticed that I can’t run tests with cypress on a site that has scripts obfuscated with domain lock by JavaScript Obfuscator Tool (https://obfuscator.io/). Domain lock is a setting that helps protect scripts from running on other domains. I don’t know how cypress works, so I can’t even think of how can I solve that problem. I saw that it starts with localhost and then it redirects to the real domain, but the scripts fail to work after that. I tried adding localhost as approved domain, but it didn’t help. 
I like your tool, but removing a domain lock just for testing doesn't seem a good idea.

### Desired behavior:

When I run tests on a site that has scripts obfuscated with domain lock, javascript doesn't fail with error.

### Steps to reproduce: (app code and test code)

cy.visit('https://matrix.reshish.com/cramer.php');

### Versions

Cypress 3.1.5, Mac OS, Chrome
",bug
422475388,runnable:run:async only fires once for each hook,"runnable:run:async only fires once for each hook

this would cause screenshots to not be taken when:
- test fails in afterEach/beforeEach hook after the hook has already passed ",bug
422461824,Cypress fails to parse environment variables with empty values,"### Current behavior:

Cypress fails to parse command line environment variables when environment variables with empty values are supplied.

### Desired behavior:

Should default to setting the values to `undefined`

### Steps to reproduce: (app code and test code)

Run a command like `cypress run --env=""USERNAME=,PASSWORD=""`

### Versions

3.2.0 and earlier

----

Stack trace:

```
A JavaScript error occurred in the main process
Uncaught Exception:
TypeError: Cannot read property 'split' of undefined
    at pipesToCommas (/root/.cache/Cypress/3.2.0/Cypress/resources/app/packages/server/lib/util/args.js:95:13)
    at JSONOrCoerce (/root/.cache/Cypress/3.2.0/Cypress/resources/app/packages/server/lib/util/args.js:115:9)
    at /root/.cache/Cypress/3.2.0/Cypress/resources/app/packages/server/node_modules/lodash/lodash.js:13402:38
    at /root/.cache/Cypress/3.2.0/Cypress/resources/app/packages/server/node_modules/lodash/lodash.js:4911:15
    at baseForOwn (/root/.cache/Cypress/3.2.0/Cypress/resources/app/packages/server/node_modules/lodash/lodash.js:2996:24)
    at Function.mapValues (/root/.cache/Cypress/3.2.0/Cypress/resources/app/packages/server/node_modules/lodash/lodash.js:13401:7)
    at /root/.cache/Cypress/3.2.0/Cypress/resources/app/packages/server/node_modules/lodash/lodash.js:4374:28
    at arrayReduce (/root/.cache/Cypress/3.2.0/Cypress/resources/app/packages/server/node_modules/lodash/lodash.js:683:21)
    at baseWrapperValue (/root/.cache/Cypress/3.2.0/Cypress/resources/app/packages/server/node_modules/lodash/lodash.js:4373:14)
    at LodashWrapper.wrapperValue (/root/.cache/Cypress/3.2.0/Cypress/resources/app/packages/server/node_modules/lodash/lodash.js:9052:14)
    at sanitizeAndConvertNestedArgs (/root/.cache/Cypress/3.2.0/Cypress/resources/app/packages/server/lib/util/args.js:150:4)
    at Object.toObject (/root/.cache/Cypress/3.2.0/Cypress/resources/app/packages/server/lib/util/args.js:225:21)
    at Object.start (/root/.cache/Cypress/3.2.0/Cypress/resources/app/packages/server/lib/cypress.js:70:40)
    at Object.<anonymous> (/root/.cache/Cypress/3.2.0/Cypress/resources/app/packages/server/index.js:21:43)
    at Object.<anonymous> (/root/.cache/Cypress/3.2.0/Cypress/resources/app/packages/server/index.js:23:3)
    at Module._compile (module.js:569:30)
    at Object.Module._extensions..js (module.js:580:10)
    at Module.load (module.js:503:32)
    at tryModuleLoad (module.js:466:12)
    at Function.Module._load (module.js:458:3)
    at Module.require (module.js:513:17)
    at require (internal/module.js:11:18)
    at Object.<anonymous> (/root/.cache/Cypress/3.2.0/Cypress/resources/app/index.js:2:1)
    at Object.<anonymous> (/root/.cache/Cypress/3.2.0/Cypress/resources/app/index.js:3:3)
    at Module._compile (module.js:569:30)
    at Object.Module._extensions..js (module.js:580:10)
    at Module.load (module.js:503:32)
    at tryModuleLoad (module.js:466:12)
    at Function.Module._load (module.js:458:3)
    at Object.<anonymous> (/root/.cache/Cypress/3.2.0/Cypress/resources/electron.asar/browser/init.js:171:8)
    at Object.<anonymous> (/root/.cache/Cypress/3.2.0/Cypress/resources/electron.asar/browser/init.js:173:3)
    at Module._compile (module.js:569:30)
    at Object.Module._extensions..js (module.js:580:10)
    at Module.load (module.js:503:32)
    at tryModuleLoad (module.js:466:12)
    at Function.Module._load (module.js:458:3)
    at Function.Module.runMain (module.js:605:10)
    at startup (bootstrap_node.js:167:16)
    at bootstrap_node.js:589:3
```
",bug
421435489,"If video failed uploading, do not send video.url","@jennifer-shehane commented on [Thu Jun 14 2018](https://github.com/cypress-io/cypress-api/issues/624)

Within run:

```
  (Uploading Results)

  - Failed Uploading (1/1) /root/app/cypress/videos/common/select-spec.js.mp4
```

Yet, the video `url` is sent with an aws link still.

https://dashboard.cypress.io/#/projects/m7bnkc/runs/4/specs

---

@brian-mann commented on [Thu Jun 14 2018](https://github.com/cypress-io/cypress-api/issues/624#issuecomment-397324414)

The API doesn't actually know whether or not the uploading failed. It just assumes it was all successful.

For us to capture this state we would either need to send it along from the desktop client - or we'd need a lambda function to spawn in response to files being uploaded to buckets - which would then update the DB state.

Although it would be initially easier to do this out of the clients, its unnecessary and much less flexible (it wouldnt work on older versions) and I think we'd rather opt to go the lambda route because we will have to do that **anyway** when we do things like log processing.

",bug
421421665,Running test cases in parallel sometimes runs files multiple times,"### Current behavior:

We are running multiple test cases on Gitlab CI. We have 15 machines for our test cases.

Sometimes cypress seems to start different files multiple files. Usually I have 17 specs in the first group:

![image](https://user-images.githubusercontent.com/35334883/54420283-df692b00-4709-11e9-968f-26487feb89ff.png)

When running the exact same pipeline, suddenly much more specs are found:
![image](https://user-images.githubusercontent.com/35334883/54420832-5c48d480-470b-11e9-8284-5f31c6e0873e.png)
![image](https://user-images.githubusercontent.com/35334883/54420318-f7d94580-4709-11e9-833f-22b591b5ed36.png)

When I then make changes to the configuration, e.g. use less machines, the right amount of specs is found again:

![image](https://user-images.githubusercontent.com/35334883/54420505-71713380-470a-11e9-952d-5c0318fbf075.png)


### Desired behavior:

No matter how many machines run the same specs at the same time, the amount of specs found should not differ from one run to the other.

### Steps to reproduce: (app code and test code)

I'm running my specs on GitLab with the following pipeline:

```yml
.job_template: &appJob
  stage: app_test
  image: rep/e2e-runner:master
  tags:
    - e2e
  script:
    - cypress run --spec ""$(find ./cypress/integration/2_CI_Tests/1_App/1_1_General/ -type f | tr '\n' ',' | sed 's/,$//')"" --record --key ${CYPRESS_KEY} --browser electron --parallel --ci-build-id $CI_PIPELINE_ID --group General_app
  artifacts:
    expire_in: 3 days
    paths:
    - cypress/screenshots
    - cypress/videos
  allow_failure: true

test:2_App_1:
  <<: *appJob

test:2_App_2:
  <<: *appJob

test:2_App_3:
  <<: *appJob

test:2_App_4:
  <<: *appJob

test:2_App_5:
  <<: *appJob

test:2_App_6:
  <<: *appJob

test:2_App_7:
  <<: *appJob

test:2_App_8:
  <<: *appJob

test:2_App_9:
  <<: *appJob

test:2_App_10:
  <<: *appJob

test:2_App_11:
  <<: *appJob

test:2_App_12:
  <<: *appJob
```

### Versions
* This was first seen on v. 3.1.5
* This issue didn't occur for us with the exact same setup on any previous version.",bug
419599429,"cy.trigger('mousedown', ...) doesn't fill in event.view property","### Current behavior:

```js
  cy.get('#thing').trigger('mousedown', 10, 10);
```

When the browser creates the `MouseEvent` object, it has a `view` property which points to the `Window` object. 

Cypress does not add it during a `trigger`.

Apparently the `d3-zoom` library depends on this property being there. My app breaks when run via cypress but not when the user clicks.

Here is the property:  
https://github.com/Microsoft/TypeScript/blob/master/lib/lib.dom.d.ts#L15454

### Desired behavior:

During a `trigger`, fill in all of the same properties that the browser does when the user clicks.

### Steps to reproduce: (app code and test code)

https://stackblitz.com/edit/typescript-eurovj?file=index.ts

```ts
  it('should click just like the user does', () => {
    cy.visit('https://typescript-eurovj.stackblitz.io');
    cy.get('#rect').trigger('mousedown', 5, 5);
    cy.get('#app').should('contain', 'got the view');
  });
```

### Versions

Cypress 3.1.5",bug
419049107,esm causes an error in cypress runner in windows 7/10 but works ok in linux,"### Current behavior:

Using esm in windows 7/10 causes cypress test runner to throw an error about the plugin file
When using command
```
node_modules/.bin/cypress open
```

error:
```
 Can't start server

The plugins file is missing or invalid.

Your pluginsFile is set to ....\cypress\plugins\index.js, but either the file is missing, it contains a syntax error, or threw an error when required. The pluginsFile must be a .js or .coffee file.

Please fix this, or set pluginsFile to false if a plugins file is not necessary for your project.

Error [ERR_UNKNOWN_STDIN_TYPE]: Unknown stdin file type
```

```node_modules/.bin/cypress run``` however works successfully across linux/windows7/windows10

```node_modules/.bin/cypress open``` works successfully in linux

### Desired behavior:

```
node_modules/.bin/cypress open
```
should also work successfully on windows 7/10



### Steps to reproduce: (app code and test code)

https://github.com/janusqa/janusqa-cypress-test-tiny-plugin3-esm
Run on windows using 
```
node_modules/.bin/cypress open
```

### Versions

Windows: 7/10
Cypress package version: 3.1.5
Cypress binary version: 3.1.5
",bug
417914130,Throws error on Cypress.log without previous command,"Cypress 3.1.5 on Mac

```js
/// <reference types=""cypress"" />
it('works', () => {
  Cypress.log('after hook')
})
```

Throws error 
<img width=""697"" alt=""screen shot 2019-03-06 at 12 05 52 pm"" src=""https://user-images.githubusercontent.com/2212006/53899451-35eab100-4008-11e9-8b14-6167f24f1af5.png"">

Code that throws

```js
    _.defaults(obj, current != null ? current.pick(""name"", ""type"") : void 0);
    if (!parentOrChildRe.test(obj.type)) {
      obj.type = current.hasPreviouslyLinkedCommand() ? ""child"" : ""parent"";
    }
```

https://github.com/cypress-io/cypress/blob/develop/packages/driver/src/cypress/log.coffee#L117",bug
417513335,"Chrome Cypress browser adds ""charset=utf-8"" to the content-type in the response header","### Current behavior:

Some of my website's HTTP requests are failing only in the Cypress browser (e.g. signing up for a new account). After debugging, it was discovered this was due to the response header returning a different `content-type` in the Cypress browser.

Chrome browser:
```
content-type: application/json
```

Cypress browser (not running headlessly):
```
Content-type: application/json; charset=utf-8
```

Cypress is adding `""charset=utf-8""` to the `content-type`.

### Desired behavior:

Return the same `content-type` as the Chrome browser.

### Versions

3.1.5
Chrome 72
",bug
416158759,performance.getEntriesByType is returning undefined,"### Current behavior:

Overwrite `window.performance.getEntriesByType` with NOOP that returns `undefined`.

### Desired behavior:

Don't overwrite `window.performance.getEntriesByType`.

### Steps to reproduce: (app code and test code)

* Use `cy.clock` to take over the timing functions
* open a page
* try to use methods on `window.performance` like `getEntriesByType` (you can include the Facebook JS SDK to reproduce this)

#### Stack trace from Facebook SDK JS
```js
TypeError: Cannot read property 'filter' of undefined
      at c (https://connect.facebook.net/en_US/sdk.js?hash=624278b338adcdb461a65444946d6779&ua=modern_es6:45:1484)
      at Object.<anonymous> (https://connect.facebook.net/en_US/sdk.js?hash=624278b338adcdb461a65444946d6779&ua=modern_es6:164:238)
      at require (https://connect.facebook.net/en_US/sdk.js?hash=624278b338adcdb461a65444946d6779&ua=modern_es6:24:620)
      at https://connect.facebook.net/en_US/sdk.js?hash=624278b338adcdb461a65444946d6779&ua=modern_es6:165:223
      at https://connect.facebook.net/en_US/sdk.js?hash=624278b338adcdb461a65444946d6779&ua=modern_es6:94:929
      at Array.forEach (<anonymous>)
      at c (https://connect.facebook.net/en_US/sdk.js?hash=624278b338adcdb461a65444946d6779&ua=modern_es6:45:1604)
      at Object.fire (https://connect.facebook.net/en_US/sdk.js?hash=624278b338adcdb461a65444946d6779&ua=modern_es6:94:894)
      at https://connect.facebook.net/en_US/sdk.js?hash=624278b338adcdb461a65444946d6779&ua=modern_es6:161:2263
```

### Versions

Cypress 3.1.5, Chrome
",bug
415598119,emitting `rerun` on multiple files results in runtime typeError,"### Current behavior:

Emitting `rerun` on more than one file makes the runner throw:

```
Uncaught TypeError: Cannot read property 'stop' of null
    at $Cypress.stop (cypress_runner.js:59712)
    at Object._reRun (cypress_runner.js:163510)
    at Socket.rerun (cypress_runner.js:163243)
    at Socket.Emitter.emit (cypress_runner.js:167896)
    at Socket.onevent (cypress_runner.js:170798)
    at Socket.onpacket (cypress_runner.js:170756)
    at Manager.<anonymous> (cypress_runner.js:164988)
    at Manager.Emitter.emit (cypress_runner.js:167896)
    at Manager.ondecoded (cypress_runner.js:170272)
    at Decoder.<anonymous> (cypress_runner.js:164988)
    at Decoder.Emitter.emit (cypress_runner.js:165126)
    at Decoder.add (cypress_runner.js:171421)
    at Manager.ondata (cypress_runner.js:170262)
    at Socket.<anonymous> (cypress_runner.js:164988)
    at Socket.Emitter.emit (cypress_runner.js:167896)
    at Socket.onPacket (cypress_runner.js:166017)
```

This might not be a bug per se, but I couldn't [figure out](https://docs.cypress.io/api/plugins/preprocessors-api.html#File-events) how we should properly write a watch plugin. E.g. the [cypress-app-watcher-preprocessor](https://github.com/TheBrainFamily/cypress-app-watcher-preprocessor/blob/master/cypressPreprocessor.js) does it the same.

As a workaround, instead of looping through every open file, I emit the `rerun` on a randomly chosen open file which triggers re-run of everything open, anyway --- but this feels weird.

### Steps to reproduce: (app code and test code)

Check [plugins/index.js](https://github.com/dwelle/cypress-test-tiny/blob/master/cypress/plugins/index.js) from https://github.com/dwelle/cypress-test-tiny

Repro yourself:

```
git clone https://github.com/dwelle/cypress-test-tiny && cd cypress-test-tiny &&\
npm i && npx cypress open
```

Check the devTools console.

### Versions

cypress: `3.1.5`
node: `v10.12.0`
os: `win7`
",bug
413841612,cy.request(): Got a broken PDF file,"### Current behavior:

When I tried to use `cy.request()` API to get content of PDF file, I end up with broken file content.

Example of spec file:

```js
/// <reference types=""Cypress"" />

context('Download Pdf', () => {

    it('Download Pdf', () => {
        const pdfUrl = 'http://www.pdf995.com/samples/pdf.pdf';

        cy.request({ url: pdfUrl, gzip: false})
            .then((response) => {
                const fileName = 'test';
                const filePath = 'temp/' + fileName + '.pdf';

                cy.writeFile(filePath, response.body, 'binary');
            });

    });
});
```

As a result, I have got PDF file with blank pages:

[test.pdf](https://github.com/cypress-io/cypress/files/2898108/test.pdf)

Which is not really what I try to download:

http://www.pdf995.com/samples/pdf.pdf

### Desired behavior:

I want to get exactly the same file that I would get if use browser to download it.

### Steps to reproduce: (app code and test code)

1. Inited Cypress project
2. Removed `examples`
3. Create `cypress/integration/sample/download-pdf.spec.js` file and put there a snippet from `Current behavior` section.
4. Create `temp` directory in the root directory of the project
5. Open cypress
6. Run `download-pdf.spec.js` in GUI
7. Compare downloaded `temp/test.pdf` file with source one: http://www.pdf995.com/samples/pdf.pdf

### Versions

- OS: macOS HighSierra, v.10.13.3
- NodeJs: v11.6.0
- Cypress: Version 3.1.5 (3.1.5) 
- Running Chrome 72

### Related Issues

- https://github.com/cypress-io/cypress/issues/2029 ",bug
413078951,"Cypress devtool sometimes loses ""developer tools"" menu bar item ","### Current behavior:

I'm not sure when this happens but fairly often I'll go to press a shortcut to reload cypress or open the inspector and find that it isn't working. Then I'll see that those options have disappeared from the menubar:

![image](https://user-images.githubusercontent.com/2730609/53194356-08454700-35c8-11e9-9c9f-1a756e0b3835.png)


### Desired behavior:

![image](https://user-images.githubusercontent.com/2730609/53194493-50fd0000-35c8-11e9-8dc2-eb94a989df82.png)


### Steps to reproduce: (app code and test code)
I'm not sure when this happens, but maybe someone else who has experienced this issue knows?

### Versions
Latest chrome v72
Cypress 3.1.5
Mac OSX
",bug
412720923,cy.wrap($el) times out with error: obj.is is not a function,"### Current behavior:

If you attempt to grab the children of an element & loop through them and start making should assertions after wrapping them, it seems that 'contain' assertions do not work unless you issue a different assertion or command on the wrapped element beforehand.

```
Command:  wrap
Error:    CypressError: Timed out retrying: obj.is is not a function
```

### Desired behavior:

You should be able to just do a `cy.wrap(childEl).should('contain', 'some text')` with no prior commands or assertions.

### Steps to reproduce:

#### Spec
```js
describe('should fail', () => {
  it('fails when asserting a wrapped child el', () => cy
    .visit('index.html')
    .get('.my-el')
    .children()
    .then(children => cy.wrap(children[0]).should('contain', 'This should fail...')));

  it('passes when asserting the el itself', () => cy
    .visit('index.html')
    .get('.my-el h1')
    .then($el => cy.wrap($el).should('contain', 'This should fail...')));

  it('passes when asserting the wrapped child el AFTER scrollIntoView', () => cy
    .visit('index.html')
    .get('.my-el')
    .children()
    .then(children => cy.wrap(children[0]).scrollIntoView().should('contain', 'This should fail...')));
});
```

#### Page
```html
<html lang=""en"">
  <head>
    <title>Hello World</title>
  </head>
  <body>
    <div class=""my-el"">
      <h1>This should fail...</h1>
      <p>words</p>
    </div>
  </body>
</html>
```

### Versions
Electron 59
Cypress 3.1.5
macOS 10.14.2
",bug
412467969,Cypress.config('baseUrl') escapes slash,"### Current behavior:

![image](https://user-images.githubusercontent.com/905878/53100266-c238a680-3527-11e9-8511-788ae62f0866.png)

### Desired behavior:

![image](https://user-images.githubusercontent.com/905878/53100313-d381b300-3527-11e9-957a-ff2ff83b411c.png)

### Steps to reproduce: (app code and test code)

cypress.json
```json
{
  ""env"": {
    ""test_url"": ""http://localhost:3000/""
  },
  ""baseUrl"": ""http://localhost:3000/""
}
```
Example test:
```js
it('test url', function () {
    cy.visit('/')
    var baseUrl = Cypress.config('baseUrl')
    //baseUrl = baseUrl + '/'    // bug in Cypress - add slash
    cy.url().should('eq', Cypress.env('test_url'))
    cy.url().should('eq', baseUrl)
})
```

### Versions

Windows, Cypress 3.1.5",bug
411835964,Error: Failed to parse or set cookie named,"### Current behavior:

When using a cookie with attribute `Secure` using a HTTP connection an error is thrown and tests are aborted:

> Error: Failed to parse or set cookie named ""\<JSESSIONID>"".

For more context, see https://github.com/cypress-io/cypress/issues/1321#issuecomment-462647518

### Desired behavior:

Cypress should continue to run tests and ignore cookie, perhaps showing a warning about trying to set a secure cookie on a non-secure connection.

### Steps to reproduce: (app code and test code)

1. Use a non-encrypted connection (http)
2. Navigate Cypress to a url which tries to set a `Secure` cookie as response

### Versions

Cypress 3.1.5 (3.1.0 works fine), any OS, both Electron and Chrome are affected.
",bug
411084080,Alias names fail if they include dots,"Cypress 3.1.5

This alias works fine

```js
cy.spy(obj, 'foo').as('foo')
cy.get('@foo')
```

This crashes and burns during `cy.get`

```js
cy.spy(obj, 'foo').as('obj.foo')
cy.get('@obj.foo')
```

<img width=""655"" alt=""screen shot 2019-02-16 at 10 44 23 am"" src=""https://user-images.githubusercontent.com/2212006/52901927-e3239380-31d7-11e9-9d95-2dffaa773a61.png"">

Nice touch: the Command Log shows that spy is actually working, it is just `cy.get` that fails
",bug
410919599,ffmpeg: Error initializing output stream: Error while opening encoder for output stream: width not divisible by 2,"<!-- Is this a question? Don't open an issue. Ask in our chat https://gitter.im/cypress-io/cypress-->

### Current behavior:

<!-- images, stack traces, etc -->
Tests doesn't run without the GUI because of the error with video capture.

```
$ DEBUG=cypress:server:video node_modules/.bin/cypress run

====================================================================================================

  (Run Starting)

  ┌────────────────────────────────────────────────────────────────────────────────────────────────┐
  │ Cypress:    3.1.4                                                                              │
  │ Browser:    Electron 59 (headless)                                                             │
  │ Specs:      1 found (ordering.spec.js)                                                         │
  │ Searched:   cypress/integration/ordering.spec.js                                               │
  └────────────────────────────────────────────────────────────────────────────────────────────────┘


────────────────────────────────────────────────────────────────────────────────────────────────────

  Running: ordering.spec.js...                                                             (1 of 1)
  cypress:server:video capture started { command: 'ffmpeg -n 20 /home/yuri/.cache/Cypress/3.1.4/Cypress/resources/app/packages/server/node_modules/@ffmpeg-installer/linux-x64/ffmpeg -f image2pipe -use_wallclock_as_timestamps 1 -i pipe:0 -y -vcodec libx264 -preset ultrafast /srv/http/s1/cypress/videos/ordering.spec.js.mp4' } +0ms
  cypress:server:video capture stderr log { message: 'ffmpeg version N-45896-g19c3df0cd-static https://johnvansickle.com/ffmpeg/  Copyright (c) 2000-2018 the FFmpeg developers' } +3ms
  cypress:server:video capture stderr log { message: '  built with gcc 6.3.0 (Debian 6.3.0-18+deb9u1) 20170516' } +1ms
  cypress:server:video capture stderr log { message: '  configuration: --enable-gpl --enable-version3 --enable-static --disable-debug --disable-ffplay --disable-indev=sndio --disable-outdev=sndio --cc=gcc-6 --enable-fontconfig --enable-frei0r --enable-gnutls --enable-gray --enable-libaom --enable-libfribidi --enable-libass --enable-libvmaf --enable-libfreetype --enable-libmp3lame --enable-libopencore-amrnb --enable-libopencore-amrwb --enable-libopenjpeg --enable-librubberband --enable-libsoxr --enable-libspeex --enable-libvorbis --enable-libopus --enable-libtheora --enable-libvidstab --enable-libvo-amrwbenc --enable-libvpx --enable-libwebp --enable-libx264 --enable-libx265 --enable-libxml2 --enable-libxvid --enable-libzimg' } +0ms
  cypress:server:video capture stderr log { message: '  libavutil      56. 17.100 / 56. 17.100' } +0ms
  cypress:server:video capture stderr log { message: '  libavcodec     58. 19.100 / 58. 19.100' } +1ms
  cypress:server:video capture stderr log { message: '  libavformat    58. 13.100 / 58. 13.100' } +0ms
  cypress:server:video capture stderr log { message: '  libavdevice    58.  4.100 / 58.  4.100' } +0ms
  cypress:server:video capture stderr log { message: '  libavfilter     7. 20.100 /  7. 20.100' } +0ms
  cypress:server:video capture stderr log { message: '  libswscale      5.  2.100 /  5.  2.100' } +0ms
  cypress:server:video capture stderr log { message: '  libswresample   3.  2.100 /  3.  2.100' } +0ms
  cypress:server:video capture stderr log { message: '  libpostproc    55.  2.100 / 55.  2.100' } +13ms
  cypress:server:video capture stderr log { message: '[mjpeg @ 0x6883000] EOI missing, emulating' } +370ms


  ordering
  cypress:server:video capture stderr log { message: 'Input #0, image2pipe, from \'pipe:0\':' } +7s
  cypress:server:video capture stderr log { message: '  Duration: N/A, start: 1550258710.960000, bitrate: N/A' } +0ms
  cypress:server:video capture stderr log { message: '    Stream #0:0: Video: mjpeg, yuvj420p(pc, bt470bg/unknown/unknown), 1023x575 [SAR 1:1 DAR 1023:575], 25 fps, 25 tbr, 25 tbn, 25 tbc' } +0ms
  cypress:server:video capture stderr log { message: 'Stream mapping:' } +1ms
  cypress:server:video capture codec data: { format: 'image2pipe', audio: '', video: 'mjpeg', duration: 'N/A', video_details: [ 'mjpeg', 'yuvj420p(pc', 'bt470bg/unknown/unknown)', '1023x575 [SAR 1:1 DAR 1023:575]', '25 fps', '25 tbr', '25 tbn', '25 tbc' ] } +0ms
  cypress:server:video capture stderr log { message: '  Stream #0:0 -> #0:0 (mjpeg (native) -> h264 (libx264))' } +3ms
  cypress:server:video capture stderr log { message: '[libx264 @ 0x6887a00] width not divisible by 2 (1023x575)' } +3ms
  cypress:server:video capture stderr log { message: 'Error initializing output stream 0:0 -- Error while opening encoder for output stream #0:0 - maybe incorrect parameters such as bit_rate, rate, width or height' } +0ms
  cypress:server:video capture stderr log { message: 'Conversion failed!' } +2ms
  cypress:server:video capture stderr log { message: '' } +1ms
  cypress:server:video capture errored: { error: 'ffmpeg exited with code 1: Error initializing output stream 0:0 -- Error while opening encoder for output stream #0:0 - maybe incorrect parameters such as bit_rate, rate, width or height\nConversion failed!\n', stdout: '', stderr: 'ffmpeg version N-45896-g19c3df0cd-static https://johnvansickle.com/ffmpeg/  Copyright (c) 2000-2018 the FFmpeg developers\n  built with gcc 6.3.0 (Debian 6.3.0-18+deb9u1) 20170516\n  configuration: --enable-gpl --enable-version3 --enable-static --disable-debug --disable-ffplay --disable-indev=sndio --disable-outdev=sndio --cc=gcc-6 --enable-fontconfig --enable-frei0r --enable-gnutls --enable-gray --enable-libaom --enable-libfribidi --enable-libass --enable-libvmaf --enable-libfreetype --enable-libmp3lame --enable-libopencore-amrnb --enable-libopencore-amrwb --enable-libopenjpeg --enable-librubberband --enable-libsoxr --enable-libspeex --enable-libvorbis --enable-libopus --enable-libtheora --enable-libvidstab --enable-libvo-amrwbenc --enable-libvpx --enable-libwebp --enable-libx264 --enable-libx265 --enable-libxml2 --enable-libxvid --enable-libzimg\n  libavutil      56. 17.100 / 56. 17.100\n  libavcodec     58. 19.100 / 58. 19.100\n  libavformat    58. 13.100 / 58. 13.100\n  libavdevice    58.  4.100 / 58.  4.100\n  libavfilter     7. 20.100 /  7. 20.100\n  libswscale      5.  2.100 /  5.  2.100\n  libswresample   3.  2.100 /  3.  2.100\n  libpostproc    55.  2.100 / 55.  2.100\n[mjpeg @ 0x6883000] EOI missing, emulating\nInput #0, image2pipe, from \'pipe:0\':\n  Duration: N/A, start: 1550258710.960000, bitrate: N/A\n    Stream #0:0: Video: mjpeg, yuvj420p(pc, bt470bg/unknown/unknown), 1023x575 [SAR 1:1 DAR 1023:575], 25 fps, 25 tbr, 25 tbn, 25 tbc\nStream mapping:\n  Stream #0:0 -> #0:0 (mjpeg (native) -> h264 (libx264))\n[libx264 @ 0x6887a00] width not divisible by 2 (1023x575)\nError initializing output stream 0:0 -- Error while opening encoder for output stream #0:0 - maybe incorrect parameters such as bit_rate, rate, width or height\nConversion failed!\n' } +1ms
Warning: We failed to record the video.

This error will not alter the exit code.

Error: ffmpeg exited with code 1: Error initializing output stream 0:0 -- Error while opening encoder for output stream #0:0 - maybe incorrect parameters such as bit_rate, rate, width or height
Conversion failed!

    at ChildProcess.<anonymous> (/home/yuri/.cache/Cypress/3.1.4/Cypress/resources/app/packages/server/node_modules/fluent-ffmpeg/lib/processor.js:182:22)
    at emitTwo (events.js:125:13)
    at ChildProcess.emit (events.js:213:7)
    at Process.ChildProcess._handle.onexit (internal/child_process.js:200:12)

{ Error: ffmpeg exited with code 1: Error initializing output stream 0:0 -- Error while opening encoder for output stream #0:0 - maybe incorrect parameters such as bit_rate, rate, width or height
Conversion failed!

    at ChildProcess.<anonymous> (/home/yuri/.cache/Cypress/3.1.4/Cypress/resources/app/packages/server/node_modules/fluent-ffmpeg/lib/processor.js:182:22)
    at emitTwo (events.js:125:13)
    at ChildProcess.emit (events.js:213:7)
    at Process.ChildProcess._handle.onexit (internal/child_process.js:200:12)
 recordingVideoFailed: true }
Error: ffmpeg exited with code 1: Error initializing output stream 0:0 -- Error while opening encoder for output stream #0:0 - maybe incorrect parameters such as bit_rate, rate, width or height
Conversion failed!

    at ChildProcess.<anonymous> (/home/yuri/.cache/Cypress/3.1.4/Cypress/resources/app/packages/server/node_modules/fluent-ffmpeg/lib/processor.js:182:22)
    at emitTwo (events.js:125:13)
    at ChildProcess.emit (events.js:213:7)
    at Process.ChildProcess._handle.onexit (internal/child_process.js:200:12)
```

```
$ xrandr
Screen 0: minimum 8 x 8, current 1024 x 576, maximum 32767 x 32767
eDP1 connected primary 1024x576+0+0 (normal left inverted right x axis y axis) 290mm x 170mm
   1920x1080     60.00 +  59.93    40.00  
   1680x1050     59.88  
   1400x1050     59.98  
   1600x900      60.00    59.95    59.82  
   1280x1024     60.02  
   1400x900      59.96    59.88  
   1280x960      60.00  
   1368x768      60.00    59.88    59.85  
   1280x800      59.81    59.91  
   1280x720      59.86    60.00    59.74  
   1024x768      60.00  
   1024x576      60.00*   59.90    59.82  
   960x540       60.00    59.63    59.82  
   800x600       60.32    56.25  
   864x486       60.00    59.92    59.57  
   640x480       59.94  
   720x405       59.51    60.00    58.99  
   640x360       59.84    59.32    60.00  
DP1 disconnected (normal left inverted right x axis y axis)
HDMI1 disconnected (normal left inverted right x axis y axis)
HDMI2 disconnected (normal left inverted right x axis y axis)
VIRTUAL1 disconnected (normal left inverted right x axis y axis)
```

### Desired behavior:

<!-- A clear description of what you want to happen -->
Tests run.

And by the way, isn't it supposed to run all the tests even if it can't record the video?

### Steps to reproduce: (app code and test code)

<!-- Issues without reproducible steps will get closed. You can fork https://github.com/cypress-io/cypress-test-tiny repo, set up a failing test, then tell us the repo/branch to try. -->

Run the following test without GUI:

```js
describe('My First Test', function() {
  it('Visits the Kitchen Sink', function() {
    cy.wait(3000);   // or more to make it finish abnormally (prematurely)
    // low values still produce an error, but tests continue to run
  })
})
```

```
$ npx cypress run
```

If your screen resolution is greater than 1280x720. Otherwise:

```
$ xvfb-run -s '-screen 0 1280x720x24' npx cypress run
```

`electron` bug: [Screen dimensions are off by one pixel in offscreen mode](https://github.com/electron/electron/issues/21379).

### Workarounds

```
$ xvfb-run -s '-screen 0 1280x800x24' npx cypress run
```

Add `.outputOptions(""-vf pad=ceil(iw/2)*2:ceil(ih/2)*2"")` after the following [line][1]. Based on the following Stack Overflow [answer][2]. This fixes it for me.

Or probably `.videoFilter('pad=ceil(iw/2)*2:ceil(ih/2)*2')`.

[1]: https://github.com/cypress-io/cypress/blob/v3.1.5/packages/server/lib/video_capture.coffee#L75
[2]: https://stackoverflow.com/a/20848224/52499

### Versions

<!-- Cypress, operating system, browser -->
`cypress-3.1.4`, Arch Linux, Electron 59 (headless)",bug
410709384,supportFile does not work for symlinked paths,"### Current behavior:

When `supportFile` is pointing to a symlinked path we get the error ""Your supportFile is set to /whatever/support/index.js/index.js""
Where the ""index.js"" is repeated

### Desired behavior:

`supportFile` should support symlinked paths

### Steps to reproduce: (app code and test code)

- Create the structure ""foo/support/index.js""
- Create the a symlink ""bar"" linking to ""foo""
- Set cypress `supportFile` configuration to ""bar/support/index.js""
- Observe the error

### Versions

Cypress 3.1.5
Node 11.6.0
Linux Ubuntu 18.04

### Additional info
The cause of the problem is https://github.com/cypress-io/cypress/blob/ce3ab55f72527374cfa2a1b942dffedb5d1a232f/packages/server/lib/config.coffee#L367

It assume `sf` is a path and does not contain the filename.

But that is incorrect. `sf` is resolved to the full path, including `index.js`.

The line should probably become `obj.supportFile = path.join(path.dirname(sf), path.basename(obj.supportFile))`",bug
410648332,Non english characters (Korean) encoding is broken,"![cypress-screenshot](https://user-images.githubusercontent.com/3258867/52840970-4365f700-313e-11e9-9a30-d9588114c71c.png)
Hello. My cypress test is works very well in local. But on the CircleCI, all of non english characters(Korean, hangul, 한글) are broke out. So I change browser from electron to chrome69 browser but it was broke out again. Is this issue caused by the CircleCI machine? or Cypress Orb browser? Thanks.",bug
410116596,Blank page/not fully loaded application when X-Frame-Options headers present.,"### Current behavior: 
When i use cy.visit(URL) getting blank page in preview pane, but application loads fine in browser tab

<!-- images, stack traces, etc -->
![image](https://user-images.githubusercontent.com/19710438/52761949-1fd66b80-2fdb-11e9-9afe-d0b947813e59.png)


### Desired behavior: 

Expect app to load in preview
",bug
409987585,Cypress restarting during test,"### Current behavior:
When running a specific test in our Jenkins docker container Cypress restarts a specific test as if it the underlying file has been changed. This observation is based solely on the video, and seeing the test restart with different data generation.

The test eventually fails because a request to the API to set the scenario up returns an error - the amount of time that Cypress spends restarting this test is random and has been as high as 20 minutes. Clearly the error from the API is concerning (it's probably a bug) but it does at least force this test to not take an eternity.

Below archive file contains the full log from running Cypress in Jenkins, the video of the specific test that fails and some elements of the test code in a single file to give some context about the specific actions that are taking place.

[cypress-restarting-during-test.zip](https://github.com/cypress-io/cypress/files/2861965/cypress-restarting-during-test.zip)

### Desired behavior:
I'm expecting the test to complete, either in a pass or fail result. The continual restarting is very surprising and unexpected.

### Steps to reproduce:
I understand that issues without repro steps are harder to justify spending any time on. I'm unsure how to even reproduce this - I cannot trigger this behaviour locally in either Chrome or Electron.

### Versions:
Cypress 3.1.5
Docker Container: Ubuntu 18.04
Electron 59
Chrome 71",bug
409236562,Cookies set by http response are getting overwritten with a previous value,"### Current behavior:

I am writing a test where I sign in with one user, logout and then sign in with another user. This endpoint drops a `userId` cookie. When I sign in as the second user the cookie seems to only be set on '/' and not '/events'.

When I try logging out debug cookies it looks like it gets set with the second user but then reset with the previous cookie.

Cookie debug logs for test below. (I've changed our ids for the example ones in the test - the domains are all the same.)

<img width=""881"" alt=""cypress-cookie-setting-issue"" src=""https://user-images.githubusercontent.com/4683717/52629675-274e2580-2eb2-11e9-8ec1-e319bb629c14.png"">


### Desired behavior:

When I sign in with a second user the previous cookie does not get set on other paths.

### Steps to reproduce: (app code and test code)

```js
 it('should test cookies', () => {
    // sign in with user-1
    cy.visit('/')
    cy.login('user1@example.com')
    cy.getCookie('userId')
      .its('value')
      .should('equal', 'userId1') // passes

    cy.visit('/events')
    cy.getCookie('userId')
      .its('value')
      .should('equal', 'userId1') // passes

    // logout
    cy.clearCookies()
    cy.visit('/')

    // sign in with user-2
    cy.login('user2@example.com')
    cy.getCookie('userId')
      .its('value')
      .should('equal', 'userId2') // passes

    cy.visit('/events')
    SelectEventsPage.verifyIsLoaded()
    cy.getCookie('userId')
      .its('value')
      .should('equal', 'userId2') // fails gets userId1 instead
  })

Cypress.Commands.add('login', (email, password = 'password') => {
  Cypress.log({
    name: 'login',
    message: 'Logging in via POST /api/login'
  })

  return cy.request({
    method: 'POST',
    url: '/api/login',
    headers: { ['X-Csrf-Prevention']: 'true' },
    body: { email, password }
  })
})
```

### Versions
Cypress: 3.1.5
Browser: Chrome 72
OS: macOS mojave
",bug
408946728,cy.wait() always gives a timeout error: No request ever occurred.,"### Current behavior:
I am just following he tutorial at your site and there is a part when `cy.wait('@alias')` is shown.

On the video it worked fine, However I always getting an error
```
CypressError: Timed out retrying: cy.wait() timed out waiting 5000ms for the 1st request to the route: 'create'. No request ever occurred.
```

I have tried it both in my project and in your completed tutorial project
The error is present in both cases.

[Here is an image](http://prntscr.com/mjqa6m)
[Request is going](http://prntscr.com/mjqbbr)

When I don't use `cy.wait()` it seems to work fine

Can you help me with this please?

### Desired behavior:

`cy.wai`t should for the request to resolve

### Versions

""cypress"": ""3.1.5"",
Google Chrome Version 71.0.3578.98",bug
408728187,Cypress can’t type the string ‘hasOwnProperty’ inside any field ,"### Current behavior:
When testing out forms with the Big List Of Naughty strings, cypress itself fails to type the string ‘hasOwnProperty’ 

### Desired behavior:
Cypress Should be able to type all strings 

### Steps to reproduce: (app code and test code)

```js
cy.get(‘input’).type(‘hasOwnProperty’); 
cy.get(‘textarea’).type(‘hasOwnProperty’);
```

Nothing happens, workaround: 

```js
cy.get(‘input’).type(‘h’).type(‘asOwnProperty’); 
```

### Versions
Chrome v68
Cypress v3.1.0
",bug
408568409,"File upload with DataTransfer loads file to input type file, but it's not an instance of File","### Steps to reproduce: (app code and test code)

1. Create the following HTML page 
```html
<!DOCTYPE html>
<html lang=""en"">
<head>
	<meta charset=""UTF-8"">
	<title>Document</title>
</head>
<body>
	<input type=""file"" id=""file"">
	<input type=""button"" id=""load"" value=""Load File"">
	<script>
		function addListener(element, eventName, handler) {
		  if (element.addEventListener) {
		    element.addEventListener(eventName, handler, false);
		  }
		  else if (element.attachEvent) {
		    element.attachEvent('on' + eventName, handler);
		  }
		  else {
		    element['on' + eventName] = handler;
		  }
		}

		addListener(document.getElementById('file'), 'change', function() {
			console.log(this.files[0] instanceof File);
		});


		addListener(document.getElementById('load'), 'click', function() {
			var file = new File(['content'], 'sample1.txt', {type: ""text/txt""});
        	var dataTransfer = new DataTransfer();
        	dataTransfer.items.add(file);

        	var fileInput = document.getElementById(""file"");
        	fileInput.files = dataTransfer.files;
        	console.log(fileInput.files[0] instanceof File);
    	});
	</script>
</body>
</html>
```
2. Add the test, that uploads a file to input (for simplifying sample I generate a file instead of using fixtures)
```js
/// <reference types=""Cypress"" />

context('Files', () => {
  beforeEach(() => {
    cy.visit('http://localhost:3000')
  })

  it('cy.readFile() - read a files contents', () => {
    cy.get(""input[type='file']"").then(subject => {
        const el = subject[0];
        const testFile = new File(['content'], 'sample1.txt');
        const dataTransfer = new DataTransfer();
        dataTransfer.items.add(testFile);
        el.files = dataTransfer.files;
        cy.log(el.files[0] instanceof File);
    });

     cy.get(""input[type='file']"").then(subject => {
        const el = subject[0];
        cy.log(el.files[0] instanceof File);
    });
  })
})
```
3. Run test, open browser console

### Current behavior:

`instanceof File` called from Cypress returns `true`
`instanceof File` called from input `onChange` event is `false`

![ar](https://user-images.githubusercontent.com/5682824/52538177-21ecc000-2d78-11e9-8c2a-7c13d626d834.png)


### Desired behavior:

`instanceof File` called from input `onChange` event should be `true`

### Versions

Cypress - 3.1.5,
Operating system - Ubuntu 18.04
Browser - Chrome 71, Electron 59

**Note:** `console.log(this.files[0])` will display `File` object, but in our project we're using Firebase tool, and it checks, that only File or Blob can be uploaded to storage

Full demo can be found in [https://github.com/vikmaksimenko/cypress_file_upload](url)",bug
408336684,type('{enter}') doesn't fire input event,"### Current behavior:

I'm trying to test an app with the ace editor ( https://ace.c9.io/ ), which uses a `textarea`, but I'm running into a problem:

```js
describe('textarea', () => {
  it('can type the enter key', () => {
    cy.visit('http://ace.c9.io/build/kitchen-sink.html');
    cy.get('#editor-container .ace_editor textarea').type('foo{enter}', {force: true});
  });
});

```

It types 'foo' but does not press the Enter key.

### Desired behavior:

Using `{enter}` in `type` should press the Enter key.

### Steps to reproduce: (app code and test code)

See above.

### Versions

3.1.5, Chrome 72, MacOS
",bug
408289443,Can't skip a test with a done() callback,"this currently fails:
```js
  it('can skip with done()', function (done) {
      this.skip()
  })
```

![image](https://user-images.githubusercontent.com/14625260/52500766-c28e8480-2bac-11e9-8031-20bbedc35da7.png)



https://mochajs.org/#inclusive-tests

![image](https://user-images.githubusercontent.com/14625260/52509418-0641b800-2bc6-11e9-83ae-c2c5aedd2178.png)
",bug
407436345,Chrome not shut down cleanly after plugin error,"### Current behavior:

Errors in plugins that result in Chrome being closed also result in the browser not being shutdown cleanly.

### Desired behavior:

If an error in a plugin results in the browser being closed, cypress should close it in a clean way.

### Steps to reproduce: (app code and test code)

1. Use the [TypeScript with WebPack](https://github.com/cypress-io/cypress-example-recipes/tree/master/examples/preprocessors__typescript-webpack) example from the example recipes
2. Start `cypress open` and select a spec file
3. Create a TypeScript compiler error in the spec file that results in cypress closing Chrome and showing the ""Error running plugin"" message.
4. Fix the spec and click ""Try Again"".
5. See screenshot.

![restore](https://user-images.githubusercontent.com/435418/52374602-9b5c7980-2a2b-11e9-9e2e-9659e5db2980.png)

### Versions

3.1.5, Windows 10",bug
407281652,"Test runs infinitely with combination of async error, 'fail' event, and done callback","### Current behavior:

Test will hang if there's an async error, use of the `fail` event to catch the failing test, and a `done` callback. Since the command resolves before the error is thrown, the `fail` event is not fired and the `done` never gets invoked.

This is primarily an internal issue since we use the `fail` event to test Cypress. can be seen in the [failing driver test](https://circleci.com/gh/cypress-io/cypress/57375#tests/containers/1) in [this PR](https://github.com/cypress-io/cypress/pull/3244). That test is using new and changed aspects of ~4.0~ 5.0, but it can reproduced in the current version of Cypress using the steps below.

### Desired behavior:

The `fail` event should be fired, which will allow the test to finish.

### Steps to reproduce: (app code and test code)

```html
// visit_error.html
<!DOCTYPE html>
<html>
  <script>
    setTimeout(() => {
      foo.bar()
    })
  </script>
</body>
</html>
```

```js
// spec
it('tests visit error', (done) => {
  cy.on('fail', () => {
    done()
  })

  cy.visit('/visit_error.html')
})
```

### Versions

Cypress 3.1.5
Chrome 71
MacOS 10.14.2
",bug
407206121,Exceptions in after() don't show up in UI,"<!-- Is this a question? Don't open an issue. Ask in our chat https://gitter.im/cypress-io/cypress-->
### Current behavior
If after() is defined in root level (not in **describe** and not in **it**) and an error is thrown then the UI does not show the Error.
* tests **do** fail from CLI.
* probably related to: https://github.com/cypress-io/cypress/issues/2296
<!-- images, stack traces, etc -->

### Desired behavior
UI should show Exceptions thrown in after

### To reproduce 
See (there are 4 specs showing _weird_ behavior): 
https://github.com/danielschwartz85/after-error-not-shown

### Versions

Cypress 3.1.5
Ubuntu 18.04.1

Tnx.
",bug
406628320,Inconsistent beforeEach behavior when 'Run all specs' executed.,"### Current behavior:

As one of `cycpress-cucumber-preprocessor` plugin users found out:
https://github.com/TheBrainFamily/cypress-cucumber-preprocessor/issues/139

the `beforeEach` defined in one file runs for every test. 

Having one file:

```javascript
beforeEach(() => {
  cy.log(""This should run only before the first one"");
});

describe(""abcd"", () => {
  it(""dfsdfs"", () => {});
});
```

and another:

```javascript
beforeEach(() => {
  cy.log(""This should run only before the second one"");
});

describe(""abc"", () => {
  it(""dfsdf"", () => {});
});
```

I would expect them to stick to their unique `beforeEach`es, and that's how it works when running them separately, and when running them together using `cypress run`. With `cypress open` and the ""run all specs"" function - they both run both `beforeEach`es.


### Desired behavior:
Consistency between runing specs separately and all together.

### Steps to reproduce: (app code and test code)

reproduction here: https://github.com/TheBrainFamily/cypress-cucumber-example/tree/beforeEach 


### Versions
as in the repro - I used macos",bug
406418989,cy.type does not fire events for modifier keys,"Currently, using a modifier key (ctrl, shift, etc) with `cy.type` only sets the property on subsequent type/click events. For example, `cy.get('body').type('{ctrl}a')` will only fire keyup/keydown/events for the `a` with `ctrlKey: true`. 

It should also fire those events for the control key itself. This means `cy.get('body').type('{ctrl}')` essentially does nothing.

We should fire the appropriate events, so the events fired for `{ctrl}a` look something like:

```
keydown ctrl
keydown a
keyup a
keyup ctrl
```

See the [related conversation here](https://github.com/cypress-io/cypress/issues/486#issuecomment-460287614) for more context.",bug
406393058,document.write does nothing on TravisCI in one particular example,"## Bug

Cypress 3.1.5 on TravisCI

The example https://github.com/cypress-io/cypress-example-recipes/tree/master/examples/blogs__codepen-demo passes locally and on CircleCI but always times out on TravisCI like in https://travis-ci.org/cypress-io/cypress-example-recipes/jobs/488553504

- https://dashboard.cypress.io/#/projects/6p53jw/runs/31718/specs

<img width=""1268"" alt=""screen shot 2019-02-04 at 10 44 14 am"" src=""https://user-images.githubusercontent.com/2212006/52219511-c8adf980-286a-11e9-8ec0-298a8da6c20f.png"">

<img width=""1192"" alt=""screen shot 2019-02-04 at 10 44 54 am"" src=""https://user-images.githubusercontent.com/2212006/52219521-cc418080-286a-11e9-8983-5752a97cf335.png"">

## Details

See more details in https://github.com/cypress-io/cypress-example-recipes/issues/217

## Interesting: 

The same recipe was always failing on Travis and on Circle in Cypress 3.1.4 but now is passing on Circle with Cypress 3.1.5

",bug
406343061,Cypress Dashboard - Clicking on the screenshot icon returns an error message.,"### Preconditions:

- Set up the Dashboard.
- Complete a test run without any failures.
- Navigate to the details of the related test run on the Dashboard.

### Current behavior:

After clicking on the **blurred Screenshot icon**, the related test step disappears and the user gets the following error.

**Note:** Refreshing the page brings back the missing test step.

![ss01](https://user-images.githubusercontent.com/42968830/52211351-ef2f5d00-2889-11e9-80f5-bc161a8da8ce.png)

### Desired behavior:

When there are no screenshots available, the user shouldn't be able to click on the **blurred Screenshot icon**, since there isn't anything to display.

### Steps to reproduce: (app code and test code)

1) From the related test run, scroll down to **Specs** section.
2) Click on any test step's **blurred screenshot icon** (between the Output and the Video icons).
3) Observe that the related test step disappears and the error message is displayed.

### Console output:

```
TypeError: Cannot create property 'initialLayout' on boolean 'false'
    at Object.<anonymous> (photoswipe.js:2967)
    at M (photoswipe.js:435)
    at Object.init (photoswipe.js:907)
    at t.<anonymous> (PhotoSwipe.js:228)
    at nn (react-dom.production.min.js:128)
    at an (react-dom.production.min.js:128)
    at kr (react-dom.production.min.js:229)
    at Er (react-dom.production.min.js:220)
    at vr (react-dom.production.min.js:219)
    at Sr (react-dom.production.min.js:231)
    at oa (react-dom.production.min.js:85)
    at HTMLDocument.n (index.js:3114)`

TypeError: Cannot read property 'x' of undefined
    at B (photoswipe.js:511)
    at ea (photoswipe.js:2567)
    at Object.close (photoswipe.js:993)
    at t.closePhotoSwipe (PhotoSwipe.js:247)
    at t.componentWillUnmount (PhotoSwipe.js:197)
    at Wn (react-dom.production.min.js:182)
    at Kn (react-dom.production.min.js:187)
    at kr (react-dom.production.min.js:226)
    at Er (react-dom.production.min.js:220)
    at vr (react-dom.production.min.js:219)
    at Sr (react-dom.production.min.js:231)
    at oa (react-dom.production.min.js:85)
    at HTMLDocument.n (index.js:3114)
```

### Versions

**OS:** Mac OS 10.14.2
**Browser:** Google Chrome 71.0.3578.98 (64-bit), Firefox 65.0 (64-bit)
**Cypress Version:** 3.1.4

**Notes:** Please see the attached screenshots for more information.

![ss02](https://user-images.githubusercontent.com/42968830/52212005-b6908300-288b-11e9-9b5e-ca1d28b1dc03.png)

![ss03](https://user-images.githubusercontent.com/42968830/52212017-c0b28180-288b-11e9-97a1-f4863b7a0fe7.png)",bug
405365591,Possibly wrong match on topOrParentLocationOrFramesRe regexp,"### Current behavior:

Currently, having `modifyObstructiveCode` enabled didn't get a specific framebust situation:

```js
top.location!=self.location&&(top.location.href=self.location.href)
``` 

After researching over the code base I could identify the regexp used on `topOrParentLocationOrFramesRe` possibly isn't getting correctly the first group match, as you can see: (https://regex101.com/r/o0ykmR/1)

### Desired behavior:

I'd like to be able to block the given framebust.

### Steps to reproduce: (app code and test code)

The regexp on `topOrParentLocationOrFramesRe` gets an extra character as you see [here](https://regex101.com/r/o0ykmR/1?fbclid=IwAR22dyGMK9og5b3Fs37RJ4BEGUho4JOk4A4D3QDJv68_8REFGzLkv78cFF0)

Possibly the easiest fix I'd suggest could be:
https://regex101.com/r/Ophqrr/2

### Versions

Cypress: v3.1.5
Windows 11
Chrome: 71.x
",bug
404872371,Chrome 72 - Scrollbar for Test Runner aligns with AUT instead of Command Log,"### Current behavior:

From @fr0 after using workaround for Chrome 72 proxy issue: https://github.com/cypress-io/cypress/issues/3252#issuecomment-459014297

>if the test log gets too long, the scrollbar appears for the entire page instead of just the test log. This has the weird side effect of scrolling my app off the screen, and then when cypress tries to scroll an element in view, it seems like it's fighting with myself.

**With Electron / Chrome 70**
![electron](https://user-images.githubusercontent.com/435418/51997054-fcaca780-2483-11e9-8b5f-594b94f5673b.png)

**With Chrome 72/73 + workaround:**

![chrome](https://user-images.githubusercontent.com/435418/51997066-01715b80-2484-11e9-9ea6-a2afcb5d9bde.png)


### Desired behavior:

Scrollbar should align with Command Lo

### Steps to reproduce: (app code and test code)

1. Write tests with over 100+ commands
2. Run tests in Chrome 72+
3. Add [workaround code to plugins](https://github.com/cypress-io/cypress/issues/1872#issuecomment-450807452).

### Versions

3.1.4+
",bug
404761283,"Cypress ""blockHosts"" does not ignore host when visiting 2 unique domains","### Is this a Feature or Bug?

Bug

### Current behavior:

Adding `*.algolia.net` (I tried different formulation too) into `""blacklistHosts"" : []` will still result in line `cypress:server:server HTTPS request https://%7Balgolia_application_id%7D-dsn.algolia.net:443 matches blacklist? undefined +1ms`.

```
cypress:server:server Got CONNECT request from %7Balgolia_application_id%7D-dsn.algolia.net:443 +2ms
  cypress:https-proxy Writing socket connection headers for URL: %7Balgolia_application_id%7D-dsn.algolia.net:443 +378ms
  cypress:server:cors Parsed URL { port: '443', tld: '', domain: '' } +4ms
  cypress:server:server HTTPS request does not match URL: https://%7Balgolia_application_id%7D-dsn.algolia.net:443 with props: { port: '9011', tld: '127.0.0.1', domain: '' } +0ms
  cypress:server:server HTTPS request https://%7Balgolia_application_id%7D-dsn.algolia.net:443 matches blacklist? undefined +1ms
  cypress:https-proxy Making direct connection to %7Balgolia_application_id%7D-dsn.algolia.net:443 +5ms
  cypress:server:file get values from /home/rasto/.config/Cypress/cy/production/cache +9ms
  cypress:server:file attempt to get lock on /home/rasto/.config/Cypress/cy/production/cache +0ms
  cypress:server:proxy received response for { url: 'http://127.0.0.1:9002/api/index/promoted-facilities', headers: { 'x-robots-tag': 'noindex', 'access-control-allow-origin': '', 'access-control-allow-credentials': '', 'access-control-allow-methods': '', 'access-control-allow-headers': '', 'access-control-expose-headers': '', 'content-type': 'application/json; charset=utf-8', 'content-length': '32', date: 'Wed, 30 Jan 2019 12:37:00 GMT', connection: 'close' }, statusCode: 200, isGzipped: undefined, wantsInjection: false, wantsSecurityRemoved: false } +2ms
GET /api/index/promoted-facilities 200 32.515 ms - -
  cypress:server:file gettin lock succeeded or failed for /home/rasto/.config/Cypress/cy/production/cache +3ms
  cypress:server:file read /home/rasto/.config/Cypress/cy/production/cache +0ms
  cypress:server:file read succeeded or failed for /home/rasto/.config/Cypress/cy/production/cache +0ms
  cypress:server:file attempt to unlock /home/rasto/.config/Cypress/cy/production/cache +1ms
  cypress:server:timers queuing timer id 84 after 2000 ms +0ms
  cypress:server:timers clearing timer id 84 from queue { '7': { args: [], ms: 2500, cb: [Function: cb] }, '55': { args: [], ms: 85000, cb: [Function] }, '56': { args: [], ms: 60000, cb: [Function: timeoutTimeout] }, '84': { args: [], ms: 2000, cb: [Function: timeoutTimeout] } } +0ms
  cypress:server:file unlock succeeded or failed for /home/rasto/.config/Cypress/cy/production/cache +0ms
  cypress:server:timers child received timer id 84 +23ms
  cypress:server:api request to url: POST https://api.cypress.io/exceptions with params: {""body"":{""err"":{""name"":""TypeError"",""message"":""\""port\"" option should be a number or string: function () {\n        socket.pipe(conn);\n        conn.pipe(socket);\n        socket.emit(\""data\"", head);\n        return socket.resume();\n      }"",""stack"":""TypeError: \""port\"" option should be a number or string: function () {\n        socket.pipe(conn);\n        conn.pipe(socket);\n        socket.emit(\""data\"", head);\n        return socket.resume();\n      }\n    at lookupAndConnect (net.js:1019:13)\n    at Socket.connect (net.js:995:5)\n    at Object.connect (net.js:108:35)\n    at Server._makeConnection (<stripped-path>server.js:109:26)\n    at Server._makeDirectConnection (<stripped-path>server.js:95:19)\n    at Server.connect (<stripped-path>server.js:59:25)\n    at Socket.<anonymous> (<stripped-path>server.js:46:26)\n    at Object.onceWrapper (events.js:316:30)\n    at emitOne (events.js:115:13)\n    at Socket.emit (events.js:210:7)\n    at addChunk (_stream_readable.js:252:12)\n    at readableAddChunk (_stream_readable.js:239:11)\n    at Socket.Readable.push (_stream_readable.js:197:10)\n    at TCP.onread (net.js:589:20)\n""},""version"":""3.1.4"",""osName"":""linux"",""osVersion"":""Arch Linux - "",""osCpus"":[{""model"":""Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz"",""speed"":1034,""times"":{""user"":64062700,""nice"":1949300,""sys"":23324900,""idle"":218176300,""irq"":3361500}},{""model"":""Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz"",""speed"":1074,""times"":{""user"":64656500,""nice"":1964100,""sys"":23417700,""idle"":114683700,""irq"":2280800}},{""model"":""Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz"",""speed"":1094,""times"":{""user"":65491000,""nice"":1982300,""sys"":23412100,""idle"":114960100,""irq"":2832600}},{""model"":""Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz"",""speed"":1078,""times"":{""user"":64894000,""nice"":1980900,""sys"":23275400,""idle"":115509200,""irq"":1830600}}],""osMemory"":{""free"":1750638592,""total"":12300214272}},""headers"":{""x-os-name"":""linux"",""x-cypress-version"":""3.1.4""}} +14ms
  cypress:server:timers queuing timer id 85 after 3000 ms +7ms
  cypress:server:timers child received timer id 85 +21ms
  cypress:server:timers clearing timer id 85 from queue { '7': { args: [], ms: 2500, cb: [Function: cb] }, '55': { args: [], ms: 85000, cb: [Function] }, '56': { args: [], ms: 60000, cb: [Function: timeoutTimeout] }, '85': { args: [], ms: 3000, cb: [Function: timeoutTimeout] } } +0ms
TypeError: ""port"" option should be a number or string: function () {
        socket.pipe(conn);
        conn.pipe(socket);
        socket.emit(""data"", head);
        return socket.resume();
      }
    at lookupAndConnect (net.js:1019:13)
    at Socket.connect (net.js:995:5)
    at Object.connect (net.js:108:35)
    at Server._makeConnection (/home/rasto/.cache/Cypress/3.1.4/Cypress/resources/app/packages/https-proxy/lib/server.js:109:26)
    at Server._makeDirectConnection (/home/rasto/.cache/Cypress/3.1.4/Cypress/resources/app/packages/https-proxy/lib/server.js:95:19)
    at Server.connect (/home/rasto/.cache/Cypress/3.1.4/Cypress/resources/app/packages/https-proxy/lib/server.js:59:25)
    at Socket.<anonymous> (/home/rasto/.cache/Cypress/3.1.4/Cypress/resources/app/packages/https-proxy/lib/server.js:46:26)
    at Object.onceWrapper (events.js:316:30)
    at emitOne (events.js:115:13)
    at Socket.emit (events.js:210:7)
    at addChunk (_stream_readable.js:252:12)
    at readableAddChunk (_stream_readable.js:239:11)
    at Socket.Readable.push (_stream_readable.js:197:10)
    at TCP.onread (net.js:589:20)

TypeError: ""port"" option should be a number or string: function () {
        socket.pipe(conn);
        conn.pipe(socket);
        socket.emit(""data"", head);
        return socket.resume();
      }
    at lookupAndConnect (net.js:1019:13)
    at Socket.connect (net.js:995:5)
    at Object.connect (net.js:108:35)
    at Server._makeConnection (/home/rasto/.cache/Cypress/3.1.4/Cypress/resources/app/packages/https-proxy/lib/server.js:109:26)
    at Server._makeDirectConnection (/home/rasto/.cache/Cypress/3.1.4/Cypress/resources/app/packages/https-proxy/lib/server.js:95:19)
    at Server.connect (/home/rasto/.cache/Cypress/3.1.4/Cypress/resources/app/packages/https-proxy/lib/server.js:59:25)
    at Socket.<anonymous> (/home/rasto/.cache/Cypress/3.1.4/Cypress/resources/app/packages/https-proxy/lib/server.js:46:26)
    at Object.onceWrapper (events.js:316:30)
    at emitOne (events.js:115:13)
    at Socket.emit (events.js:210:7)
    at addChunk (_stream_readable.js:252:12)
    at readableAddChunk (_stream_readable.js:239:11)
    at Socket.Readable.push (_stream_readable.js:197:10)
    at TCP.onread (net.js:589:20)

  cypress:server:browsers killing browser process +14ms
```

### Desired behavior:

`cypress:server:server HTTPS request https://%7Balgolia_application_id%7D-dsn.algolia.net:443 matches blacklist? undefined +1ms` should be matched in blacklist


### Steps to reproduce: (app code and test code)

test code:
```js
describe('Multi-domain test', () =>{
  describe('Auth login', () => {
    it('login', () => {
      cy.visit('http://127.0.0.1:9011/')

      cy.get('input[name=""email""]').type('e@mail.com')
      cy.get('input[name=""password""]').type('password')
      cy.get('[type=""submit""]').click()
    })
  })
  describe('Visit different app', () => {
    it('go do smhting', () => {
      cy.visit('http://127.0.0.1:9002/')
    })
  })
})
```

App code:
```
Cant provide right now ...
```

cypress.json:
```json
{
     . . . some settings here . . . 

  ""blacklistHosts"": [
    ""*.algolia.net""
  ]
}
```

### Versions

Cypress 3.1.4 , arch linux
",bug
404758188,"Cypress app crash: ""port"" option should be a number or string ","### Current behavior:

After login into one app, it redirects to different, when `CONNECT request from %7Balgolia_application_id%7D-dsn.algolia.net:443 ` occurs, it crashes cypress.

```
cypress:server:server Got CONNECT request from %7Balgolia_application_id%7D-dsn.algolia.net:443 +2ms
  cypress:https-proxy Writing socket connection headers for URL: %7Balgolia_application_id%7D-dsn.algolia.net:443 +378ms
  cypress:server:cors Parsed URL { port: '443', tld: '', domain: '' } +4ms
  cypress:server:server HTTPS request does not match URL: https://%7Balgolia_application_id%7D-dsn.algolia.net:443 with props: { port: '9011', tld: '127.0.0.1', domain: '' } +0ms
  cypress:server:server HTTPS request https://%7Balgolia_application_id%7D-dsn.algolia.net:443 matches blacklist? undefined +1ms
  cypress:https-proxy Making direct connection to %7Balgolia_application_id%7D-dsn.algolia.net:443 +5ms
  cypress:server:file get values from /home/rasto/.config/Cypress/cy/production/cache +9ms
  cypress:server:file attempt to get lock on /home/rasto/.config/Cypress/cy/production/cache +0ms
  cypress:server:proxy received response for { url: 'http://127.0.0.1:9002/api/index/promoted-facilities', headers: { 'x-robots-tag': 'noindex', 'access-control-allow-origin': '', 'access-control-allow-credentials': '', 'access-control-allow-methods': '', 'access-control-allow-headers': '', 'access-control-expose-headers': '', 'content-type': 'application/json; charset=utf-8', 'content-length': '32', date: 'Wed, 30 Jan 2019 12:37:00 GMT', connection: 'close' }, statusCode: 200, isGzipped: undefined, wantsInjection: false, wantsSecurityRemoved: false } +2ms
GET /api/index/promoted-facilities 200 32.515 ms - -
  cypress:server:file gettin lock succeeded or failed for /home/rasto/.config/Cypress/cy/production/cache +3ms
  cypress:server:file read /home/rasto/.config/Cypress/cy/production/cache +0ms
  cypress:server:file read succeeded or failed for /home/rasto/.config/Cypress/cy/production/cache +0ms
  cypress:server:file attempt to unlock /home/rasto/.config/Cypress/cy/production/cache +1ms
  cypress:server:timers queuing timer id 84 after 2000 ms +0ms
  cypress:server:timers clearing timer id 84 from queue { '7': { args: [], ms: 2500, cb: [Function: cb] }, '55': { args: [], ms: 85000, cb: [Function] }, '56': { args: [], ms: 60000, cb: [Function: timeoutTimeout] }, '84': { args: [], ms: 2000, cb: [Function: timeoutTimeout] } } +0ms
  cypress:server:file unlock succeeded or failed for /home/rasto/.config/Cypress/cy/production/cache +0ms
  cypress:server:timers child received timer id 84 +23ms
  cypress:server:api request to url: POST https://api.cypress.io/exceptions with params: {""body"":{""err"":{""name"":""TypeError"",""message"":""\""port\"" option should be a number or string: function () {\n        socket.pipe(conn);\n        conn.pipe(socket);\n        socket.emit(\""data\"", head);\n        return socket.resume();\n      }"",""stack"":""TypeError: \""port\"" option should be a number or string: function () {\n        socket.pipe(conn);\n        conn.pipe(socket);\n        socket.emit(\""data\"", head);\n        return socket.resume();\n      }\n    at lookupAndConnect (net.js:1019:13)\n    at Socket.connect (net.js:995:5)\n    at Object.connect (net.js:108:35)\n    at Server._makeConnection (<stripped-path>server.js:109:26)\n    at Server._makeDirectConnection (<stripped-path>server.js:95:19)\n    at Server.connect (<stripped-path>server.js:59:25)\n    at Socket.<anonymous> (<stripped-path>server.js:46:26)\n    at Object.onceWrapper (events.js:316:30)\n    at emitOne (events.js:115:13)\n    at Socket.emit (events.js:210:7)\n    at addChunk (_stream_readable.js:252:12)\n    at readableAddChunk (_stream_readable.js:239:11)\n    at Socket.Readable.push (_stream_readable.js:197:10)\n    at TCP.onread (net.js:589:20)\n""},""version"":""3.1.4"",""osName"":""linux"",""osVersion"":""Arch Linux - "",""osCpus"":[{""model"":""Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz"",""speed"":1034,""times"":{""user"":64062700,""nice"":1949300,""sys"":23324900,""idle"":218176300,""irq"":3361500}},{""model"":""Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz"",""speed"":1074,""times"":{""user"":64656500,""nice"":1964100,""sys"":23417700,""idle"":114683700,""irq"":2280800}},{""model"":""Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz"",""speed"":1094,""times"":{""user"":65491000,""nice"":1982300,""sys"":23412100,""idle"":114960100,""irq"":2832600}},{""model"":""Intel(R) Core(TM) i3-6100U CPU @ 2.30GHz"",""speed"":1078,""times"":{""user"":64894000,""nice"":1980900,""sys"":23275400,""idle"":115509200,""irq"":1830600}}],""osMemory"":{""free"":1750638592,""total"":12300214272}},""headers"":{""x-os-name"":""linux"",""x-cypress-version"":""3.1.4""}} +14ms
  cypress:server:timers queuing timer id 85 after 3000 ms +7ms
  cypress:server:timers child received timer id 85 +21ms
  cypress:server:timers clearing timer id 85 from queue { '7': { args: [], ms: 2500, cb: [Function: cb] }, '55': { args: [], ms: 85000, cb: [Function] }, '56': { args: [], ms: 60000, cb: [Function: timeoutTimeout] }, '85': { args: [], ms: 3000, cb: [Function: timeoutTimeout] } } +0ms
TypeError: ""port"" option should be a number or string: function () {
        socket.pipe(conn);
        conn.pipe(socket);
        socket.emit(""data"", head);
        return socket.resume();
      }
    at lookupAndConnect (net.js:1019:13)
    at Socket.connect (net.js:995:5)
    at Object.connect (net.js:108:35)
    at Server._makeConnection (/home/rasto/.cache/Cypress/3.1.4/Cypress/resources/app/packages/https-proxy/lib/server.js:109:26)
    at Server._makeDirectConnection (/home/rasto/.cache/Cypress/3.1.4/Cypress/resources/app/packages/https-proxy/lib/server.js:95:19)
    at Server.connect (/home/rasto/.cache/Cypress/3.1.4/Cypress/resources/app/packages/https-proxy/lib/server.js:59:25)
    at Socket.<anonymous> (/home/rasto/.cache/Cypress/3.1.4/Cypress/resources/app/packages/https-proxy/lib/server.js:46:26)
    at Object.onceWrapper (events.js:316:30)
    at emitOne (events.js:115:13)
    at Socket.emit (events.js:210:7)
    at addChunk (_stream_readable.js:252:12)
    at readableAddChunk (_stream_readable.js:239:11)
    at Socket.Readable.push (_stream_readable.js:197:10)
    at TCP.onread (net.js:589:20)

TypeError: ""port"" option should be a number or string: function () {
        socket.pipe(conn);
        conn.pipe(socket);
        socket.emit(""data"", head);
        return socket.resume();
      }
    at lookupAndConnect (net.js:1019:13)
    at Socket.connect (net.js:995:5)
    at Object.connect (net.js:108:35)
    at Server._makeConnection (/home/rasto/.cache/Cypress/3.1.4/Cypress/resources/app/packages/https-proxy/lib/server.js:109:26)
    at Server._makeDirectConnection (/home/rasto/.cache/Cypress/3.1.4/Cypress/resources/app/packages/https-proxy/lib/server.js:95:19)
    at Server.connect (/home/rasto/.cache/Cypress/3.1.4/Cypress/resources/app/packages/https-proxy/lib/server.js:59:25)
    at Socket.<anonymous> (/home/rasto/.cache/Cypress/3.1.4/Cypress/resources/app/packages/https-proxy/lib/server.js:46:26)
    at Object.onceWrapper (events.js:316:30)
    at emitOne (events.js:115:13)
    at Socket.emit (events.js:210:7)
    at addChunk (_stream_readable.js:252:12)
    at readableAddChunk (_stream_readable.js:239:11)
    at Socket.Readable.push (_stream_readable.js:197:10)
    at TCP.onread (net.js:589:20)

  cypress:server:browsers killing browser process +14ms
```

### Desired behavior:

Should not crash cypress

### Steps to reproduce: (app code and test code)

test code:
```js
describe('Multi-domain test', () =>{
describe('Auth login', () => {
    it('login', () => {
      cy.visit('http://127.0.0.1:9011/')

      cy.get('input[name=""email""]').type('e@mail.com')
      cy.get('input[name=""password""]').type('password')
      cy.get('[type=""submit""]').click()
    })
  })
describe('Visit different app', () => {
    it('go do smhting', () => {
      cy.visit('http://127.0.0.1:9002/')
    })
  })
})
```

App code:
```
Cant provide right now ...
```

It is fixed if i add `if(port === null){port = 443}` on line 100 of `~/.cache/Cypress/3.1.4/Cypress/resources/app/packages/https-proxy/lib/server.js`

I am using `""chromeWebSecurity"": false`, I do not want to use request for login ...

### Versions

Cypress 3.1.4 , arch linux
",bug
404015730,cy.wrap(undefined).should does not retry,"```
cy.wrap(undefined).should('eq', true)
```

should timeout the same way that `cy.wrap(null).should('eq', true)` does. Currently it will not retry, and only make the assertion once

this is due to us using [bluebird's `Promise.reduce`](http://bluebirdjs.com/docs/api/promise.reduce.html) under the hood to apply assertions, and it will not invoke a callback with `undefined`

![image](https://user-images.githubusercontent.com/14625260/51867627-f8647b00-2319-11e9-9d03-3d3c1823b877.png)
",bug
402359960,CSS `scroll-behavior: smooth;` on the `html` el breaks actionability,"<!-- Is this a question? Don't open an issue. Ask in our chat https://gitter.im/cypress-io/cypress-->

### Current behavior:
* Multiple tests when attempting to leverage the `.click()` and `.check()` methods with the following error:

> CypressError: Timed out retrying: cy.click() failed because the center of this element is hidden from view:

<!-- images, stack traces, etc -->

### Desired behavior:
* Ideally this CSS would not impact Cypress' ability to view elements appropriately
* Not a showstopper for our project as we can remove the styles and keep on trucking!

<!-- A clear description of what you want to happen -->

### Steps to reproduce: (app code and test code)
1. Add the following CSS:

```css
html {
  scroll-behavior: smooth;
}
```

1. Try running a Cypress test that leverages the `.click()` or `.check()` methods

<!-- Issues without reproducible steps will get closed. You can fork https://github.com/cypress-io/cypress-test-tiny repo, set up a failing test, then tell us the repo/branch to try. -->

### Versions
Cypress version 3.1.4, Mac OSX, Chrome

<!-- Cypress, operating system, browser -->

A huge thank you to all of the contributors on this project. It's a great great tool!

",bug
402109425,"Stubbing not working for 3xx redirect situations due to ""Location"" header","### Current behavior:

When ""Location"" header is stubbed (common case for 301 and 302 redirects), cypress actually does not set stubbed response status code and header.

```js
cy.route({
    method: 'GET',
    url: '**/profile',
    response: '',
    status: 302,
    headers: {
        'Location': '/web/redirect/target'
  }
})
```

While Chrome devtools network tab shows response status as it was stubbed, application under test and Cypress itself interprets response with status code 200 and without ""Location"" header.
![See image](https://user-images.githubusercontent.com/8039755/51594260-b2b04880-1efc-11e9-9b3e-eee0c2597f90.png)

Same works with any other header I tried. Wild guess is that ""Location"" header is internally messing with Cypress' own `cy.location()` method or `window.location`.

### Desired behavior:

Response should have 302 status code and ""Location"" header.

### Versions
Cypress 3.1.3,
MacOS 10.14.2
Chrome 71
",bug
401925422,"trigger('mousemove', ...) yields undefined values for screenX and screenY in event handler","### Current behavior:

Triggering `mousemove` via `.trigger` correctly fills in `pageX`, `pageY`, `clientX`, and `clientY`. However, Cypress fails to fill in the `screenX` and `screenY` values.
This can cause erroneous behavior if the application depends on them.

### Desired behavior:

`screenX` and `screenY` should probably just have the same values as `clientX` and `clientY`.

### Versions

3.1.4
",bug
401713478,GitLab CI fails on cy.visit(),"### Current behavior:

On opening tests in GitLab's CI, Cypress will fail the `beforeAll()` hook on its `cy.visit()`-command with a 404 error. This only seems to happen if the visit-url isn't `/`. For example this will work fine and will properly navigate to `/`:

```js
beforeEach(() => {
  // I work
  cy.visit('/');
});
```

But this example crashes with a 404 error despite `/queues` being a valid URL. When `/` and `/queues` are put together in the same `beforeEach()`, the `cy.visit('/')`-command will properly go to the root, but the subsequent navigation to `/queues` will also still fail with a 404 error.

```js
beforeEach(() => {
  // I'll fail with a HTTP/404 error
  cy.visit('/queues');
});
```

![327efda2-1b9b-4cb4-8828-7831d4bbe7e5](https://user-images.githubusercontent.com/1693592/51525615-02294280-1e31-11e9-8588-ebdc727f703a.png)

However first navigating to `/` with `cy.visit()` and then using the UI to navigate to `/queues` by using `cy.click()` *does* work. But this is for obvious reasons an undesired workaround.

```js
beforeEach(() => {
  // I'm a workaround and I work too
  cy.visit('/');
  cy.get('#menu-queues').click({ force: true }); // Links to /queues
});
```

### Desired behavior:

Cypress is able to go to the page and does not fail regardless of it being the root or not and without navigation to the root and then click to navigate to the desired page.

### Steps to reproduce: (app code and test code)

Given that this is more of an issue with the CI and GitLab and I have no idea why this happens it is hard to provide a reproducable repo setup.

### Versions
Cypress 3.1.4
GitLab runner (Docker)",bug
400868014,Clone command options before passing into commands,"### Current behavior:

When commands receive options, it is the original object and not a clone. This has resulted in a few bugs (#2707, #365), and probably some more I couldn't quickly track down.

### Desired behavior:

This should be done before options are passed into commands so all commands receive options in the same frozen state.",bug
398664031,Cypress cy.visit redirects to HTML and is unable to load main.js  / Cypress UI lost,"### Is this a Feature or Bug?

Bug. Possibly in my configuration. I did post a question on gitter and was without answer. Also it seems that more context will be beneficial so using GitHub for it.

### Current behavior:

When running `npm run server` and then `npm run cypress` from https://github.com/ethernal/react-boilerplate and selecting `smoketest_homepage_spec.js` Cypress runs and redirects to the page with 'Hello World'. No JS is loaded so the App and styles are not loaded.

Also there is no Cypress UI/console (framebusting?).

Video (MP4) file in ZIP as MP4 are not supported.

[cypress-react-app-redirect-and-ui-lost-video.zip](https://github.com/cypress-io/cypress/files/2753165/cypress-react-app-redirect-and-ui-lost-video.zip)

When running localhost manually it loads OK (console tab)..
![cypress-browser-manually-run-localhost-console-tab png](https://user-images.githubusercontent.com/714658/51086554-76d0f280-1748-11e9-92e2-508da1737221.png)

..and Network tab:
![cypress-browser-manually-run-localhost-network-tab](https://user-images.githubusercontent.com/714658/51086555-76d0f280-1748-11e9-95f5-f79c25179d96.png)

When run by Cypress it cannot find the main.js served by WDS from memory:
![cypress-chrome-unable-to-find-main-js](https://user-images.githubusercontent.com/714658/51086556-76d0f280-1748-11e9-9305-da9611a69edc.png)

This is URL copied to Firefox:
![localhost-server-accessed-from-firefox](https://user-images.githubusercontent.com/714658/51086557-77698900-1748-11e9-9ce9-3ae40884648c.png)

Running Cypress in debug/log (localStorage.debug='cypress/*' in console) mode shows:

```
GET http://localhost:8080/__/main.js net::ERR_ABORTED
Navigated to http://localhost:61036/__/
VM47 cypress_runner.js:153927 Download the React DevTools for a better development experience: https://fb.me/react-devtools
VM47 cypress_runner.js:114815 Download the React DevTools for a better development experience: https://fb.me/react-devtools
VM47 cypress_runner.js:68763 Slow network is detected. Fallback font will be used while loading: http://localhost:61036/__cypress/runner/fonts/fontawesome-webfont.woff2?v=4.6.3
VM47 cypress_runner.js:163613 console.clear() was prevented due to 'Preserve log'
localhost/:13 GET http://localhost:8080/__/main.js net::ERR_ABORTED
Navigated to http://localhost:8080/__/
Navigated to http://localhost:61036/__/
VM57 cypress_runner.js:153927 Download the React DevTools for a better development experience: https://fb.me/react-devtools
VM57 cypress_runner.js:114815 Download the React DevTools for a better development experience: https://fb.me/react-devtools
VM57 cypress_runner.js:68763 Slow network is detected. Fallback font will be used while loading: http://localhost:61036/__cypress/runner/fonts/fontawesome-webfont.woff2?v=4.6.3
VM57 cypress_runner.js:163613 console.clear() was prevented due to 'Preserve log'
```

### Desired behavior:

Run a test and return fail/pass, see the Cypress UI. Tell me what I am doing wrong.

### Steps to reproduce: (app code and test code)

Clone latest commit from: https://github.com/ethernal/react-boilerplate

run:
`yarn install`
`npm run server`
`npm run cypress`

Select `smoketest_homepage_spec.js` test. It will show the HTML file without JS loaded.

### Versions

<!-- Cypress, operating system, browser -->

Cypress package version: 3.1.4
Cypress binary version: 3.1.4
Windows 10 1803 Enterprise
Browser: Version 64.0.3282.186 (Official Build) (64-bit)",bug
398138734,"Rerouting with target=""_parent"" causes ""Whoops, there is no test to run""","<!-- Is this a question? Don't open an issue. Ask in our chat https://gitter.im/cypress-io/cypress-->

### Current behavior:
test runner returns **Whoops, there is no test to run.** when clicking a link with selector: 
`'#sub-menu > ul > :nth-child(5) > a'`

### Desired behavior:

test passes after link is clicked.

### Steps to reproduce: (app code and test code)
app code
```html
<!DOCTYPE html>
<html lang=""en"">

<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <meta http-equiv=""X-UA-Compatible"" content=""ie=edge"">
    <title>Document</title>
</head>

<body>
    <nav class=""navbar navbar-default"" id=""navTopBar"" role=""navigation"">
        <div></div>
    </nav>
    <footer class=""footer"">
        <div class=""container-fluid"">
            <div class=""row"">
                <div class=""privacy-seal""></div>
                <nav id=""sub-menu"">
                    <ul>
                        <li><a href=""AboutUs.htm"" target=""_parent"">About Us</a></li>|
                        <li><a href=""faq.html"" target=""_parent"">FAQ</a></li>|
                        <li><a href=""ContactUs.htm"" target=""_parent"">Contact Us</a></li>|
                        <li><a href=""TermsConditions.htm"" target=""_parent"">Terms and Conditions</a></li>|
                        <li><a href=""PrivacyPolicy.htm"" target=""_parent"">Privacy Policy</a></li>
                    </ul>
                </nav>
            </div>
            <div class=""row copyright"">
                <span class=""h6-xs"">Copyright 2018.</span>
            </div>
            <div class=""social"">
                <ul class=""social-links"">
                    <li class=""facebook""><a href=""https://www.facebook.com"" target=""_blank"">Facebook</a></li>
                    <li class=""instagram""><a href=""https://www.instagram.com/"" target=""_blank"">Instagram</a></li>
                    <li class=""twitter""><a href=""https://twitter.com/"" target=""_blank"">Twitter</a></li>
                </ul>
            </div>
        </div>
    </footer>
</body>

</html>
```
test code
```javascript
        it('causes cypress to stop running tests', () => {
            cy.visit('nav-test.html')
            cy.title().should('eq', 'Document')
            cy.get('#sub-menu > ul > :nth-child(5) > a').should('contain', 'Privacy Policy')
            cy.get('#sub-menu > ul > :nth-child(5) > a').click()
            cy.url().should('include', 'PrivacyPolicy')
        })
```

<!-- Issues without reproducible steps will get closed. You can fork https://github.com/cypress-io/cypress-test-tiny repo, set up a failing test, then tell us the repo/branch to try. -->

### Versions

<!-- Cypress, operating system, browser -->
Mac OS - Mojave
Cypress v.3.1.4
 Google Chrome Version 71.0.3578.98 (Official Build) (64-bit)",bug
397129173,Wrong machine count in Cypress Dashboard,"### Current behavior:
Wrong machine count in Cypress Dashboard

<img width=""1792"" alt=""screenshot 2019-01-08 at 23 46 54"" src=""https://user-images.githubusercontent.com/574203/50863721-e721f180-139f-11e9-9721-35943bf08ef3.png"">


### Desired behavior:
Show correct machine count

### Steps to reproduce: (app code and test code)
Checkout test run https://dashboard.cypress.io/#/projects/87029743-0a51-4f4a-a7f3-4f92905b54ca/runs/7420/specs

### Versions
Cypress v3.1.4
",bug
397003597,"Cypress.spec is incorrect when running all specs, should contain actual current spec","### Current behavior:

The contents of `Cypress.spec` are incorrect when I click on ""Run all specs"".

It now contains:
```javascript
{
  absolute: ""__all"",
  name: ""All Specs"",
  relative: ""__all""
}
```

I use `Cypress.spec` in my [cypress-plugin-snapshots](https://github.com/meinaart/cypress-plugin-snapshots) plugin to determine snapshot filename. I found a very hard work around by using a preprocessor to store the latest processed file. But this breaks other stuff. It would be very useful if `Cypress.spec` would contain the actual current test.

### Desired behavior:

It should contain the details of the spec that is running. Even when you clicked on ""Run all specs"".

For example:
```javascript
{
  name: 'filter.spec.js',
  relative: 'cypress/integration/filter.spec.js',
  absolute: '/Users/janelane/Dev/web-app/cypress/integration/filter.spec.js',
}
```

### Steps to reproduce: (app code and test code)

Put code below in a Spec and see contents from `Cypress.spec` when running with ""Run all tests"" and by running test directly.

```javascript
console.log(Cypress.spec);
```

### Versions

All versions that have `Cypress.spec`.
",bug
396646435,"Whoops, there is no test to run error msg when visiting certain websites","Really weird crash - ""Whoops, there is no test to run""

Cypress 3.1.4 on Mac, spec file

```js
it('loads', () => {
  cy.visit(
    'https://stackoverflow.com/questions/379453/useful-add-ins-or-plug-ins-for-native-visual-studio-developer'
  )
})
```

See movie below

![stackoverflow](https://user-images.githubusercontent.com/2212006/50792895-7fcb4b00-1294-11e9-9dc2-393a315a604a.gif)

Sometimes I see the red error message in the command log, but could not record it yet, and it flashes way too quickly to see

Final screenshot

<img width=""1276"" alt=""screen shot 2019-01-07 at 3 55 12 pm"" src=""https://user-images.githubusercontent.com/2212006/50792999-c3be5000-1294-11e9-960a-c523c3442da2.png"">


",bug
393882325,backface-visibility: hidden doesn't hide elements from cypress,"### Current behavior:

`cy.contains()` is getting an element which isn't actually visible

### Desired behavior:

It should fail as the element isn't visible

### Steps to reproduce: (app code and test code)

https://codepen.io/desandro/pen/LmWoWe

On this pen, `cy.contains('back')` will pass even when it is hidden.

### Versions

Latest version, chrome",bug
391833630,click not firing pointer events,"
- [x] We should fire pointerdown + pointerup during a click at least

### browser support:

Feature | Chrome | Firefox (Gecko) | Internet Explorer | Opera | Safari (WebKit)
-- | -- | -- | -- | -- | --
Basic support | 55.0 | 59 (59) | 10 | 42 | No support

### All pointer events:
pointerover
pointerenter
pointerdown
pointermove
pointerup
pointercancel
pointerout
pointerleave
gotpointercapture
lostpointercapture

",bug
391241383,Cypress first time launch on windows 10 gives an error ,"cypress gives an error but appears to continue after some time
### Current behavior:
Launching with  `npx cypress open` gives following error:

```
Error: EPERM: operation not permitted, mkdir 'C:\Users\Jan'
TypeError: Cannot read property 'get' of undefined
    at errorHandler (C:\Program Files\nodejs\node_modules\npm\lib\utils\error-handler.js:205:18)
    at C:\Program Files\nodejs\node_modules\npm\bin\npm-cli.js:83:20
    at cb (C:\Program Files\nodejs\node_modules\npm\lib\npm.js:224:22)
    at C:\Program Files\nodejs\node_modules\npm\lib\npm.js:262:24
    at C:\Program Files\nodejs\node_modules\npm\lib\config\core.js:81:7
    at Array.forEach (<anonymous>)
    at C:\Program Files\nodejs\node_modules\npm\lib\config\core.js:80:13
    at f (C:\Program Files\nodejs\node_modules\npm\node_modules\once\once.js:25:25)
    at afterExtras (C:\Program Files\nodejs\node_modules\npm\lib\config\core.js:178:20)
    at C:\Program Files\nodejs\node_modules\npm\node_modules\mkdirp\index.js:47:53
    at C:\Program Files\nodejs\node_modules\npm\node_modules\graceful-fs\polyfills.js:284:29
    at FSReqWrap.oncomplete (fs.js:152:21)
C:\Program Files\nodejs\node_modules\npm\lib\utils\error-handler.js:205
  if (npm.config.get('json')) {
                 ^

TypeError: Cannot read property 'get' of undefined
    at process.errorHandler (C:\Program Files\nodejs\node_modules\npm\lib\utils\error-handler.js:205:18)
    at emitOne (events.js:116:13)
    at process.emit (events.js:211:7)
    at process._fatalException (bootstrap_node.js:374:26)
Install for prefix@latest failed with code 7
```

Cypress apparently fails to create a first time config file
### Desired behavior:

The environment variable `%userprofile%` contains spaces  `C:\Users\Jan de lint`
This should be put in quotes in windows scripts:

Could I try and create the config by hand so that this error is bypassed?
Removing the blanks from the windows home directory name requires a new windows installation
### Versions

Latest versions of windows 10 (1809) 64 bits, npm and cypress",bug
390395501,Dashboard should not show a video link if no video has been uploaded,"### Current behavior:

If you set `videoUploadOnPasses` to false, Cypress will not upload a video for successful tests. However, a video link is still shown in the dashboard for these tests and if you click it, you will get a page with the message `The media could not be loaded, either because the server or network failed or because the format is not supported`

### Desired behavior:

If no video was uploaded there should be no video link in the dashboard

### Steps to reproduce: (app code and test code)

Set the `videoUploadOnPasses` option to false and run a successful test. No video will be uploaded. Go to the dashboard and locate this test. It will have a link to play a video. If you click on the link you will get the message posted above

### Versions

Cypress 3.1.3

### images

This is what we see for a successful test. Notice the video button which can be clicked

![screen shot 2018-12-12 at 20 24 15](https://user-images.githubusercontent.com/1383106/49896679-046caa00-fe4c-11e8-9105-92ee64e085cd.png)

Then when the button is pressed, we get this:
![screen shot 2018-12-12 at 20 25 32](https://user-images.githubusercontent.com/1383106/49896710-1d755b00-fe4c-11e8-8586-cf1c017a40f0.png)
",bug
389493877,str.replace is not a function during cy.request(),"### Current behavior:

Upon `cy.request` with a seemingly valid header, following is the stack trace of the error.  Note that changing the header key ""content-type"" to ""ContentType"" makes the error go away.  

```
TypeError: str.replace is not a function
    at Querystring.rfc3986 (C:\Users\Brad Wood\AppData\Local\Cypress\Cache\3.1.3\Cypress\resources\app\packages\server\node_modules\request\lib\querystring.js:43:14)
    at Request.json (C:\Users\Brad Wood\AppData\Local\Cypress\Cache\3.1.3\Cypress\resources\app\packages\server\node_modules\request\request.js:1293:30)
    at Request.init (C:\Users\Brad Wood\AppData\Local\Cypress\Cache\3.1.3\Cypress\resources\app\packages\server\node_modules\request\request.js:406:10)
    at Request.RP$initInterceptor [as init] (C:\Users\Brad Wood\AppData\Local\Cypress\Cache\3.1.3\Cypress\resources\app\packages\server\node_modules\request-promise-core\configure\request2.js:45:29)
    at new Request (C:\Users\Brad Wood\AppData\Local\Cypress\Cache\3.1.3\Cypress\resources\app\packages\server\node_modules\request\request.js:127:8)
    at request (C:\Users\Brad Wood\AppData\Local\Cypress\Cache\3.1.3\Cypress\resources\app\packages\server\node_modules\request\index.js:53:10)
    at C:\Users\Brad Wood\AppData\Local\Cypress\Cache\3.1.3\Cypress\resources\app\packages\server\node_modules\request\index.js:100:12
    at Object.create (C:\Users\Brad Wood\AppData\Local\Cypress\Cache\3.1.3\Cypress\resources\app\packages\server\lib\request.js:170:18)
    at C:\Users\Brad Wood\AppData\Local\Cypress\Cache\3.1.3\Cypress\resources\app\packages\server\lib\request.js:364:26
    at tryCatcher (C:\Users\Brad Wood\AppData\Local\Cypress\Cache\3.1.3\Cypress\resources\app\packages\server\node_modules\bluebird\js\release\util.js:16:23)
    at Promise._settlePromiseFromHandler (C:\Users\Brad Wood\AppData\Local\Cypress\Cache\3.1.3\Cypress\resources\app\packages\server\node_modules\bluebird\js\release\promise.js:510:31)
    at Promise._settlePromise (C:\Users\Brad Wood\AppData\Local\Cypress\Cache\3.1.3\Cypress\resources\app\packages\server\node_modules\bluebird\js\release\promise.js:567:18)
    at Promise._settlePromise0 (C:\Users\Brad Wood\AppData\Local\Cypress\Cache\3.1.3\Cypress\resources\app\packages\server\node_modules\bluebird\js\release\promise.js:612:10)
    at Promise._settlePromises (C:\Users\Brad Wood\AppData\Local\Cypress\Cache\3.1.3\Cypress\resources\app\packages\server\node_modules\bluebird\js\release\promise.js:691:18)
    at Async._drainQueue (C:\Users\Brad Wood\AppData\Local\Cypress\Cache\3.1.3\Cypress\resources\app\packages\server\node_modules\bluebird\js\release\async.js:133:16)
    at Async._drainQueues (C:\Users\Brad Wood\AppData\Local\Cypress\Cache\3.1.3\Cypress\resources\app\packages\server\node_modules\bluebird\js\release\async.js:143:10)
    at Immediate.Async.drainQueues (C:\Users\Brad Wood\AppData\Local\Cypress\Cache\3.1.3\Cypress\resources\app\packages\server\node_modules\bluebird\js\release\async.js:17:14)
    at runCallback (timers.js:781:20)
    at tryOnImmediate (timers.js:743:5)
    at processImmediate [as _immediateCallback] (timers.js:714:5)
```

### Desired behavior:

Network call made.  I realize now that ""form"":true is the accepted method of setting that content type; still minor bug.

Create this options object:
```js
const options = {
  ""method"": ""POST"",
  ""url"": ""some valid url"",
  ""headers"": {
    ""Accept"": ""application/json"",
    ""content-type"": ""application/x-www-form-urlencoded""
  },
  ""body"": {
    ""scope"": ""my_scope""
  }
};

cy.request(options).then // ...
```

### Versions

3.1.3",bug
389272448,can't click on some rotated buttons,"<!-- Is this a question? Don't open an issue. Ask in our chat https://gitter.im/cypress-io/cypress-->

### Current behavior:
I have two buttons, basically the exact same, one rotated with `transform: rotate(90deg);` and one `-90deg`. Cypress can't click on the one with `-90deg` rotation, showing:
```
CypressError: Timed out retrying: cy.click() failed because the center of this element is hidden from view:

<button tabindex=""0"" class=""MuiButtonBase-root-74 MuiIconButton-root-68"" type=""button"" data-testid=""test-SettingsDialog/4/Handler 1/down"" style=""transform: rotate(-90deg);"">...</button>
```

The problem seems to be that the scrolling to this button is not working. `.scrollIntoView()` is not working as well. It is always off by some small constant amount. If the viewport is big enough that no scrolling is possible it also works to click both buttons.

I also tried recreating this with two buttons only and it works there. So seems to be related to some parents/their styles.

<!-- images, stack traces, etc -->

### Desired behavior:

<!-- A clear description of what you want to happen -->

### Steps to reproduce: (app code and test code)

Check out the repository [here](https://github.com/zepatrik/cypress-test-tiny/tree/master).

<!-- Issues without reproducible steps will get closed. You can fork https://github.com/cypress-io/cypress-test-tiny repo, set up a failing test, then tell us the repo/branch to try. -->

### Versions

current cypress version (3.1.3) on Linux (not tested on other OS)

<!-- Cypress, operating system, browser -->
",bug
387527240,Cypress is not running on Chrome 71,"<!-- 
Is this a question? Do not open an issue. Please ask in our chat https://gitter.im/cypress-io/cypress

Want something newly documented? Please open an issue in the respective repo: 
- docs: https://github.com/cypress-io/cypress-documentation 
- example recipes: https://github.com/cypress-io/cypress-example-recipes
-->

### Current behavior:

After the upgrade to Chrome 71, Cypress is throwing a cross-origin frame error (image below). If I downgrade my Chrome to 70 or run the tests with the Electron version, the tests run.

![image](https://user-images.githubusercontent.com/2339362/49479802-75d4a900-f80b-11e8-9d34-87d36b5dd16a.png)

### Versions

* Chrome 71
* Cypress 3.1.2
* OS: Mac and Linux
<!-- Cypress, operating system, browser -->
",bug
387416923,Windows binary includes devDependencies,"## bug

Windows binary seems to include `devDependencies`, see https://github.com/cypress-io/cypress/issues/2861#issuecomment-444172942

Unclear why this happens, but it should not happen",bug
387200190,Cypress loads wrong page on start,"### Current behavior:

When I try to run cypress tests (the default examples that come after installing cypress) it starts the app properly, but the tests load the wrong page.
It doesn't load the Cypress test page inside the browser, it loads a html file I have in project.

The page that the browser opens is saved in `<project_dir>/views/layout.html`
whenever I run `npx cypress open` inside the `project_dir`.

The project directory looks like this:
```
→ tree
.
├── cypress
│   ├── fixtures
│   │   └── example.json
│   ├── integration
│   │   └── examples
│   │       ├── actions.spec.js
│   │       ├── aliasing.spec.js
│   │       ├── assertions.spec.js
│   │       ├── connectors.spec.js
│   │       ├── cookies.spec.js
│   │       ├── cypress_api.spec.js
│   │       ├── files.spec.js
│   │       ├── local_storage.spec.js
│   │       ├── location.spec.js
│   │       ├── misc.spec.js
│   │       ├── navigation.spec.js
│   │       ├── network_requests.spec.js
│   │       ├── querying.spec.js
│   │       ├── spies_stubs_clocks.spec.js
│   │       ├── traversal.spec.js
│   │       ├── utilities.spec.js
│   │       ├── viewport.spec.js
│   │       ├── waiting.spec.js
│   │       └── window.spec.js
│   ├── plugins
│   │   └── index.js
│   └── support
│       ├── commands.js
│       └── index.js
├── cypress.json
└── views
    └── layout.html
```

Inside of it I run `npx cypress open`.

The cypress app opens propery:

![screen shot 2018-12-04 at 10 31 48](https://user-images.githubusercontent.com/1404772/49432968-2bbed980-f7b1-11e8-87e3-75121e5ab3df.png)

And this is what opens inside of the browser cypress opens when I run any of the example tests:

![screen shot 2018-12-04 at 10 31 40](https://user-images.githubusercontent.com/1404772/49432987-39745f00-f7b1-11e8-9717-57ec8d005658.png)

Cypress console output:

```
→ npx cypress open
GET /__/ 200 40.683 ms - 352
GET /favicon.ico 302 9.179 ms - 26
GET /__/ 304 8.686 ms - -
HEAD / 500 53.545 ms - -
HEAD / 500 51.452 ms - -
HEAD / 500 50.321 ms - -
```

### Desired behavior:

I expected that it would load the cypress app with the list of tests on the left side and the content of a page open in the test runner to the right.

### Steps to reproduce:

1. Create a directory
2. Inside it add `views/layout.html` with whatever content
3. Inside the root directory run `npx cypress open`
4. Run any of the cypress tests
5. This opens `views/layout.html` for me

### Versions

Issue happens on:

Cypress 3.1.2 and 3.1.3
OS: OSX El Capitan (10.11.6)
Browser: Chrome 70, Canary 73 and Electron 59

I can test it later in the day on my linux machine to confirm if it happens there as well.

Edit: Edited for clarity",bug
386998832,"Cypress logs timeout, fails test, but keeps running all commands. no way to know why it is timeing out. ","### Current behavior:

Cypress ""randomly"" is logging a Timeout failure but is not linking it to anything specific. These commands typically coincide with my custom commands, which are not timeouting before the specified timeout in other projects and when they do, it throws the appropriate message. 

I've already ruled out the custom command as an issue because it works as expected in other projects. Rather, I want to **debug cypress** but finding it to be **impossible** given the current lack of information provided by the runner.

This is the end of the tests (All my commands and assertions ran correctly)

![image](https://user-images.githubusercontent.com/2848185/49400520-87865580-f712-11e8-9ff1-bf7319fa4356.png)


It already ""errored"" out on command One, but it kept going until this moment. Why did it keep running commands if it failed? 

Clicking the error yields no additional information:

![image](https://user-images.githubusercontent.com/2848185/49400572-a553ba80-f712-11e8-91d4-8606a079023d.png)

Adding a debug handler for the failure yields nothing (it doesnt stopp here unless one of my assertions actually does fail)

```js
Cypress.on(""fail"", (err, runnable) => {
  debugger
  return err
})
```

<!-- images, stack traces, etc -->

### Desired behavior:

I want to be able to figure out the root cause of this timeout.

### Steps to reproduce:

None so far; this is only happening in one test / one project, despite us using these commands practically everywhere.

Cypress v 3.1.0 and up",bug
386715185,"On cypress run, error ""We failed to trash the existing run results""","### Current behavior:

Running `cypress run` emits an error:

```
Warning: We failed to trash the existing run results.

This error will not alter the exit code.

Error: Command failed: /Users/jennifer/Library/Caches/Cypress/3.1.2/Cypress.app/Contents/Resources/app/packages/server/node_modules/trash/lib/macos-trash /Users/jennifer/Dev/cypress-example-kitchensink/cypress/screenshots/examples
“examples” couldn’t be moved to the trash.

    at ChildProcess.exithandler (child_process.js:282:12)
    at emitTwo (events.js:125:13)
    at ChildProcess.emit (events.js:213:7)
    at maybeClose (internal/child_process.js:921:16)
    at Socket.stream.socket.on (internal/child_process.js:348:11)
    at emitOne (events.js:115:13)
    at Socket.emit (events.js:210:7)
    at Pipe._handle.close [as _onclose] (net.js:549:12)
```

### Desired behavior:

Not error when trashing folders within `videos` folder.

### Steps to reproduce:

All I did was `cypress run` on a previous run `cypress-example-kitchensink` project. Of course on subsequent runs of of `cypress run` do not produce the same error. 😞 

### Versions

Cypress 3.1.2
Mac High Sierra
",bug
385430810,"document.execCommand(""copy"") does not work in cypress","Hi there,

I'm curious as to why a `document.execCommand(""copy"")` fails when being run during a cypress test (as a side effect to a `cy.get().click()` ). Curiously it works fine once I'm manually clicking the same element after the test has run. 

The failing test in question can be reproduced by running the following code: 
```js
describe(""menuBar"", function() {
  beforeEach(() => {
    cy.visit(""http://teselagen.github.io/openVectorEditor/#/Editor"");
  });
  
  it(""select range, copy, cut works"", function() {
    cy.clock()
    cy.get('.tg-menu-bar').contains(""Edit"").click()
    cy.get('.tg-menu-bar-popover').contains(""Select"").click()
    cy.get(`[label=""From:""]`).clear().type(""10"")
    cy.get(`[label=""To:""]`).clear().type(""20"")
    cy.get(`.dialog-buttons`).contains(""OK"").click()
    cy.get("".veStatusBar"").contains(`10 to 20`)

    cy.get("".veStatusBar"").contains(`5299`)
    cy.get('.tg-menu-bar').contains(""Edit"").click().tick(200)
    cy.get('.tg-menu-bar-popover').contains(""Copy"").click()
    cy.contains(""Selection Copied"")
    cy.get('.tg-menu-bar').contains(""Edit"").click()
    cy.get('.tg-menu-bar-popover').contains(""Cut"").click()
    cy.contains(""Selection Cut"")
    cy.get("".veStatusBar"").contains(`5288`)
  });
});
```

If you run the above example, the test will fail to find ""Selection Copied"". This is because 
```js
const worked = document.execCommand(type);
```
evaluates to `false` so the ""Selection Copied"" popover is not shown. 

You can add a breakpoint manually to the `commands/index.js` file and see it not working. 
![image](https://user-images.githubusercontent.com/2730609/49178000-7baa2600-f303-11e8-8e48-df7449b81094.png)

Strangely, after the test has run if you manually click ""File > Edit > Copy"" then the `document.execCommand(""copy"")` works just fine. Not sure what is going on here to stop it from working when cypress is running its tests. 

![image](https://user-images.githubusercontent.com/2730609/49178108-c1ff8500-f303-11e8-9c9f-c8325a974cc9.png)

![image](https://user-images.githubusercontent.com/2730609/49178143-d80d4580-f303-11e8-97b0-8d30dd889726.png)

Thanks!",bug
384616099,Cypress crash when starting the second test case,"### Current behavior:

Cypress crash after finished the first test case, when it starts the second test case, Cypress get crashed

### Desired behavior:

Cypress should not crash

### Steps to reproduce:

See video
https://youtu.be/GB1B3_6D6TY

### Versions
It worked properly before with version 3.1.1 but it occurs on 3.1.2 ",bug
384323988,Pdf does not preview in iframe in electron,"### Current behavior:
A Pdf url is offered for download in Electron. 

### Desired behavior:
The Pdf should open in the pdf viewer in Electron
This works fine in Chrome. 
The content-disposition header is set to inline

I think, this was working fine before 3.1.2

<!-- Cypress, operating system, browser -->
cypress 3.1.2 
ubuntu 18.4
chrome 70
electron 59
",bug
383956115,Click and type events in after or afterEach hook don't work if one test fails,"### Current behavior: 
Any click event in the **after** block fails if one of the tests in an **it** block fails.

### Desired behavior:
Click events in the **after** block should succeed even if there are tests that fail.

### Steps to reproduce:
I forked the cypress-tiny-test repository and set up a reproducible example in the latest commit.
https://github.com/StanFisher/cypress-test-tiny

Here's the commit containing the failing **after** block.
https://github.com/StanFisher/cypress-test-tiny/commit/c185242f3fdd30715d16fc44e393e092c30c4d58

Notice that if the failing test is changed to succeed, then the two click events in the **after** block succeed.

### Versions
Cypress 3.1.2
macOS Mojave 10.14.1
Chrome 70.0.3538.102

",bug
382717399,Failing FFMPEG on Windows Container on Azure CI,"Recording test on Azure CI windows container fails with ffmpeg error

https://cypress-io.visualstudio.com/cypress-example-kitchensink/_build/results?buildId=87

```
2018-11-20T15:23:35.9223544Z > cypress-example-kitchensink@1.0.2 start:ci D:\_work\1\s
2018-11-20T15:23:35.9246880Z > http-server app -c-1 --silent
2018-11-20T15:23:35.9378224Z 
2018-11-20T15:23:37.2188259Z 
2018-11-20T15:23:48.6459449Z 
2018-11-20T15:23:49.1204989Z ====================================================================================================
2018-11-20T15:23:49.1227349Z 
2018-11-20T15:23:49.1228555Z   (Run Starting)
2018-11-20T15:23:49.1228918Z 
2018-11-20T15:23:49.1773556Z   ΓöîΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÉ
2018-11-20T15:23:49.1774677Z   Γöé Cypress:    3.1.1                                                                              Γöé
2018-11-20T15:23:49.1775702Z   Γöé Browser:    Electron 59 (headless)                                                             Γöé
2018-11-20T15:23:49.1776299Z   Γöé Specs:      19 found (examples\actions.spec.js, examples\aliasing.spec.js, examples\assertionΓÇª Γöé
2018-11-20T15:23:49.1776959Z   Γöé Params:     Group: false, Parallel: false                                                      Γöé
2018-11-20T15:23:49.1777508Z   Γöé Run URL:    https://dashboard.cypress.io/#/projects/4b7344/runs/3385                           Γöé
2018-11-20T15:23:49.1778345Z   ΓööΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÿ
2018-11-20T15:23:49.1778758Z 
2018-11-20T15:23:49.5270847Z 
2018-11-20T15:23:49.5646104Z ΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇ
2018-11-20T15:23:49.5647074Z                                                                                                     
2018-11-20T15:23:49.5647650Z   Running: examples\actions.spec.js...                                                    (1 of 19) 
2018-11-20T15:23:49.5667717Z   Estimated: 16 seconds
2018-11-20T15:23:49.6171868Z Warning: We failed to record the video.
2018-11-20T15:23:49.6172423Z 
2018-11-20T15:23:49.6173205Z This error will not alter the exit code.
2018-11-20T15:23:49.6175602Z 
2018-11-20T15:23:49.6175987Z Error: ffmpeg exited with code 3221225781
2018-11-20T15:23:49.6176393Z     at ChildProcess.<anonymous> (C:\Users\VssAdministrator\AppData\Local\Cypress\Cache\3.1.1\Cypress\resources\app\packages\server\node_modules\fluent-ffmpeg\lib\processor.js:182:22)
2018-11-20T15:23:49.6176854Z     at emitTwo (events.js:125:13)
2018-11-20T15:23:49.6177442Z     at ChildProcess.emit (events.js:213:7)
2018-11-20T15:23:49.6177880Z     at Process.ChildProcess._handle.onexit (internal/child_process.js:200:12)
2018-11-20T15:23:49.6178255Z 
2018-11-20T15:23:50.5781731Z npm ERR! code ELIFECYCLE
2018-11-20T15:23:50.5782311Z npm ERR! errno 1
```
",bug
382571963,CypressError not included in JSON reporter,"Seems like the JSON reporter does not include the actual CypressError otherwise displayed in terminal output.

### Current behavior:

Output in default reporter stack: 
```
CypressError: cy.click() failed because it requires a DOM element.

The subject received was:

  > undefined

The previous command that ran was:

  > cy.get()
```

### Desired behavior:

Also include the CypressError in the output of the JSON reporter:
```
 CypressError: Timed out retrying: Expected to find element: '[data-cy=fooBar]', but never found 
```
",bug
381871063,DOM snapshot preview gets 'stuck' when tests refresh while watching test file + current hovering over command in Command Log,"### Current behavior:

The DOM Snapshot preview can get into a state where it remains in preview mode - regardless of where the mouse is currently hovering, clicking or doing.

![](http://g.recordit.co/4ZrHYAuqgq.gif)

### Desired behavior:

The DOM Snapshot should not get stuck.

### Steps to reproduce:

When hovering over a command in the Command Log, the DOM Snapshot of the command previews. In this case - and the only case I've replicated it - it is a 'before/after' Snapshot for `,type()`. 

Leaving the mouse hovering over the command, `cmd` + `tab` over to the text editor and edit the current test so that the running test refreshes - the DOM Snapshot preview will remain in preview mode - so that the only way to remove this state is to close Cypress and reopen.

**Just run the tests below in the TODOMVC app and replicate what was done in the GIF above.

```js
it('adds a todo', () => {
  cy.visit('http://localhost:8888')
  cy.get('.new-todo')
  .type('foo bar{enter}')
})
```

### Versions

Cypress 3.1.1
Chrome 70
",bug
380949008,Blocked a frame with origin: XXX from accessing cross origin frame,"This is happening when the current subject is `<window>`, there is a cross origin iframe within the application under test, and there is an assertion off of a parent command like:

```js
cy.get('a').should('be.visible')
```

Why? Because apparently accessing `window[0]` now returns the cross origin `window`. I can't find where in the spec it defines this behavior, and perhaps this is a recent change to chrome? 

At any rate, this is happening because we have some naive internal checks to determine whether a value is an element, the document, or the window.

![screen shot 2018-11-14 at 7 38 28 pm](https://user-images.githubusercontent.com/1268976/48521997-ead44480-e844-11e8-93e1-81a029df4438.png)
",bug
380783806,Test names are not shown on specs tab once test runs,"### Current behavior:

When we are running our test suite from Jenkins in parallel mode, the test names disappear as soon as the test completes when you are on the specs tab.  You can still see the names on the failures tab.

<!-- images, stack traces, etc -->
![image](https://user-images.githubusercontent.com/43965482/48496767-622fb700-e7f8-11e8-9ef0-863197bc57b0.png)


### Desired behavior:

The test names are available regardless of whether the test has completed or not.

### Steps to reproduce:

I haven't had much luck finding other people talking about this but this is what we did.

1. Setup project to run in parallel on Jenkins red hat box.
2. Use a custom plugins/index.js to update the baseUrl of the test depending on parameters sent in.
3. Run build.

### Versions

v: 3.1.0, 3.1.1
os: red hat
",bug
380643978,Cypress runs commands twice when no baseUrl defined,"### Current behavior:
Right now, whenever you start Cypress it will kick off some of the commands twice. 

This isn't a problem most of the time as tests should be self contained anyway, but if you are using before hooks (for instance, to login and store cookies, [as suggested by the docs](https://docs.cypress.io/api/cypress-api/cookies.html#Preserve-Once)) it becomes quite detrimental.  

### Desired behavior:
Cypress should only run once.

### Steps to reproduce:
```javascript

//__bug.spec.js
describe('Bug?', ()=>{
    before(() =>{
        cy.task('message', 'I\'m running!');
    });

    it('Should only log once', () => {
        cy.visit('https://www.google.com');
    });
});

//index.js
module.exports = (on) => {
    on('task', {
        message (args) {
            console.log(args);

            return null;
        }
    });
};
```

- Run the spec
- Results:
```
====================================================================================================

  (Run Starting)

  ┌────────────────────────────────────────────────────────────────────────────────────────────────┐
  │ Cypress:    3.1.1                                                                              │
  │ Browser:    Electron 59 (headless)                                                             │
  │ Specs:      1 found (__bug.spec.js)                                                            │
  │ Searched:   cypress/integration/__bug.spec.js                                                  │
  └────────────────────────────────────────────────────────────────────────────────────────────────┘


────────────────────────────────────────────────────────────────────────────────────────────────────

  Running: __bug.spec.js...                                                                (1 of 1)


  Bug
I'm running!
I'm running!
    ✓ Should only log once (1159ms)
```

**Note:** this isn't exclusive to hooks! The below spec will also print unwanted results:
```javascript
describe('Bug', ()=>{

    it('Should only log once', () => {
        cy.task('message', 'I\'m running!');
        cy.visit('https://www.google.com');
    });
    it('Should only log once', () => {
        cy.task('message', 'I\'m running!');
        cy.visit('https://www.google.com');
    });
    it('Should only log once', () => {
        cy.task('message', 'I\'m running!');
        cy.visit('https://www.google.com');
    });
    it('Should only log once', () => {
        cy.task('message', 'I\'m running!');
        cy.visit('https://www.google.com');
    });

});
```
Results:
```
Running: __bug.spec.js...                                                                (1 of 1)


  Bug
I'm running!
I'm running!
    ✓ Should only log once (1091ms)
I'm running!
    ✓ Should only log once (3876ms)
I'm running!
    ✓ Should only log once (992ms)
I'm running!
    ✓ Should only log once (1449ms)
```

If the commands are inverted (i.e., if you visit() before logging) then the results are fine, so maybe Cypress waits for visit then reboots?

### Versions
Electron 59 headless
Cypress 3.1.1
macOS High Sierra 10.13.6",bug
379137003,Cypress.log() fails with TypeError: Cannot read property 'hasPreviouslyLinkedCommand' of undefined,"<!-- 
Is this a question? Do not open an issue. Please ask in our chat https://gitter.im/cypress-io/cypress

Want something newly documented? Please open an issue in the respective repo: 
- docs: https://github.com/cypress-io/cypress-documentation 
- example recipes: https://github.com/cypress-io/cypress-example-recipes
-->

### Current behavior:

using Cypress.log() without any previous action fails with:

```
cypress_runner.js:161431 TypeError: Cannot read property 'hasPreviouslyLinkedCommand' of undefined
    at defaults (cypress_runner.js:61305)
    at Log (cypress_runner.js:61352)
    at $Cypress.logFn [as log] (cypress_runner.js:61608)
    at Context.runnable.fn (cypress_runner.js:59796)
    at callFn (cypress_runner.js:28583)
    at Test.Runnable.run (cypress_runner.js:28576)
    at cypress_runner.js:62711
    at PassThroughHandlerContext.finallyHandler (cypress_runner.js:121589)
    at PassThroughHandlerContext.tryCatcher (cypress_runner.js:124911)
    at Promise._settlePromiseFromHandler (cypress_runner.js:122929)
    at Promise._settlePromise (cypress_runner.js:122986)
    at Promise._settlePromise0 (cypress_runner.js:123031)
    at Promise._settlePromises (cypress_runner.js:123110)
    at Promise._fulfill (cypress_runner.js:123055)
    at Promise._settlePromise (cypress_runner.js:122999)
    at Promise._settlePromise0 (cypress_runner.js:123031)
```

### Desired behavior:

Cypress.log() should not fail

### Steps to reproduce:
Failing test:
https://github.com/ludekcakl/cypress-test-tiny/commit/4ce45965bfbd27c56781dd285a9b7d80e454a292

```js
describe(""Cypress.Log"", function() {
  it(""should not fail"", function() {
    Cypress.log({ name: ""foo"", message: [""foo""] });
  });
});
```

### Versions

 Cypress 3.1.1, Windows 10, Chrome
",bug
378797162,Trashing assets results in infinitely nested trash directories,"### Current behavior:
Reported from Gitter, trashing assets and trying to download artifacts results in a file too long error:
```
screenshots/.Trash-0/files/27869827-fa54-46b7-83a5-a75b568c4ba9/.Trash-0/files/27869827-fa54-46b7-83a5-a75b568c4ba9/.Trash-0/files/27869827-fa54-46b7-83a5-a75b568c4ba9/.Trash-0/files/27869827-fa54-46b7-83a5-a75b568c4ba9/.Trash-0/files/27869827-fa54-46b7-83a5-a75b568c4ba9/.Trash-0/files/27869827-fa54-46b7-83a5-a75b568c4ba9/.Trash-0/files/27869827-fa54-46b7-83a5-a75b568c4ba9/.Trash-0/files/27869827-fa54-46b7-83a5-a75b568c4ba9/.Trash-0/files/27869827-fa54-46b7-83a5-a75b568c4ba9/.Trash-0/files/27869827-fa54-46b7-83a5-a75b568c4ba9/.Trash-0/files/27869827-fa54-46b7-83a5-a75b568c4ba9/.Trash-0/files/27869827-fa54-......file name too long
```
### Desired behavior:

Should be able to trash files without recursively creating Trash directories. Alternative could be deleting files when running on CI.

### Steps to reproduce:
Haven't been able to reproduce, but haven't successfully tried on the version of Ubuntu reported. Was unable to reproduce on 18.10.

### Versions

Cypress 3.1.1
Ubuntu 16.04",bug
378469862,Support `.clear()` on date inputs,"Using `.clear()` on a date field should clear the value rather than causing an error. This may affect other field types.

[Related StackOverflow question](https://stackoverflow.com/q/53196292/4252741)

### Current behavior:
<!-- images, stack traces, etc -->
The [`.clear()`](https://docs.cypress.io/api/commands/clear.html#Syntax) command is an alias for `.type({selectall}{backspace})`. However, typing in date fields is limited to strings matching the date format. This causes Cypress to throw an error.

> CypressError: Typing into a date input with cy.type() requires a valid date with the format 'yyyy-MM-dd'. You passed: {selectall}{del}

### Desired behavior:
<!-- A clear and concise description of what you want to happen -->
The type command should allow `{selectall}{del}` for date inputs and clear the input value.

### Versions
Tested on Cypress 3.1.0
<!-- Cypress, operating system, browser -->
",bug
378420500,Failed to execute 'removeChild' on 'Node': The node to be removed is not a child of this node,"### Current behavior:

I pinned a snapshot from a previous test, then clicked to 'Hide Highlights' so I could see the DOM element. The entire webpage went blank and the error below logged in the console:

<img width=""1679"" alt=""screen shot 2018-11-07 at 12 02 31 pm"" src=""https://user-images.githubusercontent.com/1271364/48152993-39a53b80-e293-11e8-903d-2956580d2cc3.png"">

<img width=""557"" alt=""screen shot 2018-11-07 at 12 02 50 pm"" src=""https://user-images.githubusercontent.com/1271364/48152992-39a53b80-e293-11e8-87f3-1d215f28f148.png"">

### Desired behavior:

Should probably add a check to the Node is a child before calling `removeChild` to prevent err.

### Steps to reproduce:

I tried to run the same scenario again and wasn't able to reproduce it :/ 

### Versions

Cypress 3.1.1
",bug
377636884,Uncaught error in plugins file not displayed in Desktop GUI,"### Expected: 
If there's an EACCES error in the plugins file, Cypress should show `Error EACCES` or similar message in the desktop gui

### Actual: 
Spinner spins forever
![cens](https://user-images.githubusercontent.com/14625260/48034564-ec5b8980-e12d-11e8-84ac-c1dbd2e36bad.png)

### To reproduce:

```
npm i --save-dev express
```

in `plugins/index.js`:
```
const express = require('express')

const PORT = 443

const app = express()
app.listen(PORT, () => console.log(`Test Server running on port ${PORT}`))
```

now launch cypress without `sudo` and you should get the permissions error since you've set the port to 443",bug
377444336,wrapTimer changes browser's setTimeout behaviour,"### Current behavior:
I have an application which calls setTimeout(undefined, 0). (This itself is not very good, but just for now, consider that this does nothing in Chrome (no errors).

Link to the setTimeout(undefined, 0) call: https://github.com/mdbootstrap/Angular-Bootstrap-with-Material-Design/issues/97

Before cypress 3.1.1 this did not cause any errors. Since 3.1.1 this causes tests to fail in wrapTimer -> invoke (it tries to call 'apply' on the undefined argument).

### Desired behavior:
Silently do nothing, just as a user's browser would do.

### Steps to reproduce:
Build an application which calls setTimeout(undefined, 0) & run a test with cypress 3.1.1.

### Versions
Cypress 3.1.1, reproduced on recent osx and ubuntu versions.
ps cypress 3.1.1 is available on npmjs.com, but not tagged on github? Is that intentional?",bug
376516029,npm_config_loglevel env variable is silencing too much (--silent),"## Bug 
introduced by #817 

**Current**:
`npm_config_loglevel` is able to silent the stdout from `cypress version`, `cypress cache list`, cypress downloading message, etc 

**Desired**:
presence of `npm_config_loglevel` should not silence important messages such as the downloading message, and output from `cypress version` and `cypress cache list`, etc",bug
376185324,cy.setCookie always sets the same cookie if you pass the same options object,"`cy.setCookie` always sets the same cookie if you pass the same options object.

### Current behavior:

Calling `cy.setCookie` multiple times always sets the same cookie as the first call if you pass the same options object each time. For example, the following sets two cookies named ""foo"" and ""baz"". 

```js
'use strict';
  
Cypress.Cookies.debug(true);

const options = {};

describe('cookie reuse', function() {
    it('sets the expected cookie', function() {
        cy.setCookie('foo', 'bar', options);
        cy.setCookie('baz', 'qux', {});
        cy.setCookie('apple', 'banana', options);

        cy.getCookie('foo').its('value').should('equal', 'bar');
        cy.getCookie('baz').its('value').should('equal', 'qux');
        cy.getCookie('apple').its('value').should('equal', 'banana');
    });
});
```

The Cypress log shows the names and values of all three cookies I tried to create, but the console shows that only two cookies were created:

![setcookie-always-sets-same-cookie-when-options-object-is-the-same](https://user-images.githubusercontent.com/142725/47822129-031a6e80-dd31-11e8-81e3-d2dec60317ad.png)

The cookies section in the Chrome dev tools also shows only two cookies, ""foo"" and ""baz"":

![setcookie-cookies-list](https://user-images.githubusercontent.com/142725/47822243-6e644080-dd31-11e8-94f6-621fef8e0301.png)

The ""apple"" cookie was never created. The call to `cy.setCookie('apple', 'banana', options);` just set the ""foo"" cookie again.

### Desired behavior:

If I call `cy.setCookie` twice with different cookie names and values, but use the same options object in both calls, I expect to create two separate cookies.

### Steps to reproduce:

See code snippet above.

### Versions

Cypress 3.0.3, Mac OS 10.13.6, Chrome 70.0.3538.77",bug
376157645,Cypress dashboard not displaying image correctly for image snapshots,"### Is this a Feature or Bug?
Bug


### Current behavior:
The image is displayed narrower than it originally is.

### Desired behavior:

Allow image diff snapshots to display in the correct ratio as its taken.
### Steps to reproduce:
Go to repo https://dashboard.cypress.io/#/projects/a16q3n/runs/1/failures
and open the screenshot to see the image display in a squished ratio
<img width=""1315"" alt=""screen shot 2018-10-31 at 4 57 03 pm"" src=""https://user-images.githubusercontent.com/4201698/47818260-0ceea280-dd2e-11e8-9ed9-15b59066317a.png"">

<img width=""1679"" alt=""screen shot 2018-10-31 at 4 54 41 pm"" src=""https://user-images.githubusercontent.com/4201698/47818267-10822980-dd2e-11e8-824a-0d44152e5a3a.png"">


### Versions
Latest (3.1.0)

MacOS

Chrome Latest 70.0",bug
376151936,cy.request + Callback Queue Race Conditions prevent LocalStorage from being cleared prior to each `it`,"### Current behavior:

When i have a complex set of conditions (100% reproduced in the Test repository below 👇 ), `localStorage` is not cleared prior to each `it` (we do a `cy.visit` in `beforeEach`)

One weird condition - `cy.request` MUST be called before `visit` and it MUST take some time to respond (I've found as little as 1s can cause failures, but in this example i set my mock api to 2s)

Another weird condition - the **application code** has to be updating the `localStorage` in a weird way. In my example, I use redux with redux-localstorage and a `setTimeout` which increases on each iteration.

We assert localStorage item `redux_test` is null and it fails:

<!-- images, stack traces, etc -->
![image](https://user-images.githubusercontent.com/2848185/47816911-b16ee580-dd2a-11e8-9d18-b66f6f0a4b32.png)

it is 100% reproducible. 

### Desired behavior:

If we take out the `cy.request` in the `beforeEach`, every time `it` is run, the `localStorage` is cleared correctly even with all the wacky `setTimeout` redux stuff done in app code (no other app code changes)

Desired behaviour is, Even when doing `cy.request` in beforeEach, the output should be all passing:

![image](https://user-images.githubusercontent.com/2848185/47816961-d5cac200-dd2a-11e8-9c50-f2baa0f7f323.png)


### Steps to reproduce:

You can clone **this Repository** https://github.com/egucciar/cypress-support/tree/local-storage

On the **local-storage** branch (linked above)

Run:
```
git checkout local-storage
yarn
yarn start
```

In another terminal run:
```
yarn cypress:open
```

Observe errors. Also comment out the `cy.request` to observe passing.

### Versions

Cypress v3.1.0, Chrome 70, MacOS 10.13.1


### Notes

My mocklab API account will have its free trial expired within the next 2 weeks i think, so please take a look ASAP~~

This has been plaguing us forever and i **FINALLY** Have a standalone reproducer that is 100% reliable 🎉 😭 ",bug
375919070,"Screenshot ""scroll and stitch together"" is not correct when `html` and `body` have `height: 100%` css style","I'm experiencing an issue with screenshot functionality on a website under test. 

It seems Cypress does not approve and when generating a full height screenshot of my page, it includes the sticky header and the ""above fold"" page content several times, completely ignoring any of the content (and the site footer) which you'd have to scroll to access.

On pages where the header is not sticky, part of the bottom of the page repeats, as below.

I've taken a look at attempting to invoke some of the CSS, but the likelihood is that there are multiple elements on some of the more complex pages which may require this hack.

Has anyone experienced this / found a solution?",bug
375624385,"Remove snap CI provider, add GoCD provider","Snap CI is no longer available: https://snap-ci.com/

They recommend looking at GoCD: https://www.gocd.org

Should be updated in our CI Provider file here: https://github.com/cypress-io/cypress/blob/develop/packages/server/lib/util/ci_provider.coffee#L31

Standard GoCD environment variables listed here: https://docs.gocd.org/current/faq/environment_variables.html#standard-gocd-environment-variables",bug
370681999,Fix Cypress's script injection for certain HTML pages,"### Current behavior:

Cypress automatically injects scripts into all HTML pages. These scripts exist to e.g. set `document.domain` to prevent iframes from becoming cross-origin.

It would be helpful to be able to disable this for certain URLs. These scripts can cause problems in several ways:
 - The script is injected before `<!DOCTYPE>`, which prevents the doctype node from taking effect. (`document.doctype` is null.) We need to be able to set the doctype reliably, alas.
 - The script's presence alters the structure of the DOM, which breaks code that depends on a certain structure. (That's unfortunately unavoidable for our app.)
- Setting `document.domain` throws in a sandboxed iframe.

### Desired behavior:

Ideally there'd be a way to disable this via e.g. `cy.route()` or `cy.server()`. We currently have to work around this in our app itself in a pretty brittle way.

### Versions

Cypress 3.1, macOS 10.14, Chrome 69.
",bug
370541374,Error when trying to display help for --spec flag,"<!-- 
Is this a question? Do not open an issue. Please ask in our chat https://gitter.im/cypress-io/cypress

Want something newly documented? Please open an issue in the respective repo: 
- docs: https://github.com/cypress-io/cypress-documentation 
- example recipes: https://github.com/cypress-io/cypress-example-recipes
-->

### Current behavior:

![error_cypress](https://user-images.githubusercontent.com/14308103/47009832-bb46f500-d13d-11e8-80f0-2a990071f137.PNG)

### Desired behavior:

It should show help for the spec flag or print an error

### Steps to reproduce:

error occure when typing the command `yarn cypress run -s -h`

### Versions

<!-- Cypress, operating system, browser -->

- Cypress: 3.1.0
- Windows 10
- yarn
",bug
370321798,Cannot type on datetime-local input,"Hi, i'm trying to type on an input of `datetime-local` type.
On the documentation, it says that `datetime-local` is supported but nothing was never typed, no matter how I tried to type it `type.('10102019{rightarrow1010pm}'`,`type.('000000000000pm}')`. 
Also, in this #1366 issue has a workaround. but both did not work. 
It does select the input, but never types.
",bug
369622265,Error when trashing screenshots/videos with nested directories,"PR #2475 changed the trashing behavior to remove the contents of screenshots/videos directories instead of deleting the directories and recreating them.

When there are directories inside of those directories, the `trash` module deletes the directory and then tries to delete the files in those directories, which errors.",bug
369573870,Response is modified by cypress,"Sometimes cypress seems to modify the responses from my server. This happens if I use a (virtual) host to simulate an other server than localhost. After the html output is the expected output from my request (the json part at the end).
```html
<head> 
  <script type='text/javascript'> 
    document.domain = 'localhost'; 
    var Cypress = window.Cypress = parent.Cypress; 
    if (!Cypress){ 
      throw new Error('Something went terribly wrong and we cannot proceed. We expected to find the global Cypress in the parent window but it is missing!. This should never happen and likely is a bug. Please open an issue!'); 
    }; 
    Cypress.action('app:window:before:load', window); 
  </script> 
</head>
{""success"":true,""msg"":""my response string""}
```",bug
369183305,Defining supportFile outside the root in Windows throws error: invalid WIN32 path characters,"I'm working on a monorepo project and as many monorepo projects do they tend to have their own CLI on top of to do common things across packages. One of these things is to run test. 

The problem that I'm having is that when I place the `plugins/index` file outside the project root I get the following error message: 
```
......\mono-cli\src\cypress\plugins contains invalid WIN32 path characters.
``` 
but as soon as I place the `plugins/index` file inside the project root and require the `plugins/index` file from outside the root of the project it works. This also happens for the `support/index` file. 

### Current behavior:

When I place the `plugins/index` or `support/index` file outside the root folder I get the following error:
`Error: C:\Users\baldurarna\AppData\Roaming\Cypress\cy\production\projects\MMS-3bc48668dc408d2c7575d3d91289f8f1\bundles\C:\Code\Frontend\Cosmic\tools\mono-cli\src\cypress\support contains invalid WIN32 path characters.`

### Desired behavior:

Having these files outside the root of the project should work the same as having them inside the root of the project.

### Versions

Cypress: 3.1
Chrome: 69
",bug
368809936,Interactive mode reload throws error,"Hitting 'reload' causes the following React error that freezes Cypress until refreshing the browser.

![screen shot 2018-10-10 at 3 06 20 pm](https://user-images.githubusercontent.com/1157043/46759772-3328a180-cc9e-11e8-92a4-013fdb3f090e.png)
",bug
366267014,Cypress doesn't handle visibility assertions for fixed or/and transform: translate,"### Current behavior:

<img width=""1434"" alt=""image"" src=""https://user-images.githubusercontent.com/655838/46404461-88483e80-c705-11e8-9313-2889965fb8f5.png"">

Cypress is telling me

```
CypressError: Timed out retrying: expected '<div#header-panel-login.panel.login-panel.show>' to be 'visible'

This element '<div#header-panel-login.panel.login-panel.show>' is not visible because it has CSS property: 'position: fixed' and its being covered by another element:

<div class=""article-box heading-section-box"">...</div>
```

However, when you check the display, the form in the header with ""contexte"" is visible.

### Desired behavior:

No error, assertion should be ""true"".

### Steps to reproduce:

Try a test on contexte.com and do:

```js
  it.only(`shows login form when clicking on login button in the header after scrolling`, function() {
    // # GIVEN visiting the home and scrolling, the login form shouldn't be visible
    cy.visit('/')

    cy.contains('Voir tous les articles et brèves').scrollIntoView()

    cy.get('#header-panel-login')
      .should('not.be.visible')

    // # WHEN clicking on ""login"" button
    cy.get('.account-menu-toggle')
      .contains('Se connecter')
      .click()

    // # THEN the login form must be visible
    cy.get('#header-panel-login')
      .should('be.visible')
  })
```

### Versions

cypress: 3.0.2
",bug
365724814,Question: cy.task failed with typeError,"### Current behavior:

Given I use ""ssh2-sftp-client"" as a sftp client to upload file to my local sftp server,
When I use task to wrap the upload function, and call in my test cases,
Then got following error msg, but in console log, but in fact I've already uploaded successful
```
CypressError: cy.task('uploadPremiseFile') failed with the following error:
TypeError: Cannot read property 'toString' of undefined
    at invoke (/Users/shanliu/Library/Caches/Cypress/3.1.0/Cypress.app/Contents/Resources/app/packages/server/lib/plugins/child/task.js:6:40)
    at /Users/shanliu/Library/Caches/Cypress/3.1.0/Cypress.app/Contents/Resources/app/packages/server/lib/plugins/util.js:48:16
    at tryCatcher (/Users/shanliu/Library/Caches/Cypress/3.1.0/Cypress.app/Contents/Resources/app/packages/server/node_modules/bluebird/js/release/util.js:16:23)
    at Function.Promise.attempt.Promise.try (/Users/shanliu/Library/Caches/Cypress/3.1.0/Cypress.app/Contents/Resources/app/packages/server/node_modules/bluebird/js/release/method.js:39:29)
    at Object.wrapChildPromise (/Users/shanliu/Library/Caches/Cypress/3.1.0/Cypress.app/Contents/Resources/app/packages/server/lib/plugins/util.js:47:28)
    at Object.getBody (/Users/shanliu/Library/Caches/Cypress/3.1.0/Cypress.app/Contents/Resources/app/packages/server/lib/plugins/child/task.js:8:8)
    at execute (/Users/shanliu/Library/Caches/Cypress/3.1.0/Cypress.app/Contents/Resources/app/packages/server/lib/plugins/child/run_plugins.js:81:12)
    at EventEmitter.ipc.on (/Users/shanliu/Library/Caches/Cypress/3.1.0/Cypress.app/Contents/Resources/app/packages/server/lib/plugins/child/run_plugins.js:125:5)
    at emitThree (events.js:135:13)
    at EventEmitter.emit (events.js:216:7)
    at process.<anonymous> (/Users/shanliu/Library/Caches/Cypress/3.1.0/Cypress.app/Contents/Resources/app/packages/server/lib/plugins/util.js:25:29)
    at emitTwo (events.js:125:13)
    at process.emit (events.js:213:7)
    at emit (internal/child_process.js:768:12)
    at _combinedTickCallback (internal/process/next_tick.js:141:11)
    at process._tickCallback (internal/process/next_tick.js:180:9)
```

### Desired behavior:

When function finished successfully, should pass without error;

### Steps to reproduce:

`plugins/index.js`
```js
let Client = require('ssh2-sftp-client');
let sftp = new Client();
let rootPath = process.cwd();

const uploadFile = (filePath) =>{
	sftp.connect({
		host: 'localhost',
		port: '22',
		username: 'foo',
		password: 'pass'
	}).then(() => {
		return sftp.fastPut(rootPath + filePath, '/upload/testFile.json', 'utf8');
	}).then((data) => {
		console.log('data info: ', data);
		sftp.end();
	});
};

module.exports = (on) => {
    on('task', {
    	uploadPremiseFile(filePath){
    		console.log('rootPath:', rootPath);
    		console.log('Start upload file: ', filePath);
		uploadFile(filePath);
	}
    })
};
```
`integration/testFile.spec.js`
```js
describe('Landing page test', ()=>{
	beforeEach(()=>{
		cy.visit('/');
	});
it('upload file', ()=>{
		const filePath = '/cypress/fixtures/testFile.json';
		 cy.task('uploadPremiseFile', filePath);
	});
```
### Versions

cypress: 3.1.0; Chrome 69; Mac
",bug
365040811,Not signed binary files in package for Windows,"### Is this a Feature or Bug?
Security improvement.

<!-- 
Is this a question? Do not open an issue. Please ask in our chat https://gitter.im/cypress-io/cypress

Want something newly documented? Please open an issue in the respective repo: 
- docs: https://github.com/cypress-io/cypress-documentation 
- example recipes: https://github.com/cypress-io/cypress-example-recipes
-->

### Current behavior:
Windows binary files aren't signed by your certificate - easier for malware to ""be Cypress"".
In some organisations only signed exe files can be allowed to use.
<!-- images, stack traces, etc -->

### Desired behavior:
Signed binary files in package for Windows.
<!-- A clear and concise description of what you want to happen -->

### Steps to reproduce:
None :)

<!-- Issues without reproducible steps might get closed. *Tip* You can fork https://github.com/cypress-io/cypress-test-tiny repo, set up a failing test, then tell us the repo/branch to try. -->

### Versions
Cypress 3.1.0
Windows 10

<!-- Cypress, operating system, browser -->
",bug
364037489,"""data.reporterStats.duration is less than minimum"" error from the runner","In https://sentry.io/organizations/cypressio/issues/770365962/?project=1280034&query=is%3Aunresolved++is+less+than+minimum I see client sending negative 

```
Schema putInstanceRequest@2.0.0 violated

Errors:
data.reporterStats.duration is less than minimum
```

```
""reporterStats"": {
""duration"": -135291,
""end"": ""2018-09-26T13:09:42.845Z"",
""failures"": 0,
""passes"": 8,
""pending"": 0,
""start"": ""2018-09-26T13:11:58.136Z"",
""suites"": 1,
""tests"": 8
},
```",bug
363431317,No mousemove events before clicks,"### Current behavior:

When I `cy.get('...').click();` no `mousemove` events are triggered, so every mousemove related scripts are broken.

Here an example showing the GitHub's milestone panel broke because of the missing mousemove events. I run the same test with Puppeteer and TestCafè too to understand what is the common behavior in such scenario
![](https://raw.githubusercontent.com/NoriSte/stackoverflow-52383438-cypress-issue/master/screenshots-compared.jpg)

and here the log related to the three frameworks

TestCafè
```
mouseover <summary class=""text-bold discussion-sidebar-heading discussion-sidebar-toggle"" aria-label=""Set milestone"" aria-haspopup=""menu"" data-hotkey=""m"">...</summary>
mousemove <summary class=""text-bold discussion-sidebar-heading discussion-sidebar-toggle"" aria-label=""Set milestone"" aria-haspopup=""menu"" data-hotkey=""m"">...</summary>
mousemove <summary class=""text-bold discussion-sidebar-heading discussion-sidebar-toggle"" aria-label=""Set milestone"" aria-haspopup=""menu"" data-hotkey=""m"">...</summary>
mousedown <summary class=""text-bold discussion-sidebar-heading discussion-sidebar-toggle"" aria-label=""Set milestone"" aria-haspopup=""menu"" data-hotkey=""m"">...</summary>
mouseup <summary class=""text-bold discussion-sidebar-heading discussion-sidebar-toggle"" aria-label=""Set milestone"" aria-haspopup=""menu"" data-hotkey=""m"">...</summary>
click <summary class=""text-bold discussion-sidebar-heading discussion-sidebar-toggle"" aria-label=""Set milestone"" aria-haspopup=""menu"" data-hotkey=""m"">...</summary>
```

Puppeteer
```
mouseover <summary class=""text-bold discussion-sidebar-heading discussion-sidebar-toggle"" aria-label=​""Set milestone"" aria-haspopup=​""menu"" data-hotkey=​""m"">​…​</summary>​
mousemove <summary class=​""text-bold discussion-sidebar-heading discussion-sidebar-toggle"" aria-label=​""Set milestone"" aria-haspopup=​""menu"" data-hotkey=​""m"">​…​</summary>​
mousedown <summary class=​""text-bold discussion-sidebar-heading discussion-sidebar-toggle"" aria-label=​""Set milestone"" aria-haspopup=​""menu"" data-hotkey=​""m"">​…​</summary>​
mouseup <summary class=​""text-bold discussion-sidebar-heading discussion-sidebar-toggle"" aria-label=​""Set milestone"" aria-haspopup=​""menu"" data-hotkey=​""m"">​…​</summary>​
click <summary class=​""text-bold discussion-sidebar-heading discussion-sidebar-toggle"" aria-label=​""Set milestone"" aria-haspopup=​""menu"" data-hotkey=​""m"">​…​</summary>​
```

Cypress
```
mousedown <summary class=""text-bold discussion-sidebar-heading discussion-sidebar-toggle"" aria-label=""Set milestone"" aria-haspopup=""menu"" data-hotkey=""m"">...</summary>
mouseup <summary class=""text-bold discussion-sidebar-heading discussion-sidebar-toggle"" aria-label=""Set milestone"" aria-haspopup=""menu"" data-hotkey=""m"">...</summary>
click <summary class=""text-bold discussion-sidebar-heading discussion-sidebar-toggle"" aria-label=""Set milestone"" aria-haspopup=""menu"" data-hotkey=""m"">...</summary>
```

### Desired behavior:

I know that I can simulate the mousemove event and if this is the exactly expected behavior... sorry if I bored you...

### Steps to reproduce:

In [this repo](https://github.com/NoriSte/stackoverflow-52383438-cypress-issue) you can find the most complete version of my tests but I prepared even an [easiest one](https://github.com/NoriSte/cypress-mousemove-issue) without any useless stuff.

### Versions

Cypress 3.1.0 on Mac OSX 10.13.6
",bug
363159235,Desktop GUI search persists the same search term for different projects if they have no project ID,"### Current behavior:

The Desktop GUI persists the file search between projects that have no project ID.

### Desired behavior:

Each project persists its search separately.

### Steps to reproduce:

* Open a project without a project ID
* Search for a file
* Close the project
* Open another project without a project ID
* See that the previous search is still there",bug
362903518,screeshot - blackout not blanking out multiple instances when using a jQuery class selector.,"### Current behavior:

![home -- visit us 2](https://user-images.githubusercontent.com/748080/45922821-a30fed00-be93-11e8-9641-17a5687e5127.png)


### Desired behavior:

`.headerMain-navMainLink` should select multiple items to be blacked out. Only the first item is being blacked out. In the above screen shot, the top nav items (6) should be blacked out.

### Steps to reproduce:

https://github.com/awcoats/cypress-test-tiny/blob/master/cypress/integration/spec.js

### Versions

Cypress package version: 3.1.0
Cypress binary version: 3.1.0
Windows 10
Electron 59 (headless)

",bug
361062481,HTTP Auth not working in url when running with electron,"<!-- 
Is this a question? Do not open an issue. Please ask in our chat https://gitter.im/cypress-io/cypress

Want something newly documented? Please open an issue in the respective repo: 
- docs: https://github.com/cypress-io/cypress-documentation 
- example recipes: https://github.com/cypress-io/cypress-example-recipes
-->

### Current behavior:

Running a test suite that has http auth on the base url like `http://foo:bar@myserver.com` fails when running with electron browser (both headless and headed) but works just fine on chrome. 

This would be fine, but we cannot have a recording without electron browser

#### with `--browser chrome`
```

====================================================================================================

  (Run Starting)

  ┌────────────────────────────────────────────────────────────────────────────────────────────────┐
  │ Cypress:    3.1.0                                                                              │
  │ Browser:    Chrome 68                                                                          │
  │ Specs:      1 found (home_spec.ts)                                                             │
  └────────────────────────────────────────────────────────────────────────────────────────────────┘


────────────────────────────────────────────────────────────────────────────────────────────────────

  Running: home_spec.ts...                                                                 (1 of 1)

Warning: Cypress can only record videos when using the built in 'electron' browser.

You have set the browser to: 'chrome'

A video will not be recorded when using this browser.
(node:66671) DeprecationWarning: Tapable.plugin is deprecated. Use new API on `.hooks` instead

  (Results)

  ┌────────────────────────────┐
  │ Tests:        12           │
  │ Passing:      12           │
  │ Failing:      0            │
  │ Pending:      0            │
  │ Skipped:      0            │
  │ Screenshots:  0            │
  │ Video:        false        │
  │ Duration:     57 seconds   │
  │ Spec Ran:     home_spec.ts │
  └────────────────────────────┘


====================================================================================================

  (Run Finished)


      Spec                                                Tests  Passing  Failing  Pending  Skipped
  ┌────────────────────────────────────────────────────────────────────────────────────────────────┐
  │ ✔ home_spec.ts                              00:57       12       12        -        -        - │
  └────────────────────────────────────────────────────────────────────────────────────────────────┘
    All specs passed!                           00:57       12       12        -        -        -
```
#### with `--browser electron`
```
====================================================================================================

  (Run Starting)

  ┌────────────────────────────────────────────────────────────────────────────────────────────────┐
  │ Cypress:    3.1.0                                                                              │
  │ Browser:    Electron 59 (headless)                                                             │
  │ Specs:      1 found (home_spec.ts)                                                             │
  └────────────────────────────────────────────────────────────────────────────────────────────────┘


────────────────────────────────────────────────────────────────────────────────────────────────────

  Running: home_spec.ts...                                                                 (1 of 1)

Timed out waiting for the browser to connect. Retrying...

Timed out waiting for the browser to connect. Retrying again...

The browser never connected. Something is wrong. The tests cannot run. Aborting...

  (Results)

  ┌────────────────────────────┐
  │ Tests:        0            │
  │ Passing:      0            │
  │ Failing:      1            │
  │ Pending:      0            │
  │ Skipped:      0            │
  │ Screenshots:  0            │
  │ Video:        true         │
  │ Duration:     0 seconds    │
  │ Spec Ran:     home_spec.ts │
  └────────────────────────────┘


  (Video)

  - Started processing:   Compressing to 32 CRF
  - Finished processing:  /Users/yknx4/Projects/AMV/pai-e2e/cypress/videos/home_spec.ts.mp4 (3 seconds)


====================================================================================================

  (Run Finished)


      Spec                                                Tests  Passing  Failing  Pending  Skipped
  ┌────────────────────────────────────────────────────────────────────────────────────────────────┐
  │ ✖ home_spec.ts                                0ms        -        -        1        -        - │
  └────────────────────────────────────────────────────────────────────────────────────────────────┘
    1 of 1 failed (100%)                          0ms        -        -        1        -        -

```
### Desired behavior:

It should behave exactly the same on both chrome and electron.

### Steps to reproduce:

Minimum code repo: https://github.com/yknx4/cypress-test-tiny-http-auth
 - works: `BASE_URL=https://httpwatch:shouldwork@www.httpwatch.com yarn cypress:run --browser chrome`
 - fails: `BASE_URL=https://httpwatch:shouldwork@www.httpwatch.com yarn cypress:run`

### Versions
OS: Mac OSX 10.13.14
Browser: Electron 59
Cypress: 3.1.0
<!-- Cypress, operating system, browser -->
",bug
360759552,Test hangs on Jenkins CI/ locally,"### Current behavior:

Test run stucks on Jenkins CI (using Electron)/ locally (using electron). Using chrome as browser option the test finishes as expected:

```
====================================================================================================

  (Run Starting)

  ┌────────────────────────────────────────────────────────────────────────────────────────────────┐
  │ Cypress:    3.1.0                                                                              │
  │ Browser:    Chrome 69                                                                          │
  │ Specs:      1 found (test_spec.js)                                                             │
  └────────────────────────────────────────────────────────────────────────────────────────────────┘


────────────────────────────────────────────────────────────────────────────────────────────────────
                                                                                                    
  Running: test_spec.js...                                                                 (1 of 1) 

Warning: Cypress can only record videos when using the built in 'electron' browser.

You have set the browser to: 'chrome'

A video will not be recorded when using this browser.

  (Results)

  ┌────────────────────────────┐
  │ Tests:        1            │
  │ Passing:      1            │
  │ Failing:      0            │
  │ Pending:      0            │
  │ Skipped:      0            │
  │ Screenshots:  0            │
  │ Video:        false        │
  │ Duration:     9 seconds    │
  │ Spec Ran:     test_spec.js │
  └────────────────────────────┘


====================================================================================================

  (Run Finished)


      Spec                                                Tests  Passing  Failing  Pending  Skipped 
  ┌────────────────────────────────────────────────────────────────────────────────────────────────┐
  │ ✔ test_spec.js                              00:09        1        1        -        -        - │
  └────────────────────────────────────────────────────────────────────────────────────────────────┘
    All specs passed!                           00:09        1        1        -        -        -  

````

Using Electron it hangs:


```
====================================================================================================

  (Run Starting)

  ┌────────────────────────────────────────────────────────────────────────────────────────────────┐
  │ Cypress:    3.1.0                                                                              │
  │ Browser:    Electron 59 (headless)                                                             │
  │ Specs:      1 found (test_spec.js)                                                             │
  └────────────────────────────────────────────────────────────────────────────────────────────────┘


────────────────────────────────────────────────────────────────────────────────────────────────────
                                                                                                    
  Running: test_spec.js...                                                                 (1 of 1) 

  (Results)

  ┌────────────────────────────┐
  │ Tests:        1            │
  │ Passing:      1            │
  │ Failing:      0            │
  │ Pending:      0            │
  │ Skipped:      0            │
  │ Screenshots:  0            │
  │ Video:        true         │
  │ Duration:     13 seconds   │
  │ Spec Ran:     test_spec.js │
  └────────────────────────────┘

cypress:server:run attempting to close the browser +8ms
  cypress:server:browsers killing browser process +0ms
  cypress:server:server Getting remote state: { auth: null, props: { port: '4444', tld: 'localhost', domain: '' }, origin: 'http://localhost:4444', strategy: 'http', visiting: false, domainName: 'localhost', fileServer: null } +49ms
  cypress:server:proxy handling proxied request { url: 'someUrl', proxiedUrl: 'someProxyUrl', headers: { host: 'localhost:4444', 'proxy-connection': 'keep-alive', accept: 'text/plain, */*; q=0.01', 'x-requested-with': 'XMLHttpRequest', 'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Cypress/3.1.0 Chrome/59.0.3071.115 Electron/1.8.2 Safari/537.36', referer: 'someReferer', 'accept-encoding': 'gzip, deflate', 'accept-language': 'en-US', cookie: ' __cypress.unload=true' }, remoteState: { auth: null, props: { port: '4444', tld: 'localhost', domain: '' }, origin: 'http://localhost:4444', strategy: 'http', visiting: false, domainName: 'localhost', fileServer: null } } +0ms
  cypress:server:routes Serving Cypress front-end by requested URL: /__/ +10ms
  cypress:server:server Getting remote state: { auth: null, props: { port: '4444', tld: 'localhost', domain: '' }, origin: 'http://localhost:4444', strategy: 'http', visiting: false, domainName: 'localhost', fileServer: null } +0ms
  cypress:server:runner serving runner index.html with config { version: '3.1.0', platform: 'darwin', arch: 'x64', projectName: 'test' } +0ms
  cypress:server:video capture stderr log { message: 'Past duration 0.999992 too large' } +142ms
  cypress:server:video capture stderr log { message: '    Last message repeated 1 times' } +109ms
  cypress:server:video capture stderr log { message: 'frame=  353 fps= 35 q=17.0 size=    1280kB time=00:00:13.56 bitrate= 773.3kbits/s dup=122 drop=0 speed=1.36x    ' } +0ms
  cypress:server:video capture stderr log { message: 'frame=  365 fps= 35 q=12.0 size=    1536kB time=00:00:14.04 bitrate= 896.2kbits/s dup=129 drop=0 speed=1.34x    ' } +555ms
  cypress:server:video capture stderr log { message: 'frame=  380 fps= 34 q=12.0 size=    1536kB time=00:00:14.64 bitrate= 859.5kbits/s dup=139 drop=0 speed=1.32x    ' } +650ms
  cypress:server:video capture stderr log { message: 'frame=  393 fps= 34 q=12.0 size=    1536kB time=00:00:15.16 bitrate= 830.0kbits/s dup=148 drop=0 speed=1.31x    ' } +505ms
  cypress:server:video capture stderr log { message: 'frame=  409 fps= 33 q=12.0 size=    1536kB time=00:00:15.80 bitrate= 796.4kbits/s dup=159 drop=0 speed=1.29x    ' } +595ms
  cypress:server:video capture stderr log { message: 'frame=  422 fps= 33 q=12.0 size=    1536kB time=00:00:16.32 bitrate= 771.0kbits/s dup=168 drop=0 speed=1.28x    ' } +499ms
  cypress:server:video capture stderr log { message: 'frame=  436 fps= 33 q=12.0 size=    1536kB time=00:00:16.88 bitrate= 745.5kbits/s dup=177 drop=0 speed=1.26x    ' } +649ms
  cypress:server:video capture stderr log { message: 'frame=  449 fps= 32 q=12.0 size=    1536kB time=00:00:17.40 bitrate= 723.2kbits/s dup=186 drop=0 speed=1.26x    ' } +506ms
  cypress:server:video capture stderr log { message: 'frame=  465 fps= 32 q=12.0 size=    1792kB time=00:00:18.04 bitrate= 813.8kbits/s dup=197 drop=0 speed=1.24x    ' } +595ms
  cypress:server:video capture stderr log { message: 'frame=  480 fps= 32 q=12.0 size=    1792kB time=00:00:18.64 bitrate= 787.6kbits/s dup=207 drop=0 speed=1.23x    ' } +648ms
  cypress:server:video capture stderr log { message: 'frame=  497 fps= 32 q=12.0 size=    1792kB time=00:00:19.32 bitrate= 759.9kbits/s dup=219 drop=0 speed=1.23x    ' } +603ms
  cypress:server:video capture stderr log { message: 'frame=  509 fps= 31 q=13.0 size=    1792kB time=00:00:19.80 bitrate= 741.4kbits/s dup=227 drop=0 speed=1.22x    ' } +499ms
  cypress:server:video capture stderr log { message: 'frame=  524 fps= 31 q=12.0 size=    1792kB time=00:00:20.40 bitrate= 719.6kbits/s dup=237 drop=0 speed=1.21x    ' } +650ms
  cypress:server:video capture stderr log { message: 'frame=  537 fps= 31 q=12.0 size=    1792kB time=00:00:20.92 bitrate= 701.7kbits/s dup=246 drop=0 speed=1.21x    ' } +500ms
  cypress:server:video capture stderr log { message: 'frame=  553 fps= 31 q=12.0 size=    1792kB time=00:00:21.56 bitrate= 680.9kbits/s dup=257 drop=0 speed= 1.2x    ' } +601ms
  cypress:server:video capture stderr log { message: 'frame=  565 fps= 31 q=12.0 size=    1792kB time=00:00:22.04 bitrate= 666.1kbits/s dup=265 drop=0 speed=1.19x    ' } +500ms
  cypress:server:video capture stderr log { message: 'frame=  580 fps= 30 q=12.0 size=    1792kB time=00:00:22.64 bitrate= 648.4kbits/s dup=275 drop=0 speed=1.19x    ' } +648ms
  cypress:server:video capture stderr log { message: 'frame=  593 fps= 30 q=12.0 size=    1792kB time=00:00:23.16 bitrate= 633.9kbits/s dup=284 drop=0 speed=1.18x    ' } +500ms
  cypress:server:video capture stderr log { message: 'frame=  605 fps= 30 q=12.0 size=    1792kB time=00:00:23.64 bitrate= 621.0kbits/s dup=292 drop=0 speed=1.18x    ' } +500ms
  cypress:server:video capture stderr log { message: 'frame=  618 fps= 30 q=12.0 size=    1792kB time=00:00:24.16 bitrate= 607.6kbits/s dup=301 drop=0 speed=1.17x    ' } +505ms
  cypress:server:video capture stderr log { message: 'frame=  634 fps= 30 q=12.0 size=    1792kB time=00:00:24.80 bitrate= 592.0kbits/s dup=312 drop=0 speed=1.17x    ' } +597ms
  cypress:server:timers clearing timer id 194 from queue { '194': { args: [], ms: 85000, cb: [Function] } } +160ms
  cypress:server:timers queuing timer id 195 after 85000 ms +0ms
  cypress:server:timers child received timer id 195 +12s
  cypress:server:video capture stderr log { message: 'frame=  649 fps= 30 q=12.0 size=    1792kB time=00:00:25.40 bitrate= 578.0kbits/s dup=322 drop=0 speed=1.16x    ' } +488ms
  cypress:server:video capture stderr log { message: 'frame=  662 fps= 30 q=12.0 size=    1792kB time=00:00:25.92 bitrate= 566.4kbits/s dup=331 drop=0 speed=1.16x    ' } +500ms
  cypress:server:video capture stderr log { message: 'frame=  674 fps= 29 q=12.0 size=    1792kB time=00:00:26.40 bitrate= 556.1kbits/s dup=339 drop=0 speed=1.16x    ' } +500ms
  cypress:server:video capture stderr log { message: 'frame=  690 fps= 29 q=12.0 size=    1792kB time=00:00:27.04 bitrate= 542.9kbits/s dup=350 drop=0 speed=1.15x    ' } +605ms
  cypress:server:timers child sending timer id 4 +4s
  cypress:server:video capture stderr log { message: 'frame=  747 fps= 29 q=12.0 size=    1792kB time=00:00:29.32 bitrate= 500.7kbits/s dup=403 drop=0 speed=1.14x    ' } +2s
  cypress:server:timers child sending timer id 24 +2s
  cypress:server:video capture stderr log { message: 'frame=  809 fps= 29 q=12.0 size=    2048kB time=00:00:31.80 bitrate= 527.6kbits/s dup=462 drop=0 speed=1.12x    ' } +3s
  cypress:server:timers child sending timer id 26 +284ms
  cypress:server:timers child sending timer id 27 +24ms
  cypress:server:timers child sending timer id 28 +0ms
  cypress:server:timers child sending timer id 29 +183ms
  cypress:server:timers child sending timer id 30 +11ms
  cypress:server:timers child sending timer id 31 +10ms
  cypress:server:timers child sending timer id 32 +10ms
  cypress:server:timers child sending timer id 33 +10ms
  cypress:server:timers child sending timer id 34 +16ms
  cypress:server:timers child sending timer id 35 +10ms

```

This is only happening with this specific test case. Inside we're using a generation of a blob object to simulate a file upload process - not sure if electron has an issue with this.

### Desired behavior:

Run on electron should finish - same as with chrome.

### Steps to reproduce:

### Versions

Cypress: 3.1.0
Mac OS X: 10.13.6
",bug
360575601,CLI borders are all noise on Windows Azure CI,"- running Cypress tests on Windows hosted VM on Azure CI https://glebbahmutov.visualstudio.com/cypress-example-kitchensink-fork/_build/results?buildId=29&view=logs
- the step `Run Cypress tests` shows non-ascii characters for all CLI boxes
<img width=""1114"" alt=""screen shot 2018-09-15 at 4 58 48 pm"" src=""https://user-images.githubusercontent.com/2212006/45590570-e359f300-b908-11e8-9227-03b1eb597802.png"">

Command goes through
```
[section]******************************************************************************
[section]Starting: Run Cypress tests
[section]******************************************************************************
==============================================================================
Task         : Command Line
Description  : Run a command line script using cmd.exe on Windows and bash on macOS and Linux.
Version      : 2.136.0
Author       : Microsoft Corporation
Help         : [More Information](https://go.microsoft.com/fwlink/?LinkID=613735)
==============================================================================
Generating script.
Script contents:
npm run test:ci:record
[command]""C:\Windows\system32\cmd.exe"" /D /E:ON /V:OFF /S /C ""CALL ""D:\a\_temp\d29ef00f-42d4-4f38-ac23-80844a524e1b.cmd""""

> cypress-example-kitchensink@1.0.2 test:ci:record D:\a\1\s
> run-p --race start:ci e2e:record
```

I would be ok with an environment flag to disable graphical lines

Cypress 3.1.0
",bug
360448620,Mixing cy.on()/cy.once() with a one-argument it() function causes test to hang,"Giving the lambda passed into the `it()` block a single argument will cause Cypress to pass a function in that must be called for the test to finish.

If you use the `cy.on()` command inside an `it()` block with a single-argument function, the test will hang when it reaches `cy.on()`.

HTML:

```html
<html>
  <body>
    <div id='covered' style='position:absolute;background:red;'>asdf</div>
    <div id='uncovered' style='position:absolute;background:blue;'>asdf</div>
  </body>
</html>
```

Test:

```javascript
describe('Test', () => {
  it('Tests done()', done => {
    let shouldCallDone = false;

    cy.log('This log should happen.');

    cy.once('fail', (err) => {
      shouldCallDone = true;
    });

    cy.get('#covered').click({ timeout: 1000 });

    cy.log('This log should also happen, but it doesn\'t.');

    cy.get('html').then(() => {
      if (shouldCallDone)
        done();
      else
        throw ""done() was never called.""
    });
  });

  it('Tests cy.log', () => {
    cy.log('This log should happen too, but it also doesn\'t.');
  });
});

```

### Current behavior:

![image](https://user-images.githubusercontent.com/6700184/45574467-2307d880-b83e-11e8-822f-90f8c000a3d8.png)

Notice how the test has been running for almost 14 minutes.

### Desired behavior:

This code should not cause Cypress to hang.

### Versions

Cypress 3.1.0
Windows 10
Electron 59
",bug
360413149,Whitelist autoScrollingEnabled to be saved in state.json,`autoScrollingEnabled` was missed when originally creating a whitelist for `state.json`,bug
360134081,"Upload CI Result Error: ""Cannot complete same instance multiple times""","<!-- 
Is this a question? Do not open an issue. Please ask in our chat https://gitter.im/cypress-io/cypress

Want something newly documented? Please open an issue in the respective repo: 
- docs: https://github.com/cypress-io/cypress-documentation 
- example recipes: https://github.com/cypress-io/cypress-example-recipes
-->

### Current behavior:

Our `Jenkins CI` job's result cannot not be uploaded to Cypress CI Dashboard. 
<!-- images, stack traces, etc -->

```
Jenkins CI logs:
  (Uploading Results)

Warning: We encountered an error talking to our servers.

This run will not be recorded.

This error will not alter the exit code.

StatusCodeError: 400 - ""Cannot complete same instance multiple times""

================================================================================
  (Run Finished)


      Spec                                    Tests  Pass…  Fail…  Pend…  Skip… 
  ┌────────────────────────────────────────────────────────────────────────────┐
  │ ✖ ads_html5_sdk.js               1:38:…    175    167      8      -      - │
  └────────────────────────────────────────────────────────────────────────────┘
    1 of 1 failed (100%)              1:38…    175    167      8      -      -  


───────────────────────────────────────────────────────────────────────────────────
                                                                                   
  Recorded Run: https://dashboard.cypress.io/#/projects/f92sa3/runs/6             
```

Cypress Dashboard:
![image](https://user-images.githubusercontent.com/5592808/45525989-e325fe80-b807-11e8-95f5-687bc7103fef.png)

### Desired behavior:
Normally, the triggered jenkin's job  would upload its result to CI dashboard before. But after the CI dashboard uploaded, we cannot  make this happened with the `Cannot complete same instance multiple times`  error.


### Versions

Cypress 3.1.0



",bug
357014316,cy.screenshot breaks timers in app,"<!-- 
Is this a question? Do not open an issue. Please ask in our chat https://gitter.im/cypress-io/cypress

Want something newly documented? Please open an issue in the respective repo: 
- docs: https://github.com/cypress-io/cypress-documentation 
- example recipes: https://github.com/cypress-io/cypress-example-recipes
-->

### Current behavior:

After ```cy.screenshot```, an infinite sequence of errors is thrown due to corrupt timers.
<!-- images, stack traces, etc -->

### Desired behavior:

Timers don't become corrupted.

<!-- A clear and concise description of what you want to happen -->

### Steps to reproduce:

Sorry I don't have a small failing example. The app code looks like this:

```js
Rx.Observable.of(true)
    .concat(Rx.Observable.fromEvent(window, 'resize'))
    .debounceTime(200).subscribe(() =>
        callback(['viewportWidth', document.documentElement.clientWidth]));
```

which allows the app to adjust layout after a screen resize. From poking around the ```screenshot``` code, it apparently defers ```setInterval```, ```setTimeout```, and ```requestAnimationFrame``` calls, then resizes the page, screenshots, resizes again, and processes the deferred calls.

I don't know the precise failure mode, but it's the rxjs ```debounceTime``` scheduler that is broken after this call. It will run endlessly, throwing errors due to the action being stale. I suspect the problem is that the cypress timer shims did not consider ```clearInterval``` and friends. So, the debounce mechanism will set an interval, receive a resize event, then receive another resize event, causing it to clear the interval. Clearing the interval does nothing due to the return value from cypress' shimmed method being meaningless (return value of [].push), and then cypress processes its call queue, invoking the original ```setInterval```. So instead of ```setInterval``` followed by ```clearInterval```, it will run ```clearInterval``` on a meaningless value, followed by ```setInterval```. That's just a guess, based on the code & behavior.

I expect I can work around it for now by introducing an out-of-band flag to filter the resize events while screenshotting.
<!-- Issues without reproducible steps might get closed. *Tip* You can fork https://github.com/cypress-io/cypress-test-tiny repo, set up a failing test, then tell us the repo/branch to try. -->

### Versions
cypress 3.1.0, OS ubuntu 14.04, browser chrome 65.0.3325.181
<!-- Cypress, operating system, browser -->
",bug
355981525,"Subfolder with dots in their name are recognized as spec files, not as folders","<!-- 
Is this a question? Do not open an issue. Please ask in our chat https://gitter.im/cypress-io/cypress

Want something newly documented? Please open an issue in the respective repo: 
- docs: https://github.com/cypress-io/cypress-documentation 
- example recipes: https://github.com/cypress-io/cypress-example-recipes
-->

### Current behavior:

If folders contain a dot `.` Cypress recognizes subfolders as spec files in the application as well as in CI.

![image](https://user-images.githubusercontent.com/35334883/44914986-0645ae00-ad32-11e8-9fcd-724d5f0d8e75.png)
In this screenshot the yellow highlighted lines are folders within my integration folder.

On CI, cypress attempts to run these:

![image](https://user-images.githubusercontent.com/35334883/44915126-7bb17e80-ad32-11e8-9bce-650a4609b7e5.png)

### Desired behavior:

Folders should be recognized as such, even if the name contains a dot.

### Steps to reproduce:

In your integration folder, create a subfolder containing a dot, e.g. `1.1_General`

### Versions

Issue found on cypress 3.1.0

### Workaround
Rename folders not to contain dots.
",bug
355739892,No possibility to drag and drop to the top of the window when cypress scrolls down for the element,"<!-- 
Is this a question? Do not open an issue. Please ask in our chat https://gitter.im/cypress-io/cypress

Want something newly documented? Please open an issue in the respective repo: 
- docs: https://github.com/cypress-io/cypress-documentation 
- example recipes: https://github.com/cypress-io/cypress-example-recipes
-->

### Current behavior:
Not able to drag and drop an element to the top of the document when window is scrollable and the element is at the very bottom.

### Desired behavior:
There should be some possibility to make this scenario working.
<!-- A clear and concise description of what you want to happen -->

### Steps to reproduce:
1. I have a list of interactive elements. The list is quite long and the window is changed to scrollable to navigate through all those elements.
2. I want to get the element which is in the very bottom, drag it, scroll up and drop it to the top of the list.
Manually it looks like below:
<img width=""1273"" alt=""draganddropmanual"" src=""https://user-images.githubusercontent.com/26725074/44877398-2595fa00-aca4-11e8-9055-3168ce7014ca.png"">

Cypress behaviour:
a. cy.get() --> scrolls down to get the element
b. When I now try to drag and drop up, it's not possible as I am already at the top of the page:
![draganddropcypress](https://user-images.githubusercontent.com/26725074/44877513-81608300-aca4-11e8-835f-ae765c0d59bc.png)
c. There is no way to scroll up the window when dragging the element!
<!-- images, stack traces, etc -->
<!-- Issues without reproducible steps might get closed. *Tip* You can fork https://github.com/cypress-io/cypress-test-tiny repo, set up a failing test, then tell us the repo/branch to try. -->

### Versions
Cypress 3.1.0
MacOS
Chrome
<!-- Cypress, operating system, browser -->
",bug
355631905,CYPRESS_CACHE_FOLDER env variable doen't work on cypress install when relative path,"### Current behavior:
Using `CYPRESS_CACHE_FOLDER` env variable only works for executing pre-installed cypress.
Would've expected it to work also when installing cypress.

### Desired behavior:
Using the above env var should also work for installation.
We want the cache folder to be placed on the current working folder in order for it to persist between docker runs (the current folder is mounted inside).
Not being able to define the cache folder on installation time requires us to hard copy the cache from the default location to the mount which takes considerable time no reason.

### Steps to reproduce:
in linux:
```
export CYPRESS_CACHE_FOLDER=./.cypressCache/Cypress
npm install cypress@3.1.0
ls ./.cypressCache/Cypress #nothing is returned
```

### Versions
Linux (probably not OS-related)
Cypress 3.0.2 and 3.1.0 (didn't check other versions)
",bug
354538309,Screenshot file name too long warning when Bytes exceeded,"### Current behavior:
Currently I use BDD to document acceptance test cases, each test scenario is well detailed, Cypress uses the description of ""it"" to create the screenshot file name, but when ""it"" exceeds 255 characters it is not possible to create the screenshot file.

```
  6) As a quality manager, i would like to query the occurence history to find information about them GIVEN that im onthe search sreen, WHEN i fill in the ocurrence date fields, check the only delayed ones box and click on the filter button, THEN i see the filtered results:
     Error: ENAMETOOLONG: name too long, open '/home/node/cypress/screenshots/tools/us6.spec.js/As a quality manager iwould like to query the occurence history to find information about them -- GIVEN that im on the search sreen WHEN i fill in the ocurrence date fields check the only delayed ones box and click on the filter button THEN i see the filteredresults (failed).png'
```

### Desired behavior:
1. I hope Cypress allows me to change the name of the destination file from the screenshot before it writes it.
1. Or, I hope Cypress will worry about the size of the file before it writes it and limits it to 255 characters.

### Steps to reproduce:
1. Create a test case with ""it"" description too long, bigger then 255 caracteres.
1. Make a test case broken.
1. Run tests.
1. Look the verbose log, the screenshot not was created.

### Versions
Cypress:    3.0.3
Browser:    Chrome 67

",bug
354031159,beforeSpecRun is not a function,"Cypress 3.1.0 Linux CircleCI job https://circleci.com/gh/cypress-io/cypress/33960

```
Warning: It looks like you are trying to record this run from a forked PR.

The 'Record Key' is missing. Your CI provider is likely not passing private environment variables to builds from forks.

These results will not be recorded.

This error will not alter the exit code.

====================================================================================================

  (Run Starting)

  ┌────────────────────────────────────────────────────────────────────────────────────────────────┐
  │ Cypress:    3.1.0                                                                              │
  │ Browser:    Electron 59 (headless)                                                             │
  │ Specs:      16 found (app_spec.coffee, fixtures_spec.coffee, footer_spec.coffee, global_mode_… │
  └────────────────────────────────────────────────────────────────────────────────────────────────┘

beforeSpecRun is not a function
TypeError: beforeSpecRun is not a function
    at parallelWithRecord (/root/cypress/packages/server/lib/modes/run.coffee:282:5)
    at iterateThroughSpecs (/root/cypress/packages/server/lib/modes/run.coffee:307:7)
    at Object.runSpecs (/root/cypress/packages/server/lib/modes/run.coffee:789:5)
    at runAllSpecs (/root/cypress/packages/server/lib/modes/run.coffee:953:12)
    at /root/cypress/packages/server/lib/modes/record.coffee:451:9
From previous event:
    at /root/cypress/packages/server/lib/modes/record.coffee:449:6
    at runCallback (timers.js:781:20)
    at tryOnImmediate (timers.js:743:5)
    at processImmediate [as _immediateCallback] (timers.js:714:5)
npm ERR! code ELIFECYCLE
npm ERR! errno 1
npm ERR! @packages/desktop-gui@0.0.0 cypress:run: `node ../../scripts/cypress run --project . ""--record"" ""--parallel"" ""--group"" ""2x-desktop-gui""`
npm ERR! Exit status 1
npm ERR! 
npm ERR! Failed at the @packages/desktop-gui@0.0.0 cypress:run script.
npm ERR! This is probably not a problem with npm. There is likely additional logging output above.
```",bug
353585342,Cypress cannot test sites that implement SRI,"### Current behavior:

When running Cypress against a site that implements [SRI hashes](https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity), resources on the page are immediately blocked by Chrome and the page will not load due to invalid hashes. Disabling `chromeWebSecurity` does nothing. The following error appears in the Chrome DevTools console.
```
Failed to find a valid digest in the 'integrity' attribute for resource 'https://{my-domain}/assets/vendor-cdn-c9965fdc08cb8e112642197db5d0fc54.js' with computed SHA-256 integrity '2/Ht5YqBxaylA4fn2318LzUh4tFwjZH4WlN0lsHme9M='. The resource has been blocked.
```

### Desired behavior:

The page of an SRI enabled site can load and not be blocked by Chrome. Either Cypress dynamically corrects the hash when it tampers with the file, or the `chromeWebSecurity` option actually disables SRI checks in Chrome.

### Steps to reproduce:

1. Start a Cypress instance and configure to point to a site that implements SRI checking (e.g. https://github.com).
2. Implement a basic step that verifies anything on the page.
3. Observe the test fail, the error message in the Chrome DevTools console and resources being unable to load.

### Versions

Cypress 3.1.0
Fedora 28
Chrome 68.0.3440.106
",bug
352376051,Bad XHR performance with Google Cloud Firestore. Like really bad.,"### Current behavior:

When making requests to Firestore outside of Cypress, XHR responses take less that a couple seconds (at most).
When making requests to Firestore inside of Cypress, XHR responses take more than 60 seconds.

![image](https://user-images.githubusercontent.com/944954/44379314-f543a400-a4ca-11e8-88ad-859e8e594359.png)

### Desired behavior:

When not stubbing, I expect XHRs to have the same performance inside of a Cypress spec as they do when my site is hosted or when using a local server.

### Steps to reproduce:

I created an example app which will hit the actual Firestore server. It includes a button to send an XHR and a timer which will run until the response is returned.

```bash
git clone https://github.com/bdiz/cypress-firestore-performance.git
cd cypress-firestore-performance
npm install
npm run serve
# click the ""Add document to Firestore"" button and observe the XHR finish within a couple seconds
# CTRL-C to kill the server
npm run test:e2e
# Run the test.js spec and click the ""Add document to Firestore"" button and observe the XHR finishes in 30 seconds plus.
```

### Versions

Cypress 3.1.0
Ubuntu 16.10
Chrome 67 (used for hitting local server and inside test runner)",bug
351871745,Video recorded is incomplete - last frames before tests are complete are not recorded,"### Current behavior:

When running with `cypress run --record`, the generated mp4 video file is incomplete, it does not wait for testing to be finished.

### Desired behavior:

The generated video file should be able to record the whole testing process.

### Steps to reproduce:

Check an example here in Cypress Dashboard: (it's a public project so I assume you can all access this)

https://dashboard.cypress.io/#/projects/nf8wkk/runs



There are 2 runs, one is recored from Mac, another one is from Linux on Travis CI, the generated videos files from both of them are incomplete.

Here is my project for reference https://github.com/PinkyJie/cypress-auto-stub-example

### Versions

Cypress: 3.1.0
System: Mac 10.12
Browser: Chrome 68",bug
350833635,Flow Type Declarations & Annotations Cause Syntax Errors Starting in 3.1.0,"### Current behavior:

After the 3.1.0 update, something changed with Cypress code bundling where flow-type annotations are no longer recognized and treated as unexpected tokens/syntax errors.

```
SyntaxError: /cypress/specs/dashboard/login.spec..js: Unexpected token (14:14)

  12 | 
  13 | const loginPage = new LoginPage();
> 14 | const username: string = randomEmail();
     |               ^
  15 | const password: string = randomPassword();
  16 | 
  17 | describe('Login', () => { while parsing file: 
/cypress/specs/dashboard/login.spec.js
```

### Desired behavior:

While Flow was never officially supported, this is embedded deep into our codebase, and we would rather not remove all of our type annotations.  IF there is another strategy for making sure that the code is bundled properly, I'm all ears, but as of right now we aren't able to upgrade.

@paulfalgout suggested this may stem from a bump to the https://github.com/cypress-io/cypress-browserify-preprocessor

### Steps to reproduce:

Add a simple type declaration or annotation to a variable in any spec file. This works in 3.03 or below, but not in 3.1.0 +

### Versions

Cypress 3.1.0, OSX 10.13.5, Node 8.11.1
",bug
350799514,"Full page screenshots with `scale: true` are not stitched together as expected, contains black borders / spacings","I'm trying to capture screenshots for various viewport sizes. At points during each test, I call a custom Cypress command, which loops over an array of viewport sizes to update the viewport and take the screenshot.

```javascript
Cypress.Commands.add('responsiveScreenshots', function (customLabel) {
  const { title } = this.test;
  if (customLabel) {
    title += ` - ${customLabel}`;
  }

  const sizes = [
    { w: 375, h: 667 },
    { w: 768, h: 1024 },
    { w: 1280, h: 800 }
  ];

  cy.get('.notification-manager').invoke('css', 'position', 'absolute');
  sizes.forEach((size) => {
    const filename = `${title}/${size.w}x${size.h}`;
    cy.viewport(size.w, size.h);
    cy.screenshot(filename, {
      scale: true,
      capture: 'fullPage'
    });
  });
  cy.get('.notification-manager').invoke('css', 'position', null);
});
```

Here is an example of the sort of screenshot I'm getting:

![incorrect](https://user-images.githubusercontent.com/3673683/44148689-41743e36-a091-11e8-81f2-130887b30082.png)

I'm expecting something more like this:

![correct](https://user-images.githubusercontent.com/3673683/44148690-418e677a-a091-11e8-9b6f-17e1582efbe1.png)

I haven't mocked up the notification so ignore that, but clearly something is wrong.

This happens in both headless and headed modes.

Bug?

I'm not sure if this is the correct approach to this problem. I will be using these screenshots for visual regression testing, so they need to look correct.",bug
349684304,Fix specs randomly hanging when running in CI with electron,"We've been working to try to figure out why the Electron browser randomly hangs when attempting to launch specs for awhile now.

After adding many more debug lines, I believe I've tracked it down to the line causing this problem.

I believe it is related to attempting to set the electron `menu` when `options.show = false` due to running headlessly, possibly also related to XVFB.

This batch of logs shows that it is the last thing logged before it hangs...

```text
cypress:server:windows instantiated browser window 16ms
cypress:server:windows attaching listeners (1) 0ms
cypress:server:windows attaching listeners (2) 1ms
cypress:server:windows attaching listeners (3) 0ms
cypress:server:windows attaching listeners (4) 0ms
cypress:server:browsers:electron launching window instance 0ms
cypress:server:browsers:electron setting menu 0ms

```

The solution may be as simple as just not setting the menu when in headless mode. We'll rerun this build a few times and if nothing logs then I'll know for sure.",bug
349595948,Intermittent 'Error: Object has been destroyed' when running on Jenkins CI,"### Current behavior:

Currently we receive and error message intermittently when testing on Jenkins CI

```
  ┌─────────────────────────────────────────────────┐
  │ Tests:        2                                 │
  │ Passing:      2                               │
  │ Failing:      0                                 │
  │ Pending:      0                               │
  │ Skipped:      0                               │
  │ Screenshots:  0                             │
  │ Video:        true                              │
  │ Duration:     23 seconds                        │
  │ Spec Ran:     src/createUser.spec.js │
  └─────────────────────────────────────────────────┘

Error: Object has been destroyed

    at WebContents.<anonymous> (/var/lib/jenkins/.cache/Cypress/3.0.3/Cypress/resources/app/packages/server/lib/gui/windows.js:204:22)

    at emitOne (events.js:115:13)

    at WebContents.emit (events.js:210:7)

Error: Object has been destroyed

    at WebContents.<anonymous> (/var/lib/jenkins/.cache/Cypress/3.0.3/Cypress/resources/app/packages/server/lib/gui/windows.js:204:22)

    at emitOne (events.js:115:13)

    at WebContents.emit (events.js:210:7)

```
It seems strange that it's referencing anything to do with the Windows GUI, since we're running Jenkins on Ubuntu. Is it possible that the operating system is being detected incorrectly?

### Desired behavior:

The tests should pass consistently without this error, or if it is the case, provide an error that points to the causation of the problem.

### Steps to reproduce:

The error seems intermittent, but always seems to happen when switching to the second set of tests.

### Versions

Cypress 3.0.3 running on Ubuntu on Jenkins CI
",bug
349532955,Screenshots saved under 'All Specs' directory when running all specs,"We want to save screenshots under a directory with the spec path, but when running all specs, all screenshots end up under an `All Specs` directory. We need to ensure each screenshot gets saved under its own spec's directory when running all specs.

See https://github.com/cypress-io/cypress/issues/2091#issuecomment-412028972",bug
348564772,Scrolling strategy make element cannot click,"<!-- 
Is this a question? Do not open an issue. Please ask in our chat https://gitter.im/cypress-io/cypress

Want something newly documented? Please open an issue in the respective repo: 
- docs: https://github.com/cypress-io/cypress-documentation 
- example recipes: https://github.com/cypress-io/cypress-example-recipes
-->

### Current behavior:

<!-- images, stack traces, etc -->
As the guide documented:
> The scrolling algorithm works by scrolling the top, leftmost point of the element we issued the command on to the top, leftmost scrollable point of its scrollable container.

This cause some element cannot be clicked and the ""nudge"" seems not working.
I've produced a smallest example for the bug on codepen:
https://codepen.io/yuyz0112/pen/jpeZvZ

Cypress code:
`cy.contains('3').click();`

After execute click command, the item contains '3' scrolled to the top and was covered by the mask element.

![image](https://user-images.githubusercontent.com/13651389/43815115-a16bdbc8-9b00-11e8-9314-ecaba5849dba.png)

### Desired behavior:

<!-- A clear and concise description of what you want to happen -->

I'm not sure whether this situation should be covered by the scrolling strategy, but I still expect a method to test this without change my code.

### Steps to reproduce:

<!-- Issues without reproducible steps might get closed. *Tip* You can fork https://github.com/cypress-io/cypress-test-tiny repo, set up a failing test, then tell us the repo/branch to try. -->

### Versions

v3.0.3

<!-- Cypress, operating system, browser -->
",bug
348516336,Incorrect string sent when there is no PR (Travis),"@bahmutov commented on [Tue Aug 07 2018](https://github.com/cypress-io/cypress-api/issues/774)

When there is no PR, I see wrong url `#false`

<img width=""566"" alt=""screen shot 2018-08-07 at 6 56 21 pm"" src=""https://user-images.githubusercontent.com/2212006/43806875-df3d8614-9a73-11e8-8c79-41fa9420eddb.png"">

API returns bad information for this case

<img width=""902"" alt=""screen shot 2018-08-07 at 6 57 19 pm"" src=""https://user-images.githubusercontent.com/2212006/43806891-f6a006ec-9a73-11e8-8149-b8e879dba2a2.png"">

The test runner probably does not properly convert ""false"" into boolean

",bug
348342165,Exception in root level after() doesn't fail test run in interactive mode,"### Current behavior:

If there's an `after()` outside of any `describe`, `it` or `context` (""rool level""), which throws an exception, that doesn't fail the test run. This is different from how it works in `mocha`, where you get a `""after all"" hook` failure.

Also, if it's a synchronous failure, the exception doesn't show up anywhere.
If it's async, it shows up like this:

![screen shot 2018-08-07 at 5 13 10 pm](https://user-images.githubusercontent.com/394320/43781286-37cbe08c-9a65-11e8-9a76-68f7cca5be42.png)


### Desired behavior:

The whole test run should fail (sometimes you would want to place an assertion there that is possible only after all tests have run).

### Steps to reproduce:

Add this to your tests:
```js
after(() => {
  cy.then(() => {
    throw new Error('bla bla');
  });
});
```

### Versions

Cypress: 3.0.3
OS: Mac OS X 10.12.6 (Sierra)
Browser: both Electron (59) and Chrome (68)
",bug
348332544,Cypress behind corporate proxy with cross-domain static content times out,"This is probably one of the instances of problems caused by cypress behind a corporate proxy (#1469), but I haven't seen a bug report that is similar to this, so let me file it here :-)

### Current behavior:

We are running cypress in a docker container (started from jenkins) behind a corporate proxy. I am passing the proper `http_proxy`, `https_proxy` and `no_proxy` env variables.

As a minimal test case, we are doing:

```js
const logo = '[data-test=""main-logo""]';

describe('basic test', function () {
    it('Connect to test via direct url', function(){
        cy.visit('https://www.bol.com/nl/');
        cy.get(logo).should('be.visible');
    });
});
```

This fails with a timeout, but it does seem able to fetch the HTML (see screenshot)

![basic test -- connect to test via direct url failed](https://user-images.githubusercontent.com/3909851/43779582-04227c0c-9a59-11e8-8e9a-9f999b7b2145.png)

I think the problem comes from the fact that we are serving our static content, including javascript, fonts and css, from a different superdomain (https://s.s-bol.com). In the debug logging of cypress, we see repeats of this:

```
07:24:55 Mon, 06 Aug 2018 05:24:55 GMT cypress:server:server Got CONNECT request from s.s-bol.com:443
07:24:55 Mon, 06 Aug 2018 05:24:55 GMT cypress:https-proxy Writing socket connection headers for URL: s.s-bol.com:443
07:24:55 Mon, 06 Aug 2018 05:24:55 GMT cypress:server:cors Parsed URL { port: '443', tld: 'com', domain: 's-bol' }
07:24:55 Mon, 06 Aug 2018 05:24:55 GMT cypress:server:server HTTPS request does not match URL: https://s.s-bol.com:443 with props: { port: '443', tld: 'com', domain: 'bol' }
07:24:55 Mon, 06 Aug 2018 05:24:55 GMT cypress:https-proxy Making direct connection to s.s-bol.com:443
```

With the direct connection not being passed through our proxy, and eventually timing out. This is supported by the fact that a slightly different test setup where the static content is served from the superdomain do pass. The setup of our proxy seems okay: when I do a `curl` for static content from the same docker container, it passes through (and times out when the proxy-settings are absent)

### Desired behavior:
The basic test succeeds

### Versions

Cypress: 3.0.3
OS: Linux (dockerized)
Browser: Electron


If there is anything you want me to try or add, please ask! We are absolutely loving cypress for testing standalone components in isolation and really want to roll it out to doing integration tests.
",bug
347549204,"When error within 'test:after:run', Cypress hangs instead of throwing the error.","### Current behavior:
`test:after:run` hangs

### Steps to reproduce:
Sample test:

```javascript
Cypress.on('test:after:run', () => {
  throw new Error('foo');
});

describe('Test 2', () => {
  it('will send out request', ()  => {
    expect(true).to.eq(true);
  });
});
```

Meanwhile, this works fine:

```javascript
Cypress.on('test:before:run', () => {
  throw new Error('foo');
});

describe('Test 1', () => {
  it('will send out request', ()  => {
    expect(true).to.eq(true);
  });
});
```

What am I missing?

### Versions
* Operating System: Mac OS 10.12.6
* Cypress Version: 3.0.3
* Browser Version: Chrome 68.0.3440.75

",bug
345979365,Click events on svg element generates: CypressError: Timed out retrying: Illegal invocation,"### Current behavior:

We have a click assertion:
```js
cy.get('[data-role=""rater-button""]')
    .first()
    .click();
```

instead of it clicking and continuing, we get this error: `CypressError: Timed out retrying: Illegal invocation`

### Desired behavior:

It should click and advance.

### Steps to reproduce:

Create an svg object, select it and click it.

### Versions
Cypess 3.0.3
Mac OS X (10.12.6)
",bug
345215428,Invalid test duration,"In a project with a LOT of tiny tests like this one

```js
const n = 1000
describe(`f with ${n} tests`, () => {
  Cypress._.times(n, (k) => {
    it(`works ${k}`, () => {})
  })
})
```
sometimes get invalid timing structure, look at durations

```
{
        ""testId"": ""r448"",
        ""title"": [
          ""d with 1000 tests"",
          ""works 445""
        ],
        ""state"": ""passed"",
        ""body"": ""function () {}"",
        ""stack"": null,
        ""error"": null,
        ""timings"": {
          ""lifecycle"": -9,
          ""test"": {
            ""fnDuration"": 1,
            ""afterFnDuration"": 0
          }
        },
        ""failedFromHookId"": null,
        ""wallClockStartedAt"": ""2018-07-27T12:46:44.816Z"",
        ""wallClockDuration"": -6,
        ""videoTimestamp"": null
      },
```

Normal durations are like this

```
{
        ""testId"": ""r449"",
        ""title"": [
          ""d with 1000 tests"",
          ""works 446""
        ],
        ""state"": ""passed"",
        ""body"": ""function () {}"",
        ""stack"": null,
        ""error"": null,
        ""timings"": {
          ""lifecycle"": 154,
          ""test"": {
            ""fnDuration"": 0,
            ""afterFnDuration"": 0
          }
        },
        ""failedFromHookId"": null,
        ""wallClockStartedAt"": ""2018-07-27T12:46:44.817Z"",
        ""wallClockDuration"": 157,
        ""videoTimestamp"": null
      }
```

From https://circleci.com/gh/cypress-io/lots-of-tests/12 (search for ""445"")

Such errors break uploading 

```
(Uploading Results)

Warning: We encountered an error talking to our servers.

This run will not be recorded.

This error will not alter the exit code.

StatusCodeError: 412

{
  ""message"": ""Request should follow putInstanceRequest@2.0.0 schema"",
  ""errors"": [
    ""data.tests.445.timings.lifecycle is less than minimum"",
    ""data.tests.445.wallClockDuration is less than minimum""
  ],
```",bug
345210234,Cypress ignores [hash] when is run via modules API,"### Steps to reproduce:
````js
let cypress = require(""cypress"");

return cypress.run({
   ""reporter"": ""junit"",
   ""reporterOptions"": { ""mochaFile"": dist + ""/junit[hash].xml"" }
}).then(() => mergeOutput(dist + ""/*.xml"", reports + ""/junit.xml""));
````
Actually, I have the necessity to dynamically change the report path depending on the environment where the tests are run.

### Current behavior:

Cypress creates `*.hash.xml` and overwrites it after processing of each `*.spec.js` file.

### Desired behavior:

Cypress creates the report file with the unique name for every `*.spec.js` file.

### Versions

Cypress 3.0.2
",bug
344855115,Cypress not working correctly with version 68 of Chrome,"After we have updated our machines to the latest versions of Chome we encounter some issues. 

Till this morning everything worked fine. However, since we have update chrome from version 67 to 68. It seems that cypress suddenly thinks there is a layer on top of our page. We are getting the following error 
```

CypressError: Timed out retrying: cy.click() failed because this element:

<td id=""eri.npcs.external.bezoekschip.shipoperator"" onclick=""javascript:window.location='http://npcs.portbase.test/vesselcall';"">Vessel ...</td>

is being covered by another element:

<td id=""eri.npcs.external.notificationshipsupplies.declarant"" onclick=""javascript:window.location='http://npcs.portbase.test/notificationshipsupplies';"">Notific...</td>

Fix this problem, or use {force: true} to disable error checking.

https://on.cypress.io/element-cannot-be-interacted-with

```

We get this error on multiple pages, and we can see that we that mouse hover is wrong as well. This If I hover the menu the focus seems to lay a lot lower then it's supposed to be.

We don't encounter the problem if we open our website normally. Adding {force: true} works for some occasions but unfortunately not for all.

",bug
344017475,"CypressError: Timed out retrying: Not enough elements found. Found '2', expected '2'.","### Current behavior:

https://i.imgur.com/S8HQyMc.png

### Desired behavior:

Well, obviously it should pass.

### Steps to reproduce:

""baseUrl"": ""https://beta.tenantreport.net/"",

```js
describe('Signup Affiliate test', () => {
  it('Affiliate signup Test', () => {
    cy.visit('/auth/signup/referral/')

    cy.get('.toolbar-link').should($p => {
      expect($p).to.have.length(2)
      expect($p.first()).to.contain('Signup')
      expect($p.eq(1)).to.contain('Login')
    })
  })
})
```

### Versions

Cypress 3.0.2
Electron

Work fine on chrome, but i cant use chrome because of https://github.com/cypress-io/cypress/issues/2037 ",bug
343273932,{uparrow} and {downarrow} do not move cursor in textareas and contenteditables,"Currently we only send the events, we don't actually move the cursor

In **Chrome**, we should be able to move the cursor in a `textarea` and `contenteditable`
In **Firefox**, it may only be possible to move the cursor in `contenteditable`",bug
343239398,Fix Cypress hanging when integrationFolder has a lot of files,"We [currently glob over-zealously](https://github.com/cypress-io/cypress/blob/develop/packages/server/lib/scaffold.coffee#L62) when determining if a project is new. If the `integrationFolder` is set to a folder with a lot of nested files (i.e. anything with `node_modules`) it will hang while trying to glob all the files. Additionally, we don't even need to do run this code path in run mode.

This should finally resolve ongoing issues #1905 and #1912",bug
343122770,dest.end error crash during run exit on GitLab CI / Windows,"## Cypress >=v3.0.0  on GitLabCI

### Current behavior:

Any version >= v3.0.0 of the Cypress is failing to run on the GitLab's CI. The following error is being thrown exactly before cypress is exiting:

```
====================================================================================================

(Run Finished)


Spec Tests Passing Failing Pending Skipped 
┌────────────────────────────────────────────────────────────────────────────────────────────────┐
│ ✔ HomePage\Home_Page_Quick_Lookup.js 00:05 1 1 - - - │
└────────────────────────────────────────────────────────────────────────────────────────────────┘
All specs passed! 00:05 1 1 - - - 

cypress:server:cypress about to exit with code 0 +159ms
_stream_readable.js:595
dest.end();
^

TypeError: dest.end is not a function
at Socket.onend (_stream_readable.js:595:10)
at Object.onceWrapper (events.js:313:30)
at emitNone (events.js:111:20)
at Socket.emit (events.js:208:7)
at endReadableNT (_stream_readable.js:1055:12)
at _combinedTickCallback (internal/process/next_tick.js:138:11)
at process._tickCallback (internal/process/next_tick.js:180:9)
ERROR: Job failed: exit status 1

```

### Desired behavior:

We expect the cypress to return the `(All Done)` message as Cypress v2.1.0 does with no error.

### Steps to reproduce:

I have an issue with running cypress on the GitLab’s CI provider. I want to confirm whether this is a configuration issue, an incompatibility issue or a cypress bug.   

I have installed cypress using the yarn command `yarn add cypress`. This will install me the latest version of cypress, namely v3.0.2.

_[path-to-root-of-solution]/cypress.json_
```
{
  ""projectId"": ""……"",
  ""baseUrl"": ""…. ""
}
```

_[path-to-root-of-solution]/cypress/integration/HomePage/Home_Page_Quick_Lookup.js_
```js
describe('Home Page Test - Find Button', function () {

  before(function() {
    // navigate to home page (baseUrl)
    cy.visit('')
    
  })

  it('Check the button is on the page', function () {
    cy.get('[data-test=button-test-base]').should('exist')
  })
})
```

_[path-to-root-of-solution]/gitlab-ci.yml_
```yml
# … set path… 

stages:
  - test

run_test_suite:
  stage: test
  script:
    - call yarn add cypress
    - npx cypress run 

# .. end of file …
```

When I start the cypress using the command **npx cypress run**

### <a name=""Versions""></a>Versions
•	Windows Server 2012 R2
•	Node: 8.9.4
•	npm: 5.6.0
•	Gitlab CI Runner: 9.5.0

### Comments

I have searched to see if there are other who experienced this issue, but it seems that no one have. (or at least they didn’t bother in reporting the issue and/or sharing their solution).  
The `https://github.com/cypress-io/cypress/issues/1841` is the only issue that is a bit relevant to this problem in the sense that the pipeline fails when cypress is about to exit.

We have tried to use other versions of cypress:
► v3.0.2, v3.0.1, v3.0.0 – the above error is being generated  
► v2.1.0 – no error is being generated

",bug
342773162,jquery ':focus' selector fails when window is not in focus,"The problem is jquery's ':focus' only works if the window itself is focused. 

This has been a known problem for a long time, and has a simple solution.

Here's the fix.

```js
/* replace the focus selector with our own version */
jQuery.find.selectors.filters.focus = function(elem) {
  var doc = elem.ownerDocument;
  return elem === doc.activeElement && !!(elem.type || elem.href);
}
```
seen in:
https://github.com/mattheworiordan/jquery-focus-selenium-webkit-fix/blob/master/app/assets/javascripts/jquery.focus.test-fix.js

",bug
342670915,.type() negative number into input not working,"### Current behavior:

When typing negative number into input **with type ""number"" set**, minus is ignored and possitive number is typed instead.

used method: `cy.type()`

![numbertypebug](https://user-images.githubusercontent.com/5154014/42937195-96441e52-8b4e-11e8-89f0-f7f366f0dce5.PNG)

### Desired behavior:

Type negative number.

### Steps to reproduce:

![html](https://user-images.githubusercontent.com/5154014/42937265-cff2d0a8-8b4e-11e8-8e05-9cd86ecfcc0e.PNG)


### Versions

Cypress: 3.0.2
Windows 10
Chrome 67",bug
340252247,Test runner crashes on url parsing,"### Current behavior:

Test runner crashes on url parsing:
>TypeError: Parameter ""url"" must be a string, not undefined
    at Url.parse (url.js:102:11)
    at urlParse (url.js:96:5)
    at Url.resolve (url.js:657:29)
    at Object.urlResolve [as resolve] (url.js:653:40)
    at Request.options.followRedirect (request.js:327:30)
    at Redirect.onResponse (redirect.js:84:42)
    at Request.onRequestResponse (request.js:989:22)
    at emitOne (events.js:115:13)
    at ClientRequest.emit (events.js:210:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:565:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:116:23)
    at Socket.socketOnData (_http_client.js:454:20)
    at emitOne (events.js:115:13)
    at Socket.emit (events.js:210:7)
    at addChunk (_stream_readable.js:252:12)
    at readableAddChunk (_stream_readable.js:239:11)
    at Socket.Readable.push (_stream_readable.js:197:10)
    at TCP.onread (net.js:589:20)

### Desired behavior:

I don't understand why url is undefinied in my case, maybe somebody can give me a hint. 
However, test runner should log the problem without quitting itself.

### Steps to reproduce:

I'm trying to make a POST request with digest authentication in a before method. The intention is to setup the test state programmatically via our own http-api. I don't call cy.visit before, this is the first request that happens:

> const opts: Partial<Cypress.RequestOptions> = 
{
		url: ""http://localhost:8080/myressource"",
		auth: {user: ""admin"", pass: ""admin"", sendImmediately: false},
		method: ""POST"",
		body: {},
		followRedirect: true,
		failOnStatusCode: false
};
	cy.request(opts);


cypress.json does not contain base-url:
> {
  ""projectId"": ""pixq6e"",
  ""defaultCommandTimeout"": 60000,
  ""viewportWidth"": 1024,
  ""viewportHeight"": 768,
  ""requestTimeout"": 60000,
  ""responseTimeout"": 60000,
  ""watchForFileChanges"": false
}

### Versions
Cypress: 3.0.2
Typescript: 2.9.2
Node: 8.11.2",bug
340124953,Calling .blur() on elements inside iframes throws an error,"### Current behavior:
When using Cypress together with Storybook there is an issue when calling `.blur()` on an element. Storybook render inside an iframe so my guess is that there is a bug in the `document.activeElement` check inside the `.blur()` function. We should probably loop through all iframes and find the correct `activeElement`. Using the `force` option solves the issue but I feel that this should work without that.

Note that this worked before 3.0.2. 

Error message
```
CypressError: cy.blur() can only be called on the focused element. Currently the focused element is a: <iframe id=""storybook-preview-iframe"" title=""preview"" src=""iframe.html?"" allowfullscreen="""" style=""width: 100%; height: 100%; border: 0px; margin: 0px; padding: 0px;""></iframe>
```

<!-- images, stack traces, etc -->

### Desired behavior:
To not throw an error.

### Steps to reproduce:

<!-- Issues without reproducible steps might get closed. *Tip* You can fork https://github.com/cypress-io/cypress-test-tiny repo, set up a failing test, then tell us the repo/branch to try. -->

https://github.com/alexandernanberg/cypress-test-tiny

Install dependencies and start storybook + cypress
`npm install && npm start`

Run the basic test and the `blur` will throw an error.

### Versions

<!-- Cypress, operating system, browser -->
Cypress: 3.0.2",bug
339933119,cy.contains finds text in invisible tags,"`cy.contains` finds text in `<head>` and  `<style>` tags, which do in fact have `.textContent` properties, but aren't visible.

For example:
![image](https://user-images.githubusercontent.com/14625260/42525927-72db2892-8442-11e8-9402-7ad4a9623b30.png)
![image](https://user-images.githubusercontent.com/14625260/42525989-95f85e58-8442-11e8-8f85-bfc37d69c429.png)
",bug
339900074,Electron browser hangs/errors on apps with window.onbeforeunload alerts,"### Current behavior:
When running a test using the Electron browser on a webpage that contains a `window.onbeforeunload` script and trying to navigate away, Cypress will fail to load the next page. The test will eventually fail after a PageLoadTimeout exception. This occurs when using any kind of navigation such as `cy.reload()`, `cy.visit()`, or interacting with an element that contains an `href` linking to somewhere else. 

Test run with Electron 59:
![](https://user-images.githubusercontent.com/2985885/42521197-d6a6bffe-842d-11e8-8bb3-e3bccaa32df2.png)

### Desired behavior:
Test run with Chrome 67:
![](https://user-images.githubusercontent.com/2985885/42520983-542ecd6e-842d-11e8-83fa-2a0591f4e55b.png)

### Steps to reproduce:
```js
describe('Electron 59 alert prompt bug', function() {
  it('Should navigate away from the page', function() {
    cy.on('window:confirm', function() {
      return true;
    });
    cy.visit('http://localhost:8080/');
    cy.visit('http://localhost:8080/form');
  });
  it('Should reload the page', function() {
    cy.visit('http://localhost:8080/');
    cy.reload();
  });
});
```

The page under test needs to contain a `window.onbeforeunload` function which alters the returnValue. To reproduce, I use `http-server` to serve a barebones HTML file

```html
<!DOCTYPE html>

<script>
  window.onbeforeunload = function (e) {
    e.returnValue = 'Dialog';
    return;
  }
</script>
```

### Versions
Cypress: `3.0.2`
MacOS: `High Sierra 10.13.5`
Browsers: `Chrome 67`, `Electron 59`
<!-- Cypress, operating system, browser -->

",bug
339826867,"Crash if a ""describe"" block does not have a callback function","reproduction in https://github.com/cypress-io/cypress-test-tiny branch `empty-describe`
- https://github.com/cypress-io/cypress-test-tiny/commit/63a6828b1e37a8895272fc36beaeaf7f986b49a9

Whenever `describe` has just a function, or just a name (without a callback function) Cypress (probably Mocha engine inside) dies a violent death. Both these crash with `Uncaught TypeError: Cannot read property 'call' of undefined`

```js
describe(function page() {})

describe('nope')
```

<img width=""1279"" alt=""screen shot 2018-07-10 at 2 43 07 pm"" src=""https://user-images.githubusercontent.com/2212006/42510656-e82b90a2-844f-11e8-9817-c803b8d557da.png"">

Code at crash site

```js
context.describe = context.context = function(title, fn) {
  var suite = Suite.create(suites[0], title);
  suite.file = file;
  suites.unshift(suite);
  fn.call(suite);
  suites.shift();
  return suite;
};
```

Note that tests without a callback function are fine, they are just pending, so `it('works')` has no problems.

- Cypress 3.0.1
- Mac
",bug
339284968,Number input doesn't increment on .type({uparrow}),"### Current behavior:

`.type({uparrow})` doesn't increment the number input.
Additionally I cannot `invoke('stepUp')` either.

### Desired behavior:

Increments the number input's value on `.type({uparrow})` and `invoke('stepUp')`.

### Steps to reproduce:

https://github.com/hally9k/cypress-test-tiny
Clone this fork, `npm install` and `npm start`

### Versions

macOS 10.13.5
Cypress 3.0.2
",bug
338999765,`within` does not yield the subject from previous command,"### Current behavior:

I am having trouble with `.within()` and `.should()`. `.within()` seems to yield the last subject that was yielded inside its scope rather than the subject from the previous command.

```javascript
    cy.get('.query-list')
    .within(() => {
      cy.get('li.first');
    })
    // `should` should run assertion against '.query-list'.
    // Instead runs against 'li.first'
    .should('be.visible')
    // `get` should get '#query-btn'
    // Instead tries to get 'li.first #query-btn'
    .get('#query-btn');
```
![screen shot 2018-07-06 at 9 04 37 am](https://user-images.githubusercontent.com/7109607/42388873-be50f620-80fb-11e8-8f6b-a25e6663a155.png)

The `.within()` command yields the `li.first` subject instead of `.query-list`.
And I'm not sure if this is a separate issue, but I found it at the same time: when I run the `.get()` command on `#query-btn` after the `.should()` command, it tries to find `li.first #query-btn`

```javascript
    cy.get('.query-list')
    .within(() => {
      cy.log('inside the `within`');
    })
    // Assertion should run against '.query-list' subject
    .should('be.visible')
    .get('#query-btn');
```
![screen shot 2018-07-06 at 9 07 09 am](https://user-images.githubusercontent.com/7109607/42389136-98b27122-80fc-11e8-9d9b-78e33032e105.png)

In this example, I expected `.should()` to assert that `.query-list` was visible, but it instead receives `null`.

### Desired behavior:
The [docs](https://docs.cypress.io/api/commands/within.html#Yields) state:
> `.within()` yields the same subject it was given from the previous command.

But in my examples it seems to yield the last subject that was yielded from within its own scope.

### Steps to reproduce:

Reproduction repo: [https://github.com/hooskers/cypress-test-tiny](https://github.com/hooskers/cypress-test-tiny)
```bash
npm i
npm run cypress:open
```
Test cases are in `cypress/integration/spec.js`

### Versions

Cypress: 3.0.2
Browser: Chrome 67.0.3396.99
OS: MacOS 10.13.5",bug
338618509,"""/"" is added at end of loaded URLs breaks GET parameters","### Issue
Currently when calling .visit('url'), cypress loads it as url/, which makes the final GET parameter invalid


My cypress.json:
![screenshot from 2018-07-05 11-16-37](https://user-images.githubusercontent.com/20839292/42331984-e6900fd4-8044-11e8-8b41-0c8e89c5c04a.png)

My test.js:
![screenshot from 2018-07-05 11-10-38](https://user-images.githubusercontent.com/20839292/42331745-363e9088-8044-11e8-9e81-71ff75ad65f8.png)

The loaded URL in Cypress

![screenshot from 2018-07-05 11-11-23](https://user-images.githubusercontent.com/20839292/42331746-364c7c48-8044-11e8-8d53-80688aa6b38c.png)


### Desired behavior:

Either don't add the extra character, or possibly add an option for removing it.

### Steps to reproduce:

Screenshots above 

### Versions
Ran on Ubuntu 18.04, using Cypress v3.0.2
<!-- Cypress, operating system, browser -->
",bug
338282171,Froala (WYSIWYG HTML Editor) does not read correctly the virtual keyboard input of Cypress,"### Current behavior:
The virtual keyboard inputs does not work as expected, especially regarding the meta keys. In the specific case of the ENTER key, the expected line feed doesn't seem to be outputted at all on the Froala editor.
Considering the example stringto be outputted by Cypress in the Froala Editor:
```
Hello{enter}{enter}{enter}world!
``` 
Then the result is actually looking like this:
![image](https://user-images.githubusercontent.com/1412033/42279283-96b78534-7f9d-11e8-9313-adec92686cac.png)

### Desired behavior:
When running my end-to-end tests with Cypress on a webpage including a Froala editor, the virtual keyboard inputs should behave as a real.
If the test run by Cypress inputs the following string (same as above) in the Froala editor:
```
Hello{enter}{enter}{enter}world!
``` 
I intend to get 3 line feeds between `Hello` and `world!`, producing an inner HTML looking like this:
```
<p>Hello</p><p><br></p><p><br></p><p>world!</p>
```
The result should look like following in an actual webpage:
![image](https://user-images.githubusercontent.com/1412033/42279488-33c8c1f8-7f9e-11e8-86ad-fa3bb0e447d4.png)

### Steps to reproduce:

I made a simple GitHub repository that repoduces the problem live.
1) Clone `https://github.com/jack-in-the-box/froala-vs-cypress.git` with git
2) At the root of the produced folder, run `npm run gui` (this installs the dependencies of Cypress and then, runs its GUI)
3) Click on the `froala.spec.js` link:
![image](https://user-images.githubusercontent.com/1412033/42279968-acb4ba58-7f9f-11e8-8281-07d0296dd8bd.png)
4) Cypress runs the test on Chrome 67 for you
5) The actual routine of the test can be seen on the file `cypress/integration/froala.spec.js`

### Versions

Latest version of Cypress, on Ubuntu, running Google Chrome 67
",bug
337598554,Recover from being unable to end the video recording stream,"It appears that there are conditions to which a video recording stream cannot be finished as per these Travis CI logs: https://travis-ci.org/gpincheiraa/bln-frontend-project1/builds/399205721

I'm unsure what the underlying issue is, but regardless we need to simply add a timeout around this promise not resolving and continue on. It'll take a bit more digging to understand the underlying issue and whether or not the video is useful or corrupted at that point.

Related to: https://github.com/cypress-io/cypress/issues/1934#issuecomment-401862385
",bug
336592617,Problem with clear() and type() on text input field (maxlength),"### Current behavior:
Cypress is not able to clear() and type() in text input field.
The problem is not constant, it appears in my tests only in few scenarios.
<!-- images, stack traces, etc -->

### Desired behavior:
The clear() and type() actions should always work for input text type field.
### Steps to reproduce:
My test looks like follow:
I am updating existing element. The update form input text type field:
```html
\<input _ngcontent-trw-171="""" class=""form-control ng-untouched ng-pristine ng-valid"" id=""coalTypeDescr"" maxlength=""25"" name=""coalTypeDescr"" ngcontrol=""coalTypeDescr"" required="""" type=""text""\>
```

My test first needs to clear existing value and add new one:
```js
   cy.get('#coalTypeDescr')
      .clear()
      .type(""CoalToEditEdited"")
```

![cypressinputfieldproblemwithclear](https://user-images.githubusercontent.com/26725074/42032952-8ba4f918-7adb-11e8-9939-50ac9314f3b0.png)
![cypressinputfieldproblemwithtype](https://user-images.githubusercontent.com/26725074/42032962-92e87984-7adb-11e8-98b9-62fd67b11129.png)

Console doesn't show any problem with both functions.
<!-- Issues without reproducible steps might get closed. *Tip* You can fork https://github.com/cypress-io/cypress-test-tiny repo, set up a failing test, then tell us the repo/branch to try. -->

### Versions
Cypress 3.0.1, macOS 10.13.5, Chrome
<!-- Cypress, operating system, browser -->
",bug
336461848,Cypress sets the height of the size-container to 0px,"Hi there,
### Current behavior:

I'm working on a single page web app that is built with React, React router 3.x and Redux. I use Cypress to test login, signup, create posts pages, etc. It all works well. But when I'm testing two particular pages. Their page height(on `.size-container` element) is sometimes set to `0px`(see the screenshot, click on the screenshot to get a bigger view). And so the page cannot be seen. The test can be passed when I reset the viewport with `cy.viewport()` after visiting the page with `cy.visit()` but then I ended up with so many `cy.viewport()` in my test suites.

![Cypress wrong viewport size](https://www.dropbox.com/s/klkp1y36fteqk9r/cypress-wrong-viewport-height.png?raw=1)

### Desired behavior:
The height of the `.size-container` should not be `0px`.

### Steps to reproduce:
 I've been trying to reproduce this bug but without success.
These two particular pages are a bit different when compare with others:
- They redirect from another route via react-router: when you go to the route `forum/list`, it will redirect you to `forum/list/:category/:sort/`.
- They use Chinese characters in the URL: something like `forum/list/中文/中文`

### Versions
Cypress: 3.0.1
OS: macOS High Sierra 10.13.5
Browser: Google Chorme 67.0.3396.99 (Official Build) (64-bit)

Sorry, I know this is not a valid bug report since I cannot reproduce the bug. But I've been battling with this bug for two days and cannot find any directions from Google or stackoverflow.

Thanks for the help!",bug
336272627,Restore Pages prompt,"After manually crashing chrome, I was prompted with this ""Restore Pages?"" dialog / prompt. 
I would prefer if that didn't happen
![image](https://user-images.githubusercontent.com/14625260/41982956-b8730980-79fa-11e8-833d-a086c058e864.png)
I'm not entirely sure if this causes any issues besides cosmetics, but I could see it being an issue.",bug
336217517,'Failed to fetch' error when calling fetch in `cypress run`,"### Current behavior:

Getting `Failed to fetch` error when running `cypress run` and visiting a website in `https`.
I'm not getting this error when running in `cypress open` and also not when running in `http` websites.

### Desired behavior:

Not to get this error.

### Steps to reproduce:

I made one commit to demonstrate the problem in the following fork and branch:
https://github.com/amitzur/cypress-test-tiny/tree/fetch_issue

I'm calling `fetch` inside a custom command to a local webserver launched in a cypress plugin.

### Versions

This happens on both Cypress version `2.1.0` and `3.0.1`
",bug
336185964,plugins/index CoffeeScript file support,"### Current behavior:

If I use a CoffeeScript file as plugins/index.coffee the file is not transpiled as I get an hash-prefixed-comment syntax error, even if the error message says ""_The pluginsFile must be a .js or .coffee file._"".

```
 Can't start server
The plugins file is missing or invalid.

Your pluginsFile is set to '/home/laurent/projects/myproject/cypress/plugins/index.coffee', but either the file is missing, it contains a syntax error, or threw an error when required. The pluginsFile must be a .js or .coffee file.

Please fix this, or set 'pluginsFile' to 'false' if a plugins file is not necessary for your project.

The following error was thrown:

/home/laurent/projects/myproject/cypress/plugins/index.coffee:1
(function (exports, require, module, __filename, __dirname, process, global, Buffer) { return function (exports, require, module, __filename, __dirname) { # ***********************************************************
^

SyntaxError: Invalid or unexpected token
at createScript (vm.js:74:10)
at Object.runInThisContext (vm.js:116:10)
at Module._compile (module.js:533:28)
at Object.Module._extensions..js (module.js:580:10)
at Module.load (module.js:503:32)
at tryModuleLoad (module.js:466:12)
at Function.Module._load (module.js:458:3)
at Module.require (module.js:513:17)
at require (internal/module.js:11:18)
at module.exports (/home/laurent/.cache/Cypress/3.0.1/Cypress/resources/app/packages/server/lib/plugins/child/run_plugins.js:104:15)
at Object. (/home/laurent/.cache/Cypress/3.0.1/Cypress/resources/app/packages/server/lib/plugins/child/index.js:14:25)
at Object. (/home/laurent/.cache/Cypress/3.0.1/Cypress/resources/app/packages/server/lib/plugins/child/index.js:16:3)
at Module._compile (module.js:569:30)
at Object.Module._extensions..js (module.js:580:10)
at Module.load (module.js:503:32)
at tryModuleLoad (module.js:466:12)
```

I could manually compile my index.coffee file into index.js file, but I had to use the solution described in https://github.com/jashkenas/coffeescript/issues/4769#issuecomment-341492901 to import big CS modules with CS2 import syntax in my tasks definitions.


### Desired behavior:

It would be nice to be able to use a native CS file without manual compilation, and to be able to run it with CS2 `--transpile` Babel options (why not set in cypress.json) to avoid the register transpilation trick described in https://github.com/jashkenas/coffeescript/issues/4769#issuecomment-341492901


### Steps to reproduce:

- use a CoffeeScript file plugins/index.coffee
- add `""pluginsFile"": ""cypress/plugins/index.coffee""` in cypress.json
- run `cypress open`

### Versions

<!-- Cypress, operating system, browser -->
Cypress 3.0.1
Ubuntu 18.04 LTS
Chromium 66
CoffeeScript 2.3.1
Node 10.0.0
",bug
335992115,ZeptoJS XHR request not stubbed,"### Current behavior:

I migrate my site from jquery to [zepto](http://zeptojs.com/) and I have some tests where I stub XHR requests with Cypress. Now, stubbing seems not to work with zepto.

### Desired behavior:

Cypress should be able to stubbed XHR requests done with [zepto](http://zeptojs.com/)

### Steps to reproduce:

I made a repo to illustrate the issue : https://github.com/rbung/CypressZeptoIssue

### Versions

Cypress version 3 & 2 seems to be impacted.
I'm working on MacOS.
",bug
335962125,Screenshot callbacks not called for all failure screenshots,"Currently, when a [failure screenshot is taken](https://github.com/cypress-io/cypress/blob/develop/packages/driver/src/cy/commands/screenshot.coffee#L284-L308), we bypass a number of steps that are unnecessary for failure screenshots as long as there hasn't been a screenshot taken in the failing test. This means that the `onBeforeScreenshot` and `onAfterScreenshot` callbacks are not called.

However, in the case that there is a screenshot taken (via `cy.screenshot()`) in the failing test, we *do* call the callbacks. 

We should fix this inconsistency and have the callbacks called for all failure screenshots.",bug
335874190,Cypress 3 complains about covered elements that make no sense,"### Current behavior:

In 2.1.0 tests work fine. In 3.0(1) cypress test fails because cypress think that elements covered, but that just dont make any sense. For example:
```
CypressError: Timed out retrying: cy.click() failed because this element:
<a href=""/auth/signup"" class=""v-btn v-btn--block v-btn--router primary white--text"">...</a>
is being covered by another element:
<html lang=""en"" data-n-head=""lang"">...</html>
```
Or like this
```
CypressError: Timed out retrying: cy.click() failed because this element:
<button type=""button"" primary="""" data-cy=""signup"" class=""v-btn v-btn--block primary"">...</button>
is being covered by another element:
<i data-cy=""invalid-check"" aria-hidden=""true"" class=""v-icon grey--text text--lighten-1 mdi mdi-close-circle-outline""></i>
```


### Desired behavior:

No errors with hovered elements like in 2.1


### Versions

Windows 10, Chrome 68
",bug
335816375,"Error during screenshot capture: RangeError: Index out of range | The value of ""offset"" is out of range.","### Current behavior:
Executing `cy.screenshot()` on large pages causes error.  Stack trace:

```bash
     RangeError: Index out of range
      at checkInt (buffer.js:1180:11)
      at Buffer.writeUInt32BE (buffer.js:1271:5)
      at new Jimp (/Users/rbayliss/Library/Caches/Cypress/3.0.1/Cypress.app/Contents/Resources/app/packages/server/node_modules/jimp/index.js:137:30)
      at stitchScreenshots (/Users/rbayliss/Library/Caches/Cypress/3.0.1/Cypress.app/Contents/Resources/app/packages/server/lib/screenshots.js:199:17)
      at /Users/rbayliss/Library/Caches/Cypress/3.0.1/Cypress.app/Contents/Resources/app/packages/server/lib/screenshots.js:295:21
      at tryCatcher (/Users/rbayliss/Library/Caches/Cypress/3.0.1/Cypress.app/Contents/Resources/app/packages/server/node_modules/bluebird/js/release/util.js:16:23)
      at Promise._settlePromiseFromHandler (/Users/rbayliss/Library/Caches/Cypress/3.0.1/Cypress.app/Contents/Resources/app/packages/server/node_modules/bluebird/js/release/promise.js:510:31)
      at Promise._settlePromise (/Users/rbayliss/Library/Caches/Cypress/3.0.1/Cypress.app/Contents/Resources/app/packages/server/node_modules/bluebird/js/release/promise.js:567:18)
      at Promise._settlePromise0 (/Users/rbayliss/Library/Caches/Cypress/3.0.1/Cypress.app/Contents/Resources/app/packages/server/node_modules/bluebird/js/release/promise.js:612:10)
      at Promise._settlePromises (/Users/rbayliss/Library/Caches/Cypress/3.0.1/Cypress.app/Contents/Resources/app/packages/server/node_modules/bluebird/js/release/promise.js:691:18)
      at Async._drainQueue (/Users/rbayliss/Library/Caches/Cypress/3.0.1/Cypress.app/Contents/Resources/app/packages/server/node_modules/bluebird/js/release/async.js:133:16)
      at Async._drainQueues (/Users/rbayliss/Library/Caches/Cypress/3.0.1/Cypress.app/Contents/Resources/app/packages/server/node_modules/bluebird/js/release/async.js:143:10)
      at Immediate.Async.drainQueues (/Users/rbayliss/Library/Caches/Cypress/3.0.1/Cypress.app/Contents/Resources/app/packages/server/node_modules/bluebird/js/release/async.js:17:14)
      at runCallback (timers.js:781:20)
      at tryOnImmediate (timers.js:743:5)
      at processImmediate [as _immediateCallback] (timers.js:714:5)
```
<!-- images, stack traces, etc -->

### Desired behavior:
Screenshots are captured.

### Steps to reproduce:
Call `cy.screenshot()` on a page that exceeds 16,000,000 square pixels (in my case, the element is 1195px by 13518px).  Reproduction test case: https://github.com/rbayliss/cypress-test-tiny/tree/index_error

<!-- Issues without reproducible steps might get closed. *Tip* You can fork https://github.com/cypress-io/cypress-test-tiny repo, set up a failing test, then tell us the repo/branch to try. -->

### Versions

```
Cypress package version: 3.0.1
Cypress binary version: 3.0.1
Chrome 67.0.3396.87 on OSX 10.13
```
",bug
335604729,Stripping obstructive code is missed on triple equality check,"### Current behavior:

The following is not stripped correctly:

```js
if (self !== top)
```

### Desired behavior:

```js
if (self !== self)
```

This is because of the `!==`. We strip `!=` and a ton of other scenarios but somehow I missed the regexp on this one, which is a large oversight.",bug
334193713,Returning an object from the 'before:browser:launch' in Electron will nuke the video from recording,"In your `pluginsFile`...

```js
module.exports = (on) => {
  // on('file:preprocessor', webpack())
  on('before:browser:launch', (browser, args) => {
    return args
  })
}
```

Then recording the video will always fail and `ffmpeg` will error trying to end the video recording.

```bash
cypress:server:video capture errored: { error: 'ffmpeg exited with code 1: pipe:0: End of file\n'
```

This is because when we get `args` from this event, we prefer those to the default args - some of which are not serializable to the child process. This in essence wipes out the default callbacks like `onPaint` which is responsible for capturing the electron offscreen frames and piping them into the `ffmpeg` stream.",bug
333568843,Code in hooks and test are rerun when changing to a different superdomain,"### Current behavior:

When running my spec file, I noticed that some code in the `before` hook (not `beforeEach`) is being run before each of my three test cases, causing my checks to fail. Want to remark that I am using different superdomains for every test, I don't see this when I run all the tests with the same superdomain.

### Desired behavior:

Code in the `before` hook only runs once, before all the tests, no matter if using different superdomains.

### Steps to reproduce:

I explain my setup. My spec file consists of:
```
- before()
- after()
- it() //superdomain 1
- it() //superdomain 2 using an iframe
- it() //superdomain 1
```
As I am using different superdomains, the only way that I've read to do it is visiting the different domains in different tests (https://docs.cypress.io/guides/guides/web-security.html#One-Superdomain-per-Test)

I've also set `""chromeWebSecurity"": false`

Within the before hook I run several requests to some endpoints as a way to get some data that I will use through the tests; Get it once, and use it across the three it().

I've also set a `console.log('This only happens in the beforeHook:  ' + var)` to see what's the value of my variable, and this is what I see in the run:

- Running the first it()
![11](https://user-images.githubusercontent.com/36962817/41585039-2a6d3f68-73a9-11e8-9f88-2b1af0b39c9d.png)
 
- Second it()
![22](https://user-images.githubusercontent.com/36962817/41585064-3f228198-73a9-11e8-9efd-486a1a694cfb.png)

- Third it()
![33](https://user-images.githubusercontent.com/36962817/41585078-46bf23fc-73a9-11e8-895e-4f66307a6fa2.png)

After every `it()` the console gets cleared, which is fine, but I don't expect to see the log again during the second and the third tests, as this is supposed to run only once. Notice how the variable gets an increment for each loop, as I would expect had I done it in a `beforeEach` hook.

In the left side of the window every seems fine as there is no command logging for the `before` hook when running the second and third tests, but the `console.log` reveals that.


### Versions

- Cypress version: 3.0.1
- Browser: Chrome 66
- OS: Ubuntu Linux 16.04 LTS
",bug
333414430,Icons shift when commands resolve,"This is likely related to some PR a month ago or so that ""centered"" the loading icons. Now they cause the text to shift when they resolve. Very annoying. 

@jennifer-shehane or @chrisbreiding please fix this is top priority!!

![icons-shift](https://user-images.githubusercontent.com/1268976/41559063-ef71fc34-7310-11e8-830e-773a56c31974.gif)",bug
332623555,Creating route alias using post processed fixture data (Blob) is not returning that data,"### Current behavior:

My Angular 5 app makes an HTTP GET request to a remote server which returns an image as a Blob. My existing Cypress specs using the remote server correctly verify the response data is received.

I'd like to stub out the call to the remote server and wrote this spec that loads a JPEG file from disk using a fixture (which returns a dataURI) and then I convert that to a Blob and supply it to `cy.route` (using the same route minimatch expression that is matched in my non-stubbed request).

in the cypress command log the XHR Stub is being hit and it is returning a Blob of size 2 of type application/json instead of my actual Blob. The `cy.wait` for the alias also prints Blob size2 application/json to the console.

Here's my spec:

```js
// spec
describe('Test using fixture to supply image as a Blob', function () {
  before(() => {
    cy.server();
    cy.fixture('images/map.jpeg').then(dataURI => {
      console.log(dataURI);
       return Cypress.Blob.base64StringToBlob(dataURI, ""image/jpeg"").then((blob) => {
        console.log(blob);
        return cy.route('https://images.mydomain.com/**', blob).as('imageXHR');
      })
    });
  })
  it('test that causes app to call '@imageXHR'), function() {
    ...
  })
});
```
The `console.log` statements print what you'd expect - the first is a long data URI and the second is 
a `Blob {size: 41191, type: ""image/jpeg""}`. 

![screen shot 2018-06-14 at 9 03 38 pm](https://user-images.githubusercontent.com/184171/41447102-25381da8-7019-11e8-872f-b9f3d914069c.png)

I'm not sure what syntax I have wrong or if there is a bug.

### Desired behavior:

The post processed fixture data is supplied to the XHR request.

### Steps to reproduce:

I'm happy to work on a reproduction if it would help!

### Versions

Cypress 3.0.1, OSX
",bug
332574082,cypress run occasionally crashes with node OOM errors,"### Current behavior:

```shell
<--- Last few GCs --->

[902:0x14d4055f4000]  1414367 ms: Mark-sweep 2050.4 (2142.6) -> 2050.4 (2142.6) MB, 2327.2 / 0.0 ms  allocation failure GC in old space requested
[902:0x14d4055f4000]  1416781 ms: Mark-sweep 2050.4 (2142.6) -> 2050.4 (2141.6) MB, 2414.3 / 0.0 ms  last resort 
[902:0x14d4055f4000]  1418947 ms: Mark-sweep 2050.4 (2141.6) -> 2050.4 (2141.6) MB, 2165.5 / 0.0 ms  last resort 


<--- JS stacktrace --->

==== JS stack trace =========================================

Security context: 0x2fbf9512d681 <JSObject>
    2: stringSlice(aka stringSlice) [buffer.js:556] [bytecode=0x193b5ab7ca49 offset=96](this=0x10df42502311 <undefined>,buf=0x334eb421b249 <Uint8Array map = 0x2c7df00ceb21>,encoding=0x2fbf9513e8a9 <String[4]: utf8>,start=0,end=404259)
    4: toString [buffer.js:629] [bytecode=0x193b5ab7c681 offset=151](this=0x334eb421b249 <Uint8Array map = 0x2c7df00ceb21>,encoding=0x2fbf9513e8a9 <String[4]: utf8...

FATAL ERROR: CALL_AND_RETRY_LAST Allocation failed - JavaScript heap out of memory
 1: node::Abort() [/root/.cache/Cypress/3.0.1/Cypress/libnode.so]
 2: 0x7faa08f32887 [/root/.cache/Cypress/3.0.1/Cypress/libnode.so]
 3: 0x7faa08aa1a57 [/root/.cache/Cypress/3.0.1/Cypress/libnode.so]
 4: 0x7faa08aa19d5 [/root/.cache/Cypress/3.0.1/Cypress/libnode.so]
 5: v8::internal::Factory::NewRawTwoByteString(int, v8::internal::PretenureFlag) [/root/.cache/Cypress/3.0.1/Cypress/libnode.so]
 6: v8::internal::Factory::NewStringFromUtf8(v8::internal::Vector<char const>, v8::internal::PretenureFlag) [/root/.cache/Cypress/3.0.1/Cypress/libnode.so]
 7: v8::String::NewFromUtf8(v8::Isolate*, char const*, v8::NewStringType, int) [/root/.cache/Cypress/3.0.1/Cypress/libnode.so]
 8: node::StringBytes::Encode(v8::Isolate*, char const*, unsigned long, node::encoding, v8::Local<v8::Value>*) [/root/.cache/Cypress/3.0.1/Cypress/libnode.so]
 9: 0x7faa08f4e5d8 [/root/.cache/Cypress/3.0.1/Cypress/libnode.so]
10: 0x7faa08a71550 [/root/.cache/Cypress/3.0.1/Cypress/libnode.so]
11: 0x7faa088dfd98 [/root/.cache/Cypress/3.0.1/Cypress/libnode.so]
12: 0x7faa088df30e [/root/.cache/Cypress/3.0.1/Cypress/libnode.so]
13: 0x67697b843fd
```

### Desired behavior:

No crash

### Steps to reproduce:

circleci 2.0 config
chrome67-ff65 docker img
cypress-typescript-preprocessor
100 spec files

### Versions

Cypress 3.0.1
Running chrome67-ff65 docker image on CircleCI 2.0 Ubuntu 16.04
",bug
332343389,"Cypress deletes screenshotsFolder and videosFolder, loosing their original permissions","### Current behavior:

When Cypress is launched using `cypress run` with the `trashAssetsBeforeRuns=true`, it will delete (move to trash, to be more precise) the whole `screenshotsFolder` and `videosFolder`. After re-creating them, they'll have different access control settings (file system-wise) then originally.

See ""Steps to reproduce"" for details and why it's an issue.

I realize it's an exotic issue, and I can work around it fairly easily without fixing Cypress.  So feel free to close if you don't consider this to be a bug.

### Desired behavior:

Cypress deletes the contents of `screenshotsFolder` and `videosFolder` directories, but not the directories themselves. Thus, it preserves their filesystem owner settings, and rwx settings.

Cypress has an option to permanently delete those files, not only move them to trash (to avoid similar issue with the `.Trash` directory itself)

### Steps to reproduce:

1. CI agent is deleting `/artifacts` directory.
2. CI agent is recreating this directory, as a non-privileged users, so that it looks like:

```
artifacts/
    - screenshots/
    - videos/
```

3. Cypress, running in a Docker container, is executing a test as a root user. It has access to the `/results` folder because it's mounted as a Docker volume. It deletes `screenshots/` and `videos/` and re-creates them. 

4. Test passes.
1. Next test is about to run on the very same agent. Agent fails to delete `/results/videos/lorem.mp4` - it has no write access to `videos/` and `screenshots/`, because they were created as root.
### Versions

<!-- Cypress, operating system, browser -->

Running in Docker, on Linux. Custom setup, not based on Cypress' docker images.",bug
332203920,"When running headlessly, Electron reports the browser as out of focus","This causes the browser not to fire its native `focus` and `blur` events, which then causes the driver to fallback to its own polyfill behaviors (which in essence can cause other issues).

It's always better for the browser to think it's in focus so that it natively fires all of its default events. All we have to do is call `win.focusOnWebView()` and even though the window is rendered offscreen, it will think it's correctly focused at all times.",bug
331702586,`cypress open` does not use cwd as project path on linux,"### Current behavior:
`cypress open` does not use cwd as project path on linux
### Desired behavior:
`cypress open` should behave the same as `cypress open -P .`

### Steps to reproduce:
- get on linux
- cd into a dir, `cypress open`
- notice cypress does not open into the project

### Versions
2.1.0 +

<!-- Cypress, operating system, browser -->
Linux - Ubuntu",bug
331438412,checkValidity() returns true instead of false for min length on input,"### Current behavior:
checkValidity() returns true for min length on input field.

<!-- images, stack traces, etc -->

### Desired behavior:
checkValidity() should return false when min length requirement is not met.
### Steps to reproduce:

<!-- Issues without reproducible steps might get closed. *Tip* You can fork https://github.com/cypress-io/cypress-test-tiny repo, set up a failing test, then tell us the repo/branch to try. -->
demo of bug created here: https://github.com/cmttan/cyp-demo
### Versions

<!-- Cypress, operating system, browser -->
cypress ^3.0.1
chrome 67
macOS high sierra 10.13.5 (17F77)",bug
331152040,Cypress creates a new line (<br> tag) after entering the first letter of a word in text area.,"### Current behavior:
Cypress creates a new line after entering the first letter of a word.
![screen shot 2018-06-11 at 4 53 27 pm](https://user-images.githubusercontent.com/30429058/41229403-7e487492-6d99-11e8-9aa5-a0ec6ad18417.png)





### Desired behavior:
The code should not create new line and enter letter like ""Who"" 
not like ""W
ho""

### Steps to reproduce:

Code:-
```js
cy.get(""<text area locator>"").should('be.visible')
        .type(""Who"", { force: true })
```

The above code is creating a new line after entering 'W' letter.
```
W
ho
```

### Versions
Cypress: 3.1.0
Operating System: MacOS Sierra v10.12.6 (16G1212)
Browser: Chrome v66.0.3359.181 (Official Build) (64-bit)

",bug
330938455,Bug: state is lost in the desktop gui when specs change,"When specs are updated in the desktop gui the expanded state is lost. Everything will be automatically re-expanded.

This is due to the specs array being different and when creating all new specs we are not merging in / tracking the state.",bug
330676086,Slow Running tests when window doesn't have focus,"Not sure it it is a bug, or a misunderstanding from mine.

### Current behavior:

When testing a MaterialUI component, I got some trouble with hot reloading. If I refresh my browser with `F5`, my code behaves correctly:

![ok](https://user-images.githubusercontent.com/688373/41162601-a964acf0-6b36-11e8-8857-fe47c61933fc.gif)

Yet, if test is relaunched using hot reload, select list takes a long time before closing:

![ko](https://user-images.githubusercontent.com/688373/41162648-c5b447a8-6b36-11e8-84d7-dc8998823595.gif)

### Desired behavior:

I would expect the behavior to be the same between fresh refresh or hot reload.

### Steps to reproduce:

I created a repository to reproduce the issue: https://github.com/jpetitcolas/cypress-bug

Clone it, then launch the React app and open Cypress:

```
git clone https://github.com/jpetitcolas/cypress-bug.git
npm install
npm start

# in another term
npm run cypress
```

Then, comment or uncomment the following line to let browser to hot reload.

### Versions

* Cypress: 3.0.1
* OS: Linux Mint 18
* Chrome: Version 66.0.3359.139 (Official Build) (64-bit)

",bug
330531309,Cypress hangs on empty tests files,"### Current behavior:

In v3 we have a few test files that don't yet contain tests.  In v2 it wasn't a problem, and most of the time it's fine in v3.  But occasionally Cypress will hang on these files.  I've only seen this in CI so far.
<img width=""297"" alt=""screen shot 2018-06-08 at 3 01 58 pm"" src=""https://user-images.githubusercontent.com/2028470/41141543-3d316efa-6b2d-11e8-9d73-3078698ca68e.png"">

In the dashboard these runs still say ""running"" with an increasing duration, even though they're not.

Further these panels aren't super useful as due to our folder structure every panel is labeled ""assets/tests/integrati...""  I can resize my screen to see a little more, but never the file name.

Otherwise really loving the v3 direction!

### Desired behavior:

Shouldn't hang and should produce better errors if they do.

### Steps to reproduce:

Unsure other than empty test files and multiple runs

### Versions

Cypress 3.0.1
",bug
330431643,Record throws 500 error when launched via module api,"I'm launching our cypress instance via the module api and would like to record them so we can view the results in the dashboard.  Currently it is throwing the below error at the start of the test.  It doesn't keep the tests from completing, we just don't get any information in the dashboard.  This exact code works in v2.1.0.

### Current behavior:

Here is the module api call:
`cypress.run({
		project: 'project dir',
		browser: 'electron',
		record: true,
		key: 'key here',
		reporter: 'mocha-bamboo-reporter',
		reporterOptions: {
                         output: 'results.json'
                },
		config: {
			trashAssetsBeforeRuns: false
		}
	});`

> Warning: We encountered an error talking to our servers.
> This run will not be recorded.
> This error will not alter the exit code.
> StatusCodeError: 500
> {}

### Desired behavior:
The module api allows the run to be recorded for a project's dashboard

### Steps to reproduce:
Attempt to record a run launched via the module api

### Versions
Cypress: 3.0.0, 3.0.1
OS: Linux Mint, Redhat
Browser: electron
",bug
330017251,Cypress dashboard runs duration not ending,"### BUG

### Current behavior:

<!-- images, stack traces, etc -->

![image](https://user-images.githubusercontent.com/19995834/41060690-575bd2f6-699e-11e8-9c41-221f7d768fd4.png)

### Desired behavior:

Runs to have some timeout

### Steps to reproduce:

https://github.com/gpincheiraa/bln-frontend-project1/tree/cypress_dashboard
https://travis-ci.org/gpincheiraa/bln-frontend-project1/builds/388817066

When I push to a branch, Travis CI comes to action, even tells the project and run

![image](https://user-images.githubusercontent.com/19995834/41062760-c0cc5ce6-69a4-11e8-8211-92b1db961a66.png)

commands used were: 

```
npm start & (wait-on http://localhost:3000 && cypress run --record --key 27df0bb4-b483-4074-9299-def2f76ff852)
```",bug
329631741,Selector playground omits quotes for preferred data- attribute selectors,"### Current behavior:

When using selector playground to select elements with preferred data attributes (data-cy, data-test, data-testid), the provided selector is missing quotes around the value. The selector then fails to .get() the desired element during test. 

Any other data- attribute works correctly.

### Desired behavior:

Preferred data- attribute selectors should have quotes around the value

### Steps to reproduce:

Use selector playground to select any element with a data-test=""whatever"" attribute

### Versions
Cypress 3.0.1, Mac Os 10.12.5, Electron 59
",bug
329292318,Preprocessor swallows errors and ignores ENOENT for bundled files,"## bug

Cypress 3.0.1 on Mac

I have been playing with a spec preprocessor based on Parcel and noticed a curious thing. If the bundler is configured incorrectly and actually does NOT bundle files but returns a non-existing path, the test runner swallows the error and happily exits with code 0, while showing (and ignoring) `ENOENT` error

Example output

```
  Running: spec.js...                                                                      (1 of 1) 
bundle file once without watching to /Users/gleb/Library/Application Support/Cypress/cy/production/projects/blogs__parcel_preprocessor-677867adc8d7253c8b90ac225b617bcd/bundles/cypress/integration/spec.js
basename spec
bundle file once without watching to /Users/gleb/Library/Application Support/Cypress/cy/production/projects/blogs__parcel_preprocessor-677867adc8d7253c8b90ac225b617bcd/bundles/cypress/support/index.js
basename index
Error: ENOENT: no such file or directory, stat '/Users/gleb/Library/Application Support/Cypress/cy/production/projects/blogs__parcel_preprocessor-677867adc8d7253c8b90ac225b617bcd/bundles/cypress/integration/spec.js'


Error: ENOENT: no such file or directory, stat '/Users/gleb/Library/Application Support/Cypress/cy/production/projects/blogs__parcel_preprocessor-677867adc8d7253c8b90ac225b617bcd/bundles/cypress/support/index.js'


Error: ENOENT: no such file or directory, stat '/Users/gleb/Library/Application Support/Cypress/cy/production/projects/blogs__parcel_preprocessor-677867adc8d7253c8b90ac225b617bcd/bundles/cypress/integration/spec.js'




  0 passing (2ms)


  (Results)

  ┌─────────────────────────┐
  │ Tests:        0         │
  │ Passing:      0         │
  │ Failing:      0         │
  │ Pending:      0         │
  │ Skipped:      0         │
  │ Screenshots:  0         │
  │ Video:        true      │
  │ Duration:     0 seconds │
  │ Spec Ran:     spec.js   │
  └─────────────────────────┘


  (Video)

  - Started processing:   Compressing to 32 CRF
  - Finished processing:  /Users/gleb/git/cypress-example-recipes/examples/blogs__parcel_preprocessor/cypress/videos/spec.js.mp4 (0 seconds)


====================================================================================================

  (Run Finished)


      Spec                                                Tests  Passing  Failing  Pending  Skipped 
  ┌────────────────────────────────────────────────────────────────────────────────────────────────┐
  │ ✔ spec.js                                     3ms        -        -        -        -        - │
  └────────────────────────────────────────────────────────────────────────────────────────────────┘
    All specs passed!                             3ms        -        -        -        -        -  

```

The bundles files are returned like this

```js
const onFile = (file) => {
  const { filePath, shouldWatch, outputPath } = file
  if (!shouldWatch) {
    console.log('bundle file once without watching to %s', outputPath)
    return bundleOnce(filePath, outputPath).then(() => outputPath)
  }
  ...
}
```

Here is the relevant verbose logs

```
  cypress:server:socket watch test file integration/spec.js +0ms
  cypress:server:socket will watch test file path cypress/integration/spec.js +0ms
  cypress:server:preprocessor getFile /Users/gleb/git/cypress-example-recipes/examples/blogs__parcel_preprocessor/cypress/integration/spec.js +0ms
  cypress:server:appdata path: /Users/gleb/Library/Application Support/Cypress/cy/production/projects/blogs__parcel_preprocessor-677867adc8d7253c8b90ac225b617bcd/bundles/cypress/integration/spec.js +1ms
  cypress:server:plugins execute plugin event 'file:preprocessor' with args: EventEmitter { domain: null, _events: { rerun: [Function] }, _eventsCount: 1, _maxListeners: undefined, filePath: '/Users/gleb/git/cypress-example-recipes/examples/blogs__parcel_preprocessor/cypress/integration/spec.js', outputPath: '/Users/gleb/Library/Application Support/Cypress/cy/production/projects/blogs__parcel_preprocessor-677867adc8d7253c8b90ac225b617bcd/bundles/cypress/integration/spec.js', shouldWatch: false } undefined undefined +0ms
  cypress:server:plugins call event file:preprocessor for invocation id inv1 +3ms
  cypress:server:plugins:child execute plugin event: file:preprocessor ({ eventId: 2, invocationId: 'inv1' }) +2s
bundle file once without watching to /Users/gleb/Library/Application Support/Cypress/cy/production/projects/blogs__parcel_preprocessor-677867adc8d7253c8b90ac225b617bcd/bundles/cypress/integration/spec.js
  cypress:server:controllers:spec request for cypress/support/index.js +12ms
  cypress:server:preprocessor getFile /Users/gleb/git/cypress-example-recipes/examples/blogs__parcel_preprocessor/cypress/support/index.js +1ms
  cypress:server:appdata path: /Users/gleb/Library/Application Support/Cypress/cy/production/projects/blogs__parcel_preprocessor-677867adc8d7253c8b90ac225b617bcd/bundles/cypress/support/index.js +0ms
  cypress:server:plugins execute plugin event 'file:preprocessor' with args: EventEmitter { domain: null, _events: { rerun: [Function] }, _eventsCount: 1, _maxListeners: undefined, filePath: '/Users/gleb/git/cypress-example-recipes/examples/blogs__parcel_preprocessor/cypress/support/index.js', outputPath: '/Users/gleb/Library/Application Support/Cypress/cy/production/projects/blogs__parcel_preprocessor-677867adc8d7253c8b90ac225b617bcd/bundles/cypress/support/index.js', shouldWatch: false } undefined undefined +0ms
  cypress:server:plugins call event file:preprocessor for invocation id inv2 +1ms
  cypress:server:controllers:spec request for cypress/integration/spec.js +0ms
  cypress:server:preprocessor getFile /Users/gleb/git/cypress-example-recipes/examples/blogs__parcel_preprocessor/cypress/integration/spec.js +0ms
  cypress:server:preprocessor headless and already processed +0ms
  cypress:server:plugins:child execute plugin event: file:preprocessor ({ eventId: 2, invocationId: 'inv2' }) +52ms
bundle file once without watching to /Users/gleb/Library/Application Support/Cypress/cy/production/projects/blogs__parcel_preprocessor-677867adc8d7253c8b90ac225b617bcd/bundles/cypress/support/index.js
  cypress:server:plugins promise resolved for id 'inv1' with value /Users/gleb/Library/Application Support/Cypress/cy/production/projects/blogs__parcel_preprocessor-677867adc8d7253c8b90ac225b617bcd/bundles/cypress/integration/spec.js +444ms
  cypress:server:controllers:spec send /Users/gleb/Library/Application Support/Cypress/cy/production/projects/blogs__parcel_preprocessor-677867adc8d7253c8b90ac225b617bcd/bundles/cypress/integration/spec.js +0ms
Error: ENOENT: no such file or directory, stat '/Users/gleb/Library/Application Support/Cypress/cy/production/projects/blogs__parcel_preprocessor-677867adc8d7253c8b90ac225b617bcd/bundles/cypress/integration/spec.js'


  cypress:server:plugins promise resolved for id 'inv2' with value /Users/gleb/Library/Application Support/Cypress/cy/production/projects/blogs__parcel_preprocessor-677867adc8d7253c8b90ac225b617bcd/bundles/cypress/support/index.js +5ms
  cypress:server:controllers:spec send /Users/gleb/Library/Application Support/Cypress/cy/production/projects/blogs__parcel_preprocessor-677867adc8d7253c8b90ac225b617bcd/bundles/cypress/support/index.js +0ms
Error: ENOENT: no such file or directory, stat '/Users/gleb/Library/Application Support/Cypress/cy/production/projects/blogs__parcel_preprocessor-677867adc8d7253c8b90ac225b617bcd/bundles/cypress/support/index.js'


  cypress:server:controllers:spec request for cypress/integration/spec.js +2ms
  cypress:server:preprocessor getFile /Users/gleb/git/cypress-example-recipes/examples/blogs__parcel_preprocessor/cypress/integration/spec.js +0ms
  cypress:server:preprocessor headless and already processed +0ms
  cypress:server:controllers:spec send /Users/gleb/Library/Application Support/Cypress/cy/production/projects/blogs__parcel_preprocessor-677867adc8d7253c8b90ac225b617bcd/bundles/cypress/integration/spec.js +0ms
Error: ENOENT: no such file or directory, stat '/Users/gleb/Library/Application Support/Cypress/cy/production/projects/blogs__parcel_preprocessor-677867adc8d7253c8b90ac225b617bcd/bundles/cypress/integration/spec.js'


  cypress:server:timers clearing timer id 11 from queue { '11': { args: [], ms: 85000, cb: [Function] } } +5ms
  cypress:server:timers queuing timer id 12 after 85000 ms +0ms
  cypress:server:timers child received timer id 12 +474ms
  cypress:server:timers clearing timer id 12 from queue { '12': { args: [], ms: 85000, cb: [Function] } } +9ms
  cypress:server:timers queuing timer id 13 after 85000 ms +0ms
  cypress:server:project onSetRunnables +1ms
  cypress:server:timers child received timer id 13 +10ms
  cypress:server:project runnables null +0ms
  cypress:server:reporter trying to load reporter: spec +0ms
  cypress:server:reporter spec is Mocha reporter +0ms
  cypress:server:timers clearing timer id 13 from queue { '13': { args: [], ms: 85000, cb: [Function] } } +12ms
  cypress:server:timers queuing timer id 14 after 85000 ms +0ms
  cypress:server:timers child received timer id 14 +12ms
  cypress:server:project onMocha start +0ms
  cypress:server:reporter got mocha event 'start' with args: [ { start: '2018-06-05T03:35:06.763Z' } ] +1ms

  cypress:server:timers clearing timer id 14 from queue { '14': { args: [], ms: 85000, cb: [Function] } } +2ms
  cypress:server:timers queuing timer id 15 after 85000 ms +0ms
  cypress:server:project onMocha end +0ms
  cypress:server:timers child received timer id 15 +3ms
  cypress:server:reporter got mocha event 'end' with args: [ { end: '2018-06-05T03:35:06.766Z' } ] +0ms

  0 passing (2ms)
```

the folder was there, just the file that was supposed to be there does not exist when we return it from preprocessor",bug
329199969,__/#/tests/... page errors 404 - page not found on Chrome 72+,"### Is this a Feature or Bug?

BUG

### Current behavior:

Sometimes when I run **all tests** I have such error:
![image](https://user-images.githubusercontent.com/28590512/40938953-9f4f7e02-6843-11e8-8ce6-f580f88e0eef.png)

Important thing that I noticed If i remove tests ""group_page.js"" (check gif) it seems that the problem disappeared. ""group_page.js"" using different page: `cy.visit(https://localhost:5002)` for testing when the other tests that crashing using `cy.visit(https://localhost:5000)`
![error2](https://user-images.githubusercontent.com/28590512/40939071-e58c058e-6843-11e8-8022-42a2992918b1.gif)

Check this gif, I had to run 3 times **RUN ALL TESTS** to make it work. Before always failed at login_page.js 

I was trying hardcode url in `cy.visit()` (before I had url from cypress.json). The same result.

### Steps to reproduce:

Run a few tests that include cy.visit(https://localhost:5002) for 1st test and cy.visit(https://localhost:5000) for 2nd test.

### Versions
Cypress: 3.0.1
Windows 10
Chrome
",bug
328657964,cy.screenshot doesnt get the full screen,"### Is this a Feature or Bug?

Bug

### Current behavior:

here's an example screenshot taken by cypress:

![image](https://user-images.githubusercontent.com/2848185/40862993-5360ebf4-65bc-11e8-9305-cb0e23e884ab.png)


### Desired behavior:

This only captured a small section of the UI. the whole UI should be captured.

### Steps to reproduce:

unsure of the specific steps. It works well when I ran on the big monitor, and fails when i run on the small laptop monitor. 

### Versions

MacOS and Cypress 3.0.1",bug
328586281,Cypress 3.0.0 doesn't always trigger onclick when calling .check() on radio buttons,"### Is this a Feature or Bug?

Bug

### Current behavior:

Calling `.check()` on a radio button will *visually* check it but the `onclick` code doesn't run.  This was not the case with 2.1.0

### Desired behavior:

Calling `.check()` on a radio button should trigger the `onclick` handler.

### Steps to reproduce:

I'm not 100% sure what the cause is.  I created a simple HTML file to test this on and it worked as expected, so maybe Cypress 3.0 handles a more complicated DOM differently.  I can't post the actual HTML I'm testing on since it is a company product.

### Versions

Cypress 3.0.0, Windows
<!-- Cypress, operating system, browser -->
",bug
328476160,[Bug] Simple tests fail randomly,"### Current behavior:

- Tests passes
or
- Tests fail randomly clicking on menu items due elements not visible?

![image](https://user-images.githubusercontent.com/6934501/40838082-ead35b2c-659c-11e8-9670-0cfaa9df2131.png)

How the test(s) look like:

```js
it('Audiences > Source audiences', function () {
	cy.get('li[id=""mainMenu:Audiences""]').should('be.visible').click()
	cy.get('li[id=""mainMenu:SourceAudiences""]').should('be.visible').click()
        cy.url().should('eq', 'https://domain.com/audiences')
	cy.get('h1[id=""screen-title""]').should('have.text', 'Your audiences')
	cy.get('h4[id=""screen-subtitle""]').should('have.text', 'Manage & create your source audiences')
})
```
or even when i run the test like this the same bevavior

```js
it('Audiences > Source audiences', function () {
	cy.get('li[id=""mainMenu:Audiences""]').click()
	cy.get('li[id=""mainMenu:SourceAudiences""]').click()
        cy.url().should('eq', 'https://domain.com/audiences')
	cy.get('h1[id=""screen-title""]').should('have.text', 'Your audiences')
	cy.get('h4[id=""screen-subtitle""]').should('have.text', 'Manage & create your source audiences')
})
```
Also happening when running headless mode.

### Desired behavior:

Tests should always pass since the snapshots are showing the elements just fine? 
Sometimes the elements seems not to be recognized as visible in cypress GUI.


### Versions

Cypress: 3.0.0 / Windows 10
",bug
328408501,Cypress should fire 'mouseover' event on .click(),"### Current behavior:

Unable to click on the first suggestion from google place auto complete

Video: https://drive.google.com/open?id=11dxli8EzoozjZ0LfAmDT6IJKHWKtlNKy

### Desired behavior:

Can click on the first suggestion

### Steps to reproduce:

The following script would fail. For some reason click wouldn't pick the item here. I've tried selenium and the click worked for me.

```js
cy
  .visit('https://developers.google.com/maps/documentation/javascript/examples/full/places-autocomplete')
  .get('#pac-input')
  .should('be.visible')
  .wait(1000)
  .type('22 Princes Highway, Darlington NSW, Australi')
  .get('.pac-item')
  .first()
  .should('be.visible')
  .click()
  .get('#pac-input')
  .then((result) => {
      expect(result.val()).to.eq('22 Princes Highway, Darlington NSW, Australia');
  });
```

### Versions

Cypress 3.0.1
Mac 10.13.4
Electron 59",bug
328249089,Dashboard - can't add more than 1 user,"### Is this a Feature or Bug?
It's a bug

### Current behavior + Steps to reproduce

1. go to Dashboard -> organizations -> users
2. try to invite more than one user
3. nothing happens (no error is displayed)
4. request gets 402, with a message that in order to add more users I have to upgrade billing plan
<img width=""1786"" alt=""screen shot 2018-05-31 at 20 26 14"" src=""https://user-images.githubusercontent.com/519968/40800575-10909532-6511-11e8-9dc1-b6808ebe2eb2.png"">


### Desired behavior:
- there is no possibility for now to upgrade billing plan
- in beta, all features should be available
<img width=""802"" alt=""screen shot 2018-05-31 at 20 29 19"" src=""https://user-images.githubusercontent.com/519968/40800712-6bd6f40e-6511-11e8-9e6a-4cea5de97f25.png"">

",bug
328231591,EPIPE error on Windows runs,"## Bug

- Cypress v3.0.1
- Windows
- Node 10.1.0
- npm 6.1.0

Saw this error on AppVeyor Windows CI https://ci.appveyor.com/project/cypress-io/cypress-example-todomvc/build/1.0.169

```
events.js:167
      throw er; // Unhandled 'error' event
      ^
Error: shutdown EPIPE
    at ReadStream.Socket._final (net.js:369:25)
    at callFinal (_stream_writable.js:615:10)
    at process._tickCallback (internal/process/next_tick.js:63:19)
Emitted 'error' event at:
    at ReadStream.onerror (_stream_readable.js:693:12)
    at ReadStream.emit (events.js:182:13)
    at emitErrorNT (internal/streams/destroy.js:82:8)
    at emitErrorAndCloseNT (internal/streams/destroy.js:50:3)
    at process._tickCallback (internal/process/next_tick.js:63:19)
npm ERR! code ELIFECYCLE
npm ERR! errno 1
npm ERR! @ cypress:run: `cypress run`
```

Maybe

1. a long request that’s still in flight and being proxied when the server shuts down (since the tests pass)
2. shutting down the http-server when there are open connections
3. killing the child processes (?)

Need to debug with `DEBUG=cypress:*` to isolate the problem",bug
328050175,"pluginsFile config does not respect path, forces a prefixed CWD","### Is this a Feature or Bug?
Bug

### Current behavior:

<!-- images, stack traces, etc -->
We have an internal framework that our other apps use for general things, where Cypress is one of them.
Our config is placed in this framework so that the consuming apps only need to write specs.
I noticed that the `pluginsFile` config does not behave like the other path based configs.

In the image below, the `supportFile` correctly points to `/frameworkpath/../support/command.js`, however the `pluginsFile`, written in the exact same manner, points to `/consumingAppPath/frameworkPath/../support/command.js` which does not exist. It seems like the path is prefixed with `process.cwd()` no matter what.

![image](https://user-images.githubusercontent.com/1016639/40772489-5ede4ed8-64c0-11e8-98a8-83d0b192ffd9.png)


### Desired behavior:
supportsFile config should be configurable to point to a supportsFile without forcing a `process.cwd()` prefix, making it impossible to have general plugin config when using a shared framework for frontend applications.

### Steps to reproduce:
See above image

### Versions
3.0.1
",bug
327659651,Screenshot is not working in chrome when test cases executed 2nd time ,"### Is this a Feature or Bug?
Bug
<!-- Is this a question? Do not open an issue. Please ask your question in our chat https://gitter.im/cypress-io/cypress -->

### Current behavior:
Screenshot is not working in chrome 2nd time when the test case are executed via GUI mode 
<!-- images, stack traces, etc -->
```
Object has been destroyed
    at BrowserWindow.capturePage (C:\Users\UdayN\AppData\Local\Cypress\Cache\3.0.0\Cypress\resources\electron.asar\browser\api\browser-window.js:203:16)
    at C:\Users\UdayN\AppData\Local\Cypress\Cache\3.0.0\Cypress\resources\app\packages\server\lib\gui\windows.js:141:24
    at Object.takeScreenshot (C:\Users\UdayN\AppData\Local\Cypress\Cache\3.0.0\Cypress\resources\app\packages\server\lib\gui\windows.js:140:18)
    at invoke (C:\Users\UdayN\AppData\Local\Cypress\Cache\3.0.0\Cypress\resources\app\packages\server\lib\browsers\electron.js:148:31)
    at onRequest (C:\Users\UdayN\AppData\Local\Cypress\Cache\3.0.0\Cypress\resources\app\packages\server\lib\browsers\electron.js:166:28)
    at C:\Users\UdayN\AppData\Local\Cypress\Cache\3.0.0\Cypress\resources\app\packages\server\lib\automation\index.js:78:20
    at attempt (C:\Users\UdayN\AppData\Local\Cypress\Cache\3.0.0\Cypress\resources\app\packages\server\lib\screenshots.js:98:14)
    at captureAndCheck (C:\Users\UdayN\AppData\Local\Cypress\Cache\3.0.0\Cypress\resources\app\packages\server\lib\screenshots.js:116:7)
    at Object.capture (C:\Users\UdayN\AppData\Local\Cypress\Cache\3.0.0\Cypress\resources\app\packages\server\lib\screenshots.js:277:14)
    at Object.capture (C:\Users\UdayN\AppData\Local\Cypress\Cache\3.0.0\Cypress\resources\app\packages\server\lib\automation\screenshot.js:11:28)
    at C:\Users\UdayN\AppData\Local\Cypress\Cache\3.0.0\Cypress\resources\app\packages\server\lib\automation\index.js:88:33
    at normalize (C:\Users\UdayN\AppData\Local\Cypress\Cache\3.0.0\Cypress\resources\app\packages\server\lib\automation\index.js:85:30)
    at C:\Users\UdayN\AppData\Local\Cypress\Cache\3.0.0\Cypress\resources\app\packages\server\lib\automation\index.js:125:20
    at runCallback (timers.js:781:20)
    at tryOnImmediate (timers.js:743:5)
    at processImmediate [as _immediateCallback] (timers.js:714:5)
From previous event:
    at $Cypress.automation (http://localhost:4100/__cypress/runner/cypress_runner.js:62423:12)
    at automate (http://localhost:4100/__cypress/runner/cypress_runner.js:59690:20)
    at automateScreenshot (http://localhost:4100/__cypress/runner/cypress_runner.js:59696:12)
    at scrollAndTake (http://localhost:4100/__cypress/runner/cypress_runner.js:59744:12)
From previous event:
    at takeScrollingScreenshots (http://localhost:4100/__cypress/runner/cypress_runner.js:59746:18)
    at takeFullPageScreenshot (http://localhost:4100/__cypress/runner/cypress_runner.js:59773:10)
    at http://localhost:4100/__cypress/runner/cypress_runner.js:59918:16
From previous event:
    at takeScreenshot (http://localhost:4100/__cypress/runner/cypress_runner.js:59911:19)
    at Context.screenshot (http://localhost:4100/__cypress/runner/cypress_runner.js:60010:14)
    at Context.<anonymous> (http://localhost:4100/__cypress/runner/cypress_runner.js:63860:21)
    at http://localhost:4100/__cypress/runner/cypress_runner.js:63575:33
From previous event:
    at runCommand (http://localhost:4100/__cypress/runner/cypress_runner.js:63565:14)
    at next (http://localhost:4100/__cypress/runner/cypress_runner.js:63647:14)
    at next (http://localhost:4100/__cypress/runner/cypress_runner.js:63635:16)
    at http://localhost:4100/__cypress/runner/cypress_runner.js:63659:18
From previous event:
    at next (http://localhost:4100/__cypress/runner/cypress_runner.js:63647:34)
From previous event:
    at http://localhost:4100/__cypress/runner/cypress_runner.js:63666:37
From previous event:
    at run (http://localhost:4100/__cypress/runner/cypress_runner.js:63664:15)
    at Object.cy.(anonymous function) [as request] (http://localhost:4100/__cypress/runner/cypress_runner.js:63884:11)
    at Context.runnable.fn (http://localhost:4100/__cypress/runner/cypress_runner.js:64024:20)
    at callFn (http://localhost:4100/__cypress/runner/cypress_runner.js:33042:21)
    at Test.Runnable.run (http://localhost:4100/__cypress/runner/cypress_runner.js:33035:7)
    at http://localhost:4100/__cypress/runner/cypress_runner.js:67001:28
From previous event:
    at Object.onRunnableRun (http://localhost:4100/__cypress/runner/cypress_runner.js:66996:20)
    at $Cypress.action (http://localhost:4100/__cypress/runner/cypress_runner.js:62309:51)
    at Test.Runnable.run (http://localhost:4100/__cypress/runner/cypress_runner.js:66067:20)
    at Runner.runTest (http://localhost:4100/__cypress/runner/cypress_runner.js:33505:10)
    at http://localhost:4100/__cypress/runner/cypress_runner.js:33611:12
    at next (http://localhost:4100/__cypress/runner/cypress_runner.js:33425:14)
    at http://localhost:4100/__cypress/runner/cypress_runner.js:33435:7
    at next (http://localhost:4100/__cypress/runner/cypress_runner.js:33367:14)
    at http://localhost:4100/__cypress/runner/cypress_runner.js:33403:5
    at timeslice (http://localhost:4100/__cypress/runner/cypress_runner.js:28644:27)
logError @ cypress_runner.js:140547
```
### Desired behavior:
Screenshot should be taken
### Steps to reproduce:

<!-- Issues without reproducible steps might get closed. *Tip* You can fork https://github.com/cypress-io/cypress-test-tiny repo, set up a failing test, then tell us the repo/branch to try. -->
1. add cy.screenshot() in a test
2. open cypress GUI mode
3. Execute test case on chrome (works fine)
4. Close browser and execute same test on Electron
5. Execute test cases on chrome again(fails now with the provided stacktrace)
below is sample code for test case
```js
it(""verify articles on Global feeds"",function(){
  var allArticles
  cy.request(""http://localhost:3000/api/articles?limit=10&offset=0"")
  .then((response)=>{
    allArticles = response.body.articles		
  })

  cy.visit(""/"")

  cy.get(""ul.nav-pills a.nav-link"")
  .contains(""Global Feed"")
  .click()
  .should(""have.class"",""active"")

  cy.screenshot()

  cy.get(""div.article-preview"")
  .should(""be.visible"")
  .each(function($ele,index){
    cy.wrap($ele)
    .find(""a.preview-link>h1"")
    .should(""be.visible"")
    .should(""have.text"",allArticles[index].title)
    
    cy.wrap($ele)
    .find(""a.preview-link"")
    .should(""have.attr"",""href"",""/article/""+allArticles[index].slug)

    cy.wrap($ele)
    .find(""a"")
  })
})
```

### Versions
Cypress: 3.0.0
OS: Windows 7
<!-- Cypress, operating system, browser -->
",bug
327631656,TypeError on cypress open tty.getWindowSize,"### Is this a Feature or Bug?

Bug

### Current behavior:

On `cypress open`, some users are getting TypeError on new update to 3.0.0

![](https://image.ibb.co/bWjSCd/screen.jpg)

```bash
TypeError: tty.getWindowSize is not a function
at Object.<anonymous> (C:\Users\Ladder Digital\AppData\Local\Cypress\Cache\3.0.0\Cypress\resources\app\packages\server\node_modules\mocha\lib\reporters\base.js:120:13)
at Object.<anonymous> (C:\Users\Ladder Digital\AppData\Local\Cypress\Cache\3.0.0\Cypress\resources\app\packages\server\node_modules\mocha\lib\reporters\base.js:489:3)
at Module._compile (module.js:569:30)
at Object.Module._extensions..js (module.js:580:10)
at Module.load (module.js:503:32)
at tryModuleLoad (module.js:466:12)
at Function.Module._load (module.js:458:3)
at Module.require (module.js:513:17)
at require (internal/module.js:11:18)
at Object.<anonymous> (C:\Users\Ladder Digital\AppData\Local\Cypress\Cache\3.0.0\Cypress\resources\app\packages\server\node_modules\mocha\lib\reporters\index.js:3:31)
at Object.<anonymous> (C:\Users\Ladder Digital\AppData\Local\Cypress\Cache\3.0.0\Cypress\resources\app\packages\server\node_modules\mocha\lib\reporters\index.js:21:3)
at Module._compile (module.js:569:30)
at Object.Module._extensions..js (module.js:580:10)
at Module.load (module.js:503:32)
at tryModuleLoad (module.js:466:12)
at Function.Module._load (module.js:458:3)
at Module.require (module.js:513:17)
at require (internal/module.js:11:18)
at Object.<anonymous> (C:\Users\Ladder Digital\AppData\Local\Cypress\Cache\3.0.0\Cypress\resources\app\packages\server\node_modules\mocha\lib\mocha.js:13:17)
at Object.<anonymous> (C:\Users\Ladder Digital\AppData\Local\Cypress\Cache\3.0.0\Cypress\resources\app\packages\server\node_modules\mocha\lib\mocha.js:504:3)
at Module._compile (module.js:569:30)
at Object.Module._extensions..js (module.js:580:10)
at Module.load (module.js:503:32)
at tryModuleLoad (module.js:466:12)
at Function.Module._load (module.js:458:3)
at Module.require (module.js:513:17)
at require (internal/module.js:11:18)
at Object.<anonymous> (C:\Users\Ladder Digital\AppData\Local\Cypress\Cache\3.0.0\Cypress\resources\app\packages\server\node_modules\mocha\index.js:3:5)
at Object.<anonymous> (C:\Users\Ladder Digital\AppData\Local\Cypress\Cache\3.0.0\Cypress\resources\app\packages\server\node_modules\mocha\index.js:5:3)
at Module._compile (module.js:569:30)
at Object.Module._extensions..js (module.js:580:10)
at Module.load (module.js:503:32)
at tryModuleLoad (module.js:466:12)
at Function.Module._load (module.js:458:3)
at Module.require (module.js:513:17)
at require (internal/module.js:11:18)
at Object.<anonymous> (C:\Users\Ladder Digital\AppData\Local\Cypress\Cache\3.0.0\Cypress\resources\app\packages\server\lib\reporter.js:11:11)
at Object.<anonymous> (C:\Users\Ladder Digital\AppData\Local\Cypress\Cache\3.0.0\Cypress\resources\app\packages\server\lib\reporter.js:402:4)
at Object.<anonymous> (C:\Users\Ladder Digital\AppData\Local\Cypress\Cache\3.0.0\Cypress\resources\app\packages\server\lib\reporter.js:404:3)
at Module._compile (module.js:569:30)
at Object.Module._extensions..js (module.js:580:10)
at Module.load (module.js:503:32)
at tryModuleLoad (module.js:466:12)
at Function.Module._load (module.js:458:3)
at Module.require (module.js:513:17)
at require (internal/module.js:11:18)
at Object.<anonymous> (C:\Users\Ladder Digital\AppData\Local\Cypress\Cache\3.0.0\Cypress\resources\app\packages\server\lib\project.js:49:14)
at Object.<anonymous> (C:\Users\Ladder Digital\AppData\Local\Cypress\Cache\3.0.0\Cypress\resources\app\packages\server\lib\project.js:654:4)
at Object.<anonymous> (C:\Users\Ladder Digital\AppData\Local\Cypress\Cache\3.0.0\Cypress\resources\app\packages\server\lib\project.js:656:3)
at Module._compile (module.js:569:30)
at Object.Module._extensions..js (module.js:580:10)
at Module.load (module.js:503:32)
at tryModuleLoad (module.js:466:12)
at Function.Module._load (module.js:458:3)
at Module.require (module.js:513:17)
at require (internal/module.js:11:18)
at Object.<anon
```

### Desired behavior:

No TypeError :)

### Steps to reproduce:

```js
.node_modules\.bin\cypress open
```

### Versions

Cypress: 3.0.0
OSes observered: Windows 10 Pro, Windows 8.1, Windows 7
",bug
327629494,Some newly seeded kitchen-sink examples are failing,"### Is this a Feature or Bug?
Bug

### Current behavior:

Some of the newly seeded kitchen-sink tests are failing. It appears the new example.cypress.io website did not properly deploy. 

### Desired behavior:

### Steps to reproduce:

Add cypress to any new project, run `aliasing.spec.js` - it is failing due to missing html on example.cypress.io

<img width=""243"" alt=""skarmavbild-2018-05-30-kl -09 45 02"" src=""https://user-images.githubusercontent.com/1271364/40709157-5f064a12-63c3-11e8-8ab5-ea9c98cb9442.png"">

### Versions

3.0.0",bug
326941398,Video processing is missing the Compression progress updates,"Normally Cypress is supposed to log out compress progress every 10 seconds. This is useful for UX but also because CI providers will kill builds if they don't log to `stdout` within 10 minutes.

It should do this... (but its not currently writing the `Compression progress` bits.

The bug is due to a `fluent-ffmpeg` problem where we are attaching event listeners *after* we call `.save(...)`

![screen shot 2018-05-28 at 4 24 21 am](https://user-images.githubusercontent.com/1268976/40605126-4ad03caa-622f-11e8-8c59-be6310b38309.png)
",bug
326594252,Tests run in Chrome with baseUrl set navigate directly to baseUrl instead of Test Runner URL,"### Current behavior:
When I set a `baseUrl` and attempt to run the tests in Chrome, instead of the test runner it attempts to directly go to that URL. 
![image](https://user-images.githubusercontent.com/1657182/40555835-4de270b4-6042-11e8-8e99-7c4444a4cac8.png)
Removing the `baseUrl` property will load Cypress as normal, as does having a value set but running the tests using Electron.

### Desired behavior:
When I run the tests with Chrome, it should navigate to Cypress running on localhost and show me the Cypress Test Runner. This is how it behaves when using Electron as the browser.

### Steps to reproduce:

1. Add `""baseUrl"": ""https://doesntmatteranyurl""` to `Cypress.json`
2. Open Cypress
3. Set browser to Chrome
4. Run any tests

### Versions
**Cypress:** 2.1.0 (happened on previous versions too)
**OS:** Windows 10 1803
",bug
326227538,Failure screenshots can randomly not show runner UI if there's a screenshot in the test,"Currently, [failure screenshots bypass the pixel-checking](https://github.com/cypress-io/cypress/blob/develop/packages/server/lib/screenshots.coffee#L194) we do on regular screenshots for the sake of speed. In most cases, this is fine since most tests aren't going to have screenshots in them. However, in the case of a test having a `cy.screenshot()` command in it and failing, the failure screenshot can randomly not display the runner UI because the browser hasn't had time to paint it yet.

I think we need to re-introduce the pixel-checking on failure screenshots to make them 100% reliable. This, of course, will add some latency to them.",bug
325266078,Cypress is stopped and json error is displayed on console,"<!-- Is this a question? Do not open an issue. Please ask your question in our chat https://gitter.im/cypress-io/cypress -->

Test execution is stopped.

### Current behavior: <!-- (images, stack traces, etc) -->

Below error is displayed on command prompt.
```
{ Error: unexpected end of file
    at Gunzip.zlibOnError (zlib.js:152:15)
 errno: -5, code: 'Z_BUF_ERROR' }
Error: unexpected end of file
    at Gunzip.zlibOnError (zlib.js:152:15)
```

cypress log:
![image](https://user-images.githubusercontent.com/1212793/40361542-98c259ba-5dc1-11e8-9de6-69d994556351.png)

### Desired behavior:

Test should work.
### Steps to reproduce:

Testing internal application

### Versions  <!-- (Cypress, operating system, browser) -->
Latest
",bug
324705698,Random failures over Regexp: Invalid regular expression,"I get very strange non-deterministic errors when opening my website in Cypress. It complains about a failing Regexp, but the weird thing is that this never causes a problem in a normal browser, and in fact, even within the Cypress browser, if I open a new tab and reload the code, it works perfectly. And I also added on Cypress.on('uncaught.exception') to my code, which does not seem to help.

Here's my test script:
```js
const uuid = require('cuid');
Cypress.on('uncaught:exception', (err, runnable) => {
  return false;
});

describe('My First Test', function() {
  it('finds the content ""type""', function() {
    const id = uuid();
    // cy.wait(30000 * Math.random());
    cy.visit(`https://icchilisrv3.epfl.ch:7000/w948?login=${id}`);

    cy.get('video', { timeout: 90000 });
    cy
      // .wait(10000)
      .then(() => cy.wrap(Cypress.$('video')[0].networkState).should('eq', 2));
    cy.wait(180000);
  });
});
```

Here you see two tabs of the same browser, consistently showing completely different behaviour (even when reloading etc). What's very strange is that when I deploy this in 30 different browsers using Kubernetes, I get half of them failing with this error, and the other half working normally! Perhaps this is a timing issue (the reason for the non-determinism) with some interaction between my code and Cypress test code?

<img width=""1390"" alt=""screen shot 2018-05-20 at 14 21 31"" src=""https://user-images.githubusercontent.com/61575/40278898-b93edd1e-5c39-11e8-880d-f64c55436ed2.png"">
<img width=""1394"" alt=""screen shot 2018-05-20 at 14 21 00"" src=""https://user-images.githubusercontent.com/61575/40278900-b957a394-5c39-11e8-8c97-1aee8ae4f936.png"">

Here you see examples of failing and successful Cypress runs - these are exactly the same code in different Kubernetes containers: 

![screen shot 2018-05-20 at 14 27 06](https://user-images.githubusercontent.com/61575/40278907-f4976dfe-5c39-11e8-8ccd-39935a09d163.png)

(in this case, I don't get the error exceptions, because of the uncaught.exception setting, but the behaviour is exactly the same as in interactive mode, making me believe that the problem is identical). 

Reference to [Cypress dashboard run](https://dashboard.cypress.io/#/projects/32bbwc/runs/ba1f5eeb-9b17-4088-a8e7-d6c0c18fd44a/output)",bug
324572513,"""Cypress plugin has crashed click here to reload extension"" when launching from non-native terminal","### Current behavior: <!-- (images, stack traces, etc) -->
![image](https://user-images.githubusercontent.com/2856501/40260652-a5363982-5ab0-11e8-80b9-cedc2edb4125.png)

Video of error:
http://recordit.co/mezA4GC015

### Desired behavior:
Cypress should execute normally regardless of where it is launched.

### Steps to reproduce:
```bash
create-react-app cypress-test-js
cd cypress-test-js
npm i -D cypress
> Add 'cypress:open' script to package.json
npm run cypress:open
Click on `example.spec.js` as instructed
```

Luckily I have seen a similar issue before when I was using Protractor / Selenium and we had the age old case of it's broke on my machine, but works on co-workers and couldn't figure out why.

The key is where you run the `npm run cypress:open` command.
If I run `npm run cypress:open` from within VSCode using the PowerShell terminal or the cmd terminal it will fail.
However I open an actual PowerShell or CMD prompt and run `npm run cypress:open` cypress seems to work fine.

I remember investigating this a bit ago, and we never understood root cause, but there are differences between the environment variables that might have effect.

For example the terminal in VS Code has these extra stuff like which the native terminals do not.
```
ELECTRON_NO_ATTACH_CONSOLE     1                                                                                                                                                                                              
FPS_BROWSER_APP_PROFILE_STRING Internet Explorer                                                                                                                                                                              
FPS_BROWSER_USER_PROFILE_ST... Default

LANG                           en_US.UTF-8

PROMPT                         $P$G

TERM_PROGRAM                   vscode                                                                                                                                                                                         
TERM_PROGRAM_VERSION           1.23.1

VSCODE_CLI                     1                                                                                                                                                                                              
VSCODE_CWD                     D:\repos                                                                                                                                                                                       
VSCODE_IPC_HOOK                \\.\pipe\9d82e5aa2e1d47f4774f828c8afaf3b5-1.23.1-main-sock                                                                                                                                     
VSCODE_NLS_CONFIG              {""locale"":""en-us"",""availableLanguages"":{}}                                                                                                                                                     
VSCODE_NODE_CACHED_DATA_DIR... C:\Users\mattm\AppData\Roaming\Code\CachedData\d0182c3417d225529c6d5ad24b7572815d0de9ac                                                                                                        
VSCODE_NODE_CACHED_DATA_DIR... C:\Users\mattm\AppData\Roaming\Code\CachedData\d0182c3417d225529c6d5ad24b7572815d0de9ac                                                                                                        
VSCODE_NODE_CACHED_DATA_DIR... C:\Users\mattm\AppData\Roaming\Code\CachedData\d0182c3417d225529c6d5ad24b7572815d0de9ac                                                                                                        
VSCODE_PID                     11572
```

I don't know if any of these are suspicious or why the _addition_ of them would hurt, but I think this issue is an easy problem for new comers to get caught up on since many people use terminals integrated into their editor.  Also, one of Cypress's main talking points was that it is easier to get started than traditional/selenium based solutions. I assume it's just oddities with Windows and ROI is low, but it might be an easy fix for someone who is familiar with this stuff.

Or if it is not easily fixed maybe at least the error can be detected so it tells people, you're running from environment X which is not supported, please use Y.


### Versions  <!-- (Cypress, operating system, browser) -->
Windows 10: 10.0.17134 Build 17134
Chrome: 66.0.3359.181 (Official Build) (64-bit)
Cypress: 2.1.0
",bug
323370593,"`auth` option on cy.visit doesn't seem to work with ""https"" domain","### Current behavior: 

I get an ""Unauthorized"" error when trying to access an https site using the `auth` option in `cy.visit()`.

![1](https://user-images.githubusercontent.com/2463995/40081389-36919524-5864-11e8-9c2c-86b92996eb1b.png)

Authentication is set like this:

```js
Cypress.Commands.overwrite('visit', (orig, url, options) => {
    options = options || {};
    options.auth = {
      username: Cypress.env('AUTH_USER'),
      password: Cypress.env('AUTH_PASS')
    };
    return orig(url, options)
});
```

If I set the same username/password in the url instead before the host name, then it works fine:
![2](https://user-images.githubusercontent.com/2463995/40081502-949faa02-5864-11e8-8b33-1dbe97274717.png)

Bad thing about this is, username/password on the url works fine on chrome but not on electron: https://github.com/cypress-io/cypress/issues/1639. 

So right now I'm unable to test an https site headless from CI.


### Desired behavior:

I can access https site, using `auth` option.

### Steps to reproduce:

Try to access an https site, with basic security, and use the `auth` option in `cy.visit()` to authenticate.

### Versions  <!-- (Cypress, operating system, browser) -->
Cypress 2.1.0
macOS 10.13.4
Chrome 66, Electron 59

",bug
321532983,ignoreTestFiles is ignored when passed from cli,"

### Current behavior:
When invoking cypress with `config ignoreTestFiles=*blob` from the command line, specs that match the blob aren't ignored. For instance, this `npm` command:
```
""cypress:run"": ""cypress run --config ignoreTestFiles=*.demo.js""
```
Will make a `spec.demo.js` to run, when it should be ignored.

### Desired behavior:
Files that match the `ignoreTestFiles` parameter should be ignored.

### Steps to reproduce:

I set up a test-tiny-repo clone with a demo of the issue. The branch is called `ignore-test-files-cli-issue`. [You can find the repo here](https://github.com/Sergeon/cypress-test-tiny/tree/ignore-test-files-cli-issue).

The readme has all the instructions.

### Versions:
Mac Os: 10.13.4
Cypress: 2.1

",bug
321026208,cy.type() on a DIV,"I have an app which is a text editor and the DOM is formatted using regular elements (h1, div, span) and they become actionable when clicked and the user can type as in a regular textarea  or input . Cypress won't let me type on it, though. 

I tried using force, with no success.

Is there any way to make it work or I'm stuck with Dusk? :(

EDIT:

I tried the following solution but it only types the first character on the desired field and the rest switches to another one.

Here's my DOM and how it should work 
https://imgur.com/fCjZLRK

Here's how it's happening with Cypress
https://imgur.com/Oynzlrd

And here's my current code

```js
cy.get('.editor-title').find('[contenteditable]').click().type('An unexpected party', {
      force: true,
    });
```

",bug
320562982,type() won't tipe in autoformating field,"I'm testing a client's react app and it has a credit card page. type() is not filling the fields, which are designed to autoformat the input to match a credit card or date format. (4242424242424242 -> 4242 4242 4242 4242).

Is there a way to deal with this behavior or to simply change the field values directly?",bug
320241581,Issue with domains in 'baseUrl' having several dots,"<!-- Is this a question? Do not open an issue. Please ask your question in our chat https://gitter.im/cypress-io/cypress -->

### Current behavior: <!-- (images, stack traces, etc) -->
I'm trying to tests a website on an Azure domain which looks like:

```
http://my-test-app.westeurope.cloudapp.azure.com
```

When I try to run cypress, I'm getting the following error:
```
Uncaught DOMException: Failed to set the 'domain' property on 'Document': 'azure.com' is not a suffix of 'localhost'.
```

If I try to run `cypress run`, my terminal just hangs after `(Tests Starting)` without stopping or showing any error.

### Desired behavior:

The site is testable.

### Steps to reproduce:

See above.

### Versions  <!-- (Cypress, operating system, browser) -->

2.1.0

Also, it seems to be a recent regression, I was able to test this website a few months ago.",bug
316349598,Improve XVFB detection / timeout logic,"## bug

On Travis see the problem sporadically where XVFB would not start
```
> node server.js --port 7076 ""--silent""
Your system is missing the dependency: XVFB
Install XVFB and run Cypress again.
Read our documentation on dependencies for more information:
https://on.cypress.io/required-dependencies
If you are using Docker, we provide containers with all required dependencies installed.
----------
Error: Could not start Xvfb.
----------
Platform: linux (Ubuntu Linux - 14.04)
Cypress Version: 2.1.0
npm ERR! Linux 4.14.12-041412-generic
```

It is rare but happens a lot in repos like https://travis-ci.org/cypress-io/cypress-example-recipes

![screen shot 2018-04-20 at 1 24 37 pm](https://user-images.githubusercontent.com/2212006/39064955-3f6ef684-449e-11e8-873d-9ba21ebb026f.png)
",bug
315896174,Missing artifacts when running desktop-gui integration tests,"Example: https://circleci.com/gh/cypress-io/cypress/18143#tests/containers/0

The test script ran several `desktop-gui` integration tests, some of which have failed. There should be  screenshots and videos, but nothing was collected. ",bug
315067996,Initial visit() is very slow on Angular apps with an external resource,"<!-- Is this a question? Do not open an issue. Please ask your question in our chat https://gitter.im/cypress-io/cypress -->

### Current behavior: <!-- (images, stack traces, etc) -->
Started up a new Angular app (`ng new cypress-test`), installed Cypress, did `ng serve`, wrote a simple test just visiting the home page and looking for the sample text, and that test ran fine.
Then, added in a `<link>` to the Bootstrap CDN in the app's `index.html` and suddenly the Cypress test cranks for exactly 30 seconds (the status bar in Chrome says ""Establishing secure connection...""), and then runs the test, but prints out a timeout error to the console:
![screen shot 2018-04-17 at 9 35 31 am](https://user-images.githubusercontent.com/2855641/38873213-3cc705de-4223-11e8-9984-3950fa76da9c.png)

Tried this with Font Awesome, and some Google Fonts, and all 3, and it still takes 30 seconds, so it's not an issue with slow responses from the external resource; there seems to be some issue with those links in the `<head>` section that Cypress doesn't like.

### Desired behavior:
The tests load the application's pages in roughly the same time as loading them normally via localhost is.

### Steps to reproduce:

1. Clone https://github.com/jdhines/cypress-test
2. `npm install`
3. `ng serve`
4. In another terminal window, open Cypress (I used `npx cypress open`)
5. In the browser, observe that 30 seconds elapse, after which time the test runs, and the console report a timeout error for the bootstrap resource.

### Versions  <!-- (Cypress, operating system, browser) -->
Cypress 2.1.0
Chrome 62
Mac OS High Sierra
",bug
313489303,can't trigger 'onChange' for an input type='range' rendered by React,"<!-- Is this a question? Do not open an issue. Please ask your question in our chat https://gitter.im/cypress-io/cypress -->

### Current behavior: <!-- (images, stack traces, etc) -->
```js
...
return (
...
<div className=""search-bar__form-range"">
  <input type=""range"" min={10} max={900} step={10} value={500} onChange={(event)=>alert(`slider changed
  to:${event.target.value}`)}
  />
...
```


```js
cy.get('.search-bar__form-range > input[type=range]').as('range').invoke('val', 700)
  .trigger('change');
```
Changes the slider value.
Doesn't trigger the onChange handler.



### Desired behavior:
should trigger the onChange handler

### Steps to reproduce:

Set up a React app with an input type='range' and an onChange handler
Try to trigger the onChange event from cypress.


### Versions  <!-- (Cypress, operating system, browser) -->
""cypress"": ""^2.1.0""
""react"": ""^15.4.2""
",bug
313455478,Screenshots sometimes don't render error text,"<!-- Is this a question? Do not open an issue. Please ask your question in our chat https://gitter.im/cypress-io/cypress -->

### Current behavior: <!-- (images, stack traces, etc) -->

Screenshots sometimes don't render the error text. It shows the error box, but the text is invisible. This is because the font used for the error text (Open Sans) hasn't loaded yet

![screen shot 2018-04-11 at 3 21 53 pm](https://user-images.githubusercontent.com/1157043/38638435-3d5f1c38-3d9c-11e8-92af-58f9982a5ab3.png)

### Desired behavior:

The error text should be visible in the screenshot.

### Solution:

Pre-load the Open Sans font by using it elsewhere in the UI.
",bug
313439279,Snapshots should ignore print stylesheets,"### Current behavior:

Snapshots copy the styles from stylesheets with `media=""print""`. This can cause styles to be applied in the snapshot that aren't supposed to be applied.

What it should look like:

![screen shot 2018-04-11 at 2 30 33 pm](https://user-images.githubusercontent.com/1157043/38635986-fc4e3762-3d94-11e8-80df-313e8b001594.png)

What it looks like in snapshot (notice the `#sidebar-first` style with `display: none`):

![screen shot 2018-04-11 at 2 30 51 pm](https://user-images.githubusercontent.com/1157043/38635997-0448fa38-3d95-11e8-9fed-e52d66b434f2.png)

Styles come from the stylesheet with `media=""print""`:

![screen shot 2018-04-11 at 2 32 02 pm](https://user-images.githubusercontent.com/1157043/38636039-211636d0-3d95-11e8-8555-2e5ed012df03.png)

### Desired behavior:

Snapshots should ignore print stylesheets. In fact, they should probably ignore any stylesheet `media` value that's not undefined or `screen`.

### Steps to reproduce:

```js
  cy.visit('https://s1.demo.opensourcecms.com/drupal/')
```

View the snapshot and see that it doesn't appear correct because the print stylesheet hides certain elements such as the search.

### Versions  <!-- (Cypress, operating system, browser) -->

Cypress: 2.1.0
OS: MacOS
Browser: Chrome 65
",bug
313066686,"Preprocessor does not fire ""close"" event","Seems to be a bug.

I expect to see ""close"" events fired when closing / stopping tests, but do not see any messages about this. This would cause problems running in GUI mode, especially when using custom preprocessors to bundle spec files.

packages/server/lib/plugins/preprocessor.coffee

Running against `cypress-test-tiny` with debug log messages enabled

```
$ DEBUG=cypress:server:preprocessor npm run dev -- --project ~/git/cypress-test-tiny/

> cypress@2.1.0 dev /Users/gleb/git/cypress
> node ./scripts/start.js ""--project"" ""/Users/gleb/git/cypress-test-tiny/""

GET /__/ 200 19.482 ms - -
GET /__cypress/runner/cypress_runner.css 200 34.056 ms - -
GET /__cypress/runner/cypress_runner.js 200 249.248 ms - -
GET /__cypress/runner/fonts/fontawesome-webfont.woff2?v=4.7.0 200 3.645 ms - 77160
  cypress:server:preprocessor getFile /Users/gleb/git/cypress-test-tiny/cypress/integration/spec.js +0ms
  cypress:server:preprocessor set default preprocessor +0ms
GET /__cypress/iframes/integration/spec.js 200 244.981 ms - 711
  cypress:server:preprocessor getFile /Users/gleb/git/cypress-test-tiny/cypress/support/index.js +246ms
  cypress:server:preprocessor getFile /Users/gleb/git/cypress-test-tiny/cypress/integration/spec.js +6ms
GET /__cypress/tests?p=cypress/integration/spec.js-693 200 692.308 ms - 596
GET /__cypress/tests?p=cypress/support/index.js-184 200 735.031 ms - -
GET /__/ 200 3.335 ms - -
GET /__cypress/runner/cypress_runner.css 200 36.511 ms - -
GET /__cypress/runner/cypress_runner.js 200 245.277 ms - -
GET /__cypress/runner/fonts/fontawesome-webfont.woff2?v=4.7.0 200 1.363 ms - 77160
GET /__cypress/iframes/integration/spec.js 200 4.754 ms - 711
  cypress:server:preprocessor getFile /Users/gleb/git/cypress-test-tiny/cypress/support/index.js +14s
  cypress:server:preprocessor getFile /Users/gleb/git/cypress-test-tiny/cypress/integration/spec.js +2ms
GET /__cypress/tests?p=cypress/integration/spec.js-165 200 2.553 ms - 596
GET /__cypress/tests?p=cypress/support/index.js-548 200 4.557 ms - -
```

So I see `getFile` and `set default preprocessor` messages, but not anything related to close event.

Also noticed same in https://github.com/cypress-io/cypress-example-recipes/issues/136",bug
312566787,Using custom report cause problem with the command line output,"### Current behavior:

When I use a custom reporter configuration like this:

[cypress.json](https://github.com/gpincheiraa/proyecto_1/blob/evaluation/cypress.json#L11)
```json
{
    ""fileServerFolder"": ""./test/e2e"",
    ""fixturesFolder"": ""./test/e2e/fixtures"",
    ""integrationFolder"": ""./test/e2e/features"",
    ""pluginsFile"": ""./test/e2e/plugins/index.js"",
    ""screenshotsFolder"": ""./test/e2e/screenshots"",
    ""supportFile"": ""./test/e2e/support/index.js"",
    ""videosFolder"": ""./test/e2e/videos"",
  
    ""baseUrl"": ""http://localhost:3000"",
    ""reporter"": ""reporters/custom.js""
    
}
```

[./reporters/custom.js](https://github.com/gpincheiraa/proyecto_1/blob/evaluation/reporters/custom.js)

```js
module.exports = function(runner) {
    const scoreMatrix = {
        'passed': 1,
        'failed': 0
    };
    let score = 0;
    let passes = 0;
    let failures = 0;

    runner.on('pass', function(test){
        passes++;
        // console.log('pass: %s', test.fullTitle());
        score += scoreMatrix[test.state] || 0;
    });

    runner.on('fail', function(test, err){
        failures++;
        // console.log('fail: %s -- error: %s', test.fullTitle(), err.message);
        score += scoreMatrix[test.state] || 0;
    });

    runner.on('end', function(){
        // console.log('end: %d/%d', passes, passes + failures);
        console.log(`Your score is ${score}`);
        console.log(`passes: ${passes} , failures: ${failures}`);
        process.exit();
    });
};
```

When I run `cypress run` the output panel shows the following:

![captura de pantalla 2018-04-09 a las 10 09 51 a m](https://user-images.githubusercontent.com/5608336/38504953-71570ba6-3bec-11e8-8a91-fe720599ba39.png)

Notice this `undefined` values for some texts.

### Desired behavior:

I need that the panel with `undefined` values won't showed or some way to pass the values from my custom reporter to cypress output

### How to reproduce:

- `git clone https://github.com/gpincheiraa/proyecto_1.git`
- `cd proyecto_1`
- `git checkout evaluation`
- `npm install`
- `npm start`  
- open new terminal tub and run `npm run e2e:ci`

- Operating System: MacOS Sierra
- Cypress Version: cypress@2.1.0



",bug
312063294,Object has been destroyed,"Using an explicit `cy.screenshot()` and switching between the Electron browser + Chrome will result in this error:

![screen shot 2018-04-06 at 1 53 32 pm](https://user-images.githubusercontent.com/1268976/38436211-ee5a469c-39a1-11e8-9313-3c3d9d5ba1df.png)

This is a bug with not properly unregistering the Electron automation handlers when closing that browser and switching to a new one.",bug
311746832,Character problems with character encoding of iso-8859-1 sites,"- Operating System: Mac OS
- Cypress Version: Last
- Browser Version: Chrome and Electron

Hello, 

My site is not yet in utf8 and i have Character problems for accented characters (`doctype iso-8859-1`) when I use cypress. It's not really blocking except when doing regular expression searches  : 

HTML HEADER CHARSET : 
```
meta http-equiv=""content-type"" content=""text/html; charset=iso-8859-1""
```

Result : 
```
Les sites ont bien ï¿½tï¿½ supprimï¿½s
ï¿½ Tous droits rï¿½servï¿½s ï¿½ 
```

Thanks
Regards


",bug
310589540,Content security policy is not allowing page to be loaded,"- Cypress Version: 2.1.0

Normally we are able to strip content security policies, but there is something about this url that is causing this to error.

```js
it('example', () => {
 cy.visit('https://login.yahoo.com/config/login?.src=flickrsignin&.pc=8190&.scrumb=0&.pd=c%3DH6T9XcS72e4mRnW3NpTAiU8ZkA--&.intl=in&.lang=en&.done=https%3A%2F%2Flogin.yahoo.com%2Fconfig%2Fvalidate%3F.src%3Dflickrsignin%26.pc%3D8190%26.scrumb%3D0%26.pd%3Dc%253DJvVF95K62e6PzdPu7MBv2V8-%26.intl%3Din%26.done%3Dhttp%253A%252F%252Fwww.flickr.com%252Fsignin%252Fyahoo%252F%253Fredir%253Dhttp%25253A%25252F%25252Fwww.flickr.com%25252F')
})
```

Error displayed:
```
Refused to execute inline script because it violates the following Content Security Policy 
directive: ""script-src 'self' 'unsafe-eval' ....Either the 'unsafe-inline' keyword, 
a hash ('...'), or a nonce ('nonce-...') is required to enable inline execution.
```",bug
309929837,Application is framebusting with this.self,"The website in the test below will not run within Cypress due to framebusting code within the application. 

**Test**
```js
it('example', () => {
  cy.visit('https://secure2.store.apple.com/shop/account/setup')
})
```

**Likely framebusting culprit**
```js
//...code
    259: [function(e, t, n) {
        (function() {
            this.self !== this.top && (this.top.location = this.location)
        }
        ).call(window)
    }
    , {}],
//...more code
```",bug
308820803,TypeError: remoteJQuery is not a function,"
### Current behavior:
`cy.get(selector)` works fine.
`cy.get(selector).then((elem) => {})` with any callback results in `TypeError: remoteJQuery`, with no extra information
### Desired behavior:

cy.get(selector).then((elem) => {}) should give me access to the element.

#### Test code:
```js
  it('example', () => {
    cy.get('#cy-div')
    .then(elem => {
      elem;
     })
  })
```

I've tried cy v2.0.4 and v2.1

on Mac OS 10.13.3 using chrome.


<img width=""406"" alt=""screen shot 2018-03-27 at 3 46 33 pm"" src=""https://user-images.githubusercontent.com/9067274/37947310-18a4182a-31d6-11e8-9483-e4fd08ca3b31.png"">


",bug
308159314,Reporter - the file (filename) property is undefined,"### Current behavior:

When I use junit or any other reporter the `file` property of the `suite` object from the `runner.on('suite', function(suite) {})` listener is undefined.

### Desired behavior:

The `file` property of the suite should be the name of the file which contains the given test suite.

### How to reproduce:

In the example below I used `junit` reporter, but it can be reproduced with any reporter which contains filename in their report.

`cypress run --spec [spec_file].js --reporter junit` or `cypress run --reporter junit`

Bug:
The generated report doesn't contain the `file` property.

Expected: 
You should have a `file` on the generated report.
 

### Additional Info (images, stack traces, etc)

Suite object from the reporter:

![image](https://user-images.githubusercontent.com/2777071/37850529-1e836df8-2ee4-11e8-9ac4-a0b2aca0d404.png)


Generated report without filename:

![image](https://user-images.githubusercontent.com/2777071/37850232-176104a0-2ee3-11e8-98f4-6c2099bd9066.png)


",bug
308058336,browser with test GUI should save size,"### Current behavior:

using the tests GUI, every time I click `Run All Tests` button (or each file individually) the tests GUI window **always** open maximized.

my `state.json` on **Windows** (screen res: 3440x1440) is

```json
{
  ""showedOnBoardingModal"": true,
  ""appWidth"": 800,
  ""appHeight"": 545,
  ""appX"": 2602,
  ""appY"": 709
}
```

on **Ubuntu** is as 

```json
{
  ""showedOnBoardingModal"": true,
  ""appWidth"": 800,
  ""appHeight"": 1113,
  ""appX"": 565,
  ""appY"": 54,
  ""reporterWidth"": 259
}
```


### Desired behavior:

It should save the browser dimensions so it could use it to open the next time

### How to reproduce:

on **Windows**

I've simply added `cypress` to my project through npm and run it locally

```bash
npm i --save-dev cypress
./node_modules/.bin/cypress open
```

and then click ""run all tests"" button

#### Test code:

```js
const clientUrl = 'https://www.billigvvs.dk/';

describe('BilligVVS - Signup', () => {
    beforeEach(() => {
        cy.viewport('macbook-15');
        cy.visit(`${clientUrl}#sc-test`);
    });

    it('campaign loads after 60sec', () => {
        cy.getCookies();
        cy.wait(20 * 1000);
        cy.get('sign-up').should('have.value', 'abc'); // error-here
        expect(true).to.equal(true);
    });
});

```

### Additional Info (images, stack traces, etc)

[![](https://s6.postimg.org/5zxmkj5xd/screenshot_176.png)](https://s6.postimg.org/5zxmkj5xd/screenshot_176.png)


- Operating System: **Windows** 10 & **Ubuntu** 14.04
- Cypress Version: 2.1.0 beta
- Browser Version: Chrome 65
",bug
307836426,Assertion fails if scrollLeft property has 0 value,"- Operating System: macOS High Sierra 10.13.3
- Cypress Version: 2.1.0
- Browser Version: Chrome 65

### Current behavior:
Assertion fails if scrollLeft property has 0 value.

### Desired behavior:
Assertion should passed correctly

### How to reproduce:
```js
cy.get('.view').should('have.prop', 'scrollLeft', 0) 
```
<img width=""389"" alt=""screen shot 2018-03-22 at 11 20 57 pm"" src=""https://user-images.githubusercontent.com/6429407/37801699-da20760e-2e27-11e8-8d54-89f50d3313b9.png"">

### Additional Info (images, stack traces, etc)
**Command**:   assert
**Actual**:    0
**Expected**:  0
**Subject**:   jQuery.fn.init(1)
&nbsp;&nbsp;&nbsp; 0: div.view.ng-scope.release-flow: document
&nbsp;&nbsp;&nbsp; length: 1
&nbsp;&nbsp;&nbsp; selector: "".view""
**Message**:   expected <div.view.ng-scope.release-flow> to have property scrollLeft with the value **0**, but the value was **0**
**Error**:     AssertionError: expected '<div.view.ng-scope.release-flow>' to have property 'scrollLeft' with the value **0**, but the value was **0**

Looks like the problem with 0 value itself, because after changing the scroll position assertion works fine:
```js
cy.get('.view').scrollTo('right');
cy.get('.view').should('have.prop', 'scrollLeft', 2507)
```
<img width=""390"" alt=""screen shot 2018-03-22 at 11 17 36 pm"" src=""https://user-images.githubusercontent.com/6429407/37801614-864cc65e-2e27-11e8-9284-39571e1b49f1.png"">

",bug
306483782,"position sticky and flex, cypress scrolls to the end of page to access element","- Operating System: macOS High Sierra 10.13.3
- Cypress Version: 2.1.0
- Browser Version: Chrome 59

### Is this a Feature or Bug?

Bug

### Current behavior:
When using `position: sticky` and `display: flex` combination cypress gets mad when trying to access element inside sticky element:

![cy-bug](https://user-images.githubusercontent.com/3975738/37600813-11247d60-2b91-11e8-9074-005ca18b49e9.gif)

It scrolls to the end of the page before performing any operations on the element while it is not required as the element is visible and accessible.

### Desired behavior:
Should access elements without scrolling

### How to reproduce:

https://github.com/RomanGotsiy/cypress-test-tiny

Just run `npm run cypress:open` and select the only available suite.
There are three tests there:
- `type` into the input
- `click` on the link
- both but with `{force: true}` which works as expected

",bug
306158701,Bug: Tests failing when run in series using Electron,"### Current behavior:

#### High-level circumstances
A suite of integration tests that works fine on Chrome 65 has issues with Electron 59.

More specifically, the 1st and 2nd tests pass without a hitch, but 3rd test fails to initialize properly, getting stuck on this message:
`(PAGE LOAD) --waiting for new page to load--`
Moreover, when this message is displayed, the visible web page is a left-over from the second test.

- Note that the tests all work perfectly in Electron when run atomically, and the series run perfectly on Chrome 65 for Linux.

### Desired behavior:
Tests should be be treated atomically even when run in series; but there appear to be a carrying over of state (and I'm not using any beforeEach or afterEach hooks). This may be an Electron bug, but I saw the same issue with the version of Electron bundled with Cypress 1.4.2

### How to reproduce:
Not sure yet, but I'm working on this.

### Additional Info (images, stack traces, etc)

Our app is really going wild with the POST requests near the end of a test, and that seems to result in `cy.reload(true)` failing:
![image](https://user-images.githubusercontent.com/12223584/37556508-7b224b20-29f7-11e8-9b2a-78bf17f3cf8f.png)

- Operating System: Linux
- Cypress Version: 2.1.0
- Browser Version: Electron
",bug
305964958,When behind corporate proxy - cannot connect to API server in 'Runs' of test runner,"User got this error behind corporate proxy - confirmed error did not occur when they connected to their hotspot:
![00000003](https://user-images.githubusercontent.com/1271364/37528198-6410844e-290a-11e8-800c-fec53c52cf1c.png)

Original thread: https://gitter.im/cypress-io/cypress?at=5aa96043a60157d62fe8c9b6

",bug
305961859,Support proxies and improve proxy performance,"## Problem
There are several users with corporate proxy issues that are faced at several layers of interacting with Cypress including during:

(a checkmark indicates that a fix is in #3531)

- `cy.visit()` 
  - [x] #1459
  - [x] #1608
  - [x] #1312 - described behavior is correct
  - [x] #1039 - this timeout will be fixed once we respect proxies, but the error should still be passed through - #1013
  - [x] #939 
  - [x] #672 
- `npm install` 
  - [x] #733
- `cypress verify` (maybe?) 
  - [x] #787 - not a proxy issue, but the issues described in comments are, and will be fixed
- accessing the 'Runs' tab within the Test Runner
  - [x] #1470 
- verifying that the server set at `baseUrl` is running 
  - [x] #1541 

## Things that won't be fixed as part of this issue

 - PAC support - workarounds exist, see https://on.cypress.io/proxy-configuration
 - #584 - SOCKS proxy - more in-depth changes would be required to add SOCKS support - workarounds exist, see https://on.cypress.io/proxy-configuration
 - #1352 - SSL verification issue
 - #1401 - SSL verification issue - `NODE_EXTRA_CA_CERTS` not being used in cy download
 - #1438 - cy proxy hiding the actual issue
 - #1013 - network errors mishandled - related: #1036
 - #1253 (dupe: #3124, #1468) - system policy - could potentially either bypass (hard) or warn the user (easy) or only allow electron - workarounds exist

## Current workarounds:
### Setting environment variables

Note: *these are NOT cypress environment variables, but system/shell environment variables* 
- If using **Linux**, you can read about setting and reading env variables [here](https://www.digitalocean.com/community/tutorials/how-to-read-and-set-environmental-and-shell-variables-on-a-linux-vps)
- If using **Windows**, you can read about setting and reading  env variables [here](http://www.dowdandassociates.com/blog/content/howto-set-an-environment-variable-in-windows-command-line-and-registry/)

**Set `HTTP_PROXY` and/or `HTTPS_PROXY` to your corporate proxy**
```bash
HTTP_PROXY=http://my-proxy-address cypress run
```

**Set `NO_PROXY` for `localhost` to prevent it from hitting corporate proxy**
```bash
NO_PROXY=localhost cypress run
```


### Other workarounds
**For `cy.visit()`**
- [Enable permissions in the Cypress chrome extension](https://github.com/cypress-io/cypress/issues/672#issuecomment-338104225)
- [Check the Chrome ProxyMode if you have administration rights](https://github.com/cypress-io/cypress/issues/672#issuecomment-362510457)
- [Try using Electron](https://github.com/cypress-io/cypress/issues/1253#issuecomment-365662030)

**For Download**
- Try the [direct download](https://docs.cypress.io/guides/getting-started/installing-cypress.html#Direct-Download) if you're having issues during install.
- [Workaround for install using `CYPRESS_BINARY_VERSION`.](https://github.com/cypress-io/cypress/issues/733#issuecomment-338580896)

**For accessing 'Runs' tab in Test Runner**
- If you need to set up a project, you have to do it in this tab. Fortunately, you should only need to do this once. Try to do this once outside of the corporate proxy then you should be good to go. 




",bug
305645342,Rewrite 3rd party JS code to enforce that parent + top references are always correct,"### Current behavior:

I setup a very simple test that searches for a link in a web page (given an id) and clicks it. Than it checks the content of another element to check it's correct.
What happens is that selectors are found but the test fails. In fact the web page is behaving correctly.
I can see an error in the inspector:

`Uncaught SyntaxError: Unexpected token <`

And another one:

`Unhandled rejection TypeError: Cannot read property 'currentRetry' of undefined`

### Desired behavior:

The test to pass.

### How to reproduce:
Just run the test below.

#### Test code:

```js
describe('Check properties worldwide page', function() {
  beforeEach(function () {
    cy.visit('https://beta.hostelsclub.com/en/hostels');
  })

  it('Opens the correct country page', function () {
    cy.get('a#usa').click();
    cy.get('header.header-country .intro h1').contains('Best hostels in USA');
  })
});
```


### Additional Info (images, stack traces, etc)

![err2](https://user-images.githubusercontent.com/868430/37479569-40e69cac-287d-11e8-998d-3126b9bdeb94.png)

- Operating System: Arch Linux 
- Cypress Version: 2.1.0
- Browser Version: Electron 59
",bug
305324399,cypress.env.json is not being watched for changes,"- Cypress Version: 2.1.0

### Is this a Feature or Bug?

Bug

### Current behavior:

When creating the `cypress.env.json`, it isn't being read. Closing browser with test does not help. You have to exit whole Test runner and then it works again. Also changing values in the existing file won't be noticed. Original issue pointed out here: https://github.com/cypress-io/cypress-documentation/pull/444

### Desired behavior:

Watch changes in `cypress.env.json` file. It looks like Cypress only watching `cypress.json` here: https://github.com/cypress-io/cypress/blob/develop/packages/server/lib/project.coffee#L219",bug
304811665,modifyObstructiveCode unintentionally broke code functionality. ,"## How to reproduce:

Run the test below - the screen will stay on a loading screen instead of redirecting to the login page (as it does in Chrome). Every so often, a test will fail with a cross-origin script error claiming that it `Cannot read property 'postMessage' of null`. 

```js
cy.visit('https://supersuitawsstage.flqa.net')
cy.contains('h3', 'Sign In')
```

Setting `modifyObstructiveCode: false` resolves this issue. 

It's my belief we're modifying the code here - but I haven't completely verified that this is the exact point of failure - it just looked suspicious.
 
```js
function(e) {
    try {
        e = angular.module(""super-templates"")
    } catch (t) {
        e = angular.module(""super-templates"", [])
    }
    e.run([""$templateCache"", function(e) {
        e.put(""/silentRenew.html"", ""<!DOCTYPE html> <html> <head><title></title></head> <body> <script>(function(hash) {\n\tif (window.parent && window !== window.parent) {\n\t\tvar hash2 = hash || window.location.hash;\n\t\tif (hash2) {\n\t\t\twindow.parent.postMessage(hash2, location.protocol + '//' + location.host);\n\t\t}\n\t}\n})();</script> </body> </html>"")
    }])
}()
```

",bug
304298652,Dashboard crashes when trying to invite user to organisation,"<!-- **Tip** in order for us to reproduce the bug you can fork [cypress-io/cypress-test-tiny](https://github.com/cypress-io/cypress-test-tiny) repo and setup the failing test. Then just tells us the repo and branch to try! -->

- Operating System: Mac OS 10.13.3
- Cypress Version: 2.1.0
- Browser Version: Safari 11.0.3 and Chrome 65.0.3325.146

### Is this a Feature or Bug?
Bug

<!-- Is this a question? Do not open an issue. Please ask your question in our chat https://gitter.im/cypress-io/cypress -->

### Current behavior:
When I'm in the user section of the cypress dashboard of my organisation (https://dashboard.cypress.io/#/organizations/[…]/users) and click on ""Invite User"", the screen goes white and the website doesn't respond to anything until I reload.

### Desired behavior:
Being able to add users to my organisation

### How to reproduce:
Same behaviour in Safari and Chrome and on different computers. I didn't try it with another account though.

<!-- #### Test code:

```js

``` -->

### Additional Info (images, stack traces, etc)
before click
![screen shot 2018-03-12 at 10 34 08](https://user-images.githubusercontent.com/31006608/37276160-496be326-25e1-11e8-962a-4b837610119f.png)
after click
![screen shot 2018-03-12 at 10 34 21](https://user-images.githubusercontent.com/31006608/37276174-4fe4990a-25e1-11e8-9c38-60ce3adb1010.png)

",bug
304066170,Cypress errored trying to serve this file from your server?,"Hi,

I installed Cypress on windows 10 (64 bits) and a webapp locally. I started my web server and stopped the access to the web.

When I run `localhost:8000/index.html`, I get my webapp in chrome.

When I run the same path in Cypress browser, I get `Cypress errored trying to serve this file from your server`

Did you have any idea about this problem?
Thanks :-)

Operating System: Win10 64 bits
Cypress Version: 2.1.0
Browser Version: Electron 59",bug
303651882,Jira application breaking when visited with cy.visit() command. ,"I want to use cypress to test Jira plugins. In order to do that, I should able to browse to Jira pages using cy.visit(). But Cypress can't load even a basic page of Jira. You can reproduce the problem easily by trying to visit any page of Jira.

#### Test code:

```js
cy.visit('https://jira.atlassian.com/secure/BrowseProjects.jspa?selectedCategory=all&selectedProjectType=all');
```

- Operating System: MacOS High Sierra
- Cypress Version: 2.1.0
- Browser Version: Chrome 64

### Is this a Feature or Bug?
This is a bug.

### Current behavior:
cypress gives 'Uncaught TypeError: Cannot read property 'fn' of undefined' error. Cypress telling that this is not a Cypress problem, this is an application problem. But this page loads without any problem if you try to visit url directly in the Chrome 64. Somehow behavior of the page is changing under Cypress.

### Desired behavior:
Requested page should be loaded without any error.

",bug
301734720,Fails to automatically load fixture files if more than one . is in file name,"- Operating System: OSX High Sierra 10.13.3
- Cypress Version: 2.1.0

### Is this a Feature or Bug?
Bug

### Current behavior:
`cy.fixture` function does not look up files without extension correctly if they have several dots. Is probably looking for first element after first ""."", but should look for element after last "".""

### How to reproduce:
Check this code: [tiny test fork](https://github.com/gautejohan/cypress-fixture-file-with-dots)
Create a fixture file with several dots in name (e.g. `parent.child.info.json`, and use `cy.fixture('parent.child.info')` in your test.",bug
301687589,npm postinstall fails behind an HTTPS proxy,"### Current behavior:

I'm running behind an HTTPS corporate proxy configured with a self-signed certificate. This requires to setup the self-signed certificate with `NODE_EXTRA_CA_CERTS` environment variable.

`yarn install cypress` gives the following error (same with npm)

```
> cypress@2.1.0 postinstall /app/oison-frontend/node_modules/cypress
> node index.js --exec install

Installing Cypress (version: 2.1.0)

 ✖  Downloading Cypress
   → Cypress Version: 2.1.0
    Unzipping Cypress
    Finishing Installation
The Cypress App could not be downloaded.

Please check network connectivity and try again:
----------

URL: https://download.cypress.io/desktop/2.1.0?platform=linux&arch=x64
Error: self signed certificate in certificate chain
----------

Platform: linux (Debian - 8.10)
Cypress Version: 2.1.0
```

It seems `NODE_EXTRA_CA_CERTS` is not honored by the post installation script downloading cypress binary.

### Desired behavior:

It should work

### How to reproduce:

Come to my company and have fun configuring this proxy sh*t.

### Additional Info (images, stack traces, etc)

It was working yesterday, so I think something has changed in the package of `2.1.0` release.

- Operating System: Ubuntu
- Cypress Version: >=2.1
- Browser Version: 
",bug
301370127,Weird encoding issue inside javascript assets when Cypress runs,"### Current behavior:
When running a cypress test of an Angular 5 application which has been web-packed, a chunk is asynchronously loaded from the web server. This chunk is malformed (somewhere in the pipeline) consistently on the same byte of the same file each time. The problem does not manifest when you browse the site directly through Chrome, only during the Cypress test run.

### Desired behavior:
The javascript files arrive at the browser intact and unmodified.

### How to reproduce:
I'm not really sure on a reproduction.

_Q: Is there a way I can bypass the cypress network stack for individual assets to try and identify if this is the cypress proxy or something else at play?_

Here's what I know so far... 

The test throws the following error consistently in the same place of the test.

If you open the chunk file from a Chrome browser having run the application normally you see:
`__WEBPACK_IMPORTED_MODULE_0__angular_core__[""ɵand""]`

However, when the error is thrown, the chunk contains the following:
`__WEBPACK_IMPORTED_MODULE_0__angular_core__[""��and""]`

Full error and stack trace:

```
cypress_runner.js:138957 Console was cleared
cypress_runner.js:138954 Uncaught TypeError: __WEBPACK_IMPORTED_MODULE_0__angular_core__.��and is not a function

This error originated from your application code, not from Cypress.

When Cypress detects uncaught errors originating from your application it will automatically fail the current test.

This behavior is configurable, and you can choose to turn this off by listening to the 'uncaught:exception' event.

https://on.cypress.io/uncaught-exception-from-application
    at View_Dropdown_8 (https://<url-redacted>/0.d44dcaa6cf578dfd34f1.chunk.js:3913:490)
    at resolveDefinition (https://<url-redacted>/vendor.bundle.js?v=FtrhNBpDu18Mnhl7cHgNIXl06Fwzd5RdnAWtKahf5Qg:127750:17)
    at Object.anchorDef (https://<url-redacted>/vendor.bundle.js?v=FtrhNBpDu18Mnhl7cHgNIXl06Fwzd5RdnAWtKahf5Qg:128019:55)
    at View_Dropdown_0 (https://<url-redacted>/0.d44dcaa6cf578dfd34f1.chunk.js:3939:4669)
    at resolveDefinition (https://<url-redacted>/vendor.bundle.js?v=FtrhNBpDu18Mnhl7cHgNIXl06Fwzd5RdnAWtKahf5Qg:127750:17)
    at createViewNodes (https://<url-redacted>/vendor.bundle.js?v=FtrhNBpDu18Mnhl7cHgNIXl06Fwzd5RdnAWtKahf5Qg:131297:56)
    at callViewAction (https://<url-redacted>/vendor.bundle.js?v=FtrhNBpDu18Mnhl7cHgNIXl06Fwzd5RdnAWtKahf5Qg:131768:13)
    at execComponentViewsAction (https://<url-redacted>/vendor.bundle.js?v=FtrhNBpDu18Mnhl7cHgNIXl06Fwzd5RdnAWtKahf5Qg:131677:13)
    at createViewNodes (https://<url-redacted>/vendor.bundle.js?v=FtrhNBpDu18Mnhl7cHgNIXl06Fwzd5RdnAWtKahf5Qg:131361:5)
    at callViewAction (https://<url-redacted>/vendor.bundle.js?v=FtrhNBpDu18Mnhl7cHgNIXl06Fwzd5RdnAWtKahf5Qg:131768:13)
From previous event:
    at run (https://<url-redacted>/__cypress/runner/cypress_runner.js:62383:15)
    at Object.cy.(anonymous function) [as get] (https://<url-redacted>/__cypress/runner/cypress_runner.js:62603:11)
    at Context.runnable.fn (https://<url-redacted>/__cypress/runner/cypress_runner.js:62734:20)
    at callFn (https://<url-redacted>/__cypress/runner/cypress_runner.js:32354:21)
    at Test.Runnable.run (https://<url-redacted>/__cypress/runner/cypress_runner.js:32347:7)
    at https://<url-redacted>/__cypress/runner/cypress_runner.js:65627:28
    at <anonymous>
From previous event:
    at Object.onRunnableRun (https://<url-redacted>/__cypress/runner/cypress_runner.js:65626:20)
    at $Cypress.action (https://<url-redacted>/__cypress/runner/cypress_runner.js:61088:51)
    at Test.Runnable.run (https://<url-redacted>/__cypress/runner/cypress_runner.js:64766:20)
    at Runner.runTest (https://<url-redacted>/__cypress/runner/cypress_runner.js:32817:10)
    at https://<url-redacted>/__cypress/runner/cypress_runner.js:32923:12
    at next (https://<url-redacted>/__cypress/runner/cypress_runner.js:32737:14)
    at https://<url-redacted>/__cypress/runner/cypress_runner.js:32747:7
    at next (https://<url-redacted>/__cypress/runner/cypress_runner.js:32679:14)
    at https://<url-redacted>/__cypress/runner/cypress_runner.js:32715:5
    at timeslice (https://<url-redacted>/__cypress/runner/cypress_runner.js:27956:27)
```


- Operating System: Windows 10 & Server 2012
- Cypress Version: 2.0.4
- Browser Version: Chrome 64 and Electron with Chrome 59 both exhibit this behaviour",bug
300606222,.type() does not type random characters (reproducibility is 10%),"- Operating System: Windows 10
- Cypress Version: 1.4.2
- Browser Version: Chrome 63

### Bug?


### Current behavior:
```js
cy.get('some css locator').first().clear().type('1000');
```
the field I'm typing to is input with `type='number'`
10% times I get input `100` (without the last character)

",bug
300185356,Check on cy.check() for hidden input field type=radio when {force: true},"- Operating System: Windows 10
- Cypress Version: 2.0.3
- Browser Version: Chrome 64 (64bits) latest

### Is this a Feature or Bug?

Bug[ish]>?

### Current behavior:

The error message describes and advice you to use `{force: true}` but this doesn't seem to work the error keeps showing.

Not sure if i'm doing something wrong here?

> Radio button with CSS property: visibility:hidden throwing a error
> 
> CypressError: cy.check() failed because this element is not visible:
> 
> <input type=""radio"" id=""buying-type-auction"" name=""buying_type"" value=""AUCTION"">
> 
> This element '<input#buying-type-auction>' is not visible because it has CSS property: 'visibility: hidden'
> 
> Fix this problem, or use {force: true} to disable error checking.
> 
> https://on.cypress.io/element-cannot-be-interacted-with

```html
<div class=""buying-types"">
      <input type=""radio"" id=""buying-type-auction"" name=""buying_type"" value=""AUCTION"">
      <label for=""buying-type-auction"" class=""buying-type"">
        <span>Auction</span>
        <small>Bid to reach your audience for the lowest possible price</small>
      </label>
      <input type=""radio"" id=""buying-type-reserved"" name=""buying_type"" value=""RESERVED"">
      <label for=""buying-type-reserved"" class=""buying-type"">
        <span>Reach and frequency</span>
        <small>Pay a fixed price to predictably reach your brand's audience</small>
      </label>
</div>
```

```js
cy.get('input#buying-type-auction[name=""buying_type""]', {force: true}).not('[disabled]')
    .check({force: true}).should('be.checked')
```

### Desired behavior:

Skipping the error? or updating the information with correct information?

Anyway this solved my issue and not doing the check anymore.
`cy.get('input[id=""buying-type-auction""]:checked').not('[disabled]')`
`cy.get('input[id=""buying-type-reserved""]:not(:checked)').not('[disabled]')`",bug
299897769,Cypress no longer works on AWS CodeBuild,"Cypress 2.x no longer works on AWS CodeBuild. I get this error during the testing phase:

```
error cypress@2.0.3: The engine ""node"" is incompatible with this module. Expected version "">=8.2.1"".
```

What's the recommended course of action here?",bug
299513466,html base target _top lets cypress loose control,"when you have  <base target=_top> in your html-head, cypress will loose control of the browser & tests. Cypress will show the whoops page when an <a href=..> is clicked. I would expect cypress somehow to overwrite the _top.

here is the showcase of whats going wrong:
https://github.com/joelgrimberg/cypress_base_issue
",bug
299201972,Screenshot doesn't always capture error / failure details,"### Current behavior:
We are using Cypress for testing an API E2E. The screenshots will explain better for me but basically when the test fails the screenshot does not wait long enough in order for the cypress UI to update the DOM with the error details.

### Desired behavior:
Screenshots should contain error details

### How to reproduce:

I just run the following test with `cypress run` basically: 

```js
describe('demo a failing test', () => {
  it('will fail!', function() {
    expect({""foo"": ""bar""}).to.deep.equal(""foo"": ""baz"");
  })
});
```

### Additional Info (images, stack traces, etc)
Current:
![current](https://user-images.githubusercontent.com/342638/36517059-636f51a4-17b3-11e8-8189-89bc866839e4.png)

How it appears when the next test fails:
![how it appears when the next test fails](https://user-images.githubusercontent.com/342638/36517071-6ec1a642-17b3-11e8-988d-77b800575abe.png)

- Operating System: OSx and Linux
- Cypress Version: 2.0.2
- Browser Version: Canary 66


",bug
299097888,asterisks displaying instead of single quotes in Command Log assertion,"### Current behavior:
Command Log for assertion chain includes confusing asterisks. I suspect it may be replacing `\n` with `**`. 

<img width=""531"" alt=""screen shot 2018-02-21 at 2 24 08 pm"" src=""https://user-images.githubusercontent.com/1271364/36500867-7697f0a6-1713-11e8-849a-28969cae9ca1.png"">

**Even displays in passing tests**
<img width=""493"" alt=""screen shot 2018-02-21 at 2 27 27 pm"" src=""https://user-images.githubusercontent.com/1271364/36500898-8a68821c-1713-11e8-8fc0-94e057da883c.png"">

### Desired behavior:

Error in Command Log should display as: 

`expected '<div.duration>' to have text '37:46', but the text was ' 37:46 '`

**Code to reproduce**
```js
cy.get("".duration"").should(""include.text"", ""37:46"")
```

- Cypress Version: 2.0.3
- Browser Version: Crome
",bug
298881322,Cypress as a node module and multireporters,"<!-- **Tip** in order for us to reproduce the bug you can fork [cypress-io/cypress-test-tiny](https://github.com/cypress-io/cypress-test-tiny) repo and setup the failing test. Then just tells us the repo and branch to try! -->

- Operating System: Windows 10
- Cypress Version: 2.02
- Browser Version: Headless

### Is this a Feature or Bug?
Bug

### Current behavior:
Using cypress as a node module and passing a config object including a string with a comma results in unexpected behaviour. String including commas is split up and passed as additional properties. 

### How to reproduce:
Using for eg a multireporter and calling the cypress runner in a nodejs script.

```js
cypress.run({
    reporter: 'mocha-multi-reporters',
    reporterOptions: {
        reporterEnabled: 'JSON, Spec',
        jsonReporterOptions: {
            toConsole: true
        },
    }
};
```


which calls the run function in lib/cypress.js. 
After line 22
`options = util.normalizeModuleOptions(options);`
the passed options object is transformed to
`reporter: 'mocha-multi-reporters',  
reporterOptions: 'reporterEnabled=JSON, Spec,jsonReporterOptions=[object Object]'`

which results in the wrong object (eg at open_project.js, function create)
```
...
     reporter: 'mocha-multi-reporters',
     reporterOptions: 
      { reporterEnabled: 'JSON',
        Spec: undefined,
        jsonReporterOptions: 'object Object'
     }
...
```
'Spec' is not part of the property reporterEnabled anymore.  Also the jsonReporterOptions is not resolved correctly.
The multireporter cannnot handle this wrong object and runs only one reporter. ",bug
298646877,Error: unable to get local issuer certificate,"## Issue
When installing cypress via node on a restrictive network at a large corp, I receive the following error:

```
 The Cypress App could not be downloaded.

Please check network connectivity and try again:
----------

URL: https://download.cypress.io/desktop/2.0.2?platform=darwin&arch=x64 …
Error: unable to get local issuer certificate
----------

Platform: darwin (16.7.0)
Cypress Version: 2.0.2
```

Accessing the link directly works. Also I can WGET and Curl the link without issue.

I tried setting `NODE_TLS_REJECT_UNAUTHORIZED=0` but that didn't seem to resolve the issue. My corporate security team asked:

> They using their own CA store in the downloader?  NODE_TLS_REJECT_UNAUTHORIZED=0 usually fixes that unless they use their own CA bundle, which would 100% break in our environment.""",bug
298603946, Open Selector Playground - Select element (Tooltips),"# Open Selector Playground - Select element (Tooltips)

Operating System: Windows 10
Cypress Version: 2.0.2
Browser Version: Chrome 64 (64 bits)

### Is this a Feature or Bug?

Bug (ish)

### Current behavior:

The tooltips are showing correctly above the fold of the viewport. Result that the tooltips are floating somewhere above the fold when you are selecting/inspecting something under the fold.

### Expected behavior:

The tooltips showing correctly also under the fold.

### See attachments:

![qa - cypress](https://user-images.githubusercontent.com/6934501/36427919-c2247c80-164e-11e8-88b1-b29050b9b68e.jpg)
",bug
298203663,Cypress will not stop test run if errors in before hook,"- Operating System: osx
- Cypress Version: 2.0.2
- Browser Version: Canary 66

### Is this a Feature or Bug?
Bug

### Current behavior:
If an error is raised in the before hook for tests, Cypress will not stop the test run and seems to continue indefinitely.

This behaviour seems identical to #674 

### Desired behavior:
Tests should fail with a descriptive error message.

### How to reproduce:

Run the below code

#### Test code:

```js
describe('Demo throw in before hook', () => {
  before(() => {
    cy.exec('echo ""test test""').then(() => {
      throw new Error('whoa something broke');
    });
  });

  it('visits url', () => {
    cy.get('/');
  });
  // NB: for some reason if I comment out the below test
  // Cypress UI will fail the test correctly.
  it('gets element', () => {
    cy.get('.someelem');
  });
});

```


### Additional Info (images, stack traces, etc)

Below is a screenshot that shows that although the error is thrown, the spinner still continues to... spin :)

<img width=""1268"" alt=""screen shot 2018-02-19 at 16 05 04"" src=""https://user-images.githubusercontent.com/342638/36369836-5b0472d6-158f-11e8-910d-479ac62eb17e.png"">

",bug
298063583,Appending errors with no messages leads to hilarity,"Throwing an error with no message ends up creating a massive repeating stack trace due to splitting on the `error.message` and then rejoining later.

```js
beforeEach(() => {
  throw new Error()
})

it(...)
```",bug
298052504,Tests are not rendered in folders in the desktop-gui on windows,"- Operating System: Windows 10
- Cypress Version: 2.0.1
- Browser Version: Chrome 63

### Is this a Feature or Bug?
Bug

### Current behavior:
Tests are incorrectly rendered in groups/folders on windows.
![image](https://user-images.githubusercontent.com/346349/36347487-2c12f922-14ac-11e8-9685-b593ff687423.png)

### Desired behavior:
Tests should be organized by groups

### How to reproduce:
Load a folder with tests organized in sub-folders on a Windows PC.",bug
298048261,Cypress 2.x cannot test Angular 5 live-served apps.,"- Operating System: High Sierra
- Cypress Version: 2.0.1
- Browser Version: Chrome 64.0.3282.167

### Is this a Feature or Bug?

Bug

### Current behavior:

When I start my angular app with `ng serve` I am unable to run the cypress tests against that. This was previously working in 1.4.2. Now it complains that my app has an error but there are no errors in the console

### Desired behavior:

Test against localhost:4200

### How to reproduce:

Please check this repo https://github.com/BenAychh/angular-cypress-2.
Run `ng serve` to get the app live-reload-server up and navigate to http://localhost:4200. Check for errors.
Now run the cypress test with the above server still up and try to test.

#### Test code:

```js
describe('Test', () => {
  it('has the correct title', () => {
    cy.visit('/');
    cy.title().should('equal', 'CypressTest');
  });
});

```


### Additional Info (images, stack traces, etc)

I've been using `npx cypress open` to start the gui.",bug
297915544,modifyObstructiveCode hangs on huge responses,"Users with massive `.js` files (in the several megabytes) can cause the network proxy response stream to choke when scanning for obstructive code.

Need to look at improving the performance of the scanner.

For now users can turn off `modifyObstructiveCode` in their `cypress.json` file.",bug
297857192,Cannot type spaces in email input,"### Current behavior:
You can't type spaces within an `input` of `type=""email""`. I came across this while trying to debug https://github.com/cypress-io/cypress/issues/1298

### Desired behavior:
Honestly, this likely doesn't matter to anyone because...why are you typing spaces in email fields? But I wanted to document since the behavior differs from typing manually in the browser. 

<img width=""1122"" alt=""Screen Shot 2019-07-13 at 10 01 51 AM"" src=""https://user-images.githubusercontent.com/1271364/61166543-5649ef80-a555-11e9-803b-91767be4a20d.png"">


### How to reproduce:

```js
it('test', () => {
  cy.visit('https://example.cypress.io/commands/actions')
  cy.get('input[type=""email""]').type('my email')
})
```

- Cypress Version: 2.0.0, 3.4.0",bug
297686967,contains() breaks with a regex containing a `'`,"- Operating System: macos
- Cypress Version: 1.4.2
- Browser Version: chrome 65

### Is this a Feature or Bug?
bug

### Current behavior:
`cy.get('some selector').contains(/any regex containing a '/)` results in an error

### Desired behavior:
to select any dom nodes that match the provided regex, as is the behavior for any regex not containing a `'`

### How to reproduce / test code
https://github.com/cypress-io/cypress-test-tiny/pull/26
",bug
297674095,Cypress crash: Error: Failed to parse or set cookie named,"- Operating System: Windows 10
- Cypress Version: 1.4.2
- Browser Version: Chrome 63?

### Is this a Feature or Bug?
Bug

### Current behavior:
Sometimes when I go to my website using cy.visit(...) if the site returns a redirect and a clear cookie (e.g. logout) the Cypress crashes and logs:
```
`{ [Error: Failed to parse or set cookie named ""aspAuth"".] name: undefined }
undefined
```

### Desired behavior:


### How to reproduce:
Not sure, but these are the relevant headers my site returns when I navigate to it:

```
Cache-Control:no-cache, no-store, must-revalidate
Content-Length:0
Date:Fri, 16 Feb 2018 03:37:23 GMT
Expires:-1
Location:https://appcenter.intuit.com/connect/oauth2?...
p3p:CP=""Company does not have a P3P policy""
Pragma:no-cache
Set-Cookie:Provision.ConnectionInfo=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/; samesite=lax
Set-Cookie:XSRF-TOKEN=rzOLRz36OX_A5wQuhVPKkssxg7fCwZOa_iMi-Nx95-1RRU; path=/; secure; samesite=lax
Set-Cookie:XSRF-TOKEN=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/; samesite=lax
Set-Cookie:aspAuth=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/; samesite=lax
Strict-Transport-Security:max-age=31536000
X-Content-Type-Options:nosniff
X-Request-Id:0HLBKQPQAPOUV:00000003
X-Time:1
X-XSS-Protection:1
```

#### Test code:

```js
cy.visit('https://localdev/start/app');
```
",bug
296812416,Blank video recording,"### Current behavior:
Recorded video is returned blank.

### Desired behavior:
Video to record normally.

### How to reproduce:
When I run cypress I get both a video and snapshot returned to me but they are both blank. When I run cypress in headed mode I get a correct snapshot back but no video (since video recording isn't supported in headed mode).


### Additional Info (images, stack traces, etc)
In headless mode:
![image](https://user-images.githubusercontent.com/16596981/36162111-c652f216-10a2-11e8-8a21-3ec934957bb0.png)
![image](https://user-images.githubusercontent.com/16596981/36162128-ce52b80c-10a2-11e8-83f9-197a96fce314.png)
In headed mode:
![image](https://user-images.githubusercontent.com/16596981/36162329-5fb65358-10a3-11e8-9f71-0c3fc6032fa8.png)

- Operating System: Windows 10
- Cypress Version: 1.4.2
- Browser Version:  Electron 53.0.2785.143





",bug
296212668,Domain parsing fails when local or localhost is not the tld,"There was a regression in `1.4.2`

Per these issues:

- https://github.com/cypress-io/cypress/issues/1278
- https://github.com/cypress-io/cypress/issues/493#issuecomment-363252460

Our domain parsing rules expect `local` and `localhost` to always be TLD's but this is not the case. We can relax the domain parsing rules to only factor in ip addresses, and everything else can use the naive check of segment splitting.

Since we're now taking into account private tld's, this should work correctly now.",bug
295945509,Basic auth not working in Chrome 64,"It looks like our favorite friend https://github.com/cypress-io/cypress/issues/573 is back again and is no longer working.

Appears that chrome disabled disabling the blink feature that prevents this from working.

It's about time we permanently fixed this by adding a `cy.visit(url, options)` which will support an `auth` object with username + password.

When applied we'll need to automatically add the Authorization header to requests made to this origin at the network proxy layer.",bug
295222690,Fixtures do not support JavaScript in .js files,"### Current behavior:

Any attempt to use valid ES5 (e.g. `var`, `require`) let alone ES6 (`import`, `export`, `const`) results in syntax errors, e.g.:

```
Error: 'admin.js' is not a valid JavaScript object.SyntaxError: Unexpected token var

Because this error occurred during a 'before each' hook we are skipping the remaining tests in the current suite: 'when login is valid'
```

The only ""javascripty"" construct that seems to be allowed is `module.exports =`.


### Desired behavior:

`.js` fixtures should support valid JS syntax (ES6, preferably).


### How to reproduce:

#### Create a fixture containing valid ES6 syntax

```js
const user = 'Joe'

export default {
  user,
}
```

Then use it:

```js
  cy.fixture('auth.js')
```

Result:

```
Error: 'auth.js' is not a valid JavaScript object.
auth.js:3
export default {
^
ParseError: Unexpected token
```

#### Create a fixture using valid ES5 code

```js
var user = 'Joe';

module.exports = {
  user: user
};
```

Result:

```
Error: 'auth.js' is not a valid JavaScript object.SyntaxError: Unexpected token var
```

- Operating System: Darwin Kernel Version 15.6.0: Mon Nov 13 21:58:35 PST 2017; root:xnu-3248.72.11~1/RELEASE_X86_64
- Cypress Version: 1.4.2
- Browser Version: Electron 53, Chrome 64

",bug
293871592,Can't authorize cypress-io to use github,"### Current behavior:
`Authorize cypress-io` button is disabled.

### Desired behavior:
The button should not be disabled.

### How to reproduce:
Fresh install of cypress through `npm install cypress --save-dev`. Start cypres `npx cypress open
`, login with git account. After login, I'm redirected to authorize screen. The`Authoryze button` is disabled, and can't finish log in process.


### Additional Info (images, stack traces, etc)
Also I get a banner saying that Github no longer supports my web browser.
I think that the issue might be related to another electron issue:

https://github.com/electron/electron/issues/8838

<img width=""995"" alt=""screen shot 2018-02-02 at 14 06 56"" src=""https://user-images.githubusercontent.com/25976004/35733018-59e9c9aa-0824-11e8-832e-6d1956cda294.png"">

- Operating System: Mac OS High Sierra 10.13.3
- Cypress Version: 1.4.1
- Browser Version:Chrome 63


",bug
293457497,Error: EISDIR: illegal operation on a directory,"### Current behavior:
Error message is thrown 

```
Error: EISDIR: illegal operation on a directory, 
open 'C:\Users\*********\AppData\Roaming\Cypress\cy\production\projects\CyDemo-f6363983d1108dd01027bb4ab06585aa\bundles
```

### Desired behavior:
On clicking signIn button user should land on dashboard page

### How to reproduce:
Submit userId and password in respective fields and hit signIn

#### Test code:

```js
function loadFixture() {
    cy.fixture('login').as('loginJson')
}
describe('Login', function () {
    beforeEach(function () {
        loadFixture()
    })

    before(function () {
        cy.visit('https://*************.com');
    })

    it('It Should load in to the application', function () {
        cy.title().should('contain', 'xyz');
    })

    it('It Should enter credentials and login', function () {
        cy.get('#Username').type(this.loginJson.masterCoder.email).should('have.value', this.loginJson.masterCoder.email);
        cy.get('#Password').type(this.loginJson.masterCoder.password).should('have.value', this.loginJson.masterCoder.password);
        cy.get('.button-label.ng-binding').and('be.visible').click();
    })
});

```

### Additional Info (images, stack traces, etc)

![cypresserror](https://user-images.githubusercontent.com/10151072/35670800-8b939cee-075f-11e8-9186-a1f8f0407e35.png)

- Operating System: Windows10 64bit
- Cypress Version: 1.4.1
- Browser Version: 63.0.3239.132
",bug
293284247,Element visibility fixes,"There are multiple issues regarding elements being calculated as visible when they are hidden OR elements being calculated as hidden when they are visible. This issue is generally to be used to track the progress made for these fixes.

I think that it is interesting to note that jQuery ditched their visibility calculations in 3.0 and is likely worthwhile looking into why/how they made these decisions. 

> An element is considered now visible if it has a layout box returned from the DOM getClientRects() method, even if that box has a height and/or width of zero. This means that elements such as <br /> or an empty <span> element that don't have height are considered to be visible. 
> https://github.com/jquery/jquery/issues/2227 
> https://github.com/jquery/jquery/issues/2604

## Issues
* [ ] Print reasons why Cypress considers an element 'visible' in errors. 
 https://github.com/cypress-io/cypress/issues/677
* [ ] Opacity is not considered for visibility checks https://github.com/cypress-io/cypress/issues/4474
* [x] Elements hidden using clip / clip-path css properties pass as visible 
 https://github.com/cypress-io/cypress/issues/1178
* [x] `position: fixed` elements having parent with `pointer-events: none` mistakenly display as not visible / covered by another el https://github.com/cypress-io/cypress/issues/6675
* [x] Inline, zero-dimension element: erroneous visibility determination https://github.com/cypress-io/cypress/issues/6183
* [x] Can't click on some rotated buttons https://github.com/cypress-io/cypress/issues/2921
* [x] Inability to determine why element isn't visible #5974
* [x] Cypress fails when use `should('be.visible')` on a visible element - overflow hidden with position absolute outside https://github.com/cypress-io/cypress/issues/4395
* [x] 'visible' assertion says visible for elements cropped by parent element with overflow: hidden https://github.com/cypress-io/cypress/issues/4161
* [x] When 'is.visible' failure, error shows 'is being covered by another element: undefined' https://github.com/cypress-io/cypress/issues/1379
* [x] `.should(""be.visible"")` doesn't interpret elements with "" style='transform: scale(0,0)' "" correctly https://github.com/cypress-io/cypress/issues/723
* [x] `backface-visibility: hidden` doesn't hide elements from cypress https://github.com/cypress-io/cypress/issues/2985
* [x] on `.type()` says failed element is not visible, but el is visible https://github.com/cypress-io/cypress/issues/1818
* [x] backface-visibility: hidden with transform-style: preserve-3d fails the ""is.visible"" test https://github.com/cypress-io/cypress/issues/5682
* [x] should('not.be.visible') fails for non visible elements dur to overflow: hidden and set height  https://github.com/cypress-io/cypress/issues/5959

## Not reproducible issues
* **Not reproducible** Element is hidden by parent but `should('not.be.visible')` fails https://github.com/cypress-io/cypress/issues/683
* **Not reproducible** Cypress doesn't handle visibility assertions for fixed or/and transform: translate https://github.com/cypress-io/cypress/issues/2558

### Desired behavior:
* Find a better way to more accurately determine visibility. 
* Always display reason why we determine something as visible or not visible.
* Add tests for all failing cases above - get tests passing 

### Versions
Cypress: 3.3.1



┆Issue is synchronized with this [Jira Bug](https://cypress-io.atlassian.net/browse/TR-79) by [Unito](https://www.unito.io/learn-more)
",bug
292196566,input selectionStart/selectionEnd incorrect during type(),"Firstly, thanks for Cypress, it's great!

- Operating System: Ubuntu 16.04
- Cypress Version: 1.4.1
- Browser Version: Chrome 63

### Is this a Feature or Bug?
Bug

### Current behavior:
selectionStart and selectionEnd do not match expected cursor during `.type()` when position modified by  `{left|rightArrow}`

### Desired behavior:
selectionStart and selectionEnd **should match cursor _during_** `.type()`

### How to reproduce:
html file with `<input type=""text"" id=""#input"" />`

#### Test code:

```js
describe('musses up cursor position', () => {
  it('fails', () => {
    cy
      .visit('') // localhost
      .get('#input')
      .then(($el) => {
        $el.on('input', ({ target: { value, selectionStart, selectionEnd } }) =>
          console.log('typing', value, selectionStart, selectionEnd) // incorrect
        );
        return $el;
      })
      .clear()
      .type('abcde{leftArrow}{leftArrow}f')
      // these are not really what I'm testing 
      // I'm relying on these values during type()
      .should('have.prop', 'selectionStart', 4)
      .and('have.prop', 'selectionEnd', 4)
  });
});
```

### Additional Info (images, stack traces, etc)
![image](https://user-images.githubusercontent.com/5353151/35481304-261e40fe-0475-11e8-834d-46565cb9141b.png)

We have an input listener that converts latin chars `romaji` into kana `ろまじ` during input, and relies on selectionStart/End in order to handle any mid text insertion, and then replaces the cursor to the correct position after conversion (the input value length can change `ryo` => `りょ` 3 => 2). The functionality works correctly when manually testing in Chrome, but not with Cypress.

I can work around it for my particular use-case by forcing an update with the (manually calculated) correct position but ideally the input should have the correct values during typing:
```js
it('converts characters inserted mid-text after cursor movement', () => {
  // already bound input listener that does all the conversion handling
  cy
    .get('#input')
    .type('wanakana')
    .should('have.value', 'わなかな') // passes
    .type('{leftArrow}{leftArrow}shi') // now 'わなshiかな'
     // usually `shi` would be converted instantly after 
     // the `i` input event that is fired in type()
     // but selectionRange was incorrectly 7,7 at that time
    .then(($el) => {
      $el.get(0).setSelectionRange(5, 5);
      return $el;
    })
    .trigger('input')
    .should('have.value', 'わなしかな'); // passes only due to .then().trigger()
});
```",bug
291473493,Snapshots Don't Preserve injected style tags (css-in-js),"<!-- **Tip** in order for us to reproduce the bug you can fork [cypress-io/cypress-test-tiny](https://github.com/cypress-io/cypress-test-tiny) repo and setup the failing test. Then just tells us the repo and branch to try! -->

- Operating System: MacOS 10.12.6
- Cypress Version: 1.4.1
- Browser Version: Chrome 63

### Is this a Feature or Bug? Bug


### Current behavior:
My project uses a css-in-js library (in this case [cxs](https://github.com/jxnblk/cxs)) to apply styling. The cxs library appends a style tag to the `<head>` at runtime and adds style definitions to this injected tag.
When tests run normally, styling appears as expected.
However, when switching between snapshots, injected style tags (css-in-js) is not preserved and styling is broken on the page

### Desired behavior:
Styles should be preserved, or the javascript bundle should be reran so that styles can be injected again.

(although the second option sounds less likely to be reliable given the nature of snapshotting).

### How to reproduce:
Run Cypress with a project that uses a css-in-js library that appends a style tags in `<head>` at run time.

### Additional Info (images, stack traces, etc)
(pseudo) DOM structure while tests are running (correct behavior):

```html
<iframe id=""Your App: 'my app name'"">
  ...
  <head>
    ...
    < !-- style tag injected by cxs -->
    <style id=""_cxs_""></style>
    ...
  </head>
  ...
</iframe>
```

(pseudo) DOM structure while navigating between snapshots after tests have finished:

```html
<iframe id=""Your App: 'my app name'"">
  ...
  <head>
    ...
    <!-- I did notice that there is still a style tag in the head 
    that _could_ be the injected style tag, but its missing
    its style declarations, and no longer has the `_cxs_` id, so this could just be a red herring -->
    <style></style>
    ...
  </head>
  ...
</iframe>
```",bug
291161126,wrap().invoke().should() ignores timeout options in should assertion ,"When a function wrapped inside a `wrap` gets invoked by a `invoke`, the `should` seems to ignore the timeout passed along in the wrap object.


#### Test code:

```js
const slow = () => new Cypress.Promise(resolve => {
  setTimeout(() => resolve('done'), 2000);
});

cy
  .wrap({ slow }, { timeout: 100 })
  .invoke('slow')
  .should('eq', 'done');
```

This test is a silly example, in reality I'm querying the Mandrill API, which I want to give a very big timeout as Mandrill can take quite a while to show an email, but I do not want to update the `defaultCommandTimeout` to minutes as other assertions will never take this long.

### Additional Info (images, stack traces, etc)

![screen shot 2018-01-24 at 11 41 35](https://user-images.githubusercontent.com/2742131/35328116-a217043e-00fb-11e8-8889-a4bd47509863.png)

![screen shot 2018-01-24 at 11 41 51](https://user-images.githubusercontent.com/2742131/35328119-a449f356-00fb-11e8-9be7-e9c6d0185263.png)
",bug
291027348,TypeScript: Incorrect subject type from returning a wrapped `undefined` from `.then`,"It is valid to return a wrapped `undefined`. Example: `cy.wrap(undefined)` or `Promise.resolve(undefined)` or even `cy.wrap(null)`.

In this case, the subject is a wrapped `undefined` instead of an unwrapped `undefined`.

- Operating System: N/A
- Cypress Version: 1.4.1
- Browser Version: N/A

### Is this a Feature or Bug?
Bug

### Current behavior:
```ts
cy.get('body')
  .then(() => cy.wrap(undefined))
  .then((subject) => {
    subject // Cypress.Chainable<undefined>
  })
```

### Desired behavior:
```ts
cy.get('body')
  .then(() => cy.wrap(undefined))
  .then((subject) => {
    subject // undefined
  })
```

### How to reproduce:
See ""Current behavior""

#### Test code:
See ""Current behavior""

### Additional Info (images, stack traces, etc)
PR is on the way
",bug
290413573,Failed to enter full screen of video player,"<!-- **Tip** in order for us to reproduce the bug you can fork [cypress-io/cypress-test-tiny](https://github.com/cypress-io/cypress-test-tiny) repo and setup the failing test. Then just tells us the repo and branch to try! -->

- Operating System: mac OS High Sierra 10.13.2 (17C88)
- Cypress Version: 1.4.1
- Browser Version: Google Chrome 63.0.3239.132 (Official Build) (64-bit)

### Is this a Feature or Bug?
bug

### Current behavior:
Given a html video player
When I press the full screen button
Then the video player DOES NOT GO to full screen
...and then I can see the message in the console:
`Failed to execute 'requestFullscreen' on 'Element': API can only be initiated by a user gesture.`

### Desired behavior:
Given a html video player
When I press the full screen button
Then the video player SHOULD GO to full screen

### How to reproduce:
`1. open https://plyr.io/ or any other html video player`
`2. press full screen button`

#### Test code:

```js
describe('having video player in in-site mode', () => {
  it('should go to full screen after pressing full screen button', () => {
    cy.visit('https://plyr.io/');
    cy.get('[data-plyr=""fullscreen""]').click();
  });
});
```


### Additional Info (images, stack traces, etc)
I know the **user gesture** problem is really common, and this is the default browser behaviour, but it would be great to make it working correctly in Cypress as it should simulate user journey on tested page/application.
",bug
287879365,TypeScript error using Cypress.on or cy.on,"- Operating System: N/A
- Cypress Version: 1.4.1
- Browser Version: N/A

### Is this a Feature or Bug?
Bug? But also a Feature for better TypeScript support and type documentation for JavaScript

### Current behavior:
TS error using `Cypress.on()` or `cy.on()`

### Desired behavior:
Support for the different events including typed callbacks. This should help with the API in JavaScript as well

### How to reproduce:
See ""Test code""

#### Test code:
```ts
Cypress.on('uncaught:exception', (err) => {
  return false
})
```
This will fail with an error like `Property 'on' does not exist on type 'Cypress'`

I have a PR coming to address this issue.

",bug
287873771,Proxy buffers Transfer-Encoding: chunked responses and breaks streams,"Hi friends! 

We have a `XmlHttpRequest` that never finishes. We're using it as a stream parsing `responseText` on every `onProgress` event. 

The problem is that we never get the last chunk as it would be sitting somewhere buffered. We can't really control the server behaviour here and I wonder if the buffer can be flushed after each chunk?

- Operating System: Linux
- Cypress Version: 3.1.3
- Browser Version: all of them

### Is this a Feature or Bug?
bug

### Current behavior:
cypress waits a request to complete

### Desired behavior:
Cypress should propagate `onProgress` events and update `responseText` accordingly

### How to reproduce:
- an endpoint with `Transfer-Encoding: chunked` that sends messages one after another and _doesn't_ close throughout the session.
- browser connection that reads those messages listening to `onProgress`
",bug
287391580,Elements hidden using clip / clip-path css properties pass as visible,"### Current behavior:
Elements hidden using the CSS `clip` / `clip-path` properties pass visibility check.

### Desired behavior:
Visibility checks should fail as the element isn't visible.

### How to reproduce:
Hide any element using CSS `clip` / `clip-path` properties and define a test to check if it's visible. Test passes.

#### Test code:
```html
<div style=""position: absolute;clip: rect(1px,1px,1px,1px);"">
    <a href=""#test"">clip</a>
</div>

<div style=""position: absolute;clip-path: polygon(0px 0px, 0px 0px, 0px 0px, 0px 0px);"">
    <a href=""#test"">clip-path</a>
</div>
```

```js
describe('Clipped links', function () {
  it('should not be visible', function () {
    cy.visit('127.0.0.1')

    cy.get('a').should('be', 'vivible')
  })
})
```

### Additional Info (images, stack traces, etc)
While clip is deprecated clip-path is not. Unfortunately however clip is still used and supported so for the time being at least I think it should make visibility checks fail.

* Operating System: Windows 10 Enterprise
* Cypress Version: 1.4.1
* Browser Version: Chrome Version 63.0.3239.132



┆Issue is synchronized with this [Jira Bug](https://cypress-io.atlassian.net/browse/TR-80) by [Unito](https://www.unito.io/learn-more)
",bug
287065612,Change event is not fired on number input,"- Operating System: MacOs
- Cypress Version: 1.4.1
- Browser Version: Chrome 63 & Electron 53
- React: 16.2.0

### Is this a Feature or Bug?
Bug

### Current behavior:
Change event is not fired on ""number"" type inputs after .type() nor .click() or .focus() to other element.
It works fine with ""text"" input types

### Desired behavior:
Change event should fire with number input just like with text input type

### How to reproduce:
https://stackblitz.com/edit/react-byhe3e?file=index.js

#### App code:

```js
import React, { Component } from 'react';
import { render } from 'react-dom';

class App extends Component {
  state = {
    inputTextValue: '',
    inputNumberValue: ''
  };

  handleTextChange = (event) => {
    this.setState({ 
      inputTextValue: event.currentTarget.value,
    });
  }

 handleNumberChange = (event) => {
    this.setState({ 
      inputNumberValue: event.currentTarget.value,
    });
  }

  render() {
    return (
      <div>
        <div>
          Input text: {this.state.inputTextValue} <br/>
          <input id=""textInput"" onChange={this.handleTextChange } value={this.state.inputTextValue} type=""text"" /> <br/><br/>
        </div>
        <div>
          Input number: {this.state.inputNumberValue} <br/>
          <input id=""numberInput"" onChange={this.handleNumberChange } value={this.state.inputNumberValue} type=""number"" />
        </div>
      </div>
    );
  }
}

render(<App />, document.getElementById('root'));
```
**Test code:**
```js
describe(""Change event bug repro"", function() {
    it(""Should fire change on textInput"", function() {
        cy.visit(""https://react-byhe3e.stackblitz.io"");

        cy
            .get(""#textInput"")
            .type(""hello"")
            .should(""have.value"", ""hello"");
        cy.get(""#inputTextValue"").contains(""hello"");
    });

    it(""Should fire change on numberInput entering integers"", function() {
        cy
            .get(""#numberInput"")
            .type(""1234.56"")
            .should(""have.value"", ""1234"");
        cy.get(""#inputNumberValue"").contains(""1234.56"");
    });

    it(""Should fire change on numberInput entering decimals"", function() {
        cy
            .get(""#numberInput"")
            .type(""1234.56"")
            .should(""have.value"", ""1234.56"");
        cy.get(""#inputNumberValue"").contains(""1234.56"");
    });
});
```
### Additional Info (images, stack traces, etc):
related issue: https://github.com/cypress-io/cypress/issues/816
test results:
![image](https://user-images.githubusercontent.com/7456451/34719865-59e1f28c-f534-11e7-9b81-f7ab31fae790.png)
",bug
286544293,Cypress test login via GitHub impossible with U2F keys,"### Current behavior:

Log in errors.

### Desired behavior:

Log in works.

### How to reproduce:

Log in with a GitHub account that has U2F enabled using a hardware key.

### Additional Info (images, stack traces, etc)

![image](https://user-images.githubusercontent.com/1173057/34646935-d64268b4-f342-11e7-9f00-ce38646f4924.png)

- Operating System: Windows 10
- Cypress Version: 1.4.1
- Browser Version: Google Chrome Version 63.0.3239.132 (Official Build) (64-bit)


  
  ",bug
286421468,"When test title contains text wrap in quotes, quoted text appears in test runner instead of ""TEST""","<!-- Want a bug fixed quickly? Please provide a repository to reproduce the issue. -->

- Operating System: Windows 10
- Cypress Version: 1.4.0
- Browser Version: 62

### Is this a Feature or Bug?
I cant tell if this is a Feature or a Bug, LOL

### Current behavior:
Test title contains a word in quotes. this then appears in the runner. 

### Desired behavior:
Well its not really undesirable perse, but confusing and it seems unintentional.

### How to reproduce:
Put a word in quotes in your test title

#### Test code:

```js
it.only('should not ""lala"" ...', () => {
```

### Additional Info (images, stack traces, etc)

![image](https://user-images.githubusercontent.com/2848185/34631077-c3e2c562-f23c-11e7-9588-29aa0bc45ed4.png)


  ",bug
286384435,Spy does not retry when used as an alias,"Bug, Mac, Cypress 1.4.1

Reproducible test https://github.com/cypress-io/cypress-example-recipes/issues/86 and pull request https://github.com/cypress-io/cypress-example-recipes/pull/87

```js
// works
it('should retries until spy is called', () => {
    cy.wrap(spy).should('have.been.calledOnce')
    setTimeout(spy, 1000)
})
// does not retry
it('works as alias', () => {
    cy.get('@spy2').should('have.been.calledOnce')
    setTimeout(spy2, 1000)
})
```",bug
286377200,blacklistHosts ignored from CLI?,"<!-- Want a bug fixed quickly? Please provide a repository to reproduce the issue. -->

- Operating System: OS X 10.12.6
- Cypress Version: 1.4.1 beta
- Browser Version: Chrome Version 63.0.3239.132 (Official Build) (64-bit)

### Is this a Feature or Bug?

Bug


### Current behavior:

I can't get blacklistHosts to work at all when invoking `cypress open`. Here are the things I've tried:

`export CYPRESS_blacklistHosts='adservice.google.com'; npx cypress open`
`npx cypress open --config blacklistHosts='adservice.google.com'`
`npx cypress open --config blacklistHosts=""['adservice.google.com']""`

Yet blacklistHosts does not appear in the ""Settings/Configuration"" section. I also do not see the requests being intercepted.

### Desired behavior:

Works as described in documentation

### How to reproduce:

See above

#### Test code:

```js

```

### Additional Info (images, stack traces, etc)


  ",bug
285626445,windows 7 console tekst is unreadable cause of special chars,"- Operating System: Windows 7
- Cypress Version: 1.4.1

### Is this a Feature or Bug?
BUG

### Current behavior:
i see lots of weird characters when running ""cypress run""
in example: 
←[90m  (←[4m←[1mTests Starting←[22←[24m)←39m

### Desired behavior:
have normal text (the way it was in older versions) like:
  (Tests Starting)

![image](https://user-images.githubusercontent.com/29272381/34513854-a5daa784-f06a-11e7-90f9-fe68025872f0.png)
",bug
285239550,Server XHR is not detected / stubbed when using document.write,"Cypress 1.4.x

If we do NOT use `cy.visit` to open a page, and just do `document.write`, then the XHR requests are not detected and are not stubbed.

Example: https://github.com/bahmutov/cypress-hyperapp-unit-test/blob/master/cypress/integration/server-todos-spec.js#L8 where I stub the server XHR route before mounting a Hyperapp component. Same stubbing works if we do not mount Hyperapp but just load an HTML page. In this example, the command log does not even show XHR 

<img width=""1120"" alt=""screen shot 2017-12-30 at 11 27 05 pm"" src=""https://user-images.githubusercontent.com/2212006/34459293-4be2352e-edba-11e7-8c49-ded26655d361.png"">
",bug
283935562,contains(0) does not show zero in the command log,"## small bug in Cypress 1.4.0

Repo with reproducible test https://github.com/bahmutov/test-cy-contains-zero 

The following test

```js
it('contains string zero', () => {
  cy.visit('index.html')
  cy.get('#zero').contains('0')
})

it('contains number zero', () => {
  cy.visit('index.html')
  cy.get('#zero').contains(0)
})
```

Shows ""0"" in the first test, but shows nothing in the second test. 

<img width=""723"" alt=""contains-zero"" src=""https://user-images.githubusercontent.com/2212006/34264846-27277048-e642-11e7-9f5d-25b007f69097.png"">

Should show ""CONTAINS 0"" in the second test",bug
283925199,support folder doesn't support TypeScript,"I converted `.js` files in `cypress/support` folder to `.ts` files and the Cypress app no longer found them. Converting back to JS the app found them again. I tried digging through the source code to see if it is a configuration option, but I couldn't find anything. The current workaround is to just have the JS file with a `.d.ts` file separately for the command types. Cypress understands TypeScript files in `cypress/integration` just fine. If I make the index file a JS file and imported files TS files, it gives an error ""cannon file modules"".

- Operating System: OSX
- Cypress Version: 1.4
- Browser Version: Chrome 62

### Is this a Feature or Bug?
Bug?

### Current behavior:
TypeScript files aren't recognized in `cypress/support`

### Desired behavior:
Support files written in TypeScript are recognized

### How to reproduce:
Change a support file to a `*.ts` file and restart Cypress. When I do this the file is not picked up by Cypress anymore.

## Cypress team solution

See example project with working TS support and spec files https://github.com/bahmutov/cypress-support

- point Cypress at the TypeScript support file from `cypress.json` config
```json
{
  ""supportFile"": ""cypress/support/index.ts""
}
```
- install TypeScript and [@bahmutov/add-typescript-to-cypress](https://github.com/bahmutov/add-typescript-to-cypress) - this will configure transpiling `.ts` files during testing
- when adding custom commands, add them to the `cy` global interface. TypeScript compiler is smart enough to merge your definitions with the `cy` type from `node_modules/cypress` module. For example

```ts
/**
 * Goes to google site
 */
function google() {
  return cy.visit('https://google.com');
}

Cypress.Commands.add('google', google);

declare namespace Cypress {
  interface Chainable<Subject> {
    google: typeof google;
  }
}
```
The only thing TypeScript cannot do - if one of your custom commands calls _another_ custom command, then `tsc` does not understand that the new command will be there. In other words this does not work and requires casting `cy` as `any` to work

```ts
function foo() {} // first custom command to be added
function bar() {
  cy.foo() // error: cy does not have method ""foo"" :(
}

Cypress.Commands.add('foo', foo);
Cypress.Commands.add('bar', bar);

declare namespace Cypress {
  interface Chainable<Subject> {
    foo: typeof foo;
    bar: typeof bar;
  }
}
```

In that case I suggest extracting custom `foo` command into plain function and not attaching it to the `cy` interface.",bug
283784032,Handle Xvfb exiting immediately on spawn with 1 exit code,"I noticed today there is an edge case we specifically do not handle.

If Xvfb spawns and then immediately exits due to argument or permission errors, it will close with `1` exit code. Due to the way we call into this, the CLI will just ""hang"" forever.

This could be why some linux users have detected Cypress ""hanging"" initially on run without any output.

We need to update `@cypress/xvfb`.",bug
283665889,Using Contenteditable and type - caret does not move,"<!-- Want a bug fixed quickly? Please provide a repository to reproduce the issue. -->

- Operating System: Mac OS Sierra
- Cypress Version: 1.4.0
- Browser Version: Chrome 63.0.3239.108

### Is this a Feature or Bug?
Bug

### Current behavior:
Using the Cypress `type` function on a `contenteditable` input doesn't move the caret along with the text.  At first I thought this might be specific to React, but actually it does the same thing with a plain `contenteditable` input on any HTML page.


### Desired behavior:
To move the caret with the text so you can simulate typing and do things like `{enter}`

### How to reproduce:
1. Create a `contenteditable` html element
2. Use `type()` on that element

#### Test code:

```
<p contenteditable=""true"">
    Hello
</p>

cy.get('p').type('hello', {delay: 1000})
```

The delay is helpful so you can actually see the caret as it's being typed out.

### Additional Info (images, stack traces, etc)
![contenteditable](https://user-images.githubusercontent.com/3220162/34224025-404809c4-e576-11e7-846f-1f6a4058df3f.gif)

",bug
283430732,EEXIST: file already exists - cannot start server on Windows,"### Is this a Feature or Bug?
Bug

### Current behavior:
When installing and running Cypress on Windows, I get the following error: 

```
Error: EEXIST: file already exists, mkdir 'C:\Users\aaron\Roaming\node_modules\.bin\cypress
```

This has been duplicated on both Windows 7 and Windows 10.

<details>
<summary>Debug output</summary>

```
Wed, 20 Dec 2017 02:09:32 GMT cypress:ts Running without ts-node hook in environment ""production""
Wed, 20 Dec 2017 02:09:33 GMT cypress:server:appdata path: C:\Users\aaron\AppData\tmp\Cypress\cy\production
Wed, 20 Dec 2017 02:09:33 GMT cypress:server starting cypress server
Wed, 20 Dec 2017 02:09:33 GMT cypress:server:appdata path: C:\Users\aaron\AppData\tmp\Cypress\cy\production
Wed, 20 Dec 2017 02:09:37 GMT cypress:server start in mode headed with options {""_"":[""C:\\Users\\aaron\\tmp\\node_modules\\cypress\\dist\\Cypress\\Cypress.exe""],""project"":""C:\\Users\\aaron\\tmp\\node_modules\\.bin"",""projectPath"":""C:\\Users\\aaron\\tmp\\node_modules\\.bin""}
Wed, 20 Dec 2017 02:09:43 GMT cypress:server:appdata path: C:\Users\aaron\AppData\tmp\Cypress\cy\production\browsers
Wed, 20 Dec 2017 02:09:44 GMT cypress:server:appdata path: C:\Users\aaron\AppData\tmp\Cypress\cy\production\cache
Wed, 20 Dec 2017 02:10:00 GMT cypress:server:timers queuing timer id 1 after 500 ms
Wed, 20 Dec 2017 02:10:00 GMT cypress:server:timers child received timer id 1
Wed, 20 Dec 2017 02:10:00 GMT cypress:server:timers child sending timer id 1
Wed, 20 Dec 2017 02:10:00 GMT cypress:server:timers clearing timer id 1 from queue { '1': { args: [], ms: 500, cb: [Function] } }
Wed, 20 Dec 2017 02:10:00 GMT cypress:server making saved state from C:\Users\aaron\tmp\node_modules\cypress\dist\Cypress\resources\app\packages\server
Wed, 20 Dec 2017 02:10:00 GMT cypress:server for project path C:\Users\aaron\tmp\node_modules\.bin
Wed, 20 Dec 2017 02:10:00 GMT cypress:server state path for project C:\Users\aaron\tmp\node_modules\.bin
Wed, 20 Dec 2017 02:10:00 GMT cypress:server:appdata path: C:\Users\aaron\AppData\tmp\Cypress\cy\production\projects\.bin-51b4388fba0de7ac28bff8df9045a210\state.json
Wed, 20 Dec 2017 02:10:00 GMT cypress:server full state path C:\Users\aaron\AppData\tmp\Cypress\cy\production\projects\.bin-51b4388fba0de7ac28bff8df9045a210\state.json
Wed, 20 Dec 2017 02:10:00 GMT cypress:server making new state file around C:\Users\aaron\AppData\tmp\Cypress\cy\production\projects\.bin-51b4388fba0de7ac28bff8df9045a210\state.json
Wed, 20 Dec 2017 02:10:00 GMT cypress:server:file reading JSON file C:\Users\aaron\AppData\tmp\Cypress\cy\production\projects\.bin-51b4388fba0de7ac28bff8df9045a210\state.json
Wed, 20 Dec 2017 02:10:00 GMT cypress:server:windows creating electron window with options { backgroundColor: '#dfe2e4', width: 800, height: 550, minWidth: 458, minHeight: 400, x: null, y: null, type: 'INDEX', devTools: false, trackState: { width: 'appWidth', height: 'appHeight', x: 'appX', y: 'appY', devTools: 'isAppDevToolsOpen' }, onBlur: [Function: onBlur], onFocus: [Function: onFocus], onClose: [Function: onClose], show: true, url: 'file://C:\\Users\\aaron\\tmp\\node_modules\\cypress\\dist\\Cypress\\resources\\app\\packages\\desktop-gui\\dist\\index.html', webPreferences: { preload: 'C:\\Users\\aaron\\tmp\\node_modules\\cypress\\dist\\Cypress\\resources\\app\\packages\\server\\lib\\ipc\\ipc.js', chromeWebSecurity: true, nodeIntegration: false, backgroundThrottling: false, backgroundColor: '#dfe2e4' }, frame: true, contextMenu: false, recordFrameRate: null, onPaint: null, onCrashed: [Function: onCrashed], onNewWindow: [Function: onNewWindow] }
Wed, 20 Dec 2017 02:10:02 GMT cypress:server:events got request for event: on:menu:clicked undefined
Wed, 20 Dec 2017 02:10:02 GMT cypress:server:events got request for event: get:options undefined
Wed, 20 Dec 2017 02:10:02 GMT cypress:server:events sending ipc data { type: 'get:options',
  data: 
   { id: 0.6289514760541144,
     data: 
      { _: [Object],
        project: 'C:\\Users\\aaron\\tmp\\node_modules\\.bin',
        projectPath: 'C:\\Users\\aaron\\tmp\\node_modules\\.bin',
        onFocusTests: [Function: onFocusTests],
        os: 'win32',
        version: '1.4.0' } } }
Wed, 20 Dec 2017 02:10:02 GMT cypress:server:events got request for event: get:current:user undefined
Wed, 20 Dec 2017 02:10:02 GMT cypress:server:file reading JSON file C:\Users\aaron\AppData\tmp\Cypress\cy\production\cache
Wed, 20 Dec 2017 02:10:02 GMT cypress:server:events sending ipc data { type: 'get:current:user',
  data: { id: 0.3762137311755782, data: {} } }
Wed, 20 Dec 2017 02:10:02 GMT cypress:server:events got request for event: on:focus:tests undefined
Wed, 20 Dec 2017 02:10:02 GMT cypress:server:events got request for event: on:spec:changed undefined
Wed, 20 Dec 2017 02:10:02 GMT cypress:server:events got request for event: on:config:changed undefined
Wed, 20 Dec 2017 02:10:02 GMT cypress:server:events got request for event: on:project:error undefined
Wed, 20 Dec 2017 02:10:02 GMT cypress:server:events got request for event: on:project:warning undefined
Wed, 20 Dec 2017 02:10:02 GMT cypress:server:events got request for event: open:project C:\Users\aaron\tmp\node_modules\.bin
Wed, 20 Dec 2017 02:10:02 GMT cypress:server:project Project created C:\Users\aaron\tmp\node_modules\.bin
Wed, 20 Dec 2017 02:10:02 GMT cypress:server:events got request for event: updater:check undefined
Wed, 20 Dec 2017 02:10:02 GMT cypress:server:updater checking for new version of Cypress. current version is 1.4.0
Wed, 20 Dec 2017 02:10:02 GMT cypress:launcher checking one browser chrome
Wed, 20 Dec 2017 02:10:02 GMT cypress:launcher looking up chrome on win32 platform
Wed, 20 Dec 2017 02:10:02 GMT cypress:launcher exe path C:\Program Files (x86)\Google\Chrome\Application\chrome.exe
Wed, 20 Dec 2017 02:10:02 GMT cypress:launcher found C:\Program Files (x86)\Google\Chrome\Application\chrome.exe ? true
Wed, 20 Dec 2017 02:10:02 GMT cypress:launcher Version=63.0.3239.84
Wed, 20 Dec 2017 02:10:02 GMT cypress:launcher browser chrome at 'C:\Program Files (x86)\Google\Chrome\Application\chrome.exe' version 63.0.3239.84
Wed, 20 Dec 2017 02:10:02 GMT cypress:launcher setting major version for {""name"":""chrome"",""displayName"":""Chrome"",""version"":""63.0.3239.84"",""path"":""C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe""}
Wed, 20 Dec 2017 02:10:02 GMT cypress:launcher browser chrome version 63.0.3239.84 major version 63
Wed, 20 Dec 2017 02:10:02 GMT cypress:launcher checking one browser chromium
Wed, 20 Dec 2017 02:10:02 GMT cypress:launcher looking up chromium on win32 platform
Wed, 20 Dec 2017 02:10:02 GMT cypress:launcher exe path C:\Program Files (x86)\Google\chrome-win32\chrome.exe
Wed, 20 Dec 2017 02:10:02 GMT cypress:launcher found C:\Program Files (x86)\Google\chrome-win32\chrome.exe ? false
Wed, 20 Dec 2017 02:10:02 GMT cypress:launcher browser chromium not installed
Wed, 20 Dec 2017 02:10:02 GMT cypress:launcher checking one browser canary
Wed, 20 Dec 2017 02:10:02 GMT cypress:launcher looking up canary on win32 platform
Wed, 20 Dec 2017 02:10:02 GMT cypress:launcher exe path C:\Users\aaron\AppData\Local\Google\Chrome SxS\Application\chrome.exe
Wed, 20 Dec 2017 02:10:02 GMT cypress:launcher found C:\Users\aaron\AppData\Local\Google\Chrome SxS\Application\chrome.exe ? false
Wed, 20 Dec 2017 02:10:02 GMT cypress:launcher browser canary not installed
Wed, 20 Dec 2017 02:10:02 GMT cypress:server opening project C:\Users\aaron\tmp\node_modules\.bin
Wed, 20 Dec 2017 02:10:02 GMT cypress:server:project opening project instance C:\Users\aaron\tmp\node_modules\.bin
Wed, 20 Dec 2017 02:10:02 GMT cypress:server:config setting support file C:\Users\aaron\tmp\node_modules\.bin\cypress\support
Wed, 20 Dec 2017 02:10:02 GMT cypress:server:config for project root C:\Users\aaron\tmp\node_modules\.bin
Wed, 20 Dec 2017 02:10:02 GMT cypress:server:config support file C:\Users\aaron\tmp\node_modules\.bin\cypress\support does not exist
Wed, 20 Dec 2017 02:10:02 GMT cypress:server:config support file is default, check if C:\Users\aaron\tmp\node_modules\.bin\cypress exists
Wed, 20 Dec 2017 02:10:02 GMT cypress:server:config support folder does not exist, set to default index.js
Wed, 20 Dec 2017 02:10:02 GMT cypress:server:config set support folder C:\Users\aaron\tmp\node_modules\.bin\cypress\support
Wed, 20 Dec 2017 02:10:02 GMT cypress:server:config setting plugins file C:\Users\aaron\tmp\node_modules\.bin\cypress\plugins
Wed, 20 Dec 2017 02:10:02 GMT cypress:server:config for project root C:\Users\aaron\tmp\node_modules\.bin
Wed, 20 Dec 2017 02:10:02 GMT cypress:server:config plugins file does not exist
Wed, 20 Dec 2017 02:10:02 GMT cypress:server:config plugins file is default, check if C:\Users\aaron\tmp\node_modules\.bin\cypress exists
Wed, 20 Dec 2017 02:10:02 GMT cypress:server:config plugins folder does not exist, set to default index.js
Wed, 20 Dec 2017 02:10:02 GMT cypress:server:scaffold scaffolded files [""cypress\\integration\\example_spec.js"",""cypress\\fixtures\\example.json"",""cypress\\support\\commands.js"",""cypress\\support\\index.js"",""cypress\\plugins\\index.js""]
Wed, 20 Dec 2017 02:10:02 GMT cypress:server making saved state from C:\Users\aaron\tmp\node_modules\cypress\dist\Cypress\resources\app\packages\server
Wed, 20 Dec 2017 02:10:02 GMT cypress:server for project path C:\Users\aaron\tmp\node_modules\.bin
Wed, 20 Dec 2017 02:10:02 GMT cypress:server state path for project C:\Users\aaron\tmp\node_modules\.bin
Wed, 20 Dec 2017 02:10:02 GMT cypress:server:appdata path: C:\Users\aaron\AppData\tmp\Cypress\cy\production\projects\.bin-51b4388fba0de7ac28bff8df9045a210\state.json
Wed, 20 Dec 2017 02:10:02 GMT cypress:server full state path C:\Users\aaron\AppData\tmp\Cypress\cy\production\projects\.bin-51b4388fba0de7ac28bff8df9045a210\state.json
Wed, 20 Dec 2017 02:10:02 GMT cypress:server:file reading JSON file C:\Users\aaron\AppData\tmp\Cypress\cy\production\projects\.bin-51b4388fba0de7ac28bff8df9045a210\state.json
Wed, 20 Dec 2017 02:10:02 GMT cypress:server:scaffold found 0 files in folder C:\Users\aaron\tmp\node_modules\.bin\cypress\integration
Wed, 20 Dec 2017 02:10:02 GMT cypress:server:scaffold untouched scaffold true modal closed false
Wed, 20 Dec 2017 02:10:02 GMT cypress:server:scaffold plugins folder C:\Users\aaron\tmp\node_modules\.bin\cypress\plugins
Wed, 20 Dec 2017 02:10:02 GMT cypress:server:scaffold verify scaffolding in C:\Users\aaron\tmp\node_modules\.bin\cypress\plugins
Wed, 20 Dec 2017 02:10:02 GMT cypress:server:scaffold missing folder C:\Users\aaron\tmp\node_modules\.bin\cypress\plugins
Wed, 20 Dec 2017 02:10:02 GMT cypress:server:scaffold copying index.js into C:\Users\aaron\tmp\node_modules\.bin\cypress\plugins
Wed, 20 Dec 2017 02:10:02 GMT cypress:server:scaffold scaffolded files [""cypress\\integration\\example_spec.js"",""cypress\\fixtures\\example.json"",""cypress\\support\\commands.js"",""cypress\\support\\index.js"",""cypress\\plugins\\index.js""]
Wed, 20 Dec 2017 02:10:02 GMT cypress:server:events send error: { Error: EEXIST: file already exists, mkdir 'C:\Users\aaron\tmp\node_modules\.bin\cypress'
    at Error (native)

  cause: 
   { Error: EEXIST: file already exists, mkdir 'C:\Users\aaron\tmp\node_modules\.bin\cypress'
       at Error (native)
   
     errno: -4075,
     code: 'EEXIST',
     syscall: 'mkdir',
     path: 'C:\\Users\\aaron\\tmp\\node_modules\\.bin\\cypress' },
  isOperational: true,
  errno: -4075,
  code: 'EEXIST',
  syscall: 'mkdir',
  path: 'C:\\Users\\aaron\\tmp\\node_modules\\.bin\\cypress' }
Wed, 20 Dec 2017 02:10:02 GMT cypress:server:events sending ipc data { type: 'open:project',
  data: 
   { id: 0.4466535685737474,
     __error: 
      { name: 'Error',
        stack: 'Error: EEXIST: file already exists, mkdir \'C:\\Users\\aaron\\tmp\\node_modules\\.bin\\cypress\'\n    at Error (native)\n',
        message: 'EEXIST: file already exists, mkdir \'C:\\Users\\aaron\\tmp\\node_modules\\.bin\\cypress\'',
        cause: [Object],
        isOperational: true,
        errno: -4075,
        code: 'EEXIST',
        syscall: 'mkdir',
        path: 'C:\\Users\\aaron\\tmp\\node_modules\\.bin\\cypress' } } }
Wed, 20 Dec 2017 02:10:03 GMT cypress:server:updater latest version of Cypress is: 1.4.0
Wed, 20 Dec 2017 02:10:03 GMT cypress:server:updater new version of Cypress does not exist
Wed, 20 Dec 2017 02:10:03 GMT cypress:server:events sending ipc data { type: 'updater:check',
  data: { id: 0.786888422730067, data: false } }
```

</details>

---

- Operating System: Windows 7 & 10
- Cypress Version: 1.0.3 & 1.3.0
- Browser Version: Chrome 63

",bug
283211542,Error: No acceptable window type found for: 'undefined' when trying to login via github,"<!-- Want a bug fixed quickly? Please provide a repository to reproduce the issue. -->

- Operating System: macOS Sierra
- Cypress Version: 1.3.0
- Browser Version:

### Is this a Feature or Bug?
BUG

### Current behavior:
github login window do not show

### Desired behavior:
github login window should be shown

### How to reproduce:
 - install cypress as --save-dev
 - Make sure no user is configured for cypress to be logged in.
 - click Log in
 - Cypress should behave same as 1.2.0 but it fails with error

```
Opening Cypress...
Error: No acceptable window type found for: 'undefined'
```


#### Test code:

```js

```

### Additional Info (images, stack traces, etc)

",bug
283008626,Possible type definition conflict on @types/chai,"The `package.json` uses `save-exact=true`. I didn't really notice this when I added type for Cypress-wrapped types, but it can causes issues if a type definition defined global variables (you can't duplicate global declarations). The issue I'm seeing is in `@types/chai`.

It looks like Cypress depends on `chai@^3.5.0` (Chai is at 4 now - looks like `nested` was added). A project could also use chai at a different version - normally not a problem as both `npm` and `yarn` will embed on conflict detection. But TypeScript won't handle this conflict as gracefully for type definitions. I guess there are a few options to fix this.

- dependency version could be any `*`
- dependency version could be some tested versions: `^3.5.0 || ^4.0.0`
- If using `yarn`, you can just override using a resolution: https://yarnpkg.com/lang/en/docs/selective-version-resolutions/
- Have the app remove `@types/chai` as a dependency

Either dependency version string change should prevent `yarn` or `npm` from detecting a conflict and flatten the dependency.

Personally I think handling `3.5+` is okay. I can open an issue later. There is a workaround (I'm using yarn, so it will allow resolution overrides).

- Operating System: N/A
- Cypress Version: 1.2
- Browser Version: N/A

### Is this a Feature or Bug?
Bug

### How to reproduce:
If your application uses TypeScript and you depend on `@types/chai` in any version other than `4.0.8`

### Additional Info (images, stack traces, etc)

```
[CYP] ERROR in ~/{project}/node_modules/cypress/node_modules/@types/chai/index.d.ts
[CYP] (1619,5): error TS2300: Duplicate identifier 'export='.
```",bug
282997507,Selector Playground missing highlight/tooltip styles in Electron,"The selector playground highlighting is broken in Electron because the styles are being added via a `<link>` tag, which isn't supported by the version of Chrome being run.

![screen shot 2017-12-18 at 2 38 33 pm](https://user-images.githubusercontent.com/1157043/34124531-3f7c32fc-e401-11e7-847f-714938078ed2.png)
",bug
282959883,async functions of tests can write the localStorage after it was cleared for the following test,"## Current behavior: 

Even so Cypress clears the `localStorage` before each test older tests can still have unresolved async functions (for example returning API calls) that write into the `localStorage` during the execution of the next test.

### Desired behavior:

testcases are killed completely so no code can be executed anymore.

### How to reproduce:

see: Test Code (README.md)

#### Test code:

https://github.com/Aligertor/cypressTestLocalStorage

### Additional Info / Our real world problem

In our real scenario JS Application potentially does API calls after be loaded into the browser the first time. We set some `cy.route`'s to define the response of those calls, Therefore we have a set of commands defining different routes for different test cases.

In some of our test cases we now have to wait for these calls to resolve because some handlers will write into localStorage. 

Ideally we dont have to care about this.

If this is not possible at least there should be better support to use commands aka ""be able to use an alias of an route no matter where it was defined"" so people can take care of those timing issues by adding a `cy.wait` without guessing milliseconds

- Operating System: Windows 10 Pro
- Cypress Version: ""^1.3.0""
- Browser Version: Chrome 63

",bug
282053779,Cypress getting into an infinite XHR request loop,"### Current behavior:
When visiting a page on our site through Cypress we're seeing it never complete loading because something causes the XHR requests being made to be made infinitely.

If we look at the Cypress CLI output when running the test we see:

```
GET /xhr/item/alternate-colours/1606925 200 236.222 ms - -
GET /xhr/item/alternate-colours/1606925 200 456.960 ms - -
GET /xhr/item/alternate-colours/1606925 200 288.704 ms - -
GET /xhr/item/alternate-colours/1606925 200 260.936 ms - -
```

This request is only made by our application once; if I got to the page in a browser and watch the network tab I can see that the request is made once. Watching the test through the Cypress UI, I can see that the browser just hangs and becomes unresponsive as all these requests are firing.

I'm not sure what, but something is causing these requests to run again and again and again.

Interestingly, this only happens via `cypress open` and then running the test through the UI. If I do `cypress run` and watch the video, the test does complete and the XHR requests complete as expected.

I'm not sure what extra info is useful here but let me know what I can provide to help with this.

* Operating System: Mac OS X Sierra 
* Cypress Version: 1.1.4
* Browser Version: Chrome 63

",bug
281738955,Gitlab CI passing green when cypress can't connect to the url,"This is docker based CI with cypress/base docker image

### Is this a Feature or Bug?

Gitlab job succeeds even when url reports 404 error

```
Opening Cypress...
  (Tests Starting)


  
GET / 404 12.412 ms - 13

    1) ""before each"" hook for ""should display header logo""


  0 passing (330ms)
  1 failing

  1)  ""before each"" hook for ""should display header logo"":
     CypressError: cy.visit() failed trying to load:

http://localhost:8080/

The response we received from your web server was:

  > 404: Not Found

This was considered a failure because the status code was not '2xx'.

If you do not want status codes to cause failures pass the option: 'failOnStatusCode: false'

Because this error occurred during a 'before each' hook we are skipping all of the remaining tests.
      at Object.cypressErr (http://localhost:38719/__cypress/runner/cypress_runner.js:65873:11)
      at Object.throwErr (http://localhost:38719/__cypress/runner/cypress_runner.js:65838:18)
      at Object.throwErrByPath (http://localhost:38719/__cypress/runner/cypress_runner.js:65865:17)
      at http://localhost:38719/__cypress/runner/cypress_runner.js:57481:31
      at visitFailedByErr (http://localhost:38719/__cypress/runner/cypress_runner.js:57107:12)
      at http://localhost:38719/__cypress/runner/cypress_runner.js:57462:22
      at tryCatcher (http://localhost:38719/__cypress/runner/cypress_runner.js:6268:23)
      at Promise._settlePromiseFromHandler (http://localhost:38719/__cypress/runner/cypress_runner.js:4290:31)
      at Promise._settlePromise (http://localhost:38719/__cypress/runner/cypress_runner.js:4347:18)
      at Promise._settlePromise0 (http://localhost:38719/__cypress/runner/cypress_runner.js:4392:10)
      at Promise._settlePromises (http://localhost:38719/__cypress/runner/cypress_runner.js:4467:18)
      at Async._drainQueue (http://localhost:38719/__cypress/runner/cypress_runner.js:1200:16)
      at Async._drainQueues (http://localhost:38719/__cypress/runner/cypress_runner.js:1210:10)
      at Async.drainQueues (http://localhost:38719/__cypress/runner/cypress_runner.js:1084:14)




  (Tests Finished)

  - Tests:           0
  - Passes:          0
  - Failures:        0
  - Pending:         0
  - Duration:        0 seconds
  - Screenshots:     0
  - Video Recorded:  false
  - Cypress Version: 1.1.4


  (All Done)
npm info ok 
Job succeeded

```

### Desired behavior:

The job must fail when cypress can't connect to the http server


Cypress ver: 1.1.4

Reporter: mochawesome

",bug
279883652,File watching / spec re-running is broken when switching back to a spec,"* Run a spec
* Click on a different spec
* Click on the first spec
* Save the first spec
* Tests won't re-run
",bug
279750773,clicking on an openlayers canvas doesn't trigger any events,"Hi,

When i have a test like this:

```js
it('should draw little circle on a map', function () {
	cy.visit('http://openlayers.org/en/latest/examples/draw-features.html');
	cy.get('canvas').click();
	cy.get('canvas').click(100, 100);
});
```

it doesn't trigger any events (the openlayers example should draw dots on the map)
Perhaps this is because the mousemove and mouseover events are not triggered... i don't know the inner workings of openlayers on this... (although i do know they do stuff a little different)

the problem we now have i can't test any geo applications based on openlayers (which are most of them)",bug
278943498,.clear() on an input at maxlength doesn’t work ,"<!-- Want a bug fixed quickly? Please provide a repository to reproduce the issue. -->

- Operating System: 10.12.6
- Cypress Version: 1.1.3
- Browser Version: n/A

### Is this a Feature or Bug?

A bug.

### Current behavior:

Calling `.clear()` on an input with a value as long as its `maxlength` attribute value leaves the value untouched.

### Desired behavior:

Calling `.clear()` on an input with a value as long as its `maxlength` attribute value empties the field.

### How to reproduce:

1. Create an input.
2. Set its `maxlength` to `n`.
3. Set its `value` to a string of `n` characters.
4. Call `.clear()` on it.

#### Test code:

```js
cy.get('input[maxlength]').clear()
```

### Additional Info (images, stack traces, etc)

I suspect the problem to be here:

https://github.com/cypress-io/cypress/blob/324d549497345246ca76dbfb6d9ede26bb142048/packages/driver/src/cypress/keyboard.coffee#L541-L548

There is a max length, but the value is already at its max length, so it results on a no-op, when it really should clear the field.
",bug
278591452,Error not shown in the reporter when using `document.write`,"### Current behavior

If we load HTML page that throws a JS error, it is shown in the Cypress test reporter GUI. For example here is HTLM page

```html
<!DOCTYPE html>
<html>
<head>
  <title></title>
</head>
<body>
  example loaded
  <script>
    console.log('a message')
    throw new Error('from HTML')
  </script>
</body>
</html>
```

When test just does simple 

```js
beforeEach(() => {
  cy.visit('index.html')
})

it('works', () => {})
```

Then the gui shows the error

<img width=""729"" alt=""error-shown"" src=""https://user-images.githubusercontent.com/2212006/33502518-67a0032c-d6ae-11e7-9550-780841308202.png"">

But if we write the same page into test iframe ourselves, the error is swallowed

```js
// as as file ""index.html""
const html = `
<!DOCTYPE html>
<html>
<head>
  <title></title>
</head>
<body>
  example loaded
  <script>
    console.log('a message')
    throw new Error('from HTML')
  </script>
</body>
</html>
`

beforeEach(() => {
  cy.document().then(doc => {
    doc.write(html)
    doc.close()
  })
})

it('works', () => {})
```

<img width=""706"" alt=""error-not-shown"" src=""https://user-images.githubusercontent.com/2212006/33502540-80c88392-d6ae-11e7-82f0-2f84e864a3c5.png"">

I know this is kind of weird test case, but I accidentally discovered it when working on Codepen demo https://github.com/cypress-io/cypress-example-recipes/tree/master/examples/blogs__codepen-demo when the page I was using was broken, and the tests just got blank screen

Example repo with these two tests: https://github.com/bahmutov/cy-document-write-exception

<!-- Want a bug fixed quickly? Please provide a repository to reproduce the issue. -->

- Operating System: Mac
- Cypress Version: 1.1.2
- Browser Version: all",bug
278224796,"Cypress failing after uncaught:exception thrown from 3rd party, even thought 'uncaught:exception' handler is listening.","### Current behavior:

On the initial spec run, with a new browser, the exception is thrown from my application

```
TypeError: Cannot read property 'page_type' of undefined at getPageType
```

If I rerun the test, without closing the browser, the test passes and the error is not thrown.

I don't expect you to solve my applications errors. However, this does not occur in a local chrome window, might be useful.

The real issue is when the uncaught exception is thrown by my application it stops Cypress from executing the test and any other tests. However, the page still loads. (See the video attached)

If I am correct, Cypress should not stop with application errors with

```js
Cypress.on('uncaught:exception', (err, runnable) => {
    // returning false here prevents Cypress from
    // failing the test
    return false
})
```

in commands.js, which it is

### Desired behavior:
Cypress does not stop executing when the application throws an exception. 


### Additional Info (images, stack traces, etc)

https://youtu.be/m0O_P0alpyc

- Operating System: Mac
- Cypress Version: 1.1.2
- Browser Version: Chrome 62


",bug
278031380,Wrong result in assertion be.visible in elements inside an SVG (Electron),"### Current behavior:

Assertion `be.visible` returns `false` for elements inside an SVG node.

### Desired behavior:

Assertion `be.visible` returns real visibility of elements inside an SVG node.

### How to reproduce:

See [playground project](https://github.com/Sumolari/cypress-svg-be.visible-playground).

- Operating System: tested on macOS 10.13.1 although should fail in any OS
- Cypress Version: 1.1.2
- Browser Version: Electron (Chrome v53.0.2785.143, Electron v1.4.6)
",bug
277221574,Browserify plugin is firing 'watched:file:changed' twice on change,"This is a bug introduced likely somewhere in the plugins refactor.

Whenever you change a spec file I'm getting two 'watched:file:changed' events.

When this happens this causes the Runner to reinstantiate Cypress and to stop the previous one. At this point `this.runner` and `this.cy` are undefined, which is why it fails. We could guard against that there, but there would be hiding the underlying problem.

![screen shot 2017-11-27 at 7 52 43 pm](https://user-images.githubusercontent.com/1268976/33297012-c55fde7e-d3ac-11e7-81ba-78e2b39fb94c.png)

and

![screen shot 2017-11-27 at 7 51 45 pm](https://user-images.githubusercontent.com/1268976/33297015-c911165a-d3ac-11e7-8e4b-9a7225378ca6.png)

",bug
277025961,JSON fixtures with unicode escape sequences are not parsed correctly,"See the ""Current behavior"" for bug details.

I already boiled the problem down to an error in the jsonlint module that is used for parsing the JSON data in https://github.com/cypress-io/cypress/blob/a888f89d4d0dd4fad8e064e7cfdba3e6459d25fa/packages/server/lib/fixture.coffee#L90 and filed and issue there (zaach/jsonlint#102), but because that last commit is 3 years ago I don't know if it's still maintained.

Returning the result of `JSON.parse()` if no jsonlint error happened will fix the error while still keeping jsonlint as validator.

- Operating System: MacOS 10.13.1
- Cypress Version: 1.1.2
- Browser Version: not relevant

### Is this a Feature or Bug?

This is a bug.

### Current behavior:

A JSON file that contains unicode escape sequences (\uXXXX) in string values is not parsed correctly (""\uXXXX"" results in ""\\uXXXX""). 

### Desired behavior:

JSON fixture is parsed correctly.

### How to reproduce:

See https://github.com/vschoettke/cypress_fixture_parse_bug for an example

#### Test code:

fixtures/test_error.json
```js
{
    ""name"": ""\u30d0\u30b0""
}
```

integration/test_spec.js
```js
describe(""cypress should load json fixture with unicode specifier correctly"", () => {
    it(""should decode correctly"", () => {
        cy.server();
        cy.fixture(""test_error.json"").then((data) => {
            const realData = require(""../fixtures/test_error.json"");
            expect(data.name).to.equal(realData.name);
        });
    });
});
```


",bug
276992550,Invalid cookies crash Cypress,"<!-- Want a bug fixed quickly? Please provide a repository to reproduce the issue. -->

- Operating System: macOS 10.12.6 (16G29)
- Cypress Version: 1.1.1
- Browser Version: Chrome 62

### Is this a Feature or Bug?
Bug

### Current behavior:
When a server responds with an invalid `Set-Cookie` header (e.g. containing a unicode character) then Cypress crashes.

### Desired behavior:
When a server responds with an invalid `Set-Cookie` header (e.g. containing a unicode character) then Cypress could:
* ignore the invalid cookie and log that
* or maybe have a configuration option to ignore invalid cookies

### How to reproduce:

See test code below.


#### Test code:

```js
describe('HomeAway', () => {
    it('Search Landing Page', () => {
        cy.visit('https://www.homeaway.com/d/1540e08a-4d04-41f1-9795-526cd5217516/new-york-city');
    });
});
```

### Additional Info (images, stack traces, etc)

Our WAF (Incapsula) might be dropping that invalid cookie intentionally. 

The error thrown:
```
TypeError: The header content contains invalid characters
    at ServerResponse.OutgoingMessage.setHeader (_http_outgoing.js:346:11)
    at ServerResponse.header (/Users/cpalfi/cypress/packages/server/node_modules/express/lib/response.js:700:10)
    at ServerResponse.append (/Users/cpalfi/cypress/packages/server/node_modules/express/lib/response.js:670:15)
    at /Users/cpalfi/cypress/packages/server/lib/controllers/proxy.coffee:193:14
    at Object.getHttpContent (/Users/cpalfi/cypress/packages/server/lib/controllers/proxy.coffee:233:7)
```

",bug
276442967,`maxlength` < 16 breaks .clear(),"<!-- Want a bug fixed quickly? Please provide a repository to reproduce the issue. -->

- Operating System: 10.12.6
- Cypress Version: 1.1.1
- Browser Version: n/a

### Is this a Feature or Bug?

A bug.

### Current behavior:

Calling `.clear()` on an input with a `maxlength` attribute smaller than 16 outputs odd characters in the field instead of clearing it.

### Desired behavior:

Calling `.clear()` on an input with a `maxlength` attribute smaller than 16 clears the field.

### How to reproduce:


#### Test code:

```js
cy.get('input[maxlength]').clear()
```

### Additional Info (images, stack traces, etc)

This bug was introduced in [1.1.1](https://docs.cypress.io/guides/references/changelog.html#1-1-1) with https://github.com/cypress-io/cypress/pull/930 as mentioned in [this comment](https://github.com/cypress-io/cypress/issues/928#issuecomment-346369782).

Calling `.clear()` seems to call `.type()` with `{selectall}{del}` as per the following snippet. This string is 16 characters long and takes into account the `maxlength` attribute (while it should not).

https://github.com/cypress-io/cypress/blob/cb67a5ace3a9ff8d6bb7b5d93f06048dd3469ec5/packages/driver/src/cy/commands/actions/type.coffee#L402

The changes introduced in 1.1.1 slice the characters to respect the `maxlength` attribute value, therefore slicing these tokens. This is why a maxlength from 1 to 15 causes this bug.

I guess not counting tokens in the characters count is probably the way to go. Pseudo code could look like:

```js
const tokens = RegExp(Object.keys(keyStandardMap).join('|'), 'g')
chars.replace(tokens, '')
```",bug
275765504,Error lost between plugins child process and display in UI,"When there's an error in the plugins file (syntax error, module not found, etc), the path to the plugins file is displayed as `[object Object]` and the error message is not displayed. 

![screen shot 2017-11-21 at 10 54 34 am](https://user-images.githubusercontent.com/1157043/33082583-201193b4-ceab-11e7-8ede-e73de09dafba.png)
",bug
275582845,Couldn't get heroku CI working,"Overview: I've created a very simple test spec that I wanted to get running in a CI-enabled Heroku pipeline. However, it seems to fail due to some xvfb configuration issues.

I tried different flavors of buildpacks and chrome and electron both. 

When missing a dependency I would get an error message on the heroku dyno about the missing dependency (e.g. xvfb, etc). However, once all the dependencies were installed, I then got this message;

```
~ $ ./node_modules/.bin/cypress run
It looks like this is your first time using Cypress: 1.1.0

[04:28:22]  Verifying Cypress can run /app/node_modules/cypress/dist/Cypress [started]
[04:28:22]  Verifying Cypress can run /app/node_modules/cypress/dist/Cypress [failed]
Cypress failed to start.

This is usually caused by a missing library or dependency.

The error below should indicate which dependency is missing.

https://on.cypress.io/required-dependencies

If you using Docker, we provide containers with all required dependencies installed.
----------
----------

Platform: linux (Ubuntu Linux - 14.04)
Cypress Version: 1.1.0
```

on the advice of @brian-mann via your Gitter chat, I tried this command:
`./node_modules/cypress/dist/Cypress/Cypress`

However that produced no console output whatsoever. 


Here's the heroku configuration I wound up with (after trying various buildpacks):


stack:  cedar-14 (per heroku xvfb doesn't work with the new stack) 
buildpack:  https://github.com/heroku/heroku-buildpack-apt
Then I configured the Aptfile with these dependencies 
```
xvfb
libgtk2.0-0
libnotify-dev
libgconf-2-4
libnss3
libxss1
libasound2
``` 
(copied out of your instructions).  


I'm giving up on getting this running on heroku, but if you're having trouble recreating the situation, I could probably get something set up for you pretty quickly (the code part is trivial-- basically a hello world test.)

",bug
275530232,Digits Scrambled when using type on tel input field with input mask,"<!-- Want a bug fixed quickly? Please provide a repository to reproduce the issue. -->

- Operating System: Windows 10
- Cypress Version: 1.1.0
- Browser Version: Chrome

### Is this a Feature or Bug? 
Bug

### Current behavior: 
When using .type() on tel inputs with masks, the numbers are entered out of order.  That is, digits are added to the end of the field when they meet a special character.

### Desired behavior:
The digits are entered into the field in order.

### How to reproduce:
Call .type() on a tel input field with an input mask that provides hyphens, parentheses, or other formatting

#### Test code:

```js
cy.get(""#PrimaryPhone"").type(""1234567890"").should('have.value', ""(123) 456-7890"")
//The above expected output is based on the input mask used by my application.  
//Your mileage may vary.
```

### Additional Info (images, stack traces, etc)",bug
275371084,reject is not defined,"@HugoGiraudel commented on [Mon Nov 20 2017](https://github.com/cypress-io/cypress-webpack-preprocessor/issues/7)

<!-- Want a bug fixed quickly? Please provide a repository to reproduce the issue. -->

- Operating System: macOS 10.12.6
- Cypress Version: 1.1.0
- Browser Version: n/a

### Is this a Feature or Bug?

A bug.

### Current behavior:

Opening Cypress results in:

```
ReferenceError: reject is not defined
    at EventEmitter.<anonymous> (/Users/hugo/Sites/goldfish/node_modules/cypress/dist/Cypress.app/Contents/Resources/app/packages/server/lib/plugins/index.js:81:18)
    at emitTwo (events.js:106:13)
    at EventEmitter.emit (events.js:191:7)
    at ChildProcess.<anonymous> (/Users/hugo/Sites/goldfish/node_modules/cypress/dist/Cypress.app/Contents/Resources/app/packages/server/lib/plugins/util.js:23:29)
    at emitTwo (events.js:106:13)
    at ChildProcess.emit (events.js:191:7)
    at process.nextTick (internal/child_process.js:744:12)
    at _combinedTickCallback (internal/process/next_tick.js:67:7)
    at process._tickCallback (internal/process/next_tick.js:98:9)
```

### Desired behavior:

Not a crash. :)

### How to reproduce:

Set up the following plugin file:

```
const webpack = require('@cypress/webpack-preprocessor')

module.exports = on => {
  on('file:preprocessor', webpack())
}
```

### Additional Info (images, stack traces, etc)

Using `import` instead of `require` fails the same way.

",bug
275110073,Cypress timesout setting cookie,"### Current behavior:

When running tests headlessly they run very slow. Failed once like this so far
![image](https://user-images.githubusercontent.com/2848185/32984767-c71f708c-cc7a-11e7-845e-cd47d3b190f8.png)

### Additional Info (images, stack traces, etc)

- Operating System: win10
- Cypress Version: 1.0.3
- Browser Version: 62


",bug
275024921,cy.type() adhere to maxlength on text input,"### Is this a Feature or Bug?
Feature

### Current behavior:
cy.type ignores maxlength attribute on an input element.

### Desired behavior:
cy.type() should not ignore maxlength attribute on an input. After .type() reaches the maxlength, it should ignore the rest of the input string.

### How to reproduce:
Use cy.type() on a text input with a maxlength attribute, passing a string to .type() that is longer than the maxlength.
",bug
274615582,Don't ignore stderr from the CLI. Only ignore stderr from the XVFB process,"Debug flags like `DEBUG=cypress:*` or `NODE_DEBUG=request` don't work because we're ignoring `stderr` from the Cypress child process.

We need to listen to `stderr` but just ignore the `xvfb` child process (which is super noisy).

We could even conditionally do that by seeing if `cypress:xvfb` is enabled, and if so to log those events as well.",bug
273896264,CypressError: Timed out retrying: coordsHistory must be at least 2 sets of coords,"<!-- Want a bug fixed quickly? Please provide a repository to reproduce the issue. -->

- Operating System: Windows 10
- Cypress Version: 1.0.3
- Browser Version: 62

### Is this a Feature or Bug?
Bug

### Current behavior:
When running my tests I try to trigger a dragDrop event. Even when passing { force: true }, this exception is still encountered. This only happens on headless test runs. It worked fine in the browser.

### Desired behavior:
Ideally this exception wouldn't be thrown. Not sure why it's happening.

### How to reproduce:
This happened using anglar-file-upload code in a private respository. Not sure the best means to reproduce.

#### Test code:

```js
    it('Allows for ---- Upload', function () {
      cy.get('.my-drop-zone').first()
        .trigger('dragover', this.dropEvent)
        .should('have.class', 'nv-file-over')
        .trigger('drop', this.dropEvent, { force: true }) // this is where it fails even with force true
    })
  })
```

### Additional Info (images, stack traces, etc)

![image](https://user-images.githubusercontent.com/2848185/32797531-1b3e85e2-c940-11e7-8999-fe66b79bafbf.png)
",bug
272635553,cy.go('back') broken on hash change from internal links on page,"### Current behavior:
Using `cy.go('back')` to go back to an internal link hash makes Cypress infinitely loop between the baseUrl port and the random port. 

### Desired behavior:
Being able to use `cy.go()` to go back to internal links.

### How to reproduce:

#### Test code:
```js
it('cy.go() - go back or forward in the browser\'s history', function(){
  cy.visit('http://localhost:8080#visit')
  cy.visit('http://localhost:8080#reload')
  cy.go('back')
})
```

```html
<h1 id=""visit"">Visiting</h1>
<h1 id=""reload"">Reloading</h1>
```

### Additional Info (images, stack traces, etc)
![adding-go](https://user-images.githubusercontent.com/1271364/32617873-2d7c6d78-c544-11e7-8dc4-aba2657eff70.gif)

- Cypress Version: 1.0.3
- Browser Version: Chrome 61

",bug
271779122,.should() should fail when only chainer getters supplied,"### Current behavior:


If user writes `.should( chainer, value )` where `chainer` consists **only of** a chainer getter (e.g. `to`, `be`, `is`...), the command silently passes.


### Desired behavior:

Instead, it should throw/fail because it's not a valid assertion. It's the same as if the user wrote `expect( value ).be( value )` which is invalid chai assertion.

### How to reproduce:

```js
cy.wrap( 42 ).should('be', 100);
```

- Cypress Version: 1.0.3",bug
271211841,cy.viewport doesn't take effect if `width` not changed,"
- Operating System: Win7x64
- Cypress Version: 1.0.3

### Is this a Feature or Bug?

Bug

### Current behavior:

Issuing `cy.viewport( 1000, 200 )` doesn't change the viewport size if current viewport size is `1000x600`, and thus only `height` is being changed (to `200`).

### Desired behavior:

Should change viewport height to `200`",bug
269719389,External browser like Chrome is reported as Electron to API,"## bug

## Cypress version: all

When running Cypress with external browser using `--browser` option, the test runner still sends ""electron"" and ""53"" name and version to the API. Seems the name and the version are hardcoded

in `api.coffee`
```
body: _.extend({
    spec:           options.spec
     browserName:    ""Electron""
}, systemInfo)
```
in `system.coffee`
```
browserVersion: process.versions.chrome
```",bug
269405749,Move the cursor (Drag and Drop),"I read the issue #386 but triggering the JavaScript events seem a bit complicated in some situation (when you don't know the underlying code).

### Use case

My goal is to assert a drag'n drop sorting library work as expected : http://grafikart.github.io/ReorderJS/index.html

### Current behavior:

I can make my test pass with the **electron** browser but it will fail on **chrome** (nothing moves)

```js
      cy.visit('http://grafikart.github.io/ReorderJS/index.html')
      cy.get('.column:eq(3)').as('toMove')
      cy.get('@toMove')
            .should('attr', 'data-position', '2')
            .trigger('mousedown')
      cy.get('.column:eq(2)').trigger('mousemove')
      cy.get('@toMove')
           .trigger('mouseup')
           .should('attr', 'data-position', '1')
```

### How to reproduce:

You can produce a passing test on electron that fails on chrome with this simplified test (default resolution not changed : 1000 x 660)

```js
    it('Should sort', function () {
      cy.visit('http://grafikart.github.io/ReorderJS/index.html')
      cy.get('.column:eq(3)')
        .should('attr', 'data-position', '2')
        .trigger('mousedown')
        .trigger('mousemove', {clientX: 500, clientY: 50})
        .trigger('mouseup')
        .should('attr', 'data-position', '1')
    })
```


",bug
269221222,Cypress crashes: TypeError: Cannot read property '0' of null,"## bug

## version

Cypress 1.0.1 on Linux

When @jennifer-shehane changed her GitHub email, Cypress run started crashing trying to parse the commit author line (in several projects).

```
Opening Cypress...
TypeError: Cannot read property '0' of null
    at Function.module.exports.Commit.actor (/root/cypress-dashboard/node_modules/cypress/dist/Cypress/resources/app/packages/server/node_modules/gift/lib/commit.js:176:56)
    at Function.module.exports.Commit.parse_commits (/root/cypress-dashboard/node_modules/cypress/dist/Cypress/resources/app/packages/server/node_modules/gift/lib/commit.js:139:21)
    at /root/cypress-dashboard/node_modules/cypress/dist/Cypress/resources/app/packages/server/node_modules/gift/lib/commit.js:99:39
    at ChildProcess.exithandler (child_process.js:209:7)
```
The crash happens inside `gift` package at line that tries to parse author line
```js
ref1 = this.actor(author_line), author = ref1[0], authored_date = ref1[1];
```
We need to handle the crash.",bug
268933663,Testing an empty attribute value fails,"This code fails

```js
it ""inputs"", ->
  cy.visit(""/index.html"")

  cy.get(""input[type=file]"").should(""have.attr"", ""title"", """")
  cy.get(""input[type=email]"").should(""have.attr"", ""title"", """")
  cy.get(""input#t"").should(""have.attr"", ""title"", """")
```

```html
<html>
  <input type=""file"" title="""" />
  <input type=""email"" title="""" />
  <input id=""t"" title="""" />
</html>
```

![screen shot 2017-10-26 at 6 36 42 pm](https://user-images.githubusercontent.com/1268976/32080280-cb028cf8-ba7c-11e7-810e-8fe27162c5b3.png)
",bug
268777560,Cannot pass record key through CYPRESS_RECORD_KEY variable (local dev mode),"### bug

When working inside this repository and trying to record a run, the record key is not read from the environment variable `CYPRESS_RECORD_KEY`.

### steps to reproduce

1. clone a sample project for example `git clone https://github.com/cypress-io/cypress-test-tiny.git /tmp/cypress-test-tiny`
2. try running tests in the `/tmp/test` from the root of this repository AND record it (because we are working against local API without running it, just use fake ""foo"" and ""bar"").

```
CYPRESS_PROJECT_ID=foo npm start -- --run-project /tmp/cypress-test-tiny --record --key bar
```
Everything is working and the test is running.

3. try passing record key via environment variable `CYPRESS_RECORD_KEY` (see https://docs.cypress.io/dashboard/overview/projects-dashboard.html#Record-Test-Runs) 

```
CYPRESS_PROJECT_ID=foo CYPRESS_RECORD_KEY=bar DEBUG=cypress:* npm start -- --run-project /tmp/cypress-test-tiny --record
```

and you get the following error message

```
You passed the --record flag but did not provide us your Record Key.

You can pass us your Record Key like this:

  cypress run --record --key <record_key>

You can also set the key as an environment variable with the name CYPRESS_RECORD_KEY.

https://on.cypress.io/how-do-i-record-runs
```

Hmm, weird that this fails in local development mode, but works just fine in compiled binary.",bug
268770034,Cypress hangs on verify step,"### Current behavior:
Cypress keeps ""Verifying Cypress can run"", so the program hangs

### Desired behavior:
Cypress to run normally

### How to reproduce:
```
npm install cypress mocha mocha-multi-reporters mocha-junit-reporter
node_modules/cypress/bin/cypress verify
```

### Additional Info (images, stack traces, etc)
No, are there log files somewhere?

## Cypress team update

If you hit problems running Cypress on a specific system:

- try using newer Cypress version
- try using newer CI version, or a different CI. See our examples for different CI systems that we run already in [cypress-example-kitchensink](https://github.com/cypress-io/cypress-example-kitchensink#ci-status) for examples of systems that work very well
- try using our official images from [cypress-io/cypress-docker-images](https://github.com/cypress-io/cypress-docker-images)
- run Cypress with debug log output. In particular, we would like to see debug output from the CLI module and from our [XVFB module](https://github.com/cypress-io/xvfb). You can turn them both using `DEBUG=cypress:cli,xvfb npx cypress verify`
- provide an example for us to reproduce, and please remember that it will be hard for us to install an entire system that matches your system unless you provide Docker file

- Operating System: CentOS 7.4
- Cypress Version: 1.0.2
- Browser Version: N/A
",bug
268332454,scrollIntoView() not working as expected. Acts as if get() not returning element. Same code works with click(),"### Current behavior:
scrollIntoView() not working. Produces the error: `SyntaxError: Failed to execute 'querySelector' on 'Document': '0' is not a valid selector.` despite the fact that the element in question is available to cypress.

If I swap out the `scrollIntoView()` method for `click()` instead, the test passes and you can see the page actually scrolls to the element.

### Desired behavior:
Should scroll element into view, and the test should pass.

### How to reproduce:
I've produced a repository that demonstrates the issue here:

https://github.com/citypaul/cypress-scrollintoview


#### Test code:

This test fails as if it cannot find the element in question:

```js
const footballPage = 'http://www.test.bbc.co.uk/sport/beta/live/football/23031537';

describe('Get Involved', () => {
  it('Does not do much!', () => {
    cy.visit(footballPage);

    cy
      .get('#post_58d3a03ee4b0e1456fe22080')
      .scrollIntoView()
      .should('be.visible');
  });
});
```

However, this test, also looking for the same element, does pass. Just using `click()` instead of `scrollIntoView()`:

```js
const footballPage = 'http://www.test.bbc.co.uk/sport/beta/live/football/23031537';

describe('Get Involved', () => {
  it('Does not do much!', () => {
    cy.visit(footballPage);

    cy
      .get('#post_58d3a03ee4b0e1456fe22080')
      .click()
      .should('be.visible');
  });
});
```

### Additional Info (images, stack traces, etc)

```
cypress_runner.js:136339 SyntaxError: Failed to execute 'querySelector' on 'Document': '0' is not a valid selector.
Error: Failed to execute 'querySelector' on 'Document': '0' is not a valid selector.
    at a.scrollTo (http://www.test.bbc.co.uk/sport/beta/live/football/23031537:310:1746)
From previous event:
    at runCommand (http://www.test.bbc.co.uk/__cypress/runner/cypress_runner.js:61508:14)
    at next (http://www.test.bbc.co.uk/__cypress/runner/cypress_runner.js:61590:14)
From previous event:
    at next (http://www.test.bbc.co.uk/__cypress/runner/cypress_runner.js:61590:34)
    at <anonymous>
From previous event:
    at http://www.test.bbc.co.uk/__cypress/runner/cypress_runner.js:61609:37
From previous event:
    at run (http://www.test.bbc.co.uk/__cypress/runner/cypress_runner.js:61607:15)
    at Object.cy.(anonymous function) [as visit] (http://www.test.bbc.co.uk/__cypress/runner/cypress_runner.js:61827:11)
    at Context.runnable.fn (http://www.test.bbc.co.uk/__cypress/runner/cypress_runner.js:61958:20)
    at callFn (http://www.test.bbc.co.uk/__cypress/runner/cypress_runner.js:31825:21)
    at Test.Runnable.run (http://www.test.bbc.co.uk/__cypress/runner/cypress_runner.js:31818:7)
    at http://www.test.bbc.co.uk/__cypress/runner/cypress_runner.js:64801:28
From previous event:
    at Object.onRunnableRun (http://www.test.bbc.co.uk/__cypress/runner/cypress_runner.js:64800:20)
    at $Cypress.action (http://www.test.bbc.co.uk/__cypress/runner/cypress_runner.js:60312:51)
    at Test.Runnable.run (http://www.test.bbc.co.uk/__cypress/runner/cypress_runner.js:63951:20)
    at Runner.runTest (http://www.test.bbc.co.uk/__cypress/runner/cypress_runner.js:32288:10)
    at http://www.test.bbc.co.uk/__cypress/runner/cypress_runner.js:32394:12
    at next (http://www.test.bbc.co.uk/__cypress/runner/cypress_runner.js:32208:14)
    at http://www.test.bbc.co.uk/__cypress/runner/cypress_runner.js:32218:7
    at next (http://www.test.bbc.co.uk/__cypress/runner/cypress_runner.js:32150:14)
    at http://www.test.bbc.co.uk/__cypress/runner/cypress_runner.js:32186:5
    at timeslice (http://www.test.bbc.co.uk/__cypress/runner/cypress_runner.js:27427:27)
logError @ cypress_runner.js:136339
```

- Operating System:
   Mac OSX (10.12.3 (16D32))
- Cypress Version:
1.0.2
- Browser Version:
Chrome 61",bug
268206045,Cypress GUI does not clearly indicate scrollable area,"<!-- Want a bug fixed quickly? Please provide a repository to reproduce the issue. -->

- Operating System: macOS Yosemite
- Cypress Version: 0.20.1
- Browser Version: Chrome 61

### Is this a Feature or Bug?

Feature, I suppose.

### Current behavior:

The whitespace below `my-lists.spec.js` made me think that was my last spec file. In reality, I have more that can be seen by scrolling. The scrollbar is an obvious indicator, but the whitespace still threw me off.

![image](https://user-images.githubusercontent.com/7094076/31970867-700b79fe-b8ce-11e7-8f06-1f7f554ad74b.png)

### Desired behavior:

There should be no whitespace below the last visible spec file.",bug
268205914,Parse domains/subdomains/tld using public suffix,"Currently Cypress does a naive attempt at determining the domain, subdomain, and TLD of the current application under test.

It does not consider the public suffix, which results in it setting incorrect `document.domain` as well as yelling about changing domains when it's really not.

We should package in this [npm module](https://www.npmjs.com/package/psl) and then either make calls for parsing async (and do it in node) or transfer the data to Cypress during its bootstrap phase so it can parse it in the driver correctly.

Related to https://github.com/cypress-io/cypress/issues/380 and https://github.com/cypress-io/cypress/issues/600",bug
268052854,"cy.contains(selector, content) incorrectly parses arguments when content regexp","- Cypress Version: 1.0.2
- Browser Version: CH 61

### Is this a Feature or Bug?

bug

### Current behavior:

`cy.contains( selector, content )` regards `selector` as `content`, when `content` is regexp.

### Desired behavior:

Should query `selector` and find `content` within it.

### How to reproduce/Test code:

```
<div class=""someClass"">
    <div>Confirm</div>
</div>
```

```
cy.contains( "".someClass"", /confirm/i );
```

![image](https://user-images.githubusercontent.com/5153846/31948536-79131f08-b8d7-11e7-9e5a-a92699ec5a5b.png)

Works as intended when `content` is supplied as string, and not regex:

```
cy.contains( "".someClass"", ""Confirm"" );
```
",bug
267678157,cy.exec fails on windows,"### Current behavior:

![image](https://user-images.githubusercontent.com/5153846/31892530-8ce62a1c-b809-11e7-9010-bae032fa7f40.png)

From the bug, the path seems mangled:

1. first part is UNIXy `/c/Program`
2. There's a `:` inserted into the (`Program Files`) folder name for some reason
3. 2nd half is in windows format (backslashes)

### How to reproduce:

```
cy.exec('echo 42');
```

### Additional Info (images, stack traces, etc)

On my machine is installed (and in env variables) the [git-for-windows](https://github.com/git-for-windows/git) bash, which is the bash the cypress is trying to invoke.


- Operating System: Windows 7/x64
- Cypress Version: 1.0.2
- Browser Version: canary 64
",bug
266999949,Cypress uploads passing tests video even if videoUploadOnPasses is false,"<!-- Want a bug fixed quickly? Please provide a repository to reproduce the issue. -->

- Operating System: Linux Debian - 8.8
- Cypress Version: 0.20.0
- Browser Version: Electron 53.0.2785.143

### Is this a Feature or Bug?

BUG

### Current behavior:

When setting up Cypress Dashboard with runs, and giving option `""videoUploadOnPasses"": false` in `cypress.json` config, video recordings are sent to dashboard anyway, whether test passes or not.

### Desired behavior:

When setting up Cypress Dashboard with runs, and giving option `""videoUploadOnPasses"": false` in `cypress.json` config, video recordings should not be sent to dashboard when tests passes.

### How to reproduce:

- Setup video recordings with Cypress Dashboard
- set config `""videoUploadOnPasses"": false` in `cypress.json` config
- make tests pass
- check run in Cypress Dashboard",bug
266657520,cy.visit() results in ERR_SSL_VERSION_OR_CIPHER_MISMATCH,"### Is this a Feature or Bug?
Bug

### Current behavior:

In some circumstances, users encounter this error when visiting their application:

```text
This site can't provide a secure connection
xxx uses an unsupported protocol
ERR_SSL_VERSION_OR_CIPHER_MISMATCH
```

![image](https://user-images.githubusercontent.com/1271364/31744814-6a7d4cbe-b42e-11e7-86a6-598cbd4a28e7.png)

If you encounter this bug, please try to paste any test code or information you can below as we have been unable to reproduce this issue. 

**Theory**
The problem is likely the way the user's server is self signing the cert and it is confusing the Cypress proxy, which ultimately confuses the browser.",bug
266440913,Problem cancelling XHRs from previous test,"### Current behavior:

Yep, there is an issue if you don't wait for all XHRs to finish after a test.  When it tries to cancel the XHR it fails with the error: - 

```
UnsubscriptionError: 1 errors occurred during unsubscription:
  1) TypeError: Cannot set property 'aborted' of undefined
```
if I do an explicit `cy.wait(2000)` or `cy.wait('@myxhr')` it works
*note* it's the following test that fails, not the one with the XHR

### Desired behavior:

The XHR should be cancelled correctly before the next test starts

### How to reproduce:

Have a longish running XHR fire at the end of one test and have a subsequent test.

### Additional Info (images, stack traces, etc)

It seems to happen when I am faking a route failure (status 500) and then make another (non-faked) XHR (to report the error to a server).  e.g.: -

```js
cy.route({
  method: 'PUT',
  url: '/Endpoint/Id',
  status: 500,
  response: ''
}).as('saveStuff');
```

- Operating System: Ubuntu 16.04
- Cypress Version: 1.0.2
- Browser Version: Electron 53


",bug
266174083,"Incorrectly formatted log message for ""have.all.keys"" assertion","All versions of Cypress when making this assertion

```js
it('expect - assert shape of an object', function(){
  const person = {
    name: 'Joe',
    age: 20
  }
  expect(person).to.have.all.keys('name', 'age')
})
```
Look at the reporter message - looks very weird

<img width=""423"" alt=""have all keys"" src=""https://user-images.githubusercontent.com/2212006/31674166-1ff6e344-b32f-11e7-9fae-5f6f4401fa80.png"">

I added example test to https://github.com/cypress-io/cypress-example-kitchensink/pull/17",bug
266170837,cy.focused() inconsistent behavior,"<!-- Want a bug fixed quickly? Please provide a repository to reproduce the issue. -->

- Operating System: Mac OS X Sierra
- Cypress Version: 1.0.2
- Browser Version: All

### Is this a Feature or Bug?
Bug

### Current behavior:

`cy.focused()` does the right thing when you keep the Cypress UI window focused. It does the wrong thing if you blur the Cypress UI window or if you run headlessly.

### Desired behavior:

`cy.focused()` should produce consistent results, regardless of being run headed/headless or focused/blurred.

### How to reproduce:

https://github.com/verheyenkoen/cypress-focused-issue",bug
266160704,Standard scrollTo usage often results in errors,"### Current behavior:

Running the example code, which performs a simple `scrollTo` often results in an error stating that multiple elements cannot be scrolled.

### Desired behavior:

Don't error, and scroll the page. 🤡

### How to reproduce:

Run the example code.

#### Test code:

```js
  context('Page Scroll', () => {
    it('should work', () => {
      cy.visit('https://www.theguardian.com/uk')
      cy.scrollTo('0%', '35%')
    })
  })
```

### Additional Info (images, stack traces, etc)

<img width=""475"" alt=""screenshot 2017-10-17 16 03 22"" src=""https://user-images.githubusercontent.com/12164768/31672571-db28a682-b354-11e7-8e2e-d0e1c61ab7ac.png"">

- Operating System: Mac OS 10.12.6
- Cypress Version: 1.0.2
- Browser Version: Chrome 61
",bug
265407446,Fix angular 4 zone.js conflicts,PR here: https://github.com/cypress-io/cypress/pull/738,bug
264359729,".should(""be.visible"") doesn't interpet elements with "" style='transform: scale(0,0)' "" correctly","### Current behavior:
`.should('be.visible')` recognizes elements with `style=""transform: scale(0,0)""` as being visible.

### Desired behavior:
`.should('be.visible')` should determine that elements with `style=""transform: scale(0,0)""` are actually not visible

### How to reproduce:
1) create an element on a page that has `style=""transform: scale(0,0)""`
2) write test that checks that element's visibility like so: `cy.get('#el').should('be.visible');`

### Additional Info (images, stack traces, etc)
<img width=""1384"" alt=""screen shot 2017-10-10 at 4 08 01 pm"" src=""https://user-images.githubusercontent.com/9908831/31408091-578019c0-add5-11e7-811d-ae498e67889e.png"">


- Operating System: Mac OS Sierra
- Cypress Version: 1.0.1
- Browser Version: Chrome 61

",bug
264183781,Unexpected error on CLI on Mac OS X,"I'm getting the following error when typing: `cypress open` in the command line for version 1.0.0.

```
An unexpected error occurred while verifying the Cypress executable.

Please search Cypress documentation for possible solutions:

https://on.cypress.io

Check if there is a GitHub issue describing this crash:

https://github.com/cypress-io/cypress/issues

Consider opening a new issue.
----------

TypeError: Cannot read property 'pipe' of null
----------

Platform: darwin (16.7.0)
Cypress Version: 1.0.0
```

Also, when running tests on the CLI, the output is not colored anymore.",bug
263324125,Driver is not reloading when spec files are modified in Windows,"This is likely due to the different system paths and separators.

We should also take the opportunity to change the way the server process is notified of file watching.

Instead of letting the driver or desktop gui ask the server to watch a file - the server should instead automatically watch the file when it is being served when tests begin running.

That way state is kept in one place and likely this would just fix it. ",bug
263323887,Stdout is not captured when recording on the Dashboard in Windows,"It's just completely missing...

https://dashboard.cypress.io/#/projects/245obj/runs/8149d556-d9d6-4bf5-9490-e581fef79ef9/output",bug
262546757,Electron throws error randomly in CI,"Electron will occasionally throw the following error in CI, failing the test run.

```
Error: Object has been destroyed
    at setFrameRate (/home/person/cypress-monorepo/packages/server/lib/gui/windows.coffee:192:15)
    at WebContents.<anonymous> (/home/person/cypress-monorepo/packages/server/lib/gui/windows.coffee:197:11)
    at emitThree (events.js:116:13)
    at WebContents.emit (events.js:197:7)
```",bug
261589300,"cy.click() failed because element is effective width and height of 0x0, even though it is not.","Hi there,

I'm encountering some flaky tests due to an element not being considered visible by Cypress, I don't understand what makes an element visible or not visible by Cypress and was hoping someone could clarify it for me.

Since version 0.20 tests randomly decide to fail with this message: `This element '<a.sc-cqpYsc.cmkxre>' is not visible because it has an effective width and height of: '0 x 0' pixels.`.
However, when I inspect it is definitely has a size bigger then 0 by 0, as you can see in the screenshots.

Failing test due to click timeout:
![screen shot 2017-09-29 at 11 44 37](https://user-images.githubusercontent.com/2742131/31010575-9c08f7e2-a50b-11e7-991b-a4308bde9632.png)

Item highlighted by Cypress:
![screen shot 2017-09-29 at 11 33 11](https://user-images.githubusercontent.com/2742131/31010368-e75e2290-a50a-11e7-9aaf-fb6925dcf5bb.png)

Chrome inspect of the element:
![screen shot 2017-09-29 at 11 34 22](https://user-images.githubusercontent.com/2742131/31010370-e8a9764a-a50a-11e7-8c5b-fd41a84051e6.png)

Now, I can ""fix"" this by adding `{ force: true }` to the click, but I would like to understand why this results in flaky behaviour (both headless and using the cypress UI).

- - -
* Operating System:
locally: OSX 10.12.6
CI: Debian Stretch (Docker container node:6.11.3-stretch)
* Cypress Version:
0.20.0 & 0.20.1
* Browser Version:
Version 61.0.3163.100 (Official Build) (64-bit) (locally)

### Is this a Feature or Bug?
Bug?

### Current behavior:
cy.click() failed because element is not visible

",bug
261455023,cy.exec sources profile once when opening from Finder / Windows Explorer,"<!-- Want a bug fixed quickly? Please provide a repository to reproduce the issue. -->

- Operating System: Mac
- Cypress Version: 0.20.1
- Browser Version: Electron

### Is this a Feature or Bug?

A 🐞

### Current behavior:

A test that executes two `node` commands fails on the second command IF we start Cypress by double clicking the app in the Finder program

```js
cy.exec('node --version')
cy.exec('node --version')
```

![screen shot 2017-09-28 at 4 35 23 pm](https://user-images.githubusercontent.com/2212006/30989521-02080e70-a46c-11e7-8093-27c6c3b8ce0f.png)

![screen shot 2017-09-28 at 4 37 14 pm](https://user-images.githubusercontent.com/2212006/30989529-072ce344-a46c-11e7-8e80-f45fc9157ce5.png)

Note the first command executes correctly! But the second has ""node unknown command""

### Desired behavior:

If we start Cypress ""normally"" from the shell, then it works fine (because it inherits shell functions, like NVM node setup).

![screen shot 2017-09-28 at 4 33 16 pm](https://user-images.githubusercontent.com/2212006/30989586-2bbac442-a46c-11e7-803c-eac01edc4ff4.png)


### How to reproduce:

I have a repo https://github.com/bahmutov/foo-page with just this test

#### Test code:

```js
it('works', () => {
  cy.exec('node --version')
  cy.exec('node --version')
})
```

### Additional Info (images, stack traces, etc)

",bug
260322846,Cypress can't open salesforce login page,"- Operating System: MacOS
- Cypress Version: 0.19.4
- Browser Version: 

### Is this a Feature or Bug?
Bug

### Current behavior:
The browser get's redirected to a blank page

### Desired behavior:
Should visit the salesforce login page

### How to reproduce:
Run `salesforce_spec.js`

### Repo
https://github.com/GuilhermeMedeiros/cypress-salesforce
",bug
259554424,Tests from example_spec.js don't run in Chrome after newly installed cypress,"<!-- Want a bug fixed quickly? Please provide a repository to reproduce the issue. -->

- Operating System: macOS Sierra 10.12.6
- Cypress Version: 0.20.1
- Browser Version: Chrome 61.0.3163.91

### Is this a Feature or Bug?
Bug

### Current behavior:
Clicking example_spec.js opens up chrome browser but no tests appear.  Theres also a console.warn stating ""WebSocket connection to 'ws://localhost:8080/__socket.io/?EIO=3&transport=websocket' failed: WebSocket is closed before the connection is established.""

### Desired behavior:
I'd expect the tests that are included in the example_spec.js would run in browser. instead, nothing appears in the browser

### How to reproduce:
* Fresh install of cypress via npm i -D cypress.
* run `node_modules/.bin/cypress open` from command line
* click `example_spec.js` in integration tests list
* notice that chrome opens, however nothing ever shows up, tests aren't run
",bug
259485441,cy commands with options object should not display as Object{N} in the Command Log,"### Current behavior:

Prints visit ""Object{4}"" ? this is confusing because I only passed single timeout option and I cannot see the fields in that object. Devtools does not show anything on click

### Desired behavior:


- print `...`?
- print only non-default options?
- serialize the object to print VISIT {timeout: 20000} for example in this case

### How to reproduce:

Do `cy.visit` with extra options, like below

#### Test code:

```js
cy.visit(""/"", {timeout: 20000})
```

### Additional Info (images, stack traces, etc)

<img width=""371"" alt=""screen shot 2017-09-21 at 8 49 52 am"" src=""https://user-images.githubusercontent.com/2212006/30696630-46a691fe-9eaa-11e7-91f9-ef13ba043119.png"">

<img width=""386"" alt=""screen shot 2017-09-21 at 8 50 32 am"" src=""https://user-images.githubusercontent.com/2212006/30696636-5014dfa2-9eaa-11e7-834d-9a13dbf95e57.png"">

- Operating System: mac
- Cypress Version: 0.20.0
- Browser Version: electron
",bug
259230386,Cypress will not stop test run if errors in beforeEach/afterEach,"- Operating System: MacOS and Docker image (`cypress/base:8` and `node:8.5`)
- Cypress Version: 0.20.1
- Browser Version: Electron

### Is this a Feature or Bug?
Bug

### Current behavior:
If an error is raised in both the `beforeEach` and `afterEach` hooks for tests, Cypress will not stop the test run and seems to continue recording video indefinitely (video file keeps increasing).

### Desired behavior:
Tests should fail with a descriptive error message.

### How to reproduce:
Run the test below.

`node_modules/.bin/cypress run` will ""hang"" and continue running until killed
`node_modules/.bin/cypress run --headed` will also ""hang"", but you can see the errors in the log and see the timer continuing to run.

#### Test code:
```js
describe(""cypress"", function() {
  beforeEach(function() {
    // cy.visit(""/"");
    throw new Error();
  });

  afterEach(function() {
    // Commenting this out will allow the test to finish and stop recording
    // cy.visit(""/"");
    throw new Error();
  });

  it(""doesn't hang when both beforeEach and afterEach fail"", function() {
  });
});
```

### Additional Info (images, stack traces, etc)
- The original test makes a `cy.visit` call and the tests would hang if the server didn't respond with a 200.
- Canceling the `--headed` run results in output similar to the following:
```
  cypress
    1) ""before each"" hook for ""doesn't hang when both beforeEach and afterEach fail""

  0 passing (15s)
  1 failing

  1) cypress ""before each"" hook for ""doesn't hang when both beforeEach and afterEach fail"":
     E

Because this error occurred during a 'before each' hook we are skipping the remaining tests in the current suite: 'cypress'


  Because this error occurred during a 'before each' hook we are skipping the remaining tests in the current suite: 'cypress'r

  Because this error occurred during a 'before each' hook we are skipping the remaining tests in the current suite: 'cypress'o

  Because this error occurred during a 'before each' hook we are skipping the remaining tests in the current suite: 'cypress'r

  Because this error occurred during a 'before each' hook we are skipping the remaining tests in the current suite: 'cypress'
```

Looking at the ""random"" character after 'cypress', it starts to spell out:
`Error at Context. <anonymous> (http://localhost:64422/__cypress/tests` ...
",bug
258257135,Accept absolute path for --reporter,We incorrectly use `path.join` instead of `path.resolve` so passing an absolute path to a reporter doesn't work.,bug
258198021,Ensuring element is not covered should be calculated at center (due to fractional pixels),"The newest visibility algorithm checks whether an element is covered by calculating off of its top/left pixel and checking to see if an element is on top of it (which is not a descendent).

This is problematic when the pixels are fractional.

Instead we should simply check whether the center of the element is being covered as most users would expect this anyway (since that is the default point at which action coordinates are fired anyway)

",bug
258053398,Consecutive hash changes do not fire in backbone,"https://github.com/paulfalgout/cypress-issue

- Operating System: osx
- Cypress Version: 0.20.0
- Browser Version: chrome 60

### Is this a Feature or Bug?
Bug

### Current behavior:
Consecutive hash changes don't hit every route

### Desired behavior:
All routes are hit

### Additional Info (images, stack traces, etc)
Adding `wait(0)` between the `visit`s will run all routes.
",bug
257844616,"Trigger ""change"" event correctly","Cypress 0.19.4 / 0.20.0 does not generate ""change"" event same way as the browser. For example in vanilla JS TodoMVC this leads to different results

```js
// fires change event
cy.find('input').type('foo{enter}')
// does not fire change event
cy.find('input').type('foo').type('{enter}')
```
which shows up in this example repo https://github.com/bahmutov/add-todo-test/issues/1

Good url to test http://todomvc.com/examples/vanillajs/

test
```js
const getItems = () =>
  cy.get('.todo-list li')

it('adds 1 todo', () => {
  const url = 'http://todomvc.com/examples/vanillajs/'
  cy.visit(url)
  getItems()
    .should('have.length', 0)
  cy.get('.new-todo').type('pass this test').type('{enter}')
  getItems()
    .should('have.length', 1)
})
```",bug
257444253,Problem entering text in Angular2 TodoMVC tests,"This is coming from https://github.com/bahmutov/effective-e2e-testing-with-cypress/issues/2

- Cypress 0.19.4 and 0.20.0

Cannot type ""enter"" from the test into Angular2 example

```js
// Angular2
const url = 'http://todomvc.com/examples/angular2/'
context('New Todo', () => {
  beforeEach(() => {
    cy.visit(url)
  })

  const firstTodo = 'Learn Cypress'

  it('adds 1 todo', () => {
    cy.get('.new-todo').type(firstTodo).type('{enter}')
    cy.get('.todo-list li')
      .first()
      .find('label').should('contain', firstTodo)
  })
})
```

<img width=""840"" alt=""screen shot 2017-09-11 at 4 47 24 pm"" src=""https://user-images.githubusercontent.com/2212006/30388950-66b50060-987f-11e7-83a3-ce29f6475262.png"">
",bug
257427577,Negated chai-jquery assertions pass on invalid objects,"```js
expect({}).to.be.visible // excellent error message saying this is invalid assertion
```

```js
expect({}).not.to.be.visible // this passes even though its invalid O_O
```",bug
257290643,Chainer descendants not found,"### Is this a Feature or Bug?

Bug

### Current behavior:

Spits out error

`CypressError: The chainer: 'descendants' was not found. Could not build assertion.`

### How to reproduce:

Add a spec with:

`.should(""have.descendants"", "".some-selector"")`

#### Test code:

```js
.should(""have.descendants"", "".some-selector"")
```


",bug
257171794,`onBeforeLoad` handler not called when overwriting `visit`,"- Operating System:
macOS Sierra 10.12.6 (16G29)

- Cypress Version:
0.20.0

- Browser Version:
Built-in Electron

### Bug

### Current behavior:

`onBeforeLoad` hook is not getting called when overwriting the `visit` command.

### Desired behavior:

`onBeforeLoad` hook should get called as it did in previous versions, and the docs state it should

### How to reproduce:

* Clone test repo
* From test repo, run `yarn`
* Run its cypress tests -- an `alert()` would happen if `onBeforeLoad` got called

#### Test code:

https://github.com/adamdicarlo/cypress-bug-640

",bug
257098858,CircleCI throwing Socket hang up errors when running tests,"### Is this a Feature or Bug?
Bug

### Current behavior:
When running a test on CircleCI, it throws `socket hangup error`. This error disappears randomly when it is rerun (only when I push new changes which lead to a new CircleCI run, not when I rebuild/rerun the same pipeline) 

### Desired behavior:
It should run the test.

### How to reproduce:
Attempt to run a test on circle CI

#### Test code:

```
cy.visit('https://admin4.myshopify.com') // This is a production URL you can go to from any browser
```

### Additional Info (images, stack traces, etc)
![screen shot 2017-09-12 at 11 19 32 am](https://user-images.githubusercontent.com/22102095/30336097-297c85d8-97b2-11e7-9ab1-1f22db35aa9e.png)

",bug
257084171,Incorrect behaviour running Cypress from root with tests in subfolders,"### Setup

- Operating System: MacOS
- Cypress Version: 0.20.0
- Browser Version: n/a

### Is this a Feature or Bug?

A bug.

### Current behavior:

Considering the following structure:

```
_ package.json
_ node_modules
_ src/
  |_ clients/
    |_ foo/
      |_ cypress.json
      |_ cypress/
    |_ bar/
      |_ cypress.json
      |_ cypress/

```

And the following command run from root:

```
./node_modules/.bin/cypress run ./src/clients/foo
```

- A `cypress` folder gets created at root.
- The dummy tests are run instead of the expected ones.

### Desired behavior:

- No `cypress` folder gets created at root.
- The tests from `./src/clients/foo` are run.

### Additional infos

Running the following command doesn’t fix the problem (`--project`).

```
./node_modules/.bin/cypress run --project ./src/clients/foo
```",bug
256838705,Multiple test blocks are running despite `.only`,"Issue in https://github.com/bahmutov/effective-e2e-testing-with-cypress/issues/1 code in https://github.com/bahmutov/effective-e2e-testing-with-cypress/tree/double-only

I think this is because one block has title that is substring of another block

### Current behavior:

```js
describe.only('main features', function () {
  it('first spec', function () {})
})

describe('main features with assertions', function () {
  it('second spec', function () {})
})
```
Runs both blocks despite `.only`

<img width=""1273"" alt=""screen shot 2017-09-11 at 4 38 33 pm"" src=""https://user-images.githubusercontent.com/2212006/30296253-8bb16a26-9711-11e7-8036-9123ffcc51e6.png"">

### Desired behavior:

Run only the block with `describe.only`

### How to reproduce:

Clone repo, grab branch `double-only`, open Cypress

### Additional Info (images, stack traces, etc)

- Operating System: Mac
- Cypress Version: 0.20.0
- Browser Version: Electron",bug
256747693,Elements on screen not visible due to overflow parent element,"- Operating System: Mac OSX 10.12
- Cypress Version: 0.20.0
- Browser Version: Chrome 60

### Is this a Feature or Bug?
Bug

### Current behavior:
Due to the new fix related to elements within parents with overflow properties, some elements that are clearly visible on the screen make the test fail when asserting should('be.visible')

### Desired behavior:
Identify whether or not the element is actually on screen, so the test only fails when it's not

### How to reproduce:
As for now, I can't make any test pass that checks the visibility of an element that is within a parent with any overflow property. That should be enough to reproduce.

#### Test code:

```js
cy.get('.cy-box').click()
        .get('.cy-box-child-1').should('be.visible')
        .get('.cy-box-child-2').should('be.visible')

```
",bug
256714839,Missing project config exception,"Reported in Raygun for Cypress v0.20.0

Stack trace:
```
Message: Missing project config
Project.Project.saveState:null
EventEmitter.EventEmitter.handleEvent:null
```
Relevant code
```coffee
# project.coffee
# forces saving of project's state by first merging with argument
  saveState: (stateChanges = {}) ->
    throw new Error(""Missing project config"") if not @cfg
```",bug
255535490,Prevent seeding the kitchen sink when running from the CLI,"There were some situations where we would accidentally seed the kitchen sink on a fresh project when using the command line:

```bash
cypress run
```

Definitely should not do this. This is likely a regression from earlier versions.",bug
251206813,Cannot type in draftjs-based editors,"### Current behavior:
![image](https://user-images.githubusercontent.com/381076/29455573-516dc832-841a-11e7-9c76-0f22fc361a77.png)


### Desired behavior:
![image](https://user-images.githubusercontent.com/381076/29455597-6ea4fdd0-841a-11e7-89ab-f03c578f9913.png)


### How to reproduce:
https://github.com/dziamid/cypress-draftjs

#### Test code:

```js
describe('React RTE', function(){

  it('i cannot simply type', function () {

    cy
        .visit('https://react-rte.org/demo')
        .get('[contenteditable]').eq(0).type('I am typing')
        .get('textarea').eq(0).contains('I am typing')
  });


})
```

- Operating System:
Ubuntu 16.04
- Cypress Version:
Cypress CLI: 0.13.1
Cypress App: 0.19.4
- Browser Version:
Chrome 59
Electron 53


",bug
250837829,Using cy.server() and cy.route() not working in before hooks,"### Current behavior:

I'm getting error in Cypress app console: `CypressError: cy.route() cannot be invoked before starting the cy.server()` when I use `cy.server()` in top `before` hook and then `cy.route()` in children contexts `before` hooks.

If I remove top `cy.server()` and move it to `before` hook before each `cy.route()` call then I get fail for second describe context with error: `CypressError: The XHR server is unavailable or missing. This should never happen and likely is a bug. Open an issue if you see this message.` 

### Desired behavior:

I should be able to use `cy.route()` and `cy.server()` within `before` hooks.

#### Test code:

```javascript
describe('test', () => {
  before(() => {
    cy.server()
  })

  describe('case with http 500', () => {
    before(() => {
      // cy.server()
      cy.route({
        method: 'GET',
        url: '/api?*',
        status: 500,
        response: {}
      })
      cy.visit('http://app.dev/')
    })

    it('test n1', () => {

    })

    it('test nr 2', () => {

    })
  })

  describe('case with http 408', () => {
    before(() => {
      // cy.server()
      cy.route({
        method: 'GET',
        url: '/api?*',
        status: 408,
        response: {}
      })
      cy.visit('http://app.dev')
    })

    it('test nr 3', () => {

    })

    it('test nr 4', () => {

    })
  })
})
```

- Cypress Version: 0.19.2",bug
250826980,Commands will retry and potentially exceed their timeout values during page transition,"- Cypress Version: 0.19.4

### Is this a Feature or Bug?
Bug

### Current behavior:
If a page transition event occurs whilst a command is currently running + retrying, it will continue to retry during this phase and not only can it unexpected time out, but it can also potentially access properties on the `window` or `document` that can cause DOMException errors.

### Desired behavior:
When Cypress detects a page transition it will pause executing new commands until page stability has been reached.

However currently running commands should have their retry behavior blocked and their internal retry counter reset once page transition is finished and page stability has resumed.

### How to reproduce:

```js
// if the click event on the <a> is async
// then the page transition event will occur
// once the cy.url command begins running

$(""a"").on(""click"", () => {
  setTimeout(() => {
    window.location.href = ""/new-page""
  }, 100)
})

cy.get(""a"").click()
cy.url().should(""include"", ""/new-page"")
```
",bug
250138281,"If using wrong reporter name, Cypress is hanging","- Operating System: Mac
- Cypress Version: 0.19.4
- Browser Version: built-in headless

### Is this a Feature or Bug?

A bug 🐞

### Current behavior:

Run cypress with default spec reporter - works fine
```
cypress run --reporter spec --spec cypress/integration/profile_spec.coffee 
```

Now change reporter name to something invalid

```
cypress run --reporter spec2 --spec cypress/integration/profile_spec.coffee 
```

The second run just keeps hanging

### Desired behavior:

Exit with obvious error

### How to reproduce:

See above
",bug
249841462,Unable to auth through GitHub login using UTF Security Key,"<!-- Want a bug fixed quickly? Please provide a repository to reproduce the issue. -->

- Operating System: macOS 10.12.6
- Cypress Version: 0.19.4
- Browser Version: Chrome 60.0.3112.90

### Is this a Feature or Bug?
Bug

### Current behavior:
Trying to login through GitHub with a FIDO U2F Security Key configured for the account causes ""something to go really wrong""

### Desired behavior:
Successful auth through GitHub

### How to reproduce:
Attempt to login to GitHub


### Additional Info (images, stack traces, etc)

<img width=""986"" alt=""screen shot 2017-08-12 at 5 15 13 pm"" src=""https://user-images.githubusercontent.com/8376505/29244651-0569f2bc-7f83-11e7-86af-b4f96adefd13.png"">
",bug
249462394,"cy.location('pathname') throws an error, claiming not having a pathname key","### Current behavior: 

When using `cy.location('pathname')` , asserting throws error. 

assertion looks like this:
```js
cy.location('pathname').should(""eq"", `/onboarding/name`)
```

error:
```CypressError: Location object does not have key: pathname```


fyi: writing out assertion with function works no problem:

```js
cy.location().should(function(location){
  expect(location.pathname).to.eq('/events')
})
```

### Desired behavior:
Should not throw error, when trying to use `cy.location('pathname')`

### How to reproduce:
in this particular case, the assertion comes right after redirect after login

### Additional Info (images, stack traces, etc)
looks like this. you can see the test does not wait for path change and throws an error.

<img width=""418"" alt=""screenshot 1"" src=""https://user-images.githubusercontent.com/23213553/29189779-17ece384-7e18-11e7-9f9b-d3c62d856bbe.png"">
<img width=""450"" alt=""screenshot 2"" src=""https://user-images.githubusercontent.com/23213553/29190002-d84a2c86-7e18-11e7-9e4e-b601970794cd.png"">

",bug
248601234,Handling socks proxy,"### Current behavior:

After setting up SOCKS proxy to my staging server, my local chrome browser can have access to it, but Cypress not, it loads the website forever.

### Desired behavior:

Cypress should respect SOCKS proxy system settings and be able to access websites which are proxied through given proxy server. 

### How to reproduce:

1. Set up socks proxy in macOS:

<img width=""594"" alt=""screen shot 2017-08-08 at 2 40 33 pm"" src=""https://user-images.githubusercontent.com/829242/29056800-fcfcb25a-7c48-11e7-82d4-13aa54d36d75.png"">

(Preferences / Network / Advanced / Proxies)

2. Forward port from staging machine:

```
ssh -D 9999 my-staging-machine.com
```

3. Try to access staging website which should be available internally only for `my-staging-machine.com`

- Operating System: macOS Sierra 10.12.5
- Cypress Version: 0.19.2
- Browser Version: Chrome 60.0.3112.90


",bug
245429992,Requests to basic auth urls with the chrome browser time out,"- Operating System: macOS 10.12.5
- Cypress Version: 0.19.4
- Browser Version: chrome 59.0.3071.115

### Is this a Feature or Bug?

Bug?

### Current behavior:

Running tests in the desktop app, using the chrome browser, against a URL with a basic auth url (ie; `https://username:password@my-site.com`) times out

### Desired behavior:

Running tests in the desktop app, using the chrome browser, against a URL with a basic auth url works

### How to reproduce:

Run a test in the desktop app, using the chrome browser, against a URL with a basic auth url

#### Test code:

```js
describe('My Site', function() {
  it('Go to My Site', function() {
    cy.visit('https://username:password@my-site.com')
  })
});
```

### Additional Info (images, stack traces, etc)

https://www.chromestatus.com/feature/5669008342777856
",bug
244933901,Internal timers are inaccurate / busted due to Electron,"- Cypress Version: 0.19.4

### Is this a Feature or Bug?
Bug

### Current behavior:
Timers when running in electron are busted due to https://github.com/electron/electron/issues/7079

This manifests itself in several ways:
- oftentimes during a hard refresh the Cypress UI will hang / block for several seconds while the underlying socket connection is being made
- tests will not re-run on file change due to timer polling problems
- using options like `delay` with `cy.route` can provide inaccurate delays which can lead to failing tests

### Desired behavior:
Timers should ""just work correctly""

",bug
244806100,scrolling elements should factor in position: sticky and multiple covered elements,"- Cypress Version: 0.19.4
- Browser Version:

### Is this a Feature or Bug?
Bug

Originally seen here: #565

### Current behavior:
- Cypress will not scroll beyond a single fixed position element when its covering up the desired element
- Cypress does not factor in `position: sticky` for elements covering up the desired element

### Desired behavior:
- Factor in multiple elements
- Factor in `position: sticky` elements

### Additional Info (images, stack traces, etc)

Cypress scrolls past the fixed header but not beyond that. This is the problem:
![screen shot 2017-07-21 at 7 29 36 pm](https://user-images.githubusercontent.com/1268976/28485906-065ac4ec-6e4b-11e7-8625-8a7a10b2630c.png)

This is what it should do:
![screen shot 2017-07-21 at 7 29 47 pm](https://user-images.githubusercontent.com/1268976/28485908-0831b05a-6e4b-11e7-9689-2fa5f729025c.png)

",bug
244802392,When waiting for actionability Cypress should scroll all parent containers not just window,"- Cypress Version: 0.19.4

### Is this a Feature or Bug?
Bug

### Current behavior:
When Cypress detects an element is covered by a fixed position element, it only attempts to scroll the window instead of the parent container(s).

### Desired behavior:
It's possible the window is not actually scrollable.

Cypress should iteratively scroll each parent container, starting with the window and working its way down until the element becomes actionable.

### Additional Info (images, stack traces, etc)

It does this currently, which means it's still covered up.

![screen shot 2017-07-21 at 6 58 19 pm](https://user-images.githubusercontent.com/1268976/28485314-9b0ca902-6e46-11e7-9c07-10cd88936b85.png)

It needs to do this, which uncovers it.
![screen shot 2017-07-21 at 6 57 54 pm](https://user-images.githubusercontent.com/1268976/28485323-a3b04e06-6e46-11e7-84b9-47261b93b780.png)

",bug
244358733,.type() misbehaves when input's value is changed programatically,"- Operating System:
Mac OS X 10.11.6

- Cypress Version:
0.19.4

- Browser Version:
Canary 61

### Is this a Feature or Bug?
I think it's a bug. It's possible I'm just not simulating a tab key in a way that lets Cypress pick caret position up, though.

### Current behavior:
When, for the `<input>`, I simulate pressing a tab key, and then type into the field, and then do it again, `.type()` will not append a text at the end of the input value, but in the middle.

Test scenario pasted below fails with the following error:

> AssertionError: expected '<input>' to have value 'autocomplete123autocomplete456autocomplete', but the value was 'autocomplete456123autocompleteautocomplete'

### Desired behavior:
I would expect `.type()` to always insert a text at the end of the input (or maybe, more generally, wherever the caret is).

### How to reproduce:
Serve this file:

```html
<!DOCTYPE html>
<html>
  <head>
    <meta http-equiv=""Content-Type"" content=""text/html; charset=UTF-8"">
  </head>
  <body>
    <input>

    <script>
      var input = document.querySelector(""input"");

      input.addEventListener(""keydown"", function(evt) {
      	if (evt.key === ""Tab"") {
          evt.preventDefault();
          input.value += ""autocomplete"";
        }
      });
    </script>
  </body>
</html>
```

Then execute test.

#### Test code:

```js
describe(""Quirk"", () => {
  beforeEach(() => {
    cy.visit(""http://localhost:8000/cypress-type-quirk.html"");
  });

  Cypress.addChildCommand(""tab"", ($subj) => {
    let eDown = new KeyboardEvent(""keydown"", {key: ""Tab"", bubbles: true});
    $subj[0].dispatchEvent(eDown);

    let log = Cypress.Log.command({name: ""tab""});

    cy.chain()
      .wrap($subj, {log: false})
      .then(() => log.snapshot().end());
  });

  it(""misbehaves"", () => {
    cy
      .get(""input"")
        .tab().should(""have.value"", ""autocomplete"")
        .type(""123"").tab().should(""have.value"", ""autocomplete123autocomplete"")
        // This one fails.
        .type(""456"").tab().should(""have.value"", ""autocomplete123autocomplete456autocomplete"")
  });
});
```

### Additional Info (images, stack traces, etc)

Just to be clear: at the last step, input actually has an invalid value `""autocomplete456123autocompleteautocomplete""` - I can see it in the browser window.

Also, the caret (the blinking text cursor) disappears after `.type(""456"")` is invoked. Not sure how it relates to the issue though.

Here's a screencast of this happening: https://drive.google.com/open?id=0B_Kr8lR7GpI6VDVPeHB4SWQzZm8",bug
244055129,Cypress unable to click an element - scrolls up & down infinitely,"- Operating System:
Max OS X 10.11.6

- Cypress Version:
0.19.4

- Browser Version:
Canary 61

### Is this a Feature or Bug?
Bug

### Current behavior:
When attempting to click a first (or any other I think) element in the table, Cypress would start to scroll it up and down until a timeout happens. Error message is:

> CypressError: Timed out retrying: cy.click() failed because this element is being covered by another element:
> 
> &lt;div style=""position: sticky; top: 60px; left: 0; width: 100%; height: 36px; z-index: 10; background-color: tomato;"">&lt;/div>

### Desired behavior:

First row just gets clicked. Table is positioned correctly from the start and no scrolling/flickering happens.

### How to reproduce:

Save this file:

```html
<!DOCTYPE html>
<!-- saved from url=(0023)http://localhost:8445/# -->
<html>
<head>
    <meta content=""text/html; charset=utf-8"" http-equiv=""Content-Type"">
</head>
<body style=""box-sizing: border-box"">
    <div id=""app"">
        <div style=""position: fixed; top: 0; left: 0; width: 100%; height: 60px; z-index: 10; background-color: red""></div>
        <div style=""position: relative; top: 60px; width: 100%"">
            <div style=""position: absolute; top: 0; width: 100%"">
                <div style=""position: sticky; top: 60px; left: 0; width: 100%; height: 36px; z-index: 10; background-color: tomato;""></div>
                <div style=""margin: 0 20px 30px 15px"">
                    <table>
                        <tbody>
                            <tr>
                                <td>1</td>
                                <td>2</td>
                                <td>3</td>
                                <td>4</td>
                            </tr>
                            <!-- many more rows here -->
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</body>
</html>
```

Just maybe add many more rows, I truncated those for readability. Or use a file I host on Google Drive (link below).

Then serve it:

```bash
$ python -m SimpleHTTPServer
```

Finally, run test:

#### Test code:

```js
describe(""Quirk."", () => {
  beforeEach(() => {
    cy
      .visit(""http://localhost:8000/cypress-quirk.htm"")
      .get(""#app > div > div > div > table > tbody > tr:first-child"")
      // Using force: true fixes this test.
      .click({force: false});
  });

  it(""blah"", () => {
    // Nothing, cypress never gets to this point anyway.
  });
});
```

### Additional Info (images, stack traces, etc)

Video of the behaviour, as well as test HTML file that fails, are here: https://drive.google.com/open?id=0B_Kr8lR7GpI6NFM0ajNwNnd6OGM

Also note that using `{force: true}` fixes this. Not sure why I need that though - first row should never be covered by another element, and in fact it isn't when I open the file in regular Chrome Canary. I verifed that using screenshot captures on ""performance"" tab in dev tools - first row appears well below the positioned `div`'s right from the start, there's no flickering there.",bug
243271425,cypress thinks clipped elements in overflow-y:hidden elements are visible,"Cypress allows `.should('be.visible')` to pass OK on the following:

```html
<div style=""display: block; height: 10px; overflow-y: hidden;"">
  <br>
  <br>
  <div id=""hidden3"">hidden3 pass</div>
</div>
```

This page:
https://docs.cypress.io/guides/core-concepts/interacting-with-elements.html#Visibility
...lists ""overflow: hidden"" but maybe you didn't list the overflow-y property?",bug
242456251,404 error: https://docs.cypress.io/dashboard/overview/projects.html#Set-up-a-Project-to-Record,"Running `cypress run --record` returns:

```
You passed the --record flag but did not provide us your Record Key.

You can pass us your Record Key like this:

  cypress run --record --key <record_key>

You can also set the key as an environment variable with the name CYPRESS_RECORD_KEY.

https://on.cypress.io/how-do-i-record-runs
```

Clicking URL redirects to https://docs.cypress.io/dashboard/overview/projects.html#Set-up-a-Project-to-Record

However, that page returns a 404.
![screen shot 2017-07-12 at 1 25 53 pm](https://user-images.githubusercontent.com/1887486/28130718-af2b9bac-6705-11e7-85eb-cfcdd13f793d.png)
",bug
241986701,cypress desktop app crashes,"<!-- Want a bug fixed quickly? Please provide a repository to reproduce the issue. -->

- Operating System: macOS Sierra 
- Cypress Version: 19.4 (and the one before that)
- Browser Version: all browsers

### Is this a Feature or Bug?
Bug

### Current behavior:
Desktop app crashes very often if I run my test; crashes always if I rerun the same test (eg after making a change to the test and saving it).

### Desired behavior:
No crashing ;-)

### How to reproduce:
See https://drive.google.com/file/d/0BwwTqatWQUO8Nkh3Wm93UkVHdkE/view for a video + the source-code (very basic). 

1. Open Cypres
2. Select the test
3. Run the test
4. Observe the crash

#### Test code:

```javascript
var baseURL = 'https://www.bxswiss.com/'; 

describe('Setup the environment', function () {
  beforeEach(function () { // these command are run before every single test; so before every 'it'
	cy.viewport('macbook-15'); // big screen 
  });


  it('should open homepage1', function () { // simple check to find Heineken with the search function
    cy.visit('https://www.bxswiss.com/'); //open the website
    cy.title().should('include', 'Trading 09:00 – 17:00 Swiss time - BX Swiss') // check if the title is correct
    cy.get('#q').type('Heineken');
    cy.get('.nav-search button').click(); //trigger the search
  });
});
```

### Additional Info (images, stack traces, etc)
![cypress-console](https://user-images.githubusercontent.com/23256875/28062291-b1ba2aba-662d-11e7-84e5-0bc648b489a2.png)

",bug
241730387,Improve cy.select handling of all options having same value,"The current workaround for a `<select>` whose `<option>`s all have the same value seems to be insufficient.

Currently, when all the options have the same value, we set the 'selected' prop on the `<option>`(s) that match. I believe we also need to set the selectedIndex and selectedOptions props on the `<select>` itself.


> @damianocastro commented on July 5, 2017
> 
> I don't think this case is fixed in all cases. I tried this example and always selects the first one when a valid text is selected. The html and test.js are both in the zip. My version is 0.19.4.
> 
> [select.html.zip](https://github.com/cypress-io/cypress/files/1125944/select.html.zip)",bug
241138634,Latest Mochawesome version do not generate files,"### What versions are am I running?
- Operating System: Mac
- Cypress Version: 0.19.4
- Browser Version: 59.0.3071.115

### Is this a Feature or Bug?
There is a bug with latest Mochawesome.

### Current behavior:
The Mochawesome files are not generated.

### Desired behavior:
The Mochawesome files are generated.

### How to reproduce:
Install latest version of Mochawesome and run a cypress test suite.
",bug
241040564,type() expects input type to be lowercase,"<!-- Want a bug fixed quickly? Please provide a repository to reproduce the issue. -->

- Operating System: macOS 10.12.5
- Cypress Version: 0.19.4
- Browser Version: Chrome 59

### Is this a Feature or Bug?

This is a bug.

### Current behavior:

I have a form with an input field `<input type=""PASSWORD"" id=""PASSWORD"" />`. 

I get the error:

```
CypressError: cy.type() can only be called on textarea or :text. Your subject is a: <input autocomplete=""off"" class=""focus"" id=""PASSWORD"" name=""PASSWORD"" onkeypress=""DetectCapsLock()"" type=""PASSWORD"">
```

### Desired behavior:

This is an input element, so I would expect the input to be entered.

### How to reproduce:

Create an input with `type = ""PASSWORD""` (uppercase), and try `type()`.

#### Test code:

```js
describe('Test can do stuff', () => {
  it('logs in', () => {
    cy
      .visit('https://example.com/login.html')
      .get('#USERNAME')
      .type('dvf')
      .get('#PASSWORD')
      .type('my password', {force: true});
  });
});
```


",bug
241022490,cy.click() on React Select v1 component doesn't show the drop down,"<!-- Want a bug fixed quickly? Please provide a repository to reproduce the issue. -->

- Operating System: macOS Sierra
- Cypress Version: 0.19.4
- Browser Version: Electron 53

### Is this a Feature or Bug?

Bug

### Current behavior:

cy.click() on an react select component not showing the dropdown options.

### Desired behavior:

cy.click() on an react select component shows the dropdown options.

### How to reproduce:

A demo repo is created to reproduce the issue.

https://github.com/bencao/react-select-cypress

The test file is located at cypress/integration/react_select_spec.js

#### Test code:

```js
describe('Weird behavior when testing React Select', function() {
  it('fails on Electron 53 and Canary 61, but passes on Chrome 59', function() {
    cy
      .visit('http://jedwatson.github.io/react-select/')
      .get('div.Select-control:first')
        .click()
      .get('.Select-option:contains(Victoria)')
        .click();
  });
});
```

### Additional Info (images, stack traces, etc)

```
$ cypress run                                                                                                       [12:55:58]

Started video recording: /Users/zcao/Documents/workspace/react-select-cypress/cypress/videos/79qp6.mp4

  (Tests Starting)


  Weird behavior when testing React Select
    1) fails on Electron 53 and Canary 61, but passes on Chrome 59


  0 passing (6s)
  1 failing

  1) Weird behavior when testing React Select fails on Electron 53 and Canary 61, but passes on Chrome 59:
     CypressError: Timed out retrying: Expected to find element: '.Select-option:contains(Victoria)', but never found it.
      at Object.cypressErr (http://jedwatson.github.io/__cypress/static/js/cypress.js:5729:15)
      at Object.throwErr (http://jedwatson.github.io/__cypress/static/js/cypress.js:5694:22)
      at Object.throwErrByPath (http://jedwatson.github.io/__cypress/static/js/cypress.js:5721:21)
      at $Cy._retry (http://jedwatson.github.io/__cypress/static/js/cypress.js:12954:26)
      at http://jedwatson.github.io/__cypress/static/js/cypress.js:8122:28
      at tryCatcher (http://jedwatson.github.io/__cypress/static/js/vendor.js:46490:31)
      at Promise._settlePromiseFromHandler (http://jedwatson.github.io/__cypress/static/js/vendor.js:44625:31)
      at Promise._settlePromiseAt (http://jedwatson.github.io/__cypress/static/js/vendor.js:44701:18)
      at Promise._settlePromises (http://jedwatson.github.io/__cypress/static/js/vendor.js:44817:14)
      at Async._drainQueue (http://jedwatson.github.io/__cypress/static/js/vendor.js:42184:16)
      at Async._drainQueues (http://jedwatson.github.io/__cypress/static/js/vendor.js:42194:10)
      at MutationObserver.Async.drainQueues (http://jedwatson.github.io/__cypress/static/js/vendor.js:42022:14)




  (Tests Finished)

  - Tests:           1
  - Passes:          0
  - Failures:        1
  - Pending:         0
  - Duration:        5 seconds
  - Screenshots:     1
  - Video Recorded:  true
  - Cypress Version: 0.19.4


  (Screenshots)

  - /Users/zcao/Documents/workspace/react-select-cypress/cypress/screenshots/Weird behavior when testing React Select -- fails on Electron 53 and Canary 61 but passes on Chrome 59.png (1280x720)


  (Video)

  - Started processing:   Compressing to 32 CRF
  - Finished processing:  /Users/zcao/Documents/workspace/react-select-cypress/cypress/videos/79qp6.mp4 (0 seconds)


  (All Done)

FAIL: 1
```",bug
239799136,Active test file in desktop GUI loses style when a separate file is changed,"When running a spec file, the file shows as active (highlighted green with bullseye icon). If you change a different spec file (add/delete/rename), the highlighting is removed even though the spec file is still active.",bug
237592328,Problem with Google Hosted lirbraries when testing application.,"I have an application that is using Hosted library e.g. https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js.

It just won't load in the runner for me!
I get a time out on it and other hosted libraries built into the app.

### Current behavior:
I created a simple sanity test:

```js
describe('Sanity Check', function(){
  it('Make sure its oodleplex', function(){
    cy.visit('https://internal.oodleplex.com')
    cy.title().should('include', 'oodleplex')
  })
})
```

When I run the test from the Runner I get:

> Uncaught Error: Bootstrap's JavaScript requires jQuery

I'm getting a timeout (302) on the loading of https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js.

> GET https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js net::ERR_TIMED_OUT

### Expected behavior:

I'm expecting to be able to verify my page loads :(

### How to reproduce the current behavior:

As above.....

### Additional Info (images, notes, stack traces, etc)

* Operating System: Ubuntu 16.10
* Cypress Version: 0.19.4 (Runner) 0.13.1 (CLI)
* Browser/Browser Version: Chrome 59.0.3071.104

",bug
237525036,Cypress hangs if spec file is outside the integration folder,"## Current behavior:

I made a repo with the setup: https://github.com/bahmutov/test-moved-cypress-spec

I put the spec file `a-spec.js` NOT in the `cypress/integration` folder (which is empty) but in the root of the repo. When running the test from the command line Cypress hangs

command
```json
{
  ""scripts"": {
    ""test"": ""cypress run --spec a-spec.js""
  }
}
```
```
$ npm test

> test-moved-cypress-spec@1.0.0 test /Users/irinakous/git/test-cypress-module
> cypress run --spec a-spec.js

⧖ Verifying Cypress executable...
! Installed version (0.19.4) does not match package version (0.20.0-dev.20170620.121030)

✓ Successfully verified Cypress executable

Started video recording: /Users/irinakous/git/test-cypress-module/cypress/videos/jfmrg.mp4

  (Tests Starting)
^C
```

I can show the browser window with the UI error

```sh
$ ./node_modules/cypress/dist/Cypress.app/Contents/MacOS/Cypress --project $PWD --spec a-spec.js --show-headless-gui
```

![screen shot 2017-06-21 at 8 52 17 am](https://user-images.githubusercontent.com/2212006/27384970-f2c43c5a-565e-11e7-8c9c-8e97f6a3fa5a.png)

First, the spec file fails to load (I would expect that) `http://localhost:58231/__cypress/a-spec.js 404 (Not Found)`

The JavaScript error
```
Unhandled rejection TypeError: Cannot read property 'options' of null
    at $Cypress.window.$Cypress.$Cypress.initialize (http://localhost:58231/__cypress/static/js/cypress.js:40:19)
    at Object.run (http://localhost:58231/__cypress/runner/runner.js:63116:12)
    at http://localhost:58231/__cypress/runner/runner.js:62179:32
```

In the expression `this.mocha` and `this.runner` are null
```js
$Cypress.prototype.initialize = function(specWindow, $remoteIframe) {
        this.mocha.options(this.runner);
```

## Expected behavior:

- [ ] the error should be shown in the UI in this case, not just in the DevTools console.
- [ ] the error should be shown in the terminal when running in the headless mode and the run should exit with error code

## How to reproduce the current behavior:

Clone the repo git@github.com:bahmutov/test-moved-cypress-spec.git and execute `npm it` to recreate the run. Use the command above to show the GUI during the run

### Test code:

```js
describe('cypress example', () => {
  it('works', () => {
    expect(true).to.be.true()
  })
})
```

### Additional Info (images, notes, stack traces, etc)

* Operating System: Mac
* Cypress Version: 0.19.4
* Browser/Browser Version: built-in electron browser

",bug
236453832,Stubbed XHR that are triggered between 2 tests are not stubbed,"## Current behavior:
- In test 1, I stub some routes
- In test 1, I `cy.visit()` my application that triggers some XHR (some stubbed and some not stubbed), I check what I need and I don't wait for all XHR to end
- In test 2, I `cy.visit()` my application, the page is reloaded but *it randomly happens* that some requests triggered by the previous test ""bleed"" in this test

My problem : the XHR that are stubbed in test 1, are not stubbed when bleeding in test 2

## Expected behavior:
Either XHR requests should not bleed in next test or at least they should remain stubbed

## Additional Info (images, notes, stack traces, etc)
When requests are bleeding in another test, it looks like this (test block appears before `before each` block) :
<img width=""503"" alt=""capture d ecran 2017-06-15 a 18 37 33"" src=""https://user-images.githubusercontent.com/7996898/27223658-ac6fb2fa-5291-11e7-8f91-1e9cffc668f3.png"">

Bleeding requests usually are not a problem, since I `cy.visit()` at the beginning of each test, they don't interfere with the test. But some XHR should not reach my server on CI environment, that's why I stub them. When they reach the server on CI, they cause an error `500`, and we configured our CI to make the build fail when there is any error on server. That's why I need them to stay stubbed.

From what I understood of our discussion on gitter with @brian-mann :
 
- it could be a race condition where the XHR is created post teardown, after cypress unrolls all the stubs, but before the page is unloaded (before next `cy.visit`)
- cypress should remove the application entirely before running the end of test teardown (that would prevent any javascript from running, execution would end), then unroll things and prepare for the next test
- enforcing teardown won't work for users that don't `cy.visit` between each test
- cypress should not teardown the app IF its the last test, so you can visually inspect it post test

* Operating System: Mac OS 10.11
* Cypress Version: 0.19.2
* Browser/Browser Version: Chrome 59
",bug
236191224,Cypress' type() not compatible with react 15.6's onChange?,"* Operating System: Mac os X and Linux
* Cypress Version: 0.19.2 (app) and 0.13.1 (cli)
* Browser/Browser Version: Chrome 58

### Are you requesting a feature or reporting a bug?
Bug

Our cypress tests started to fail when we bumped react from 15.5.4 to 15.6.1. We debugged the problem and came to the conclusion that `onChange` doesn't fire as it should when the input field is being manipulated using `.type('some text')`.

cli + headless chrome: broken
app + real chrome: broken
user interacting with the browser: working

React component:
```jsx
<input
    className=""input-text""
    onChange={() => {
        // this will executed with react 15.5.4, but not with 15.6.1
    }}
    value={this.props.value}
    type=""text""
    data-stock-url />
```

and this is how we are manipulating it
```javascript
cy.visit('https://...')
    .get('[data-stock-url]').type('https://google.com/stock/123')
```

onChange doesn't fire anymore. The problem went away when we downgraded back to 15.5.4. 

Not sure if related, but [react-dom's CHANGELOG](https://github.com/facebook/react/blob/master/CHANGELOG.md) says:
- Fix issues with onChange not firing properly for some inputs. (@jquense in [#8575](https://github.com/facebook/react/pull/8575))

which is suspicious. Is cypress' `type()` relying on an implementation detail that is not true anymore?",bug
236017562,"Brotli encoded requests fail, strip unsupported encoding request headers","Recently a competitor to `gzip` has emerged and webservers which send these response headers will fail when going through the Cypress proxy.

```
Content-Encoding: br
```

The quick (and temporary) fix for this is to simply strip out `br` from the `Accept-Encoding` request header. In later version we can fully support `br` encoding.",bug
233982941,Errors thrown in test get swallowed when preceded by a Cypress command,"Consider the following test code:

```javascript
it('has the right title', function () {
  cy.get('h1').contains(this.content.title)
})
```

This should fail (and does fail) if `this.content` is not defined, or if any runtime exception is thrown after a Cypress command has been enqueued. The problem is that the error displayed is `Cypress still has commands in its queue`. That's true, but it doesn't indicate the source of the problem, the true error, which is something like `Cannot read property 'bar' of undefined`. 

Cypress should display the error if one causes the test to end early with commands in the queue.

Here's a more contrived (but easier to reproduce) example:

```javascript
it('needs a better error display ;)', function () {
  cy.wrap({})
  this.foo.bar
})
```",bug
233807587,Hovering over test's steps break website visual,"* Operating System: Linux Mint 17
* Cypress Version: 0.19.2
* Browser/Browser Version: Google Chrome 60.0.3112.10 (Official Build) dev (64-bit)

### Are you requesting a feature or reporting a bug?
bug

### Current behavior:
When you hover over test's steps it breaks the website visual

### Expected behavior:
It will look same as original page

### How to reproduce the current behavior:
To replicate this bug:

    git clone git@github.com:ddeath/cypress-css-bug.git
    cd cypress-css-bug
    npm install
    ./node_modules/.bin/http-server

Then open cypress and run test suite.

* all 2 tests should pass
* you should see nice 10 icons from bootstrap
* click on second test to see steps, you should see 10 steps
* hover over one of them
* now the nice icons are gone

#### Test code:

```js
describe('Test css', () => {
  it('Should be able to visit index.html', () => {
    cy.visit('http://127.0.0.1:8081/');
  });

  it('Should be able to get all ten icons', () => {
    cy.get('span.glyphicon-info-sign');
    cy.get('span.glyphicon-envelope');
    cy.get('span.glyphicon-off');
    cy.get('span.glyphicon-film');
    cy.get('span.glyphicon-user');
    cy.get('span.glyphicon-print');
    cy.get('span.glyphicon-camera');
    cy.get('span.glyphicon-tint');
    cy.get('span.glyphicon-fire');
    cy.get('span.glyphicon-leaf');
  });
});
```

### Additional Info (images, notes, stack traces, etc)

",bug
232926019,Same project is initialized multiple times,"* Operating System: Mac
* Cypress Version: 0.19.2

### Are you requesting a feature or reporting a bug?

bug

### Current behavior:

1. Create an empty folder, for example `~/test-home-project`
2. Open Cypress desktop app `cypress open`
3. Add project
4. Browser to home folder and add `~/test-home-project`
5. App shows a message and creates example spec files, adds `cypress` folder and `cypress.json` file

<img width=""800"" alt=""screen shot 2017-06-01 at 11 47 28 am"" src=""https://cloud.githubusercontent.com/assets/2212006/26688388/7ea0ee20-46c0-11e7-8747-52480f843177.png"">

6. Click ""Back to projects""
7. Click on the same project again
8. The ""To help you get started..."" dialog is shown again.

### Expected behavior:

I do not want to see the same dialog every time new folder is opened",bug
232395468,"When a spy or stub has not been called, the error should be grammatically correct","* Cypress Version: 0.19.2

### Are you requesting a feature or reporting a bug?
Bug

### Current behavior:
With this test code:

```coffeescript
it ""stubs"", ->
  obj = {
    foo: ->
  }

  cy.stub(obj, ""foo"")

  expect(obj.foo).to.be.calledWith(""bar"")
```

We get this error message:

![screen shot 2017-05-30 at 6 00 23 pm](https://cloud.githubusercontent.com/assets/1268976/26606964/163f9fde-4562-11e7-82d0-faebeac596e2.png)


### Expected behavior:

The error should say:

```
Expected foo to have been called with arguments ""bar"".

foo was never called.
```",bug
232284952,scrollIntoView() does not work,"* Operating System: Linux Mint 18
* Cypress Version: 0.19.2
* Browser/Browser Version: Chrome 60, Electron 53

### Are you requesting a feature or reporting a bug?
Bug

### Current behavior:
Test are failing because the code does not scroll into the element

### Expected behavior:
Test are passing because it scrolls into the element

### How to reproduce the current behavior:
clone [`https://github.com/ddeath/cypress-scroll-bug`](https://github.com/ddeath/cypress-scroll-bug) and run the tests

#### Test code:

```js
describe('Broken Sink', function(){
  before(() => {
    cy.visit('/');
  });

  it('Should scroll in cli', () => {
    cy.get('.selector').click();
    cy.get('.item-2').click();

    cy.get('#footer').then(function($btn){
      $btn.get(0).scrollIntoView();
    }).get('.selector').click()
      .get('.item-3').click();
  });
})
```

### Additional Info (images, notes, stack traces, etc)

",bug
231631067,cy.exec() fails when running Cypress in docker,"* Operating System: Mac OS Sierra 10.12.4
* Cypress Version: 0.19.2
* Browser/Browser Version: 

### Are you requesting a feature or reporting a bug?
Bug

### Current behavior:
In a Docker environment when running `cy.exec('echo test')` with a multi word command the following error is produced

```
> ""spawn echo test ENOENT""
    at Object.cypressErr (http://localhost:44506/__cypress/static/js/cypress.js:5723:15)
    at Object.throwErr (http://localhost:44506/__cypress/static/js/cypress.js:5688:22)
    at Object.throwErrByPath (http://localhost:44506/__cypress/static/js/cypress.js:5715:21)
    at http://localhost:44506/__cypress/static/js/cypress.js:10251:33
    at tryCatcher (http://localhost:44506/__cypress/static/js/vendor.js:46486:31)
    at Promise._settlePromiseFromHandler (http://localhost:44506/__cypress/static/js/vendor.js:44621:31)
    at Promise._settlePromiseAt (http://localhost:44506/__cypress/static/js/vendor.js:44697:18)
    at Promise._settlePromises (http://localhost:44506/__cypress/static/js/vendor.js:44813:14)
    at Async._drainQueue (http://localhost:44506/__cypress/static/js/vendor.js:42180:16)
    at Async._drainQueues (http://localhost:44506/__cypress/static/js/vendor.js:42190:10)
    at MutationObserver.Async.drainQueues (http://localhost:44506/__cypress/static/js/vendor.js:42018:14)]]></failure>
    </testcase>
  </testsuite>
</testsuites>
```

while `cy.exec('echo')` or `cy.exec('ls')` do not fail.

",bug
231087332,the XHR server is unavailable or missing,"<!--
Thanks for opening an issue!

- Your best chance of getting a bug looked at quickly is to provide a repository with a reproducible bug that can be cloned and run.
- If you need general advice, join our chat: https://gitter.im/cypress-io/cypress
-->

* Operating System: mac osx
* Cypress Version: 0.19.2
* Browser/Browser Version: chrome/58

### Are you requesting a feature or reporting a bug?
reporting a bug

### Current behavior:
using `cy.server()` inside a command being called from `before all` is throwing an error

### Expected behavior:
should work as documented

### How to reproduce the current behavior:
run the code i've written done in the ""test code"" section

#### Test code:

```js
describe('e2e testing', () => {
  before(() => {
    cy.deleteUser()
  })
  it('signup and click', () => {
    cy
      .server()
      .route(/\//).as('signup')
      .signup()
      .wait('@signup')
      .get('side-bar play-button').click()
  })
})

Cypress.addParentCommand('deleteUser', (username, password) => {
  const log = Cypress.Log.command({
    name: 'deleteUser',
    message: [username, password],
    consoleProps: () => ({
      username,
      password,
    }),
  })

  cy
    .server()
    .route(/\//).as('login')
    .login(username, password) // login as the test user
    .wait('@login')
    .request('/api/users/some-path-to-nowhere') // get the test user entityId
    .then(res => {
      // some business logic testing
    })
})
```

### Additional Info (images, notes, stack traces, etc)
```
 CypressError: The XHR server is unavailable or missing. This should never happen and likely is a bug. Open an issue if you see this message.
      at Object.cypressErr (https://zengaming.com/__cypress/static/js/cypress.js:5723:15)
      at Object.throwErr (https://zengaming.com/__cypress/static/js/cypress.js:5688:22)
      at Object.throwErrByPath (https://zengaming.com/__cypress/static/js/cypress.js:5715:21)
      at $Cy.unavailableErr (https://zengaming.com/__cypress/static/js/cypress.js:12621:28)
      at $Cy.getXhrServer (https://zengaming.com/__cypress/static/js/cypress.js:12691:75)
      at $Cy.server (https://zengaming.com/__cypress/static/js/cypress.js:12850:21)
      at https://zengaming.com/__cypress/static/js/cypress.js:1520:37
      at tryCatcher (https://zengaming.com/__cypress/static/js/vendor.js:46486:31)
      at Promise._settlePromiseFromHandler (https://zengaming.com/__cypress/static/js/vendor.js:44621:31)
      at Promise._settlePromiseAt (https://zengaming.com/__cypress/static/js/vendor.js:44697:18)
      at Promise._settlePromises (https://zengaming.com/__cypress/static/js/vendor.js:44813:14)
      at Async._drainQueue (https://zengaming.com/__cypress/static/js/vendor.js:42180:16)
      at Async._drainQueues (https://zengaming.com/__cypress/static/js/vendor.js:42190:10)
      at MutationObserver.Async.drainQueues (https://zengaming.com/__cypress/static/js/vendor.js:42018:14
```
",bug
230055379,Starting browser in GUI does not work if the current project's server is no longer running,"* Operating System: OS X
* Cypress Version: 0.19.2
* Browser/Browser Version: Chrome 58.0.3029.110

### Are you requesting a feature or reporting a bug?
Bug 🐛 

### Current behavior:
I have my `baseUrl` set in my `cypress.json` as a locally running server: `http://localhost:2222`. If I click into a project with my project's server running, then kill my project's server, then try to run a test, the GUI says ""Opening Chrome"" with the spinning icon, but Chrome never opens.

### Expected behavior:

- If the server at my `baseUrl` is no longer running when I click to run a test or All tests - I should see an error saying that Cypress could not start. 


### How to reproduce the current behavior:
- Set `baseUrl` in `cypress.json` to a local server.
- Run the server
- Click into the project
- Kill the server
- Click on a test 

### Additional Info (images, notes, stack traces, etc)

**What I See**
<img width=""912"" alt=""screen shot 2017-05-19 at 2 11 32 pm"" src=""https://cloud.githubusercontent.com/assets/1271364/26261749/6863747c-3ca0-11e7-9971-98a9fc8051ab.png"">


**What I Should See**
<img width=""912"" alt=""screen shot 2017-05-19 at 2 31 36 pm"" src=""https://cloud.githubusercontent.com/assets/1271364/26261754/6d146f58-3ca0-11e7-8fc9-62422eb277a4.png"">

",bug
229684133,cy.type() into email input gives error,"* Operating System: OSX
* Cypress Version: 0.19.2

### Are you requesting a feature or reporting a bug?
Bug

### Current behavior:
The Kitchen Sink currently fails on `cy.type()` into email input with this error:

```
Error: Failed to execute 'setSelectionRange' on 'HTMLInputElement': 
The input element's type ('email') does not support selection.
```

**Suspect it is related to Chrome Version 58.0.3029.110**

### How to reproduce the current behavior:

#### Test code:

*Kitchen Sink Example*
```js
cy.get('.action-email').type('fake@email.com').clear()
```

```js
cy.type('{leftarrow}{rightarrow}{uparrow}{downarrow}{del}{selectall}{backspace}')
```

### Additional Info (images, notes, stack traces, etc)

<img width=""451"" alt=""screen shot 2017-05-18 at 9 50 03 am"" src=""https://cloud.githubusercontent.com/assets/1271364/26205754/b8ec03aa-3bb0-11e7-94af-b2bc548ca271.png"">
",bug
229474474,cy.type() does not append text correctly in certain circumstances,"Broken historically:

* Regular inputs that have the value set in html
* Number inputs that have the value set in html
* Email inputs that have the value set in html

Broken by a recent version of Chrome:

* Number inputs that have the value set by `.invoke(""val"")`
* Email inputs that have the value set by `.invoke(""val"")`",bug
228091305,Uncaught TypeError: this.removeAttribute is not a function,"<!--
Thanks for opening an issue!

- Your best chance of getting a bug looked at quickly is to provide a repository with a reproducible bug that can be cloned and run.
- If you need general advice, join our chat: https://gitter.im/cypress-io/cypress
-->

* Operating System: MacOS Sierra 10.12.4 (16E195)
* Cypress Version: 0.19.2 (0.19.2)

### Are you requesting a feature or reporting a bug?
Bug

### Current behavior:
`cy.visit('https://release.nicheacademy.com/v2/demo')` produces `Uncaught TypeError: this.removeAttribute is not a function.`
 
It's being thrown from inside a minified 3rd party js file we're using so I'm not sure exactly what's going on. The error doesn't show up in the console when the page is loaded outside of the Cypress test environment.

### Expected behavior:
no error

### Additional Info (images, notes, stack traces, etc)
From Loren Norman @lorennorman:
@jared-niche it seems that zone.js is instrumenting XHRs the same way we are... which is conflicting we know that when we get around to rewriting our networking layer, this won't be a problem anymore but that work isn't scheduled as yet there may be a workaround in the short-term, but we haven't isolated one yet
",bug
226631250,Unexpected behavior when editing cypress.json while running tests.,"* Operating System: OSX
* Cypress Version: 0.19.2

### Are you requesting a feature or reporting a bug?
Bug

### Current behavior:
Since version 0.19.2: When running tests in Cypress (in Chrome 58), if I edit the `cypress.json` file and refresh my running tests, I get the dead Chrome page as shown below.

<img width=""925"" alt=""screen shot 2017-05-05 at 12 47 49 pm"" src=""https://cloud.githubusercontent.com/assets/1271364/25755490/39e78e4a-3191-11e7-8e79-91155843fbea.png"">

### Expected behavior:
Before 0.19.2, when I edited my `cypress.json` file, Cypress would close my current browser running tests. To be honest, this was never really an ideal solution either, but it did save me from having to manually go out and Stop my browser in Cypress and restart it. 
",bug
225171574,cy.clear does not work on number inputs,"* Operating System: N/A
* Cypress Version: 0.19.2

### Are you requesting a feature or reporting a bug?
Bug

### Current behavior:
Using `cy.clear()` on a number input does not clear the input and throws an error

### How to reproduce the current behavior:


#### Test code:

```js
cy.get(""input[type='number']"").type(""500"").clear()
```

### Additional Info (images, notes, stack traces, etc)

*Error: Failed to execute 'setSelectionRange' on 'HTMLInputElement': The input element's type ('number') does not support selection.*

<img width=""465"" alt=""screen shot 2017-04-28 at 3 22 29 pm"" src=""https://cloud.githubusercontent.com/assets/1271364/25544033/c5867fee-2c26-11e7-8a3c-c37a93c24ffe.png"">

---

A current workaround is to replace `cy.clear` with `cy.type(""{ctrl}a{backspace}"")`",bug
216190358,state.json ends up empty somehow,"Somehow, the state.json file is ending up empty, (subsequently causing #473). Likely, a write is being interrupted by a read or another write or the process terminates in the middle of a write, causing the file to be emptied. Need to look into best practices for file reading/writing, including whether using createReadStream/createWriteStream is sufficient or if we need to implement a locking mechanism or a retry mechanism.",bug
216189126,Fix crash due to state.json being empty,"Our fork of `conf` has a bug in regards to how it handles (or doesn't handle) JSON parsing errors, so if the [state.json file ends up empty somehow](https://github.com/cypress-io/cypress/issues/474), it will throw and crash the entire process. Need to add proper error handling.
",bug
216104956,stubbing a XHR call using a fixture file with null content raises an error,"### Current behavior:
when stubbing a XHR call using a fixture file with `null` content an error is raised

### Expected behavior:
`JSON.parse('null')` returns `null`, no error is raised

### How to reproduce the current behavior:

```js
cy.server().route({
  method: 'GET',
  url: 'some/url',
  response: 'fixture:stub_file.json'
})
```
where `stub_file.json` is a file containing the string 
```null```

### Additional Info (images, notes, stack traces, etc)
Error trace
```
Error:        CypressError: TypeError: First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.
    at fromObject (buffer.js:259:9)
    at Function.Buffer.from (buffer.js:96:10)
    at new Buffer (buffer.js:75:17)
    at Object.<anonymous> (/Applications/Cypress.app/Contents/Resources/app/index.js:1804:21)
    at Object.tryCatcher (/Applications/Cypress.app/Contents/Resources/app/node_modules/bluebird/js/release/util.js:16:23)
    at Promise._settlePromiseFromHandler (/Applications/Cypress.app/Contents/Resources/app/node_modules/bluebird/js/release/promise.js:510:31)
    at Promise._settlePromise (/Applications/Cypress.app/Contents/Resources/app/node_modules/bluebird/js/release/promise.js:567:18)
    at Promise._settlePromise0 (/Applications/Cypress.app/Contents/Resources/app/node_modules/bluebird/js/release/promise.js:612:10)
    at Promise._settlePromises (/Applications/Cypress.app/Contents/Resources/app/node_modules/bluebird/js/release/promise.js:691:18)
    at Promise._fulfill (/Applications/Cypress.app/Contents/Resources/app/node_modules/bluebird/js/release/promise.js:636:18)
    at Promise._resolveCallback (/Applications/Cypress.app/Contents/Resources/app/node_modules/bluebird/js/release/promise.js:431:57)
    at Promise._settlePromiseFromHandler (/Applications/Cypress.app/Contents/Resources/app/node_modules/bluebird/js/release/promise.js:522:17)
    at Promise._settlePromise (/Applications/Cypress.app/Contents/Resources/app/node_modules/bluebird/js/release/promise.js:567:18)
    at Promise._settlePromise0 (/Applications/Cypress.app/Contents/Resources/app/node_modules/bluebird/js/release/promise.js:612:10)
    at Promise._settlePromises (/Applications/Cypress.app/Contents/Resources/app/node_modules/bluebird/js/release/promise.js:691:18)
    at Promise._fulfill (/Applications/Cypress.app/Contents/Resources/app/node_modules/bluebird/js/release/promise.js:636:18)
    at Promise._settlePromise (/Applications/Cypress.app/Contents/Resources/app/node_modules/bluebird/js/release/promise.js:580:21)
    at Promise._settlePromise0 (/Applications/Cypress.app/Contents/Resources/app/node_modules/bluebird/js/release/promise.js:612:10)
    at Promise._settlePromises (/Applications/Cypress.app/Contents/Resources/app/node_modules/bluebird/js/release/promise.js:691:18)
    at Promise._fulfill (/Applications/Cypress.app/Contents/Resources/app/node_modules/bluebird/js/release/promise.js:636:18)
    at Promise._resolveCallback (/Applications/Cypress.app/Contents/Resources/app/node_modules/bluebird/js/release/promise.js:431:57)
    at Promise._settlePromiseFromHandler (/Applications/Cypress.app/Contents/Resources/app/node_modules/bluebird/js/release/promise.js:522:17)
    at Promise._settlePromise (/Applications/Cypress.app/Contents/Resources/app/node_modules/bluebird/js/release/promise.js:567:18)
    at Promise._settlePromise0 (/Applications/Cypress.app/Contents/Resources/app/node_modules/bluebird/js/release/promise.js:612:10)
    at Promise._settlePromises (/Applications/Cypress.app/Contents/Resources/app/node_modules/bluebird/js/release/promise.js:691:18)
    at Promise._fulfill (/Applications/Cypress.app/Contents/Resources/app/node_modules/bluebird/js/release/promise.js:636:18)
    at Promise._settlePromise (/Applications/Cypress.app/Contents/Resources/app/node_modules/bluebird/js/release/promise.js:580:21)
    at Promise._settlePromise0 (/Applications/Cypress.app/Contents/Resources/app/node_modules/bluebird/js/release/promise.js:612:10)
    at Promise._settlePromises (/Applications/Cypress.app/Contents/Resources/app/node_modules/bluebird/js/release/promise.js:691:18)
    at Promise._fulfill (/Applications/Cypress.app/Contents/Resources/app/node_modules/bluebird/js/release/promise.js:636:18)
    at Promise._resolveCallback (/Applications/Cypress.app/Contents/Resources/app/node_modules/bluebird/js/release/promise.js:431:57)
    at Promise._settlePromiseFromHandler (/Applications/Cypress.app/Contents/Resources/app/node_modules/bluebird/js/release/promise.js:522:17)
    at Promise._settlePromise (/Applications/Cypress.app/Contents/Resources/app/node_modules/bluebird/js/release/promise.js:567:18)
    at Promise._settlePromise0 (/Applications/Cypress.app/Contents/Resources/app/node_modules/bluebird/js/release/promise.js:612:10)
    at Promise._settlePromises (/Applications/Cypress.app/Contents/Resources/app/node_modules/bluebird/js/release/promise.js:691:18)
    at Promise._fulfill (/Applications/Cypress.app/Contents/Resources/app/node_modules/bluebird/js/release/promise.js:636:18)
    at Promise._resolveCallback (/Applications/Cypress.app/Contents/Resources/app/node_modules/bluebird/js/release/promise.js:431:57)
    at Promise._settlePromiseFromHandler (/Applications/Cypress.app/Contents/Resources/app/node_modules/bluebird/js/release/promise.js:522:17)
    at Promise._settlePromise (/Applications/Cypress.app/Contents/Resources/app/node_modules/bluebird/js/release/promise.js:567:18)
    at Promise._settlePromise0 (/Applications/Cypress.app/Contents/Resources/app/node_modules/bluebird/js/release/promise.js:612:10)
    at Promise._settlePromises (/Applications/Cypress.app/Contents/Resources/app/node_modules/bluebird/js/release/promise.js:691:18)
    at Promise._fulfill (/Applications/Cypress.app/Contents/Resources/app/node_modules/bluebird/js/release/promise.js:636:18)
    at /Applications/Cypress.app/Contents/Resources/app/node_modules/bluebird/js/release/nodeback.js:42:21
    at /Applications/Cypress.app/Contents/Resources/app/node_modules/graceful-fs/graceful-fs.js:78:16
    at tryToString (fs.js:455:3)
    at FSReqWrap.readFileAfterClose [as oncomplete] (fs.js:442:12)
```

* Operating System: OSX Sierra
* Cypress Version: 0.19.1
",bug
213433712,"Cypress will fail wit urls with a domain in the form of ""*.local*""","If you try to run Cypress having set up the baseUrl as something like `something.localhost` or `something.localsite` it will not run and instead it will bring up a browser screen with a grey background, no command log window",bug
213427696,Setting fixturesFolder to false throws error that prevents server from starting,"In a new project with the following `cypress.json`:

```
{
  ""fixturesFolder"": false
}
```

![fixturesFolder false error screenshot](https://cloud.githubusercontent.com/assets/1157043/23809593/38fd8898-059c-11e7-9f6c-9b89dcd33ca3.png)
",bug
212511421,Fix file bundling when `watchForFileChanges: false`,"When `watchForFileChanges` is false, the javascript bundles don't get updated when a source file changes. We need to still watch the files when `watchForFileChanges: false`, just not tell the runner to re-run on changes.",bug
209266627,File watching is broken when integrationFolder is not the default,"If the `integrationFolder` is configured to be something other than the default of `integration`, any changes to spec files will not cause a `watched:file:changed` event to be emitted through the web socket.

I think this has to do with the runner still using the default `integration` for the path of the file.

Note that the URL says `tests/integration/smoke_spec.js` even though the `integrationFolder has been set to `e2e`.

![screen shot 2017-02-21 at 3 39 45 pm](https://cloud.githubusercontent.com/assets/1157043/23184063/3b9f3d9c-f84c-11e6-8efa-677a5467a2c3.png)
",bug
206780908,Autorun after file change doesn't work on OSX,"When saving the test file, the test should rerun. However, it isn't even rebuilding my JS files, so any change such as adding a `.only` isn't reflected in the UI. I have to restart Cypress to see my JS changes.

This is some kind of regression bug we discussed on Gitter which I do not understand totally:
https://gitter.im/cypress-io/cypress?at=5898dc426018ccd6527b1ccd",bug
205715252,`cy.readFile()` in `example_spec.js` fails on non-existing file,"**Description**
When running the `example_spec.js` after adding a project in the GUI, the `cy.readFile()` tests fails on a file that is not added by 'adding the project'.

**Steps To Reproduce**
- [ ] Add a project to the GUI tool
- [ ] Click the `example_spec.js` test to run the just added tests
- [ ] See the `cy.readFile()` fail.

**Additional Info**
https://www.dropbox.com/s/8uye4kx0owbrnia/Screenshot%202017-02-06%2022.21.20.png?dl=0

```
Error:      CypressError: Timed out retrying: cy.readFile(""app/commands/actions.html"") failed because the file does not exist at the following path:

/Volumes/Projects/.../project-root/app/commands/actions.html
```

https://github.com/cypress-io/cypress-example-kitchensink/blob/1c9ba60a9ec2d1e0486eae738ebd857d73f240da/cypress/integration/example_spec.js#L1111",bug
204096461,When the browser is closed or a spec is changed we get a `document.domain` error,"This is a regression caused by #382.

Internally we clear the current domain state when the browser is closed / spec is closed, and are not properly resetting it.

When the new spec file opens the domain is incorrectly assumed to be `localhost`.",bug
202154270,driver.Cookies.log is not a function,"Upon opening the runner to run some tests on a spec file, I encountered this error:

```
Uncaught TypeError: driver.Cookies.log is not a function
```

Call Stack originates from [Cypress Runner](https://github.com/cypress-io/cypress-core-runner). Am unable to reproduce reliably. 

<img width=""744"" alt=""screen shot 2017-01-20 at 9 26 29 am"" src=""https://cloud.githubusercontent.com/assets/1271364/22152908/f12e5f08-def2-11e6-96c7-c0ccddfea922.png"">
<img width=""660"" alt=""screen shot 2017-01-20 at 9 26 51 am"" src=""https://cloud.githubusercontent.com/assets/1271364/22152910/f2ed6bcc-def2-11e6-9e67-c305d95e427a.png"">
",bug
199342812,uninstalling last used browser causes GUI to hang,"Background:

* I had been using cypress, started using it with Chrome Canary (to distinguish it in the task switcher)
* I later uninstalled Canary
* then opening the Cypress app and selecting the project displayed an endless spinner
* reinstalling Canary allowed the GUI to load the project

I see there is a dropdown in the GUI for which browser to use, with the last used pre-selected, so maybe the way the selected browser is determined can account for this case.

-----

`CYPRESS_DEBUG=true /Applications/Cypress.app/Contents/MacOS/Cypress`

```
Message: Cannot read property 'name' of undefined
Project.Project.setChosenBrowser in file:///Applications/Cypress.app/Contents/Resources/app/node_modules/@cypress/core-desktop-gui/dist/app.js:64790

info: sending ipc data type=gui:error, id=0.5514602925249226, data=null
```",bug
198158920,Cannot select item from dropdown list with optgroups,"**Description**

I cannot select an item from a list when the list uses optgroups to separate groups of items.

**Steps To Reproduce**

I have a page 'index.html' with a dropdown list called 'cars' with two optgroups:
```
<!DOCTYPE html>
<html>
  <body>
    <select name=""cars"">
      <optgroup label=""Swedish Cars"">
        <option value=""volvo"">Volvo</option>
        <option value=""saab"">Saab</option>
      </optgroup>
      <optgroup label=""German Cars"">
        <option value=""mercedes"">Mercedes</option>
        <option value=""audi"">Audi</option>
      </optgroup>
    </select>
  </body>
</html>
```
When I try to select 'Volvo' I as follows:
```
cy
      .visit('/index.html')
      .get('[name=""cars""]').select('Volvo')
```

I get an error: 
```
Command:     select
runner.js:62350 Applied to:  <select name=​""cars"">​…​</select>​
runner.js:62350 Error:       CypressError: Timed out retrying: cy.select() failed because it could not find a single <option> with value or text matching: 'Volvo'
```
When I remove the optgroups, the selection succeeds.

I would expect I don't need any special syntax to select an item from a dropdown list which has optgroups.",bug
198023708,Chaining is broken when reusing same options object in `.type()` command,"Here is a good one (Cypress 0.18.4)

This works
```js
const dontLog = {log: false}
  cy
    .visit(url)
    .get('[name=email]', dontLog).clear().type(email, dontLog)
    .get('[name=password]', dontLog).clear().type(password, {log: false})
    .get('button', {log: false}).click({log: false})
```
This does not work (enters the password in the *email* field instead
```js
const dontLog = {log: false}
  cy
    .visit(url)
    .get('[name=email]', dontLog).clear().type(email, dontLog)
    .get('[name=password]', dontLog).clear().type(password, dontLog)
    .get('button', {log: false}).click({log: false})
```

The above code is inside custom command `Cypress.addParentCommand('login') {...}`

I am attaching the video (without clicking submit so it stops and shows the problem)


![login-problem-gif](https://cloud.githubusercontent.com/assets/2212006/21546993/2ed31c84-cdb1-11e6-97df-a8d04f1c1773.gif)
",bug
197745109,cy.setCookie incorrectly sets a non hostOnly cookie by default,"We are incorrectly setting non `hostOnly` cookies to the superdomain of the remote origin.

This means that this cookie would be sent on all subdomains.

This is wrong, by default it needs to set a `hostOnly` cookie to the remote origin.",bug
197537376,cy.visit does not correctly synchronize browser cookies during a redirect to another domain,"Although `cy.visit` will follow redirects correctly under the hood and also build up and manage the cookie state between redirects, it does not synchronize this state with the browser at each redirect - instead it waits until the very end to synchronize.

This can lead to situations where cookies are not correctly get/set.",bug
197537276,cy.request does not correctly synchronize browser cookies during a redirect to another domain,"`cy.request` does not correctly synchronize browser + jar cookie state during a redirect. Instead it waits until the very end to synchronize.

This can lead to situations where cookies are not correctly get/set.",bug
196970453,Cypress concatenates cookies on redirects after POST when using `cy.request`.,"Hi @brian-mann ,

In our company we're using `cy.request` for form submission in utility commands in order to speed tests up.
The forms are being submitted correctly but certain cookies are being concatenated at the redirects that happen after a successful POST.
Basically what we need is to create a new user before we run the tests and run the tests using him.
The first step is to login as admin and the second one is to create the user.
After submitting the login data the server sends a 302 status and redirects to the admin home page.
When this happens Cypress concatenates the session cookies (i.e. we see something like this when we inspect the request: `session_dev =R0g0bVlqRVlnNXJkWHQwTzd1bUdERXNSemoyWDlybEVRcVFITVp4YkoyODhaV2F0Z3BBajdiQXhDUkUzTG4vVzBFOWNzdStLa3VMa0NiNDJoeWFzQjdUSUVuSXlrS1QyL1Q0ci9JS0ZsUGY3VGh2L0p6R2JmMGtpblBhQThuZjFZYWtMZHFTOGt6UFpFa2ZrT2pOUXBxMVRuU2J3NUxVY0tyYzR0U0xmOWZ3bTRZNjJZM0gvLzB1d3NQTlZ5ZXZoLS0wUVRTQktHOU53dWJYVHpJNFZOQkxBPT0%3D--4e98ae3094b98b2967dd2b96170ef1a7d1cb247f; session_dev =dFJnQWp3MkYzVGNpVFQ4MnFXcE1MNjRBbFR4UnB5WFFLU0tJT2tWUXFwMXpmMmdxbUUrUWdIWWJSY3oyYmQ4UjNEN3hFU0NEalQ5WnpBdHJCMk9sSHN3NFFFbC9Sc3JVc0FmWGVvRFRKUDJ3dG42L2dEZ3BVQXU0ZytNOS9UWHFUN2J5aWVlbWlOY0hUU0I1V21YOTRUNzl2K1UvMkE0YUU0QnluRzhtWVhzRXNBTnB2TWJaUE1ENkl0anN0c0NnVUFsU2VHNUFFVUpaeDdmMXZBR0NEWlY2Uk9qZ3RZbU1VNk8zVUcxL3B2dTdMc05Vb0M3eitMMS9ubUJtWkZrNjh4b2RNM001S0NiTms1Tnd5d0o1akJhNmVRU3lVZjJ0Tkk4SERpWklxajQ9LS1hRFIzbmJkRXlZSCtHRFpURlpDN1lBPT0%3D--e52508ff7d14831a0331b69c131fe43878e68e6e`
The cookies become invalid and the server redirects to the login page again making it impossible to continue.

We're using a cookies whitelist in order to keep the session cookies.


**Code**
```javascript
Cypress.Cookies.defaults({
  whitelist: [
    'session_dev',
    'session_prod',
  ],
});

Cypress.addParentCommand('submitForm', (options = {}) => {
  const requestOpts = Object.assign({
    method: 'get',
    url: '',
    followRedirect: true,
    form: true,
    body: {},
    headers: {},
  }, options);
  const { url } = requestOpts;

  // First get the auth_token and the form action by visiting the url
  // using a GET request
   cy
    .chain()
    .request(url)
    .its('body')
    .then((body) => {
      const $form = Cypress.$(body).find('form');
      const formAction = $form.attr('action') || url;
      const method = $form.attr('method') || $form.prop('method') || 'get';
      const authToken = $form.find('input[name=""auth_token""]');
      const submitRequestOpts =
        Object.assign({ method: method.toUpperCase() }, requestOpts, {
          url: formAction,
          body: Object.assign(requestOpts.body, {
            auth_token: authToken.val(),
          }),
        });

      cy
        .chain()
        .request(submitRequestOpts);
    });
});

// Utility command for creating a new user
Cypress.addParentCommand('createUser', () => {
  cy
    .clearCookies()
    // login as admin
    .submitForm({
      url: '/login',
      body: {
         email: 'admin@ourcompany.com',
         password: 'password',
      },
    })
    // We're supposed to be logged in here and create a new user
    // Instead the GET request to `/users/new` gets redirected to the login page
    .submitForm({
      url: '/users/new',
      body: {
        email: 'test@test.com',
      },
    });
});

```

Basically the following happens:
- POST to login form
- Receive 302 to admin home page
- Request session cookies from previous requests are concatenated here rendering them invalid 
- Redirect to login page because of invalid cookies


Hopefully I managed to explain the issue.

Thanks,
Dimitar Apostolov",bug
196800556,Accessing remote window may fail during remote page transition phase,"When the browser begins its navigation routines there is a brief period of time in which `window` is no longer accessible, and will throw a `DOMException` if accessed.

Currently we've seen this crop up on `cy.url` (and other URL related commands), but it's possible nearly all commands are affected by this.

The simple solution currently is to guard using a `try/catch` around the `window` getter but this a much bigger problem affecting a potentially huge amount of places. Mostly if these crop up they would be extreme edge cases, but it is possible.

",bug
196795242,Stubbing a function and then switching domains via cy.visit does not serialize the function properly,"This results in an endless recursive loop.

```javascript
it(""visits #1"", function(){
  cy
  .visit(""http://localhost:8080"")
  .window().then(function(win){
    var agents = cy.agents()

    agents.stub(win.someGlobal, ""someMethod"")
  })
  .doTheThingThatCallsGlobalMethod()
})

it(""visits #2"", function(){
  // it will fail here on serialization
  cy.visit(""http://localhost:8081"")
})
```",bug
195904111,Cypress doesn't update script bundles when watchForFileChanges is false,"Due to the changes made while adding babel/module support, having `watchForFileChanges` set to `false` will cause the the produced bundles (support + tests) not to update when files change. Need to update the logic so that files are still watched and the bundles updated, but the UI isn't notified on change.",bug
194892657,Cypress will not exit cleanly when running headlessly on linux and there is a spec bundle error,This is the same underlying problem as #333 due to a regression in `0.17.11` with video recording.,bug
194697620,`watchForFileChanges` not respected when watching the support file,"When `watchForFileChanges` is disabled in `cypress.json` we should not watch the support file.

Currently this config setting is not taken into account.",bug
194521895,Cypress is often not connecting / UI is blocked due to underlying socket problems,"Ever since `0.18.0` and possibly even as early as `0.17.11` we have noticed a dramatic increase in the number of CI failures due to the remote client / browser never connecting.

When running tests in Cypress locally we are also noticing times where the UI ""hangs"" on a full page refresh due to the underlying socket connection either being blocked for multiple seconds, or sometimes erroring with ""Socket is in a disconnected / closed state"".

The root cause still has yet to be determined.

![screen shot 2016-12-09 at 1 11 17 am](https://cloud.githubusercontent.com/assets/1268976/21039579/e941187e-bdac-11e6-8944-e963c6e9c95a.png)
",bug
193514718,Tests continue to run when there is a bundle error,"When there is a error with bundle, for example a syntax error in the `supportFile`, the error displays in the UI, but the tests continue to run. The test run should be stopped when there is a bundle error.",bug
193512709,Error when scaffolding new project,"When Cypress scaffolds the `support` directory for a new project, it causes an error when running the tests. 

```
Error: Cannot find module '/Users/chrisbreiding/Desktop/_foo/cypress/support/index.js' from '/Users/chrisbreiding/Desktop/_foo'
```

A work around for the time being is to close the project (go back to the projects list) and then return to the project and run tests. Once the scaffolded files are in place, the issue ceases to exist.
",bug
191254083,CypressError: cy.visit() failed trying to load when trying to load pushstate webpack-dev-server URI,"Hi. I've tried searching for an answer to this and I'm not sure it's been covered. Apologies if it has or I'm raising this in the wrong place.

So I have an application that I'm running the tests against which is served by webpack-dev-server. The application itself is a Backbone application using pushstate to remove the # from routes.

The issue arises when using these nested routes e.g. `/my/pushstate/route`

Everything works fine and returns a `200` response for the application in the browser and when curl'ing the URI. `cy.visit()` however returns a `404` when trying to request the same URIs. As a side note `cy.visit()` works correctly when requesting the base URI.

Is there something obvious I'm missing?

I can't share the codebase I'm encountering this but if there's no obvious answers I'll build a mock repo to replicate the issue.

Thanks,
Paul

",bug
190881543,Updating in app broke in 0.17.11,"We updated a dependency: `trash` which had a breaking API change. 

We don't have any e2e tests around upgrading (this is a very difficult and resource intensive thing to do) - and by mocking out the dependency during unit tests meant that this bug snuck through. 

Sometimes even a testing company fails at testing.
",bug
190778108,Headless framerate is reset to 60fps,"There is a bug in Electron where the framerate of the renderer process will reset back to its default `60` even after being told to be lower.

This was also contributing to and exacerbating #302.

To fix this we need to forcibly reset the framerate on every `paint` event.",bug
190597371,Memory leaks when running headlessly due to command log updates after a finished test,"When Cypress runs in headed mode, by default it holds onto snapshot references for the `numTestsKeptInMemory` configuration property. This is the correct behavior.

However in headless mode Cypress forces this value to be `0` since when running headlessly you are typically running all tests, and there is no GUI to interact with.

Cypress automatically takes this into account and will purge the memory references every time a test finishes.

However there is an edge case that can cause it to incorrectly hold onto previous references when command logs are updated - if they are updated after a test ends for a previously run test. In this case, the new references are merged in, and this command log is never cleaned up again, thus creating a memory leak.

The problem is by ""chance"" and chance alone so that's why sometimes long runs would finish without problems and other times they would exhaust from running out of memory. An example of this happening is in our own CI runs here: 

https://circleci.com/gh/cypress-io/cypress-core-desktop-gui/413",bug
186862405,Test finishing with commands in its queue when calling method on undefined with cy async return,"When I write the following test case, an error throws saying that some commands were not finished:

```javascript
describe('Test', function() {
  beforeEach(function() {
    return cy
  })

  it('asserts length', function() {
    cy.get('foobar').should('have.length', undefined.length)
  })
})
```

Cypress error:
```
CypressError: Oops, Cypress detected something wrong with your test code.

The test has finished but Cypress still has commands in its queue.
The 1 queued commands that have not yet run are:

- cy.get('foobar')

In every situation we've seen, this has been caused by programmer error.
Most often this indicates a race condition due to a forgotten 'return' or from commands in a previously run test bleeding into the current test.

For a much more thorough explanation including examples please review this error here:

https://on.cypress.io/command-queue-ended-early
```

But when I remove the `beforeEach`, the proper error is thrown: that it cannot read `'length' of undefined`.

```javascript
describe('Test', function() {
  it('asserts length', function() {
    cy.get('foobar').should('have.length', undefined.length)
  })
})
```

Cypress error:
```
TypeError: Cannot read property 'length' of undefined
```",bug
186683840,Error: Invalid protocol,"After cypress `0.17.5`, leaving out the protocol in the baseUrl in cypress.json seems to trigger an ""Error: Invalid protocol"" instead of just defaulting to http://
This used to work fine",bug
185482120,Async tests don't run on 0.17.x,"Sample test:

```js
describe(""Cypress then done bug"", function() {
    it(""load shauvik.com"", function(done){
        cy.visit(""http://shauvik.com"")
        .then(function() {
            done();
        });
    })
});
```

Cypress complains:

```
CypressError: Oops, Cypress detected something wrong with your test code.

The test has finished but Cypress still has commands in its queue.
The 1 queued commands that have not yet run are:

- cy.then('...')

In every situation we've seen, this has been caused by programmer error.
Most often this indicates a race condition due to a forgotten 'return' or from commands in a previously run test bleeding into the current test.

For a much more thorough explanation including examples please review this error here:

https://on.cypress.io/command-queue-ended-early
```
",bug
185013265,Changing specs after a cy.visit to a different domain causes `document.domain` to be wrong,"Given two spec files:

``` javascript
// spec1.js
cy.visit(""https://google.com"")
```

``` javascript
// spec2.js
cy.visit(""https://apple.com"")
```

If you switch between these specs in the desktop GUI, cypress will bomb because its not resetting its internal `server state`. The `document.domain` will be set incorrectly on the subsequent spec load.
",bug
184877021,cypress.request is inserting null into the request url.,"A null is being injected into the request url.
## Cypress.json

```
{
  baseUrl: 'http://localhost:3003/'
}
```
## Test code

```
cypress.request('POST', 'v2/some/url', {name: 'jane'})
```
## Resulting request

```
POST  http://localhost:3003/null/v2/some/url
```
",bug
184530939,Cypress crashes on initial visits when 3rd party server never ends the response,"Server code:

``` coffeescript
## assuming express app server here
app.get(""/never_finishes_response"", (req, res) ->
  ## send the response headers and a partial
  ## response but don't ever end it because
  ## we're a bad acting server
  res.type(""html"").write(""foo\n"")
```

And the test code:

``` javascript
cy.visit(""http://localhost:8080/never_finishes_response"")
```

This is due to not handling visit timeouts, and then attempting modify headers (which are already properly sent) when the http request eventually reaches the OS level global timeout.
",bug
184033616,Snapshots not displaying due to InvalidCharacterError.,"![snapshot](https://files.gitter.im/cypress-io/cypress/F0rC/Screen-Shot-2016-10-19-at-1.31.46-PM.png)

![click-expcetion](https://cloud.githubusercontent.com/assets/1778812/19531118/7d6dde72-9604-11e6-84c3-5f605dc28bc0.png)

This was cause by the openning html tag `<html "">`
Error occured when hovering over or clicking on test steps.
",bug
183282976,browser detection fails for Chrome variants,"When running tests through the CLI, an Xvfb instance is spawned with child processes of the Cypress desktop app, but nothing really happens.
When I directly open the desktop app and I open a project, I get the message

```
 Can't Launch Any Browsers
We couldn't find any Chrome browsers to launch. To fix, please download Chrome.
```

I have Chromium and Chrome Developer Edition installed on Arch Linux. I found out that having `google-chrome` in `$PATH` fixes the issue. It would be easier to have an env var or a config parameter to set which binary to use.
",bug
182963047,Updating the Cypress GUI in Linux fails,"I'm on Ubuntu 16.04

This is the info @brian-mann gave me:

``` javascript
{
 '0': 
   { Error: Command failed: tar -zxvf ""/tmp/cypress.zip"" >/dev/null
   gzip: stdin has more than one entry--rest ignored
   tar: Child returned status 2
   tar: Error is not recoverable: exiting now

     at ChildProcess.exithandler (child_process.js:218:12)
     at emitTwo (events.js:106:13)
     at ChildProcess.emit (events.js:191:7)
     at maybeClose (internal/child_process.js:877:16)
     at Socket.<anonymous> (internal/child_process.js:334:11)
     at emitOne (events.js:96:13)
     at Socket.emit (events.js:188:7)
     at Pipe._handle.close [as _onclose] (net.js:493:12)

     killed: false,
     code: 2,
     signal: null,
     cmd: 'tar -zxvf ""/tmp/cypress.zip"" >/dev/null' },
  '1': '',
  '2': 'gzip: stdin has more than one entry--rest ignored\ntar: Child returned status 2\ntar: Error is not recoverable: exiting now\n' }
{ Error: Command failed: tar -zxvf ""/tmp/cypress.zip"" >/dev/null
gzip: stdin has more than one entry--rest ignored
tar: Child returned status 2
tar: Error is not recoverable: exiting now

  at ChildProcess.exithandler (child_process.js:218:12)
  at emitTwo (events.js:106:13)
  at ChildProcess.emit (events.js:191:7)
  at maybeClose (internal/child_process.js:877:16)
  at Socket.<anonymous> (internal/child_process.js:334:11)
  at emitOne (events.js:96:13)
  at Socket.emit (events.js:188:7)
  at Pipe._handle.close [as _onclose] (net.js:493:12)

  killed: false,
  code: 2,
  signal: null,
  cmd: 'tar -zxvf ""/tmp/cypress.zip"" >/dev/null' 
}
```
",bug
182907973,Cypress fails to set cookies in headed GUI mode when expirationDate is in the past,"Chrome Automation API performs an undocumented / unexpected behavior when cookie props are set with an `expirationDate` in the past.

Due to this our code assumes something failed, and passes up a `undefined` error which then causes the extension to crash and the error is swallowed entirely.

This ends up causing `cy.visit` to timeout unexpectedly with no errors.
",bug
182809830,Cypress installs to wrong directory when updating while running,"I have a project in ~/Projects/my-project/src and it is added to Cypress. The Cy server is running.
When I click Update, the update is downloaded, Cypress quits and it gets installed.

After installing I'm still on the old version and Cypress is installed to ~/projects/my-projects/Content. My src folder is removed by Cypress :(

When I update Cypress when no runner is open, everything gets installed correctly.
",bug
182389297,Performing an update in OSX when a project is opened trashes the wrong folder,"When a user performs an in app update on OSX with a project open, the `process.cwd` is modified to point to the current open project.

When Cypress performs an update, it uses `process.cwd` to trash the currently running `Cypress.app`. This will then incorrectly point to the wrong path, and thus trash a completely different folder causing much stress and panic.
",bug
181233185,Uncaught TypeError: Cannot read property 'opener' of undefined,"Getting this error in cypress:

```
Uncaught TypeError: Cannot read property 'opener' of undefined
```

_Screenshots_
<img width=""401"" alt=""captura-de-pantalla-2016-10-05-a-las-11 34 09"" src=""https://cloud.githubusercontent.com/assets/1271364/19126563/6f5ff744-8b09-11e6-9246-43594ffd93a3.png"">

<img width=""559"" alt=""captura-de-pantalla-2016-10-05-a-las-11 34 24"" src=""https://cloud.githubusercontent.com/assets/1271364/19126567/7466e90a-8b09-11e6-856e-e45ad86faff2.png"">
",bug
180918617,visiting a url with a secondary domain like string causes cy.visit to incorrectly error,"With cypress `0.17.5` with a baseUrl set in cypress.json to `my-domain` my `.route('/#/foo/bar').as('alias')`'s stop matching and `.visit('/#/foo/bar')` gives the following error:

```
Error:     CypressError: cy.visit() failed because you are attempting to visit a second unique domain.
You may only visit a single unique domain per test.
Different subdomains are okay, but unique domains are not.
The previous domain you visited was: 'http://my-domain:5100'
You're attempting to visit this new domain: 'http://my-domain:5100/#/foo/bar?email=foo@bar.baz'
You may need to restructure some of your code to prevent this from happening.
https://on.cypress.io/cannot-visit-second-unique-domain
```

when calling `$location.path('/foo/bar').search({email: 'foo@bar.baz'});` from JS through triggering a click in a previous command and having Angular (1.4.9) firing an action.

```
cy.
  .get('#my-button`).click() // action redirects to '/#/foo/bar?email=foo@bar.baz' with angulars $location  
  .visit('/#/foo/bar?email=foo@bar.baz')
```
",bug
180682022,"Tests which fail running headlessly are displayed as ""before each hook""","This is a regression caused by `0.17.5`.

![screen shot 2016-10-03 at 12 13 13 pm](https://cloud.githubusercontent.com/assets/1268976/19044594/fea1ad6a-8962-11e6-89be-f009df9fb213.png)

![screen shot 2016-10-03 at 12 13 27 pm](https://cloud.githubusercontent.com/assets/1268976/19044593/fe91e632-8962-11e6-9021-0b0e6c494283.png)
",bug
180367098,Assertions may incorrectly associate to previous run assertions,"There is an edge case when under the hood Cypress is executing commands in parallel such as the custom `ng` command - which when future assertions run - may incorrectly associate to previous assertions.

In the example below there is an assertion on the `hash` command and yet it's obliterated the previous assertion that happened several commands up.

![screen shot 2016-09-30 at 11 20 26 am](https://cloud.githubusercontent.com/assets/1268976/19001877/5ef60362-8717-11e6-9e95-3754eccde033.png)
",bug
179770806,Snapshots show box model layers of non-displayed elements,"If an element is styled `display: none`, the snapshot that includes it still shows the margin and padding of the element, but should not since the margin and padding are not applied to the page.

![display none margin and padding](https://cloud.githubusercontent.com/assets/1157043/18914842/b23dccf6-855c-11e6-8146-1ae5708e3c51.png)

In the example above, there are 4 `<p>` tags, but one is `display: none`, and when the snapshot is restored, it shows that elements margin in padding in the top left of the viewport. 

We need to take non-displayed elements into account and not show their box model layers with the snapshot.
",bug
179270370,"When opening project in Cypress (manual dl) on OS Sierra, error writing to file due to translocation","If Cypress is manually downloaded on OS Sierra, translocation error occurs on writing to files on `open:project`. 

**For Reference:** 
- http://lapcatsoftware.com/articles/app-translocation.html
- http://weblog.rogueamoeba.com/2016/06/29/sierra-and-gatekeeper-path-randomization/

**Example Screenshot**
![screen-shot-2016-09-26-at-10 59 39-am EROFS: read-only file system, open ](https://cloud.githubusercontent.com/assets/1271364/18841853/1dd03df0-83e1-11e6-85ed-edb5db84f5e1.png)
",bug
178701591,Command timeout on subsequent test after uncaught error + assertion conflict,"There is a bug in the driver which isn't handling uncaught errors and assertion conflicts.

The problem is that the `click` method synchronously catches `uncaught errors`, and should not attempt the assertion. Because assertions are coupled to the previous command this creates a internal conflict.

Removing the `have.class` assertion prevents this problem.

![screen shot 2016-09-22 at 1 37 33 pm](https://cloud.githubusercontent.com/assets/1268976/18763219/58a0dad4-80da-11e6-81cf-e22d49c1727f.png)
",bug
178608307,Improve how snapshots handle iframes,"Currently, iframes are removed from snapshots, which is necessary because we don't want any requests made when restoring a snapshot. The problem is that the space taken up by the iframe is now empty, so the layout of the snapshot is not right. Whatever was below the iframe is now higher up in the place the iframe used to occupy. 

Solution:

When creating a snapshot, iterate through any iframes on the page and grab their box model properties and url. In their place, put a div with the same box model properties and labeled with the url. Style it like a ""missing image"" placeholder.
",bug
178064588,cy.visit and cy.request doesn't submit current browser's User-Agent header,"We are using ruby gem https://github.com/fnando/browser
to check if the browser is supported by our App. 
They are using request.headers[""User-Agent""] to identify the browser.

In an normal chrome instance User-Agent is set correctly and Cypress ""Chrome"" it is suppressed and not submitted.
",bug
177522782,Crash when clicking the 'help you get started' links to open finder,"Clicking `example_spec.js` or `cypress/integration` results in an immediate crash.

This is a regression from `0.17.0`.

![screen shot 2016-09-16 at 4 17 06 pm](https://cloud.githubusercontent.com/assets/1268976/18601567/2ee7fbe2-7c29-11e6-9d32-d2a6883dda66.png)
",bug
176477526,Visits with a hash (#) where you are visiting the same base url will not navigate.,"Back to back `cy.visit` where the url contains a hash (#) and you are visiting the same base url (before the hash) does not navigate to the 2nd url.

This is a regression introduced in [`0.17.2`](https://github.com/cypress-io/cypress/wiki/changelog#0172-09062016), specifically the commits relating to ""No longer forcing `cy.visit` to navigate to `about:blank` prior to navigating to the real url."" to fix Issue #208.

**Example Code**

``` javascript
describe(""user"", function() {
  it(""visits user page"", function() {
    cy.visit(""http://localhost:8484/#/users/7832"")
  });
  it(""visits user page again"", function() {
    cy.visit(""http://localhost:8484/#/users/7832"")
  })
})
```

**Command Log**
![screen shot 2016-09-12 at 4 33 59 pm](https://cloud.githubusercontent.com/assets/1271364/18451886/c6a335a8-7906-11e6-8ead-d93a7e8950fc.png)
",bug
176449912,Cypress doesn't set cookies on 3xx redirects when they are cleared by the intermediary redirect,"In our tests, we do `cy.visit(""localhost:8080/logout"")`, which resets 2 named cookies and 303 redirects to `""localhost:8080/""`. The cookie sets are not happening correctly with cypress.

Here is an example request from Chrome which correctly sets the cookies.
![image](https://cloud.githubusercontent.com/assets/141353/18446105/be7b6c00-78ee-11e6-9cca-67755038a34a.png)
",bug
175734741,A page does not load,"Very weird test failures with 0.17.2

I have a website deployed to Zeit.co cloud that works fine in a browser

https://express-sessions-tutorial-germflsgid.now.sh/

It has a form page that also works fine

https://express-sessions-tutorial-germflsgid.now.sh/form

I have 4 e2e tests in the repo https://github.com/bahmutov/express-sessions-tutorial

These tests work fine against local website, but 2 tests fail when running against the deployed website. I am attaching the screenshots. During tests it 404s the `/form` page.

I can recreate the failures using by setting the host url when opening cypress

``` sh
CYPRESS_HOST=https://express-sessions-tutorial-germflsgid.now.sh/ cypress open
```

Page works in the browser
<img width=""1440"" alt=""screen shot 2016-09-08 at 7 50 35 am"" src=""https://cloud.githubusercontent.com/assets/2212006/18348509/b6a3627e-7599-11e6-96b3-9d780f395db1.png"">

Fails to load in Cypress
<img width=""1360"" alt=""screen shot 2016-09-08 at 7 49 27 am"" src=""https://cloud.githubusercontent.com/assets/2212006/18348523/c71e14c8-7599-11e6-97c1-638f5c581b4a.png"">
",bug
175155927,cy.click algorithm may incorrectly calculate elements with display: inline,"In this screenshot Cypress is failing with the following error:

``` bash
CypressError: Timed out retrying: cy.click() failed because this element is being covered by another element:

<td class=""highlight"" data-reactid="".0.0.2.1.2.0.0.0.0.2.0.2.1:$0.$0"">...</td>

Fix this problem, or use {force: true} to disable error checking.

https://on.cypress.io/element-cannot-be-interacted-with
```

![virtualbox_cypress-app_desktop_1442616554908_97986_05_09_2016_14_54_51](https://cloud.githubusercontent.com/assets/1268976/18261311/79c04326-73c4-11e6-8e19-c076bcf759ca.png)

The reason this is happening is because the `<a>` subject attempting to be clicked has CSS `display: inline`. 

Display inline causes elements not to displace contents _between_ the text.

When Cypress calculates the elements position to ensure it is not being covered by another element it uses `document.elementFromPoint(x, y)` to return the lowest descendent in the DOM.

If an `inline` element's exact center is calculated to be **between** the text, then this will return the element underneath the target (which is correct).

Unfortunately since Cypress was returned a non-descendent it believes the element is currently being covered and therefore displays the error.

To fix this, Cypress will need to take this situation into account by applying some fallback logic for this specific condition. I'm not sure what it should do yet, perhaps change the CSS to `display: inline-block`, calculate the center coordinates again, and if the element is found, revert to the original CSS and then click the element.
",bug
174100082,Implicit should 'exist' assertion is not being applied on cy.get() when other assertion.,"Using `cy.get()` on an element should implicitly assert existence of the element. But in my examples below, you can see that I have no element `foobarbaz`, the Command Log correctly logs `0` elements found, yet my explicitly written assertions (`not.be.visible` and `not.have.class`) chained off of the gotten element pass. 

`cy.get()` should always implicitly assert existence unless there is an explicit assertion down the chain on that element asserting that it should `not.exist`.

**Example Test Code**

```javascript
it(""dom element doesn't have attributes"", function() {
  cy.get(""foobarbaz"").should(""not.be.visible"");
  cy.get(""foobarbaz"").should(""not.have.class"", ""foo"");
});
```

**Example Command Log**
![screen shot 2016-08-30 at 3 04 42 pm](https://cloud.githubusercontent.com/assets/1271364/18103089/2fa45986-6ec3-11e6-9904-f7223c557c58.png)

",bug
172477045,Cypress commands does not execute on failed tests using `after` or `afterEach` hooks,"I have an afterEach() block that tries to run a cypress command but it silently fails. When the test a passes the command goes through just fine. 

```
afterEach(function () {
  if (this.currentTest.state !== 'passed') {
    var testName = this.currentTest.parent.title

    failed.push({testName: testName, message:`${this.currentTest.err.name}:
    ${this.currentTest.err.message}`})
  }
  console.log(failed)
  writeToFixture(failed, 'failed.json')
})
```

```
function writeToFixture (data, fileName) {
  debugger
  cy
    .exec(""echo '"" + JSON.stringify(data, null, 2) + ""'>cypress/fixtures/"" + fileName)
}
```
",bug
165832150,viewport error should match viewport limits,"Viewport limit should match the error message

<img width=""559"" alt=""viewport"" src=""https://cloud.githubusercontent.com/assets/1271364/16882053/116e930c-4a8b-11e6-92f7-bada0f79985c.png"">
",bug
165792942,.within() breaks chaining for custom commands,"Given the following code:

``` js
it.only('should send a newsletterRegistration event to GTM after subscribing to a newsletter', () => cy
  .server().route('POST', /service\/newsletter/).as('newsletter')
  .get('#newsletterForm').within(() => cy
    .get('input[type=""email""]').type('test@example.com')
    .root().submit().wait('@newsletter')
  )
  .getGtmEvents('newsletterRegistration').should('exist')
);
```

And this custom command:

``` js
Cypress.addParentCommand('getGtmEvents', (eventName) => {
  cy.chain().window().its('dataLayer').invoke('find', e => e.event === eventName);
});
```

The `.getGtmEvents('newsletterRegistration').should('exist')` reports ""expected null to exist"". However, this code does work:

``` js
it.only('should send a newsletterRegistration event to GTM after subscribing to a newsletter', () => cy
  .server().route('POST', /service\/newsletter/).as('newsletter')
  .get('#newsletterForm').within(() => cy
    .get('input[type=""email""]').type('test@example.com')
    .root().submit().wait('@newsletter')
    .getGtmEvents('newsletterRegistration').should('exist')
  )
);
```

Note that all I did was put the `.getGtmEvents('newsletterRegistration').should('exist')` inside of the `.within()` callback.
",bug
165139315,URL proxy issue,"I’ve got the same URL loaded in the browser and in cypress. I’m inspecting the footer link “Integrations”. In the browser its `<a href=""http://help.fullstory.com/11270-Integrations"">Integrations</a>` and when I inspect the cypress browser I see `<a href=""/11270-Integrations"">Integrations</a>`. The latter, when clicked in cypress, ends up at www.fullstory.com instead of help.fullstory.com.

The actual element in code is `<a href=""http://help.fullstory.com/11270-Integrate"">Integrations</a>`

![cypressfs](https://cloud.githubusercontent.com/assets/16545003/16777484/be047c72-4837-11e6-9522-ecc019ee459d.png)

![realfs](https://cloud.githubusercontent.com/assets/16545003/16777488/c2c06f64-4837-11e6-9fbd-5fdac03ad74c.png)
",bug
162000557,timeout option is not being passed through to cy.wait() command,"The `cy.wait()` command is intended to accept a `timeout` option that would update both the `requestTimeout` and `responseTimeout` of the xhr being waiting on, but the timeout option is never passed through the code, so never overwrites any timeout options previously set. 

**Example Code**

```
cy
  .server()
  .route(/comments\/1/).as('getComment')
  .wait('@getComment', {timeout: 2000000})
```

**Example Error still shows requestTimeout as 5000ms**
<img width=""468"" alt=""screen shot 2016-06-23 at 3 09 58 pm"" src=""https://cloud.githubusercontent.com/assets/1271364/16316435/9bcbf082-3954-11e6-9922-bf5f33bd9675.png"">
",bug
160944507,Previous state of failed assertions carrying over,"If I save my spec (live reload) while the test runner is retrying a failing assertion, the test will appear to refresh in the Command Log, but continue to print the failing assertions. 

This started happening after `0.16.3` update in place of [`#73`](https://github.com/cypress-io/cypress/issues/173)

**Example Code:**

```
it ""does not contain text"", ->
  cy
     .visit('/')
     .get('body').contains('foo bar baz')
```

**Command Log after live reload**
<img width=""566"" alt=""screen shot 2016-06-17 at 2 08 30 pm"" src=""https://cloud.githubusercontent.com/assets/1271364/16160224/008d505c-3495-11e6-9ae4-d4a3272d4347.png"">
",bug
160693925,Cypress can get into a weird state where it doesn't reset correctly in between test runs.,"If theres a failure after it listens to `before:log`, Cypress can get into a weird state. The tests will continue to work if we reset the state (with a refresh).

**Console Log Error**
![screen shot 2016-06-16 at 11 38 56 am](https://cloud.githubusercontent.com/assets/1271364/16122981/48483b3e-33b7-11e6-9081-9ed636a6503d.png)

**Stack Trace**
![screen shot 2016-06-16 at 11 39 12 am](https://cloud.githubusercontent.com/assets/1271364/16122986/50f9450c-33b7-11e6-909c-6dc935f5a502.png)

**Code with broken logic in `ensure.coffee`**
<img width=""635"" alt=""screen shot 2016-06-16 at 11 39 26 am"" src=""https://cloud.githubusercontent.com/assets/1271364/16123005/5c46bd36-33b7-11e6-8655-0a577ac4da07.png"">
",bug
160275083,Fixture files fail with non-standard characters,"``` js
...
  .fixture('test').as('fxTest')
  .route(/some\/route/, function() {
    return {
      data: this.fxTest
    };
  })
...
```

where test.json is:

``` json
[
  {
    ""test"": ""We’ll""
  }
]
```

The right-single quote character code 8217 makes the route fail.
There are no errors except a red `-` under the routes table for the test.
",bug
159989881,Adding a directory to the support directory causes cypress 500,"I wanted to break up my commands file and put them in a `/support/commands/` directory.  Worked great, but now I'm getting what looks to be an error when cypress attempts to load the actual directory
`500: http://localhost:2020/__cypress/tests?p=cypress/support/commands-247`

I verified this by adding an empty directory called `foo` with the same result:
`500: http://localhost:2020/__cypress/tests?p=cypress/support/foo-860`
",bug
159441806,contains() method returns partial last match,"Given HTML fragment

``` html
<ul>
  <li>foo</li>
  <li>bar</li>
  <li>bar foo</li>
</ul
```

then `contains` returns _last_ element with partial match

``` js
cy.get('ul').contains('li', 'foo') 
// returns <li>bar foo</li>
```

It would be nice to prefer exact string match in case of multiple matches.
We also just wrote our own regular expression command for this case

``` js
function textCommand (subject, selector, regex) {
  if (!subject || !Cypress.Utils.hasElement(subject)) {
    subject = this.prop('withinSubject') || this.$$('body')
  }

  if (typeof regex === 'string') {
    regex = new RegExp(regex)
  }

  var log = Cypress.Log.command({
    name: 'text',
    message: ['finding text', selector, regex],
    $el: subject,
    onConsole: function () {
      return {
        Subject: subject,
        selector: selector,
        regex: regex
      }
    }
  })

  const items = Array.from(subject.find(selector))
  const found = items.find((el) => regex.test(el.outerText))
  log.snapshot().end()
  return found
}
// use like cy.get('.element').text('span', /foo$/)
Cypress.addDualCommand('text', textCommand)
```
",bug
159283331,"Error: EISDIR: illegal operation on a directory, read","Seeing this error with `cypress run` and `cypress ci`. It seems harmless, as in doesn't keep the tests from failing, but still an issue.

```
debugger.html cypress  run

Tests should begin momentarily...

Error: EISDIR: illegal operation on a directory, read
  at Error (native)
  at Object.fs.readSync (fs.js:651:19)
  at Object.fs.readSync (/Applications/Cypress.app/Contents/Resources/app/node_modules/mocha/node_modules/graceful-fs/polyfills.js:218:23)
  at Object.fs.readFileSync (fs.js:472:24)
  at Object.fs.readFileSync (ELECTRON_ASAR.js:426:29)
  at /Applications/Cypress.app/Contents/Resources/app/node_modules/snockets/lib/snockets.js:398:23
  at Snockets.module.exports.Snockets.stat (/Applications/Cypress.app/Contents/Resources/app/node_modules/snockets/lib/snockets.js:368:18)
  at Snockets.module.exports.Snockets.readFile (/Applications/Cypress.app/Contents/Resources/app/node_modules/snockets/lib/snockets.js:377:19)
  at Snockets.module.exports.Snockets.updateDirectives (/Applications/Cypress.app/Contents/Resources/app/node_modules/snockets/lib/snockets.js:280:19)
  at Snockets.module.exports.Snockets.getCompiledChain (/Applications/Cypress.app/Contents/Resources/app/node_modules/snockets/lib/snockets.js:76:19)
  at Object.module.exports.handle (/Applications/Cypress.app/Contents/Resources/app/index.js:1529:31)
  at /Applications/Cypress.app/Contents/Resources/app/index.js:4865:19
  at Layer.handle [as handle_request] (/Applications/Cypress.app/Contents/Resources/app/node_modules/express/lib/router/layer.js:82:5)
  at next (/Applications/Cypress.app/Contents/Resources/app/node_modules/express/lib/router/route.js:110:13)
  at Route.dispatch (/Applications/Cypress.app/Contents/Resources/app/node_modules/express/lib/router/route.js:91:3)
  at Layer.handle [as handle_request] (/Applications/Cypress.app/Contents/Resources/app/node_modules/express/lib/router/layer.js:82:5)
  at /Applications/Cypress.app/Contents/Resources/app/node_modules/express/lib/router/index.js:267:22
  at Function.proto.process_params (/Applications/Cypress.app/Contents/Resources/app/node_modules/express/lib/router/index.js:321:12)
  at next (/Applications/Cypress.app/Contents/Resources/app/node_modules/express/lib/router/index.js:261:10)
  at Layer.handle [as handle_request] (/Applications/Cypress.app/Contents/Resources/app/node_modules/express/lib/router/layer.js:78:12)
  at trim_prefix (/Applications/Cypress.app/Contents/Resources/app/node_modules/express/lib/router/index.js:302:13)
  at /Applications/Cypress.app/Contents/Resources/app/node_modules/express/lib/router/index.js:270:7
  at Function.proto.process_params (/Applications/Cypress.app/Contents/Resources/app/node_modules/express/lib/router/index.js:321:12)
  at next (/Applications/Cypress.app/Contents/Resources/app/node_modules/express/lib/router/index.js:261:10)
  at compression (/Applications/Cypress.app/Contents/Resources/app/node_modules/compression/index.js:217:5)
  at Layer.handle [as handle_request] (/Applications/Cypress.app/Contents/Resources/app/node_modules/express/lib/router/layer.js:82:5)
  at trim_prefix (/Applications/Cypress.app/Contents/Resources/app/node_modules/express/lib/router/index.js:302:13)
  at /Applications/Cypress.app/Contents/Resources/app/node_modules/express/lib/router/index.js:270:7
  at Function.proto.process_params (/Applications/Cypress.app/Contents/Resources/app/node_modules/express/lib/router/index.js:321:12)
  at next (/Applications/Cypress.app/Contents/Resources/app/node_modules/express/lib/router/index.js:261:10)
  at cookieParser (/Applications/Cypress.app/Contents/Resources/app/node_modules/cookie-parser/index.js:56:14)
  at Layer.handle [as handle_request] (/Applications/Cypress.app/Contents/Resources/app/node_modules/express/lib/router/layer.js:82:5)
  at trim_prefix (/Applications/Cypress.app/Contents/Resources/app/node_modules/express/lib/router/index.js:302:13)
  at /Applications/Cypress.app/Contents/Resources/app/node_modules/express/lib/router/index.js:270:7
  at Function.proto.process_params (/Applications/Cypress.app/Contents/Resources/app/node_modules/express/lib/router/index.js:321:12)
  at next (/Applications/Cypress.app/Contents/Resources/app/node_modules/express/lib/router/index.js:261:10)
  at expressInit (/Applications/Cypress.app/Contents/Resources/app/node_modules/express/lib/middleware/init.js:23:5)
  at Layer.handle [as handle_request] (/Applications/Cypress.app/Contents/Resources/app/node_modules/express/lib/router/layer.js:82:5)
  at trim_prefix (/Applications/Cypress.app/Contents/Resources/app/node_modules/express/lib/router/index.js:302:13)
  at /Applications/Cypress.app/Contents/Resources/app/node_modules/express/lib/router/index.js:270:7
  at Function.proto.process_params (/Applications/Cypress.app/Contents/Resources/app/node_modules/express/lib/router/index.js:321:12)
  at next (/Applications/Cypress.app/Contents/Resources/app/node_modules/express/lib/router/index.js:261:10)
  at query (/Applications/Cypress.app/Contents/Resources/app/node_modules/express/lib/middleware/query.js:28:5)
  at Layer.handle [as handle_request] (/Applications/Cypress.app/Contents/Resources/app/node_modules/express/lib/router/layer.js:82:5)
  at trim_prefix (/Applications/Cypress.app/Contents/Resources/app/node_modules/express/lib/router/index.js:302:13)
  at /Applications/Cypress.app/Contents/Resources/app/node_modules/express/lib/router/index.js:270:7
  at Function.proto.process_params (/Applications/Cypress.app/Contents/Resources/app/node_modules/express/lib/router/index.js:321:12)
  at next (/Applications/Cypress.app/Contents/Resources/app/node_modules/express/lib/router/index.js:261:10)
  at Function.proto.handle (/Applications/Cypress.app/Contents/Resources/app/node_modules/express/lib/router/index.js:166:3)
  at EventEmitter.app.handle (/Applications/Cypress.app/Contents/Resources/app/node_modules/express/lib/application.js:170:10)
  at Server.app (/Applications/Cypress.app/Contents/Resources/app/node_modules/express/lib/express.js:28:9)
  at Server.<anonymous> (/Applications/Cypress.app/Contents/Resources/app/node_modules/engine.io/lib/server.js:434:22)
  at Server.<anonymous> (/Applications/Cypress.app/Contents/Resources/app/node_modules/socket.io/lib/index.js:260:16)
  at emitTwo (events.js:100:13)
  at Server.emit (events.js:185:7)
  at HTTPParser.parserOnIncoming [as onIncoming] (_http_server.js:537:12)
  at HTTPParser.parserOnHeadersComplete (_http_common.js:103:23)



  Todo MVC
    ✓ (Firefox) Adding a Todo (9840ms)
    ✓ (Firefox) Adding Breakpoints (7459ms)
    - (Chrome) Adding a Todo


  2 passing (17s)
  1 pending
```
",bug
158985626,Investigate and fix `cy.exec()` environment issues,"`cy.exec()` does not seem to be executing with the user's default shell, so `node`, `npm`, etc are not available. 
",bug
155808965,"Whenever an err is thrown inside a .then(), commands stop executing after","If you run the example code below, after the failure within the `cy.then()`, the `cy.wait()` in the ""next text"", the `cy.wait()` command never executes.

**Example Code**

``` javascript
context(""example"", function(){
    it('first test', function(){
      cy
        .wait(10).then(function(){
            expect(false).to.be.true
        })
    })

    it('next test', function(){
        cy.wait(10)
    })
})
```

**Example of Command Log**
![screen shot 2016-05-19 at 2 52 44 pm](https://cloud.githubusercontent.com/assets/1271364/15405778/63bc2c78-1dd1-11e6-92d0-19ce56ab4b61.png)
",bug
155786711,When running headlessly or in CI there is a TypeError,"When running Cypress headlessly or in CI there is a TypeError. This only happens in newly released version `0.16.0`.

**Error**

```
[TypeError: The header content contains invalid characters]
TypeError: The header content contains invalid characters
  at ClientRequest.OutgoingMessage.setHeader (_http_outgoing.js:348:11)
  at new ClientRequest (_http_client.js:85:14)
  at Object.exports.request (http.js:31:10)
  at Object.exports.request (https.js:196:15)
  at Request.start (/home/ubuntu/.cypress/Cypress/resources/app/node_modules/request/request.js:747:30)
  at Request.end (/home/ubuntu/.cypress/Cypress/resources/app/node_modules/request/request.js:1381:10)
  at end (/home/ubuntu/.cypress/Cypress/resources/app/node_modules/request/request.js:575:14)
  at Immediate._onImmediate (/home/ubuntu/.cypress/Cypress/resources/app/node_modules/request/request.js:589:7)
  at tryOnImmediate (timers.js:534:15)
  at processImmediate [as _immediateCallback] (timers.js:514:5)
```
",bug
155563571,XHR onload handlers are not being called when onload is overwritten after send.,"The `onload` handler is never being called in the driver when the app has overwritten `onload` after send. Although the `onreadystatechange` handler _is_ called. 

**Example App Code**

```
var xhr = new XMLHttpRequest();

xhr.open('GET', findRoot() + file, true);
xhr.send();

xhr.onload = function () {
  if (xhr.status === 200 && callback) {
    callback(xhr.responseText);
  }
};
```

**Example of Command Log never 404'ing**
![screen shot 2016-05-18 at 1 51 16 pm](https://cloud.githubusercontent.com/assets/1271364/15369300/07dd2cf8-1d00-11e6-8711-592f0f4fdae8.png)
",bug
154521584,Cypress errors on cy.type in an input type='tel',"When writing the following code, an error displays saying cy.type can't be used on the specified input:

**Example Code**

```
cy.type('#tel').type('1234567')
```

**Error**

```
CypressError: .type() can only be called on textarea or :text!
```

**Command Log**
![screen shot 2016-05-12 at 12 00 56 pm](https://cloud.githubusercontent.com/assets/1271364/15221529/ca5e25fa-1839-11e6-99fa-2ef5cccac72b.png)

There's no special logic for the formatting of type='tel' inputs (like type date or time), it needs to be whitelisted to allow typing into similar to types text, search, url, etc.
",bug
153862477,Fonts in web server mode getting corrupted,"https://github.com/paulfalgout/cypress-font-test

> This only happens when you use Cypress in web server mode (where it serves the files). If for instance you were running your own web server and visiting http://localhost:8080 it would work.
> when Cypress runs in its web server mode it attempts to serve files from the file system and I think it has to do with that woff file making a network request with query params
",bug
153816437,Error's stack trace is being truncated in Desktop App on server error.,"When there's an error in the Desktop App starting the server, the stack trace is truncated in the UI. Cypress needs to display the entire stack trace for easier debugging.

![screen-shot-2016-05-05-at-4 16 28-pm](https://cloud.githubusercontent.com/assets/1271364/15120021/9908af84-15e1-11e6-9799-9d05bfe7d461.png)
",bug
153786634,Cy icon in taskbar when using Dark theme is wrong color.,"When using dark theme in OS X, this turns the icons to white on a black status bar as opposed to the usual black on white status bar. This means the Cypress logo cannot be seen when the user has the dark theme set, unless the user clicks the icon.

![unnamed](https://cloud.githubusercontent.com/assets/1271364/15115727/5ef365a4-15ce-11e6-9ea2-226c784ac9d9.png)

**Normal Taskbar Icon**
![unnamed 1](https://cloud.githubusercontent.com/assets/1271364/15115854/f10038a0-15ce-11e6-9fb3-e45fd2eae3a7.png)

**Active Taskbar Icon**
![unnamed 2](https://cloud.githubusercontent.com/assets/1271364/15115856/f533678a-15ce-11e6-88e5-fa90c539972f.png)
",bug
152887679,Cypress proxy fails on a POST request with a large cookie value,"**Description**
When making a POST request with a large cookie, the request returns a 413 instead of proceeding successfully.

In my case, the app I'm testing is making a POST request independent of the the Cypress test, which is for the UI.
",bug
150450806,Prevent popup blocker interference,"Simulated click events which cause `window.open` to fire are blocked by Chrome (and other browser's popup blockers).

First opened in [#123](../issues/123)

In `0.16.0` Cypress will prevent popup blocking interference directly in the browser.
",bug
148107691,Popup escapes cypress,"If the page loads a popup on click, here is the current behavior:
1. In browser test runs, chrome reports a [blocked popup](https://support.google.com/chrome/answer/95472?hl=en) 
2. The pop up shows when running via `cypress run` in headless mode. So, definitely an issue here. 
",bug
146646707,Cypress doesn't correctly handle the -s option,"Cypress seems to be looking inside it's own app for the spec to test..

```
$ ls cypress/integration/end-to-end/setup.js 
cypress/integration/end-to-end/setup.js

$ cypress run -s _does_not_exit_/end-to-end/setup.js 
Can't find test spec: /Users/shauvik/src/mn/projects/fullstory/cypress/integration/_does_not_exit_/end-to-end/setup.js

$ cypress run -s end-to-end/setup.js 

Tests should begin momentarily...

Error: ENOENT: no such file or directory, stat '/Applications/Cypress.app/Contents/Resources/app/end-to-end/setup.js'
  at Error (native)
  at fs.statSync (fs.js:897:18)
  at Object.fs.statSync (ATOM_SHELL_ASAR.js:264:16)
  at Snockets.module.exports.Snockets.stat (/Applications/Cypress.app/Contents/Resources/app/node_modules/snockets/lib/snockets.js:367:22)
  at Snockets.module.exports.Snockets.readFile (/Applications/Cypress.app/Contents/Resources/app/node_modules/snockets/lib/snockets.js:377:19)
  at Snockets.module.exports.Snockets.updateDirectives (/Applications/Cypress.app/Contents/Resources/app/node_modules/snockets/lib/snockets.js:280:19)
  at Snockets.module.exports.Snockets.getCompiledChain (/Applications/Cypress.app/Contents/Resources/app/node_modules/snockets/lib/snockets.js:76:19)
  at Object.module.exports.handle (/Applications/Cypress.app/Contents/Resources/app/index.js:1179:31)
  at /Applications/Cypress.app/Contents/Resources/app/index.js:3908:19
  at Layer.handle [as handle_request] (/Applications/Cypress.app/Contents/Resources/app/node_modules/express/lib/router/layer.js:82:5)
  at next (/Applications/Cypress.app/Contents/Resources/app/node_modules/express/lib/router/route.js:110:13)
  at Route.dispatch (/Applications/Cypress.app/Contents/Resources/app/node_modules/express/lib/router/route.js:91:3)
  at Layer.handle [as handle_request] (/Applications/Cypress.app/Contents/Resources/app/node_modules/express/lib/router/layer.js:82:5)
  at /Applications/Cypress.app/Contents/Resources/app/node_modules/express/lib/router/index.js:267:22
  at Function.proto.process_params (/Applications/Cypress.app/Contents/Resources/app/node_modules/express/lib/router/index.js:321:12)
  at next (/Applications/Cypress.app/Contents/Resources/app/node_modules/express/lib/router/index.js:261:10)
  at Layer.handle [as handle_request] (/Applications/Cypress.app/Contents/Resources/app/node_modules/express/lib/router/layer.js:78:12)
  at trim_prefix (/Applications/Cypress.app/Contents/Resources/app/node_modules/express/lib/router/index.js:302:13)
  at /Applications/Cypress.app/Contents/Resources/app/node_modules/express/lib/router/index.js:270:7
  at Function.proto.process_params (/Applications/Cypress.app/Contents/Resources/app/node_modules/express/lib/router/index.js:321:12)
  at next (/Applications/Cypress.app/Contents/Resources/app/node_modules/express/lib/router/index.js:261:10)
  at compression (/Applications/Cypress.app/Contents/Resources/app/node_modules/compression/index.js:217:5)
  at Layer.handle [as handle_request] (/Applications/Cypress.app/Contents/Resources/app/node_modules/express/lib/router/layer.js:82:5)
  at trim_prefix (/Applications/Cypress.app/Contents/Resources/app/node_modules/express/lib/router/index.js:302:13)
  at /Applications/Cypress.app/Contents/Resources/app/node_modules/express/lib/router/index.js:270:7
  at Function.proto.process_params (/Applications/Cypress.app/Contents/Resources/app/node_modules/express/lib/router/index.js:321:12)
  at next (/Applications/Cypress.app/Contents/Resources/app/node_modules/express/lib/router/index.js:261:10)
  at cookieParser (/Applications/Cypress.app/Contents/Resources/app/node_modules/cookie-parser/index.js:56:14)
  at Layer.handle [as handle_request] (/Applications/Cypress.app/Contents/Resources/app/node_modules/express/lib/router/layer.js:82:5)
  at trim_prefix (/Applications/Cypress.app/Contents/Resources/app/node_modules/express/lib/router/index.js:302:13)
  at /
```
",bug
145217405,Fix mocha reporters for cypress run,"The `-r` option of `cypress run` seems to be broken. It doesn't change the mocha reporter.
I tried `cypress run -r dot` and `cypress run -r nyan` and it still uses the default reporter.
",bug
136173071,Cypress commands are never run when they're within a Promise in a cy.then(),"Cypress commands are never run when they're within a Promise in a cy.then()

**Example Code**

``` coffeescript
it ""can resolve cypress commands inside of a promise"", ->
  cy.then ->
    Promise.delay(10).then =>
      cy.get(""div:first"")
```

**When running the test above, the following error is thrown:**

```
CypressError: cy.then() timed out after waiting '2000ms'.

Your callback function returned a promise which never resolved....
```
",bug
135565238,"cy.click(), says it's detached from DOM when it isn't","The DOM element that I am clicking on DOES get removed from the DOM after click, but the click() is timing out, there are 2 clicks in the log and the error message describes `cy.focus()`

**Example Code**

``` javascript
cy.contains(""Jane Lane"").click()
cy.contains(""a"", ""Logout"").click()
```

**Command Log**
![screen shot 2016-02-22 at 5 24 08 pm](https://cloud.githubusercontent.com/assets/1271364/13234942/4d41cc1e-d989-11e5-80c0-df2a2bf21ee2.png)
",bug
133050004,cy.go() does not accurately navigate to different domain names.,"cy.go() does not navigate accurately to different domain names when going back or forward through the history.

**Example Code**

``` javascript
cy.visit('http://localhost:8080/foo/bar')
cy.visit('https://www.google.com')
cy.go('back') // this navigates to 'https://www.google.com/foo/bar'
```
",bug
132835137,Cookies are bound to outerframe instead of iframe when iframe app is navigated to a pathname,"When the iframe is navigated to a pathname that is not root, the cookies are bound to the outer frame, so that commands like `cy.clearCookies()` do not in fact clear the cookies in the test application.
",bug
132469664,The TDD assertion style 'assert' methods are not working,"[None of the methods](http://chaijs.com/api/assert/) for `assert` are available on `assert`.

**Example Code:**

``` javascript
it('asserts', function(){
  assert.isTrue(true, ""true should be true"")
})
```

**Error**
`assert.isTrue is not a function`
",bug
132256503,cy.viewport() iPad preset orientation's landscape and portrait are inversed,"The following command sets the screen size to `768` height and `1024` width. An ipad2 in portrait should have `1024` height and `768` width.

```
cy.viewport(""ipad-2"", ""portrait"")
```

The following command sets the screen size to `1024` height and `768` width. An ipad2 in landscape should have `768` height and `1024` width.

```
cy.viewport(""ipad-2"", ""landscape"")
```
",bug
131746710,"cy.click(""bottomLeft"") coordinates for click can potentially exceed the element's bounding box.","Cypress' calculation for normalizing coordinates can cause `cy.click()` to occur outside of the bounds of the element for `cy.click(""bottomLeft"")`.

`Math.floor()` is always called on the x coordinate, but if the `left` coordinate of the element is at `615.83`, then the x coordinate will calculate to `615` which will nudge the click slightly to the LEFT of the element, leaving it outside the element's boundaries.

The use of `Math.floor()` versus `Math.ceil()` depends on the location of the coordinate being clicked.

![math-floor-vs-ceil](https://cloud.githubusercontent.com/assets/1271364/12858158/6509713c-cc1c-11e5-9845-0dc18a66b693.jpg)
",bug
131737234,clientY/clientX not calculating correctly on cy.click().,"The first set of `console.warn` shows the `clientX` and `clientY` values when `cy.click()` runs on my canvas element. 

The second set of `console.warn` shows the `clientX` and `clientY` values when I manually click in the center of my canvas element.

![screen shot 2016-02-05 at 2 36 55 pm](https://cloud.githubusercontent.com/assets/1271364/12857038/f46b045a-cc15-11e5-8c65-996d55bc319c.png)

Cypress appears to be printing the ""`top` + (1/2 height of the element)"" instead of calculating the ""(`top` - `pageYOffset`) + (1/2 height of the element)"" to get the correct `clientY`.

`clientX` is likely calculating wrong as well, but since I was only scrolling vertically, the `clientXOffset` was always 0, so did not affect the calculation.

![clientY diagram](https://i-msdn.sec.s-msft.com/dynimg/IC561970.png)
",bug
128017648,cy.check and cy.uncheck log in Command Log irregardless of actual elements checked / unchecked,"**Description**
`cy.check()` and `cy.uncheck()` log in the Command Log for each element found in it's current subject. The commands don't take into account the actual number of elements that are checked or unchecked. 

They also do not check the values passed into the command to see how many elements match the command and to only log those matching.

**Code**

``` javascript
cy.get(""input[type='checkbox']"").uncheck() // this actually only unchecked 2 checkboxes
cy.get(""input[type='checkbox']"").check([""2""])  // this actually only checked 1 checkbox
```

**Additional Info**
This command logged for every checkbox found
![screen shot 2016-01-21 at 3 50 36 pm](https://cloud.githubusercontent.com/assets/1271364/12494294/59dca3d6-c057-11e5-975b-8a19a616969b.png)
",bug
121037354,"When passing option multiple: true to .click() and not all el's clickable, 'undefined' err thrown.","When using the command `.click()` and passing the option `multiple: true`, I can see that at least 1 of the elements I am attempting to click on is not visible. The click command eventually times out and in the command log displays error:

```
 CypressError: Timed out retrying: undefined
```

**Code**

```
cy.get("".close"").click(multiple: true)
```

It would be nice to instead get an error about ""one or more of the elements not being visible, so not being clickable""

**Additional Info**
<img width=""584"" alt=""screen shot 2015-12-08 at 10 55 16 am"" src=""https://cloud.githubusercontent.com/assets/1271364/11660233/376d97ae-9d9a-11e5-9df0-4bd9aad15eac.png"">
",bug
119562700,Cypress is not resolving XHR url's correctly when there is a <base> tag present,"``` html
<html lang=""en"">
  <head>
    <base href=""/"">
    <meta charset=""utf-8"">
  </head>
  <body>
    Hello World
  </body>
</html>
```

**url**: `http://localhost:5000/conversation/new`
**XHR**: `templates/conversation-new.html`

**Expected result**: XHR requested at `http://localhost:5000/templates/conversation-new.html`
**Actual result**: XHR requested at `http://localhost:5000/conversation/templates/conversation-new.html`
",bug
118459015,Issue with cy.server() in before,"I'm getting this error on every file using `cy.server()` after a test file has specified `cy.server()` in a `before` after other assertions have run before it.

`CypressError: The XHR server is unavailable or missing. This should never happen and likely is a bug. Open an issue if you see this message.`

**Example Code**

``` javascript
describe(""Base Describe"", function() {
  return it(""bars"", function() {
    return expect(true).to.be.true;
  });
});

describe(""Next Describe"", function() {
  before(function() {
    return cy.server();
  });
  return it(""foos"", function() {
    return expect(true).to.be.true;
  });
});
```

**Command Log Screenshot**
<img width=""535"" alt=""screen shot 2015-11-24 at 8 35 19 am"" src=""https://cloud.githubusercontent.com/assets/1271364/11368194/53e2f13c-9286-11e5-9394-378589103c0a.png"">
",bug
118456411,"When mulitple routes aliased with same url, 2nd route is never matched to 2nd alias.","My app hits the same route more than once (GET's initial folders, then GET's again on search). When I try to assert off of the second alias (`@getFoldersWithSearch`), it's giving me the request from the initial aliased route (`@getFolder`).

**Example Code**

``` coffee
it ""searches for accounts when typed [4b7]"", ->
    cy
      .server()
      .route(/^\/folders\?/, ""fixture:folders"").as(""getFolders"")
      .wait(""@getFolders"")

      .route(/^\/folders\?/, ""fixture:folders"").as(""getFoldersWithSearch"")

      .get("".account-search"").find(""[name='nameNum']"").type(""Echo"")
      .get(""#search-form"").find("".form-vertical"").submit()

      .wait(""@getFoldersWithSearch"").its(""url"")
      .should(""contain"", ""Echo"")
```
",bug
118451905,cy.route() is wrongly matching urls other than url defined (throwing status on other url),"If I define `.route()` and pass in a `status` BEFORE another `.route()` defined in short form (which should always defaults to `status: 200`), my shorthand route actually ends up being the status of the previously defined route (which is incorrect).

**Example Code**

``` coffee
  it ""foos [2a4]"", ->
    cy
      .server()
      .route({
          method: ""GET""
          url: /answers/
          status: 503
          response: {}
        })
      .route(/forms/, ""fixture:form_requires_asset"").as(""getForm"")
      .wait(""@getForm"").then ->
         expect(true).to.be.true
```

**Command Log**
<img width=""518"" alt=""screen shot 2015-11-23 at 2 14 06 pm"" src=""https://cloud.githubusercontent.com/assets/1271364/11346859/c5f1f6a0-91ec-11e5-9db2-98cd8f6ca63a.png"">
",bug
114644707,Err thrown when multiple cy.server() in one file's before,"When I have a file that has multiple `cy.server()` in seperate parent-level describe's `before`, this error is thrown on second `cy.server`:

```
CypressError: The XHR server is unavailable or missing. This should never happen and likely is a bug. Open an issue if you see this message.
```

**Screenshot of Command Log**
<img width=""536"" alt=""screen shot 2015-11-02 at 12 31 34 pm"" src=""https://cloud.githubusercontent.com/assets/1271364/10889066/b69d2cb4-815d-11e5-95b3-bafa960ac5ce.png"">

**Example Code**

``` coffeescript
describe ""Model 1 [279]"", ->
  before ->
    cy
      .visit(""views/index.html"")
      .server()

  it ""foo bars [27a]"", ->
    expect(true).to.be.true

describe ""Model 2 [27b]"", ->
  before ->
    cy
      .visit(""views/index.html"")
      .server()

  it ""foo bars [27c]"", ->
    expect(true).to.be.true
```
",bug
114351804,"""No fixture file found"" error in response / causing 400 Bad Request in XHR stub","I added a fixture as a response to `cy.route` with a fixture file that does not exist. The XHR stub ended up being a `400 Bad Request` with the Cypress error displaying the the route's responseText:

**Example Command Log + Console Log**
<img width=""518"" alt=""screen shot 2015-10-30 at 4 33 26 pm"" src=""https://cloud.githubusercontent.com/assets/1271364/10857437/7340e496-7f24-11e5-8e5d-04c561c523f1.png"">
",bug
113686557,Large XHR response objects can exceed the maximum header size.,"If I respond to `route` with a very large object, tests waiting for that response will fail with `ERR_EMPTY_RESPONSE`

``` coffeescript
cy
  .server()
  .route(""POST"", /route/, reallyLargeObject).as(""willFail"")
  .get("".submit"").click()
  .wait(""@willFail"")
```
",bug
110069614,errors thrown in spy are not handling stack trace correctly.,"I have an error being thrown within a spy, but the stack trace on inspection isn't sending me the stack trace of the error and instead sending me a trace through cypress internal code. 

**Example:**
<img width=""503"" alt=""screen shot 2015-10-06 at 2 20 27 pm"" src=""https://cloud.githubusercontent.com/assets/1271364/10318071/a8268e24-6c35-11e5-9107-c34f59144bc9.png"">
",bug
108360652,Logged out / projects removed on restart app,"Whenever I restart the desktop app, I'm logged out again and all my projects are removed.

Console output:

```
carl-the-llama% [8129:0925/173301:WARNING:x11_util.cc(1490)] X error received: serial 11738, error_code 3 (BadWindow (invalid Window parameter)), request_code 4, minor_code 0 (X_DestroyWindow)
Failed to tell parent about crash.
~/.cypress/Cypress/Cypress
[28603:0925/173303:ERROR:browser_main_loop.cc(170)] Running without the SUID sandbox! See https://code.google.com/p/chromium/wiki/LinuxSUIDSandboxDevelopment for more information on developing with the sandbox on.
ATTENTION: default value of option force_s3tc_enable overridden by environment.
```
",bug
107598182,Route requestJSON is getting cached,"The route is defined in the beforeEach with an alias and get's called several times throughout the test. When a `.wait(""@aliasName"")` is added after the second time the route gets called, the `its(""requestJSON"")` is the request from the first time the route was called.
",bug
106613952,Routes defined in beforeEach are incorrectly displayed in command log with no status,"Any `cy.route()` definitions in the beforeEach are displaying as grey with no status. When I click on the route in the command log, my console displays the status as 200 with a response and my UI is performing correctly (as if 200 response was received with data).

<img width=""508"" alt=""screen shot 2015-09-15 at 2 10 42 pm"" src=""https://cloud.githubusercontent.com/assets/1271364/9885554/b872a25a-5bb3-11e5-9ee9-a0fdefd136b5.png"">
",bug
106395051,assertion of `exist` or `length` on DOM elements in unit tests are failing,"I have some unit tests for asserting that my DOM elements are being constructed correctly. I've written them as:

``` javascript
it(""builds an html input"", function() {
  return expect(this.input).to.exist;
});
```

This used to pass, but is now failing in  0.11.0 version with:

```
AssertionError: expected '<input>' to exist in the DOM
```
",bug
106270967,cy.server will not mock requests after the 1st test when used prior to cy.visit,"When multiple tests run the same beforeEach hook and use `cy.server` before a `cy.visit` only the 1st test mocks the server.

If the `cy.server` call is moved out of a `beforeEach` hook it will work, or if `cy.server` is invoked **after** a `cy.visit`.

This is due to a bug in the way Cypress juggles the server prior to a `cy.visit` happening.
",bug
92408347,"cy.route({..., respond: false}) response should not validate for non-null / non-undefined value","If I pass in the option `respond: false` to `cy.route()` command, the command log is displaying error:

```
CypressError: cy.route() cannot accept an undefined or null response. It must be set to something, 
even an empty string will work.
```

Cypress should not be validating the response when option `respond: false` is defined.

**Example code**

```
describe ""class doesn't load"", ->
  cy.route({
    url: /^\/classifications\/\d+/
    respond: false
  }).as(""classNotResponded"")
```

**Example of commands log**
![screen shot 2015-07-01 at 10 56 30 am](https://cloud.githubusercontent.com/assets/1271364/8457606/5513957a-1fe0-11e5-9934-e1d93b267290.png)
",bug
92118942,change event should not trigger between chained actions on same target input,"If there are multiple chained actions associated to the same input, a `change` event should not be triggered until the input loses focus.

**Example Code**

``` coffee
it ""patches on change of input"", ->
  cy
    .route(""PATCH"", /^\/answers\/\d+/, @answer).as(""patchAnswer"")
    .get(""@valueInput"").clear().type(""56"").blur()
    .wait(""@patchAnswer"").then (xhr) ->
      expect(xhr.requestJSON).to.have.property(""value"", ""56"")
```

The `.clear()` and the `.type(""56"").blur()` are both triggering `change` events. My test ends up patching `value: """"` so that my test falsely fails. There should only be 1 `change` event triggered when the input loses focus on `.blur()`.
",bug
90432535,Maximum call stack size exceeded when click retries & el is animating / fixed position el in it's place,"I am calling `click` on a el in a dropdown that is animating into view. When Cypress initially gets the coordinates for where the el should be, it doesn't find the element I wanted to click. Instead, it finds another element in the background, then goes through the Cypress logic of finding a parent element with `position: fixed`, then attempting to scroll (in case the fixed position element is covering the element I want to click). 

It's stuck within this loop of finding a parent element with `position: fixed` then attempting to scroll. It eventually times out. 

**Example Code**

``` coffee
    it ""clicks loading dock in dropdown"", ->
      cy
        .contains(""Warehouse"").click()
        .contains("".k-item"", ""Loading Dock"").click()
```

**The dropdown animated in**
![screen shot 2015-06-23 at 12 24 33 pm](https://cloud.githubusercontent.com/assets/1271364/8311282/fce6e43a-19a2-11e5-8fd4-cc9838601dcb.png)

**Command Log Error**
![screen shot 2015-06-23 at 12 24 46 pm](https://cloud.githubusercontent.com/assets/1271364/8311291/11bdc0c2-19a3-11e5-8e7a-aaf39ec6033e.png)
",bug
88790296,json fixture validation is removing all formatting on values. ,"I've defined a `cy.fixture(""form"")`. My form.json file used to look like this:

``` json
{
  ""item"": {
    ""id"": 129083,
    ""instructions"": ""Inspect equipment to see what their condition is and repair any conditions found."",
    ""note"": ""All equipment seen on site."",
    ""requiresAsset"": false
}
```

But cypress has reformatted my JSON file to look like below, removing all of the spacing in my values. You should not be doing any formatting on any values in a key:value pair.

``` json
{
  ""item"": {
    ""id"": 129083,
    ""instructions"": ""Inspectequipmenttoseewhattheirconditionisandrepairanyconditionsfound."",
    ""note"": ""Allequipmentseenonsite."",
    ""requiresAsset"": false
}
```
",bug
86260201,"when scrolling to an element to click, sometimes the center of the el is out of view","The scrolling to an element within click needs to be reworked so that the entire element (the subject of `.click()` is within the view. 

Also, it may be timing out sooner than 4 secs.

![screen shot 2015-06-08 at 1 10 45 pm](https://cloud.githubusercontent.com/assets/1271364/8040610/cf07cc74-0ddf-11e5-8194-cac21eb45676.png)
",bug
86208691,Do not allow more than 1 form to submit on .submit() command,"If I have more than 1 form in the DOM and write:

```
cy.get(""form"").submit()
```

It will issue a form submit to all forms in the DOM. This is contrary to what would actually happen during user interaction. 

**Recommendation:**
- Throw an error if there is more than 1 subject for `.submit()` command. 
",bug
78560342,exist and visible options are not displaying in command log when implicit assertion passes,"When I pass the options exist or length to a DOM traversal, they do not print in the command log when the implicit assertion passes.

**Example Code**

``` coffee
it""displays options"", ->
  cy.get("".answers-list tr"", exist: true)
  cy.get("".answers-list tr"", visible: true)
  cy.get("".answers-list tr"", length: 55)
```

**Example Command Log**
![screen shot 2015-05-20 at 10 57 29 am](https://cloud.githubusercontent.com/assets/1271364/7728825/580e8ef0-fedf-11e4-9fd5-ff49c250da6f.png)
",bug
76399178,Error when using length option on checkboxes,"When getting a collection of checkboxes, if I pass a `length` option, this error is thrown: 

> Error: the domexception ""InvalidStateError: Failed to read the 'selectionStart' property from 
> 'HTMLInputElement': The input element's type ('radio') does not support selection.""

**Example Code**

``` coffee
it ""has teams checked"", ->
  cy.get("".teams-component"").find("":checked"", {length: 2})
```

**Command Log**
![screen shot 2015-05-14 at 11 36 56 am](https://cloud.githubusercontent.com/assets/1271364/7635220/b8665f6e-fa2d-11e4-9dfa-1e2988ad1904.png)
",bug
76050339,spy commands not displaying in command log when multiple tests w/ spies are run,"I have a few tests back to back that all use the `spy` command. The first test displays all of the spies in the command log, but the subsequent tests do not display the spies in the command log.

**Example Code**

``` coffee
describe ""triggerMethod"", ->
  before ->
    @agents = cy.agents()

    ## removed code for brevity

    @trigger = @agents.spy(@view, ""trigger"")

  it ""triggers methods on show"", ->
    App.mainRegion.show(@view)
    events = _(@trigger.getCalls()).map (call) -> call.args[0]
    expect(events).to.deep.eq(
      [""onBeforeRender"", ""before:render"", ""onRender"", ""render"", ""onBeforeShow"", ""before:show"", ""onBeforeAttach"", ""before:attach"", ""onAttach"", ""attach"", ""onShow"", ""show"", ""onDomRefresh"", ""dom:refresh""]
    )

  it ""triggers methods on render"", ->
    @view.render()
    events = _(@trigger.getCalls()).map (call) -> call.args[0]
    expect(events).to.deep.eq(
      [""onBeforeRender"", ""before:render"", ""onRender"", ""render""]
    )

  it ""triggers methods on destroy"", ->
    @view.destroy()
    events = _(@trigger.getCalls()).map (call) -> call.args[0]
    expect(events).to.deep.eq(
      [""onBeforeDestroy"", ""before:destroy"", ""onDestroy"", ""destroy""]
    )

```

![screen shot 2015-05-13 at 12 36 47 pm](https://cloud.githubusercontent.com/assets/1271364/7615644/f1f28b16-f96c-11e4-8965-a47dbdb33548.png)
",bug
73674305,Commands ui not printing cy.contains() with options correctly,"When I use `cy.contains()` and pass in an option:
1. if the assertion passes, the contains is not printed in the commands ui.
2. if the assertion fails, the contains is printed with a weird object.

**Example Code**

``` coffee
cy .get(""#dialog"").within ->
  cy.contains ""1 question"", exist: false
  cy.contains ""4 questions""
  cy.contains ""1 question""
```

**Assertion passing (does not print)**
![screen shot 2015-05-06 at 12 37 00 pm](https://cloud.githubusercontent.com/assets/1271364/7498208/1dcb4366-f3ed-11e4-80aa-9e6f9ce345bf.png)

**Assertion failing**
![screen shot 2015-05-06 at 12 37 26 pm](https://cloud.githubusercontent.com/assets/1271364/7498214/23996f98-f3ed-11e4-832d-d7df1e6dc9dd.png)
",bug
73341559,Error: INVALID_STATE_ERR - 0 when switching browser tabs during cy.route() commands running,"When I switch browser tabs while running cypress tests during cy.route() commands, the test suite fails and throws: `Error: INVALID_STATE_ERR - 0`. 

![screen shot 2015-05-05 at 11 10 35 am](https://cloud.githubusercontent.com/assets/1271364/7475743/6f7ad4b4-f317-11e4-9f38-a365b5518ed6.png)

The stack trace leads to Sinon.js `setResponseHeaders` method:

``` js
    function verifyRequestOpened(xhr) {
        if (xhr.readyState != FakeXMLHttpRequest.OPENED) {
            throw new Error(""INVALID_STATE_ERR - "" + xhr.readyState);
        }
    }
```
",bug
72222916,passing option respond: true to cy.route does not cause response.,"If I have `cy.server` with `respond: false` option, then have a `cy.route()` with an option of `respond: true`, the route does not properly respond.

**Example**

``` js
cy.server({
  respond: false
}).route({
  method: ""PATCH"",
  url: /forms/,
  response: {},
  respond: true
});
```
",bug
71900647,"When using assertion, ""to.have.property"" not displaying in commands UI properly","When I have an assertion that include `to.have.property`, the assertion just prints `[object Object]` in the commands UI.

Also, the assertion is getting cut off at a strange place to make it look like ""short textAmert"" matches ""short text"", but the full message I logged in the console says: 

```
expected { value: short textAmet } to have a property [object Object] of short textAmet, 
and got short textAmet`
```

**Example code**

``` coffee
expect(request.requestJSON).to.have.property(""value"", ""short textAmet"")
```

**Commands UI**
![screen shot 2015-04-29 at 10 58 29 am](https://cloud.githubusercontent.com/assets/1271364/7394016/0e54d7d2-ee5f-11e4-835c-7e3e0932b373.png)
",bug
70183041,ids being inserted into strings that match a title,"A cypress generated id is being inserted after any strings that match a test title. In the example below, you can see that my `cy.get()` command has had an id inserted at `[name='comment [0eo]']`. This is due to the fact that later I have a test titled ""comment"".

``` coffee
describe ""paragraph questions"", ->
    it ""prefills comment with value [1eq]"", ->
        cy.get(""textarea[name='comment [0eo]']"").should(""have.value"", ""Hello world"")

describe ""comment [0ep]"", ->
    it ""appends resources [0ei]"", ->
      cy.get(""[name='comment']"").should(""have.value"", ""Hello world, how are you?"")
```
",bug
69667952,"Add support to cy.type() for inputs of type date, time, month, week","When I use command `cy.type()` for inputs of type date, time, month, and week the value is not updated for the input. The type command needs to do special logic to inject the values (or do special click / selects / types) due to the formatting / dropdown nature of these inputs. 

**Date Example**

``` html
<input name=""birthday"" type=""date"">
```

``` coffee
cy.get(""input[name='birthday']"").type(""11151985"").should(""have.value"", ""1985-11-15"")
```

This example's assertion will fail and say `expected input to have value of '1985-11-15', but got ''`

**Time Example**

``` html
<input name=""appt"" type=""time"">
```

``` coffee
cy.get(""input[name='appt']"").type(""1215am"").should(""have.value"", ""00:15:00"")
```

This example's assertion will fail and say `expected input to have value of '00:15:00', but got ''`

**Month Example**

``` html
<input id=""month"" type=""month"">
```

``` coffee
cy.get(""#month"").type(""February 2012"").should(""have.value"", ""February 2012"")
```

This example's assertion will fail and say `expected '<input#month.form-control>' to have value 'February 2012', but the value was ''`

**Week Example**

``` html
<input id=""week"" type=""week"">
```

``` coffee
cy.get(""#week"").type(""20, 2016"").should(""have.value"", ""February 2012"")
```

This example's assertion will fail and say `expected '<input#week.form-control>' to have value '20, 2016', but the value was ''`
",bug
69620147,Commands UI assert errors should clearly delineate integers from strings.,"The ASSERT error (in red background) on the commands UI does not signify whether my value is a string or not. The AssertionError (in yellow background) more clearly defines my error (that the integer 25 does not equal ""25"").

**Example**
![screen shot 2015-04-20 at 11 57 25 am](https://cloud.githubusercontent.com/assets/1271364/7234411/edd38b90-e754-11e4-91ee-c9dda3f2b38c.png)

### To reproduce:

```js
it('test', () => {
  expect(25).to.eq('25')
})
```",bug
68986608,passing in undefined to cy.contains() throws TypeError,"If a value of `undefined` is passed into `cy.contains()`, result is `TypeError: Cannot read property 'toString' of undefined`

Also, this results in the `contains` command being printed twice in the commands UI.

**Example**

``` js
cy.contains(undefined)
```

_Result_
![screen shot 2015-04-16 at 2 45 37 pm](https://cloud.githubusercontent.com/assets/1271364/7188694/acdf61c8-e447-11e4-84b2-118c2a3074fc.png)
",bug
68953337,textarea's values are not restored on hover of cy commands UI.,"When I hover over previous commands, the value of textareas in the DOM are not restored. 

**Example**
This textarea should have value and previous assertion says textarea has value, but I can't see the value on hover of previous commands:
![screen shot 2015-04-16 at 11 46 50 am](https://cloud.githubusercontent.com/assets/1271364/7185064/9ac0be7e-e42e-11e4-92be-48874cd6666d.png)
",bug
67417775,"In non-cypress unit tests, chai-jQuery assertions do not work.","A simple unit test with no cypress commands. chai-jQuery is not working.

**Example**

``` html
<div class=""foo""></div>
```

``` js
it(""has class foo"", function() {
  return expect($div).to.match(""div.foo"");
});
```
",bug
67379703,spy / stub with expectation can potentially time out because CPU locks up.,"When you have a spy / stub and you have an expectation for the spy / stub, it can potentially time out because it locks up the CPU.

**Example**

``` js
it(""lists users"", function() {
  return expect(cy.agents().spy(App, ""execute"")).to.have.been.calledWith(""list:users:chosen"");
});
```

**Commands UI**
![screen shot 2015-04-09 at 10 51 24 am](https://cloud.githubusercontent.com/assets/1271364/7069435/c4ddbf5a-dea6-11e4-8c59-055caec39282.png)

**Activity Monitor**
![screen shot 2015-04-09 at 10 50 45 am](https://cloud.githubusercontent.com/assets/1271364/7069439/c8d5ce5e-dea6-11e4-92ca-5e4c0e86674b.png)

**Chrome warning**
![screen shot 2015-04-09 at 10 51 06 am](https://cloud.githubusercontent.com/assets/1271364/7069444/cb754f86-dea6-11e4-9aff-72b62e3c0b54.png)
",bug
66958314,js helpers not loading from the correct location,"I have this directory structure:
![2015-04-07 at 2 09 pm](https://cloud.githubusercontent.com/assets/17697/7030036/b9bc760c-dd2f-11e4-83b6-a1ee9e1cbc2b.png)

...and this is my cypress.json:

```
{
  ""cypress"": {
    ...
    ""testFolder"": ""spec/cypress"",
    ""javascripts"": [""support/spec_helper.coffee""]
  }
}
```

That `javascripts` line makes it hit this URL:
`http://localhost:3000/support/spec_helper.coffee`

...which 404s. I _think_ it is supposed to be hitting this one:
`http://localhost:3000/tests/support/spec_helper.coffee`

(if I change the line to `""javascripts"": [""tests/support/spec_helper.coffee""]` then it works, but obviously that's not what I should be doing)

Looks like a find/replace error where you removed `tests` from one place you shouldn't have, maybe? Or didn't finish changing away from `tests` to the json-injected location.

Thanks! :sparkles: 
",bug
66629343,"""Sorry couldn't find any tests..."" message displaying on .only after fixing error.","**To recreate:**
1. In test file, have syntax error where ""Sorry couldn't find any tests"" error displays.
2. Fix syntax error: all tests will auto-refresh and run in browser.
3. Set an `.only` on a test: The ""Sorry..."" message will display alongside the `.only` test.

![screen shot 2015-04-06 at 11 19 13 am](https://cloud.githubusercontent.com/assets/1271364/7006464/53e30d22-dc4f-11e4-8798-8aa34ac1cf24.png)
",bug
65459815,"When you unfocus Cypress tab in Chrome, JS stops executing & fails the tests.","When you unfocus the Cypress tab in the middle of running tests, the JavaScript stops executing and the current test fails due to timeout.

![screen shot 2015-03-31 at 10 01 31 am](https://cloud.githubusercontent.com/assets/1271364/6920596/606cf66e-d78d-11e4-86c6-f85d1dcda1e9.png)

Instead of failing, maybe cy could 
- pause the tests
- display a message about being unfocused
- ???
",bug
